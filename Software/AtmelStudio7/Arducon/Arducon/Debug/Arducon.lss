
Arducon.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001e8  00800100  00005b3a  00005bee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005b3a  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000028a  008002e8  008002e8  00005dd6  2**0
                  ALLOC
  3 .eeprom       000002c7  00810000  00810000  00005dd6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005c  00000000  00000000  0000609d  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000060fc  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000428  00000000  00000000  00006140  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00005f6b  00000000  00000000  00006568  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001614  00000000  00000000  0000c4d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003dd0  00000000  00000000  0000dae7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000bec  00000000  00000000  000118b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001dbc  00000000  00000000  000124a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00004be7  00000000  00000000  00014260  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000003a8  00000000  00000000  00018e47  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__dtors_end>
       4:	0c 94 e5 0f 	jmp	0x1fca	; 0x1fca <__vector_1>
       8:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
       c:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      10:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      14:	0c 94 cc 13 	jmp	0x2798	; 0x2798 <__vector_5>
      18:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      1c:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      20:	0c 94 4a 0a 	jmp	0x1494	; 0x1494 <__vector_8>
      24:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      28:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      2c:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      30:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      34:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      38:	0c 94 8f 09 	jmp	0x131e	; 0x131e <__vector_14>
      3c:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      40:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      44:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      48:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__vector_18>
      4c:	0c 94 42 09 	jmp	0x1284	; 0x1284 <__vector_19>
      50:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      54:	0c 94 6e 07 	jmp	0xedc	; 0xedc <__vector_21>
      58:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      5c:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      60:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      64:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
      68:	4c 01       	movw	r8, r24
      6a:	57 01       	movw	r10, r14
      6c:	62 01       	movw	r12, r4
      6e:	6d 01       	movw	r12, r26
      70:	78 01       	movw	r14, r16
      72:	83 01       	movw	r16, r6
      74:	ef 01       	movw	r28, r30
      76:	8e 01       	movw	r16, r28
      78:	ef 01       	movw	r28, r30
      7a:	ef 01       	movw	r28, r30
      7c:	ef 01       	movw	r28, r30
      7e:	99 01       	movw	r18, r18
      80:	a4 01       	movw	r20, r8
      82:	b1 01       	movw	r22, r2
      84:	be 01       	movw	r22, r28
      86:	cb 01       	movw	r24, r22
      88:	d8 01       	movw	r26, r16
      8a:	e5 01       	movw	r28, r10
      8c:	fa 01       	movw	r30, r20
      8e:	fe 01       	movw	r30, r28
      90:	02 02       	muls	r16, r18
      92:	06 02       	muls	r16, r22
      94:	0a 02       	muls	r16, r26
      96:	0e 02       	muls	r16, r30
      98:	28 02       	muls	r18, r24
      9a:	12 02       	muls	r17, r18
      9c:	28 02       	muls	r18, r24
      9e:	28 02       	muls	r18, r24
      a0:	28 02       	muls	r18, r24
      a2:	13 02       	muls	r17, r19
      a4:	17 02       	muls	r17, r23
      a6:	1c 02       	muls	r17, r28
      a8:	20 02       	muls	r18, r16
      aa:	24 02       	muls	r18, r20
      ac:	3a 02       	muls	r19, r26
      ae:	40 02       	muls	r20, r16
      b0:	46 02       	muls	r20, r22
      b2:	4c 02       	muls	r20, r28
      b4:	52 02       	muls	r21, r18
      b6:	58 02       	muls	r21, r24
      b8:	81 02       	muls	r24, r17
      ba:	5e 02       	muls	r21, r30
      bc:	81 02       	muls	r24, r17
      be:	81 02       	muls	r24, r17
      c0:	81 02       	muls	r24, r17
      c2:	64 02       	muls	r22, r20
      c4:	6a 02       	muls	r22, r26
      c6:	70 02       	muls	r23, r16
      c8:	76 02       	muls	r23, r22
      ca:	7c 02       	muls	r23, r28
      cc:	b7 0e       	add	r11, r23
      ce:	b7 0e       	add	r11, r23
      d0:	b7 0e       	add	r11, r23
      d2:	b7 0e       	add	r11, r23
      d4:	b7 0e       	add	r11, r23
      d6:	b7 0e       	add	r11, r23
      d8:	0a 0f       	add	r16, r26
      da:	0a 0f       	add	r16, r26
      dc:	d5 0e       	add	r13, r21
      de:	0a 0f       	add	r16, r26
      e0:	0a 0f       	add	r16, r26
      e2:	0a 0f       	add	r16, r26
      e4:	0a 0f       	add	r16, r26
      e6:	0a 0f       	add	r16, r26
      e8:	0a 0f       	add	r16, r26
      ea:	0a 0f       	add	r16, r26
      ec:	0a 0f       	add	r16, r26
      ee:	d5 0e       	add	r13, r21
      f0:	d5 0e       	add	r13, r21
      f2:	a3 0e       	add	r10, r19
      f4:	ad 0e       	add	r10, r29
      f6:	c1 11       	cpse	r28, r1
      f8:	cb 11       	cpse	r28, r11
      fa:	ea 11       	cpse	r30, r10
      fc:	06 12       	cpse	r0, r22
      fe:	10 13       	cpse	r17, r16
     100:	10 13       	cpse	r17, r16
     102:	0e 12       	cpse	r0, r30
     104:	45 12       	cpse	r4, r21
     106:	a5 12       	cpse	r10, r21
     108:	d1 12       	cpse	r13, r17
     10a:	d8 12       	cpse	r13, r24
     10c:	df 12       	cpse	r13, r31
     10e:	e6 12       	cpse	r14, r22
     110:	f0 20       	and	r15, r0
     112:	b4 20       	and	r11, r4
     114:	e0 20       	and	r14, r0
     116:	f8 20       	and	r15, r8
     118:	e4 20       	and	r14, r4
     11a:	f8 20       	and	r15, r8
     11c:	c4 20       	and	r12, r4
     11e:	b0 20       	and	r11, r0
     120:	bc 20       	and	r11, r12
     122:	c0 20       	and	r12, r0
     124:	f8 20       	and	r15, r8
     126:	d4 20       	and	r13, r4
     128:	a8 20       	and	r10, r8
     12a:	d8 20       	and	r13, r8
     12c:	a4 20       	and	r10, r4
     12e:	b8 20       	and	r11, r8
     130:	7c 20       	and	r7, r12
     132:	80 20       	and	r8, r0
     134:	84 20       	and	r8, r4
     136:	88 20       	and	r8, r8
     138:	8c 20       	and	r8, r12
     13a:	90 20       	and	r9, r0
     13c:	94 20       	and	r9, r4
     13e:	98 20       	and	r9, r8
     140:	9c 20       	and	r9, r12
     142:	a0 20       	and	r10, r0
     144:	c8 20       	and	r12, r8
     146:	cc 20       	and	r12, r12
     148:	f4 20       	and	r15, r4
     14a:	d0 20       	and	r13, r0
     14c:	f8 20       	and	r15, r8
     14e:	ac 20       	and	r10, r12
     150:	e8 20       	and	r14, r8
     152:	fc 20       	and	r15, r12
     154:	18 20       	and	r1, r8
     156:	1c 20       	and	r1, r12
     158:	20 20       	and	r2, r0
     15a:	24 20       	and	r2, r4
     15c:	28 20       	and	r2, r8
     15e:	2c 20       	and	r2, r12
     160:	30 20       	and	r3, r0
     162:	34 20       	and	r3, r4
     164:	38 20       	and	r3, r8
     166:	3c 20       	and	r3, r12
     168:	40 20       	and	r4, r0
     16a:	44 20       	and	r4, r4
     16c:	48 20       	and	r4, r8
     16e:	4c 20       	and	r4, r12
     170:	50 20       	and	r5, r0
     172:	54 20       	and	r5, r4
     174:	58 20       	and	r5, r8
     176:	5c 20       	and	r5, r12
     178:	60 20       	and	r6, r0
     17a:	64 20       	and	r6, r4
     17c:	68 20       	and	r6, r8
     17e:	6c 20       	and	r6, r12
     180:	70 20       	and	r7, r0
     182:	74 20       	and	r7, r4
     184:	78 20       	and	r7, r8
     186:	f8 20       	and	r15, r8
     188:	f8 20       	and	r15, r8
     18a:	f8 20       	and	r15, r8
     18c:	f8 20       	and	r15, r8
     18e:	dc 20       	and	r13, r12
     190:	f8 20       	and	r15, r8
     192:	f8 20       	and	r15, r8
     194:	f8 20       	and	r15, r8
     196:	f8 20       	and	r15, r8
     198:	f8 20       	and	r15, r8
     19a:	f8 20       	and	r15, r8
     19c:	f8 20       	and	r15, r8
     19e:	f8 20       	and	r15, r8
     1a0:	f8 20       	and	r15, r8
     1a2:	f8 20       	and	r15, r8
     1a4:	f8 20       	and	r15, r8
     1a6:	f8 20       	and	r15, r8
     1a8:	f8 20       	and	r15, r8
     1aa:	f8 20       	and	r15, r8
     1ac:	f8 20       	and	r15, r8
     1ae:	f8 20       	and	r15, r8
     1b0:	f8 20       	and	r15, r8
     1b2:	f8 20       	and	r15, r8
     1b4:	f8 20       	and	r15, r8
     1b6:	f8 20       	and	r15, r8
     1b8:	f8 20       	and	r15, r8
     1ba:	f8 20       	and	r15, r8
     1bc:	f8 20       	and	r15, r8
     1be:	f8 20       	and	r15, r8
     1c0:	f8 20       	and	r15, r8
     1c2:	f8 20       	and	r15, r8
     1c4:	f8 20       	and	r15, r8
     1c6:	f8 20       	and	r15, r8
     1c8:	ec 20       	and	r14, r12
     1ca:	05 a8       	ldd	r0, Z+53	; 0x35
     1cc:	4c cd       	rjmp	.-1384   	; 0xfffffc66 <__eeprom_end+0xff7ef99f>
     1ce:	b2 d4       	rcall	.+2404   	; 0xb34 <_Z15i2c_device_readhhPhh+0x98>
     1d0:	4e b9       	out	0x0e, r20	; 14
     1d2:	38 36       	cpi	r19, 0x68	; 104
     1d4:	a9 02       	muls	r26, r25
     1d6:	0c 50       	subi	r16, 0x0C	; 12
     1d8:	b9 91       	ld	r27, Y+
     1da:	86 88       	ldd	r8, Z+22	; 0x16
     1dc:	08 3c       	cpi	r16, 0xC8	; 200
     1de:	a6 aa       	std	Z+54, r10	; 0x36
     1e0:	aa 2a       	or	r10, r26
     1e2:	be 00       	.word	0x00be	; ????
     1e4:	00 00       	nop
     1e6:	80 3f       	cpi	r24, 0xF0	; 240

000001e8 <__ctors_start>:
     1e8:	f7 1f       	adc	r31, r23

000001ea <__ctors_end>:
     1ea:	08 20       	and	r0, r8

000001ec <__dtors_end>:
     1ec:	11 24       	eor	r1, r1
     1ee:	1f be       	out	0x3f, r1	; 63
     1f0:	cf ef       	ldi	r28, 0xFF	; 255
     1f2:	d8 e0       	ldi	r29, 0x08	; 8
     1f4:	de bf       	out	0x3e, r29	; 62
     1f6:	cd bf       	out	0x3d, r28	; 61

000001f8 <__do_copy_data>:
     1f8:	12 e0       	ldi	r17, 0x02	; 2
     1fa:	a0 e0       	ldi	r26, 0x00	; 0
     1fc:	b1 e0       	ldi	r27, 0x01	; 1
     1fe:	ea e3       	ldi	r30, 0x3A	; 58
     200:	fb e5       	ldi	r31, 0x5B	; 91
     202:	02 c0       	rjmp	.+4      	; 0x208 <__do_copy_data+0x10>
     204:	05 90       	lpm	r0, Z+
     206:	0d 92       	st	X+, r0
     208:	a8 3e       	cpi	r26, 0xE8	; 232
     20a:	b1 07       	cpc	r27, r17
     20c:	d9 f7       	brne	.-10     	; 0x204 <__do_copy_data+0xc>

0000020e <__do_clear_bss>:
     20e:	25 e0       	ldi	r18, 0x05	; 5
     210:	a8 ee       	ldi	r26, 0xE8	; 232
     212:	b2 e0       	ldi	r27, 0x02	; 2
     214:	01 c0       	rjmp	.+2      	; 0x218 <.do_clear_bss_start>

00000216 <.do_clear_bss_loop>:
     216:	1d 92       	st	X+, r1

00000218 <.do_clear_bss_start>:
     218:	a2 37       	cpi	r26, 0x72	; 114
     21a:	b2 07       	cpc	r27, r18
     21c:	e1 f7       	brne	.-8      	; 0x216 <.do_clear_bss_loop>

0000021e <__do_global_ctors>:
     21e:	10 e0       	ldi	r17, 0x00	; 0
     220:	c5 ef       	ldi	r28, 0xF5	; 245
     222:	d0 e0       	ldi	r29, 0x00	; 0
     224:	04 c0       	rjmp	.+8      	; 0x22e <__do_global_ctors+0x10>
     226:	21 97       	sbiw	r28, 0x01	; 1
     228:	fe 01       	movw	r30, r28
     22a:	0e 94 83 28 	call	0x5106	; 0x5106 <__tablejump2__>
     22e:	c4 3f       	cpi	r28, 0xF4	; 244
     230:	d1 07       	cpc	r29, r17
     232:	c9 f7       	brne	.-14     	; 0x226 <__do_global_ctors+0x8>
     234:	0e 94 e6 1e 	call	0x3dcc	; 0x3dcc <main>
     238:	0c 94 90 2d 	jmp	0x5b20	; 0x5b20 <__do_global_dtors>

0000023c <__bad_interrupt>:
     23c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000240 <month_length>:
     240:	62 30       	cpi	r22, 0x02	; 2
     242:	21 f4       	brne	.+8      	; 0x24c <month_length+0xc>
     244:	0e 94 2d 01 	call	0x25a	; 0x25a <is_leap_year>
     248:	84 5e       	subi	r24, 0xE4	; 228
     24a:	08 95       	ret
     24c:	68 30       	cpi	r22, 0x08	; 8
     24e:	08 f0       	brcs	.+2      	; 0x252 <month_length+0x12>
     250:	6f 5f       	subi	r22, 0xFF	; 255
     252:	61 70       	andi	r22, 0x01	; 1
     254:	8e e1       	ldi	r24, 0x1E	; 30
     256:	86 0f       	add	r24, r22
     258:	08 95       	ret

0000025a <is_leap_year>:
     25a:	9c 01       	movw	r18, r24
     25c:	23 70       	andi	r18, 0x03	; 3
     25e:	33 27       	eor	r19, r19
     260:	23 2b       	or	r18, r19
     262:	59 f4       	brne	.+22     	; 0x27a <is_leap_year+0x20>
     264:	64 e6       	ldi	r22, 0x64	; 100
     266:	70 e0       	ldi	r23, 0x00	; 0
     268:	0e 94 2e 28 	call	0x505c	; 0x505c <__divmodhi4>
     26c:	89 2b       	or	r24, r25
     26e:	39 f4       	brne	.+14     	; 0x27e <is_leap_year+0x24>
     270:	63 70       	andi	r22, 0x03	; 3
     272:	77 27       	eor	r23, r23
     274:	81 e0       	ldi	r24, 0x01	; 1
     276:	67 2b       	or	r22, r23
     278:	19 f0       	breq	.+6      	; 0x280 <is_leap_year+0x26>
     27a:	80 e0       	ldi	r24, 0x00	; 0
     27c:	08 95       	ret
     27e:	81 e0       	ldi	r24, 0x01	; 1
     280:	08 95       	ret

00000282 <_Z7pinModehh>:
#include "ardooweeno.h"
#include <util/delay.h>

void pinMode(uint8_t pin, uint8_t mode)
{
	switch(pin)
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	fc 01       	movw	r30, r24
     286:	32 97       	sbiw	r30, 0x02	; 2
     288:	e2 31       	cpi	r30, 0x12	; 18
     28a:	f1 05       	cpc	r31, r1
     28c:	08 f0       	brcs	.+2      	; 0x290 <_Z7pinModehh+0xe>
     28e:	a7 c0       	rjmp	.+334    	; 0x3de <_Z7pinModehh+0x15c>
     290:	ec 5c       	subi	r30, 0xCC	; 204
     292:	ff 4f       	sbci	r31, 0xFF	; 255
     294:	0c 94 83 28 	jmp	0x5106	; 0x5106 <__tablejump2__>
	{
		case D2:
		{
			if(mode == OUTPUT)
     298:	61 30       	cpi	r22, 0x01	; 1
     29a:	11 f4       	brne	.+4      	; 0x2a0 <_Z7pinModehh+0x1e>
			{
				DDRD  |= (1 << PORTD2);
     29c:	52 9a       	sbi	0x0a, 2	; 10
     29e:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD2);
     2a0:	52 98       	cbi	0x0a, 2	; 10

				if(mode == INPUT_PULLUP)
     2a2:	63 30       	cpi	r22, 0x03	; 3
     2a4:	11 f4       	brne	.+4      	; 0x2aa <_Z7pinModehh+0x28>
				{
					PORTD  |= (1 << PORTD2);
     2a6:	5a 9a       	sbi	0x0b, 2	; 11
     2a8:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD2);
     2aa:	5a 98       	cbi	0x0b, 2	; 11
     2ac:	08 95       	ret
		}
		break;

		case D3:
		{
			if(mode == OUTPUT)
     2ae:	61 30       	cpi	r22, 0x01	; 1
     2b0:	11 f4       	brne	.+4      	; 0x2b6 <_Z7pinModehh+0x34>
			{
				DDRD  |= (1 << PORTD3);
     2b2:	53 9a       	sbi	0x0a, 3	; 10
     2b4:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD3);
     2b6:	53 98       	cbi	0x0a, 3	; 10

				if(mode == INPUT_PULLUP)
     2b8:	63 30       	cpi	r22, 0x03	; 3
     2ba:	11 f4       	brne	.+4      	; 0x2c0 <_Z7pinModehh+0x3e>
				{
					PORTD  |= (1 << PORTD3);
     2bc:	5b 9a       	sbi	0x0b, 3	; 11
     2be:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD3);
     2c0:	5b 98       	cbi	0x0b, 3	; 11
     2c2:	08 95       	ret
		}
		break;

		case D4:
		{
			if(mode == OUTPUT)
     2c4:	61 30       	cpi	r22, 0x01	; 1
     2c6:	11 f4       	brne	.+4      	; 0x2cc <_Z7pinModehh+0x4a>
			{
				DDRD  |= (1 << PORTD4);
     2c8:	54 9a       	sbi	0x0a, 4	; 10
     2ca:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD4);
     2cc:	54 98       	cbi	0x0a, 4	; 10

				if(mode == INPUT_PULLUP)
     2ce:	63 30       	cpi	r22, 0x03	; 3
     2d0:	11 f4       	brne	.+4      	; 0x2d6 <_Z7pinModehh+0x54>
				{
					PORTD  |= (1 << PORTD4);
     2d2:	5c 9a       	sbi	0x0b, 4	; 11
     2d4:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD4);
     2d6:	5c 98       	cbi	0x0b, 4	; 11
     2d8:	08 95       	ret
		}
		break;

		case D5:
		{
			if(mode == OUTPUT)
     2da:	61 30       	cpi	r22, 0x01	; 1
     2dc:	11 f4       	brne	.+4      	; 0x2e2 <_Z7pinModehh+0x60>
			{
				DDRD  |= (1 << PORTD5);
     2de:	55 9a       	sbi	0x0a, 5	; 10
     2e0:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD5);
     2e2:	55 98       	cbi	0x0a, 5	; 10

				if(mode == INPUT_PULLUP)
     2e4:	63 30       	cpi	r22, 0x03	; 3
     2e6:	11 f4       	brne	.+4      	; 0x2ec <_Z7pinModehh+0x6a>
				{
					PORTD  |= (1 << PORTD5);
     2e8:	5d 9a       	sbi	0x0b, 5	; 11
     2ea:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD5);
     2ec:	5d 98       	cbi	0x0b, 5	; 11
     2ee:	08 95       	ret
		}
		break;

		case D6:
		{
			if(mode == OUTPUT)
     2f0:	61 30       	cpi	r22, 0x01	; 1
     2f2:	11 f4       	brne	.+4      	; 0x2f8 <_Z7pinModehh+0x76>
			{
				DDRD  |= (1 << PORTD6);
     2f4:	56 9a       	sbi	0x0a, 6	; 10
     2f6:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD6);
     2f8:	56 98       	cbi	0x0a, 6	; 10

				if(mode == INPUT_PULLUP)
     2fa:	63 30       	cpi	r22, 0x03	; 3
     2fc:	11 f4       	brne	.+4      	; 0x302 <_Z7pinModehh+0x80>
				{
					PORTD  |= (1 << PORTD6);
     2fe:	5e 9a       	sbi	0x0b, 6	; 11
     300:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD6);
     302:	5e 98       	cbi	0x0b, 6	; 11
     304:	08 95       	ret
		}
		break;

		case D7:
		{
			if(mode == OUTPUT)
     306:	61 30       	cpi	r22, 0x01	; 1
     308:	11 f4       	brne	.+4      	; 0x30e <_Z7pinModehh+0x8c>
			{
				DDRD  |= (1 << PORTD7);
     30a:	57 9a       	sbi	0x0a, 7	; 10
     30c:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD7);
     30e:	57 98       	cbi	0x0a, 7	; 10

				if(mode == INPUT_PULLUP)
     310:	63 30       	cpi	r22, 0x03	; 3
     312:	11 f4       	brne	.+4      	; 0x318 <_Z7pinModehh+0x96>
				{
					PORTD  |= (1 << PORTD7);
     314:	5f 9a       	sbi	0x0b, 7	; 11
     316:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD7);
     318:	5f 98       	cbi	0x0b, 7	; 11
     31a:	08 95       	ret
		}
		break;

		case D9:
		{
			if(mode == OUTPUT)
     31c:	61 30       	cpi	r22, 0x01	; 1
     31e:	11 f4       	brne	.+4      	; 0x324 <_Z7pinModehh+0xa2>
			{
				DDRB  |= (1 << PORTB1);
     320:	21 9a       	sbi	0x04, 1	; 4
     322:	08 95       	ret
			}
			else
			{
				DDRB  &= ~(1 << PORTB1);
     324:	21 98       	cbi	0x04, 1	; 4

				if(mode == INPUT_PULLUP)
     326:	63 30       	cpi	r22, 0x03	; 3
     328:	11 f4       	brne	.+4      	; 0x32e <_Z7pinModehh+0xac>
				{
					PORTD  |= (1 << PORTB1);
     32a:	59 9a       	sbi	0x0b, 1	; 11
     32c:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTB1);
     32e:	59 98       	cbi	0x0b, 1	; 11
     330:	08 95       	ret
		}
		break;

		case D13:
		{
			if(mode == OUTPUT)
     332:	61 30       	cpi	r22, 0x01	; 1
     334:	11 f4       	brne	.+4      	; 0x33a <_Z7pinModehh+0xb8>
			{
				DDRB  |= (1 << PORTB5);
     336:	25 9a       	sbi	0x04, 5	; 4
     338:	08 95       	ret
			}
			else
			{
				DDRB  &= ~(1 << PORTB5);
     33a:	25 98       	cbi	0x04, 5	; 4

				if(mode == INPUT_PULLUP)
     33c:	63 30       	cpi	r22, 0x03	; 3
     33e:	11 f4       	brne	.+4      	; 0x344 <_Z7pinModehh+0xc2>
				{
					PORTD  |= (1 << PORTB5);
     340:	5d 9a       	sbi	0x0b, 5	; 11
     342:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTB5);
     344:	5d 98       	cbi	0x0b, 5	; 11
     346:	08 95       	ret
		}
		break;

		case A0:
		{
			if(mode == OUTPUT)
     348:	61 30       	cpi	r22, 0x01	; 1
     34a:	11 f4       	brne	.+4      	; 0x350 <_Z7pinModehh+0xce>
			{
				DDRC  |= (1 << PORTC0);
     34c:	38 9a       	sbi	0x07, 0	; 7
     34e:	0b c0       	rjmp	.+22     	; 0x366 <_Z7pinModehh+0xe4>
			}
			else
			{
				DDRC  &= ~(1 << PORTC0);
     350:	38 98       	cbi	0x07, 0	; 7

				if(mode == INPUT_PULLUP)
     352:	63 30       	cpi	r22, 0x03	; 3
     354:	19 f4       	brne	.+6      	; 0x35c <_Z7pinModehh+0xda>
				{
					PORTC  |= (1 << PORTC0);
     356:	40 9a       	sbi	0x08, 0	; 8
			{
				DDRC  |= (1 << PORTC1);
			}
			else
			{
				DDRC  &= ~(1 << PORTC1);
     358:	39 98       	cbi	0x07, 1	; 7
     35a:	0a c0       	rjmp	.+20     	; 0x370 <_Z7pinModehh+0xee>
				{
					PORTC  |= (1 << PORTC0);
				}
				else
				{
					PORTC &= ~(1 << PORTC0);
     35c:	40 98       	cbi	0x08, 0	; 8
			{
				DDRC  |= (1 << PORTC1);
			}
			else
			{
				DDRC  &= ~(1 << PORTC1);
     35e:	39 98       	cbi	0x07, 1	; 7
     360:	0a c0       	rjmp	.+20     	; 0x376 <_Z7pinModehh+0xf4>
			}
		}

		case A1:
		{
			if(mode == OUTPUT)
     362:	61 30       	cpi	r22, 0x01	; 1
     364:	11 f4       	brne	.+4      	; 0x36a <_Z7pinModehh+0xe8>
			{
				DDRC  |= (1 << PORTC1);
     366:	39 9a       	sbi	0x07, 1	; 7
     368:	0b c0       	rjmp	.+22     	; 0x380 <_Z7pinModehh+0xfe>
			}
			else
			{
				DDRC  &= ~(1 << PORTC1);
     36a:	39 98       	cbi	0x07, 1	; 7

				if(mode == INPUT_PULLUP)
     36c:	63 30       	cpi	r22, 0x03	; 3
     36e:	19 f4       	brne	.+6      	; 0x376 <_Z7pinModehh+0xf4>
				{
					PORTC  |= (1 << PORTC1);
     370:	41 9a       	sbi	0x08, 1	; 8
			{
				DDRC  |= (1 << PORTC2);
			}
			else
			{
				DDRC  &= ~(1 << PORTC2);
     372:	3a 98       	cbi	0x07, 2	; 7
     374:	0a c0       	rjmp	.+20     	; 0x38a <_Z7pinModehh+0x108>
				{
					PORTC  |= (1 << PORTC1);
				}
				else
				{
					PORTC &= ~(1 << PORTC1);
     376:	41 98       	cbi	0x08, 1	; 8
			{
				DDRC  |= (1 << PORTC2);
			}
			else
			{
				DDRC  &= ~(1 << PORTC2);
     378:	3a 98       	cbi	0x07, 2	; 7
     37a:	0a c0       	rjmp	.+20     	; 0x390 <_Z7pinModehh+0x10e>
			}
		}

		case A2:
		{
			if(mode == OUTPUT)
     37c:	61 30       	cpi	r22, 0x01	; 1
     37e:	11 f4       	brne	.+4      	; 0x384 <_Z7pinModehh+0x102>
			{
				DDRC  |= (1 << PORTC2);
     380:	3a 9a       	sbi	0x07, 2	; 7
     382:	0b c0       	rjmp	.+22     	; 0x39a <_Z7pinModehh+0x118>
			}
			else
			{
				DDRC  &= ~(1 << PORTC2);
     384:	3a 98       	cbi	0x07, 2	; 7

				if(mode == INPUT_PULLUP)
     386:	63 30       	cpi	r22, 0x03	; 3
     388:	19 f4       	brne	.+6      	; 0x390 <_Z7pinModehh+0x10e>
				{
					PORTC  |= (1 << PORTC2);
     38a:	42 9a       	sbi	0x08, 2	; 8
			{
				DDRC  |= (1 << PORTC3);
			}
			else
			{
				DDRC  &= ~(1 << PORTC3);
     38c:	3b 98       	cbi	0x07, 3	; 7
     38e:	0a c0       	rjmp	.+20     	; 0x3a4 <_Z7pinModehh+0x122>
				{
					PORTC  |= (1 << PORTC2);
				}
				else
				{
					PORTC &= ~(1 << PORTC2);
     390:	42 98       	cbi	0x08, 2	; 8
			{
				DDRC  |= (1 << PORTC3);
			}
			else
			{
				DDRC  &= ~(1 << PORTC3);
     392:	3b 98       	cbi	0x07, 3	; 7
     394:	0a c0       	rjmp	.+20     	; 0x3aa <_Z7pinModehh+0x128>
			}
		}

		case A3:
		{
			if(mode == OUTPUT)
     396:	61 30       	cpi	r22, 0x01	; 1
     398:	11 f4       	brne	.+4      	; 0x39e <_Z7pinModehh+0x11c>
			{
				DDRC  |= (1 << PORTC3);
     39a:	3b 9a       	sbi	0x07, 3	; 7
     39c:	0b c0       	rjmp	.+22     	; 0x3b4 <_Z7pinModehh+0x132>
			}
			else
			{
				DDRC  &= ~(1 << PORTC3);
     39e:	3b 98       	cbi	0x07, 3	; 7

				if(mode == INPUT_PULLUP)
     3a0:	63 30       	cpi	r22, 0x03	; 3
     3a2:	19 f4       	brne	.+6      	; 0x3aa <_Z7pinModehh+0x128>
				{
					PORTC  |= (1 << PORTC3);
     3a4:	43 9a       	sbi	0x08, 3	; 8
			{
				DDRC  |= (1 << PORTC4);
			}
			else
			{
				DDRC  &= ~(1 << PORTC4);
     3a6:	3c 98       	cbi	0x07, 4	; 7
     3a8:	0a c0       	rjmp	.+20     	; 0x3be <_Z7pinModehh+0x13c>
				{
					PORTC  |= (1 << PORTC3);
				}
				else
				{
					PORTC &= ~(1 << PORTC3);
     3aa:	43 98       	cbi	0x08, 3	; 8
			{
				DDRC  |= (1 << PORTC4);
			}
			else
			{
				DDRC  &= ~(1 << PORTC4);
     3ac:	3c 98       	cbi	0x07, 4	; 7
     3ae:	0a c0       	rjmp	.+20     	; 0x3c4 <_Z7pinModehh+0x142>
			}
		}

		case A4:
		{
			if(mode == OUTPUT)
     3b0:	61 30       	cpi	r22, 0x01	; 1
     3b2:	11 f4       	brne	.+4      	; 0x3b8 <_Z7pinModehh+0x136>
			{
				DDRC  |= (1 << PORTC4);
     3b4:	3c 9a       	sbi	0x07, 4	; 7
     3b6:	0b c0       	rjmp	.+22     	; 0x3ce <_Z7pinModehh+0x14c>
			}
			else
			{
				DDRC  &= ~(1 << PORTC4);
     3b8:	3c 98       	cbi	0x07, 4	; 7

				if(mode == INPUT_PULLUP)
     3ba:	63 30       	cpi	r22, 0x03	; 3
     3bc:	19 f4       	brne	.+6      	; 0x3c4 <_Z7pinModehh+0x142>
				{
					PORTC  |= (1 << PORTC4);
     3be:	44 9a       	sbi	0x08, 4	; 8
			{
				DDRC  |= (1 << PORTC5);
			}
			else
			{
				DDRC  &= ~(1 << PORTC5);
     3c0:	3d 98       	cbi	0x07, 5	; 7
     3c2:	0a c0       	rjmp	.+20     	; 0x3d8 <_Z7pinModehh+0x156>
				{
					PORTC  |= (1 << PORTC4);
				}
				else
				{
					PORTC &= ~(1 << PORTC4);
     3c4:	44 98       	cbi	0x08, 4	; 8
			{
				DDRC  |= (1 << PORTC5);
			}
			else
			{
				DDRC  &= ~(1 << PORTC5);
     3c6:	3d 98       	cbi	0x07, 5	; 7
     3c8:	09 c0       	rjmp	.+18     	; 0x3dc <_Z7pinModehh+0x15a>
			}
		}

		case A5:
		{
			if(mode == OUTPUT)
     3ca:	61 30       	cpi	r22, 0x01	; 1
     3cc:	11 f4       	brne	.+4      	; 0x3d2 <_Z7pinModehh+0x150>
			{
				DDRC  |= (1 << PORTC5);
     3ce:	3d 9a       	sbi	0x07, 5	; 7
     3d0:	08 95       	ret
			}
			else
			{
				DDRC  &= ~(1 << PORTC5);
     3d2:	3d 98       	cbi	0x07, 5	; 7

				if(mode == INPUT_PULLUP)
     3d4:	63 30       	cpi	r22, 0x03	; 3
     3d6:	11 f4       	brne	.+4      	; 0x3dc <_Z7pinModehh+0x15a>
				{
					PORTC  |= (1 << PORTC5);
     3d8:	45 9a       	sbi	0x08, 5	; 8
     3da:	08 95       	ret
				}
				else
				{
					PORTC &= ~(1 << PORTC5);
     3dc:	45 98       	cbi	0x08, 5	; 8
     3de:	08 95       	ret

000003e0 <_Z11digitalReadh>:

BOOL digitalRead(uint8_t pin)
{
	int result = 0;

	switch(pin)
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	fc 01       	movw	r30, r24
     3e4:	32 97       	sbiw	r30, 0x02	; 2
     3e6:	e0 31       	cpi	r30, 0x10	; 16
     3e8:	f1 05       	cpc	r31, r1
     3ea:	90 f5       	brcc	.+100    	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
     3ec:	ea 5b       	subi	r30, 0xBA	; 186
     3ee:	ff 4f       	sbci	r31, 0xFF	; 255
     3f0:	0c 94 83 28 	jmp	0x5106	; 0x5106 <__tablejump2__>
	{
		case D2:
		{
			result = PIND & (1 << PORTD2);
     3f4:	29 b1       	in	r18, 0x09	; 9
     3f6:	24 70       	andi	r18, 0x04	; 4
     3f8:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     3fa:	2c c0       	rjmp	.+88     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>

		case D3:
		{
			result = PIND & (1 << PORTD3);
     3fc:	29 b1       	in	r18, 0x09	; 9
     3fe:	28 70       	andi	r18, 0x08	; 8
     400:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     402:	28 c0       	rjmp	.+80     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>

		case D4:
		{
			result = PIND & (1 << PORTD4);
     404:	29 b1       	in	r18, 0x09	; 9
     406:	20 71       	andi	r18, 0x10	; 16
     408:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     40a:	24 c0       	rjmp	.+72     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>

		case D5:
		{
			result = PIND & (1 << PORTD5);
     40c:	29 b1       	in	r18, 0x09	; 9
     40e:	20 72       	andi	r18, 0x20	; 32
     410:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     412:	20 c0       	rjmp	.+64     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>

		case D6:
		{
			result = PIND & (1 << PORTD6);
     414:	29 b1       	in	r18, 0x09	; 9
     416:	20 74       	andi	r18, 0x40	; 64
     418:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     41a:	1c c0       	rjmp	.+56     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>

		case D7:
		{
			result = PIND & (1 << PORTD7);
     41c:	29 b1       	in	r18, 0x09	; 9
     41e:	20 78       	andi	r18, 0x80	; 128
     420:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     422:	18 c0       	rjmp	.+48     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>

		case D9:
		{
			result = PINB & (1 << PORTB1);
     424:	83 b1       	in	r24, 0x03	; 3
		}

		case D13:
		{
			result = PINB & (1 << PORTB5);
     426:	23 b1       	in	r18, 0x03	; 3
     428:	20 72       	andi	r18, 0x20	; 32
     42a:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     42c:	13 c0       	rjmp	.+38     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>

		case A0:
		{
			result = PINC & (1 << PORTC0);
     42e:	86 b1       	in	r24, 0x06	; 6
     430:	28 2f       	mov	r18, r24
     432:	21 70       	andi	r18, 0x01	; 1
     434:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     436:	0e c0       	rjmp	.+28     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>

		case A1:
		{
			result = PINC & (1 << PORTC1);
     438:	26 b1       	in	r18, 0x06	; 6
     43a:	22 70       	andi	r18, 0x02	; 2
     43c:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     43e:	0a c0       	rjmp	.+20     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>

		case A2:
		{
			result = PINC & (1 << PORTC2);
     440:	26 b1       	in	r18, 0x06	; 6
     442:	24 70       	andi	r18, 0x04	; 4
     444:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     446:	06 c0       	rjmp	.+12     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>

		case A3:
		{
			result = PINC & (1 << PORTC3);
     448:	26 b1       	in	r18, 0x06	; 6
     44a:	28 70       	andi	r18, 0x08	; 8
     44c:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     44e:	02 c0       	rjmp	.+4      	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
	}
}

BOOL digitalRead(uint8_t pin)
{
	int result = 0;
     450:	20 e0       	ldi	r18, 0x00	; 0
     452:	30 e0       	ldi	r19, 0x00	; 0
		{
		}
		break;
	}

	return(result != 0);
     454:	81 e0       	ldi	r24, 0x01	; 1
     456:	23 2b       	or	r18, r19
     458:	09 f4       	brne	.+2      	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
     45a:	80 e0       	ldi	r24, 0x00	; 0
}
     45c:	08 95       	ret

0000045e <_Z12digitalWritehh>:

void digitalWrite(uint8_t pin, uint8_t value)
{
	switch(pin)
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	fc 01       	movw	r30, r24
     462:	32 97       	sbiw	r30, 0x02	; 2
     464:	e0 31       	cpi	r30, 0x10	; 16
     466:	f1 05       	cpc	r31, r1
     468:	08 f0       	brcs	.+2      	; 0x46c <_Z12digitalWritehh+0xe>
     46a:	4b c0       	rjmp	.+150    	; 0x502 <_Z12digitalWritehh+0xa4>
     46c:	ea 5a       	subi	r30, 0xAA	; 170
     46e:	ff 4f       	sbci	r31, 0xFF	; 255
     470:	0c 94 83 28 	jmp	0x5106	; 0x5106 <__tablejump2__>
	{
		case D2:
		{
			if(value)
     474:	66 23       	and	r22, r22
     476:	11 f0       	breq	.+4      	; 0x47c <_Z12digitalWritehh+0x1e>
			{
				PORTD  |= (1 << PORTD2);
     478:	5a 9a       	sbi	0x0b, 2	; 11
     47a:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD2);
     47c:	5a 98       	cbi	0x0b, 2	; 11
     47e:	08 95       	ret
		}
		break;

		case D3:
		{
			if(value)
     480:	66 23       	and	r22, r22
     482:	11 f0       	breq	.+4      	; 0x488 <_Z12digitalWritehh+0x2a>
			{
				PORTD  |= (1 << PORTD3);
     484:	5b 9a       	sbi	0x0b, 3	; 11
     486:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD3);
     488:	5b 98       	cbi	0x0b, 3	; 11
     48a:	08 95       	ret
		}
		break;

		case D4:
		{
			if(value)
     48c:	66 23       	and	r22, r22
     48e:	11 f0       	breq	.+4      	; 0x494 <_Z12digitalWritehh+0x36>
			{
				PORTD  |= (1 << PORTD4);
     490:	5c 9a       	sbi	0x0b, 4	; 11
     492:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD4);
     494:	5c 98       	cbi	0x0b, 4	; 11
     496:	08 95       	ret
		}
		break;

		case D5:
		{
			if(value)
     498:	66 23       	and	r22, r22
     49a:	11 f0       	breq	.+4      	; 0x4a0 <_Z12digitalWritehh+0x42>
			{
				PORTD  |= (1 << PORTD5);
     49c:	5d 9a       	sbi	0x0b, 5	; 11
     49e:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD5);
     4a0:	5d 98       	cbi	0x0b, 5	; 11
     4a2:	08 95       	ret
		}
		break;

		case D6:
		{
			if(value)
     4a4:	66 23       	and	r22, r22
     4a6:	11 f0       	breq	.+4      	; 0x4ac <_Z12digitalWritehh+0x4e>
			{
				PORTD  |= (1 << PORTD6);
     4a8:	5e 9a       	sbi	0x0b, 6	; 11
     4aa:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD6);
     4ac:	5e 98       	cbi	0x0b, 6	; 11
     4ae:	08 95       	ret
		}
		break;

		case D7:
		{
			if(value)
     4b0:	66 23       	and	r22, r22
     4b2:	11 f0       	breq	.+4      	; 0x4b8 <_Z12digitalWritehh+0x5a>
			{
				PORTD  |= (1 << PORTD7);
     4b4:	5f 9a       	sbi	0x0b, 7	; 11
     4b6:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD7);
     4b8:	5f 98       	cbi	0x0b, 7	; 11
     4ba:	08 95       	ret
		}
		break;

		case D9:
		{
			if(value)
     4bc:	66 23       	and	r22, r22
     4be:	11 f0       	breq	.+4      	; 0x4c4 <_Z12digitalWritehh+0x66>
			{
				PORTB  |= (1 << PORTB1);
     4c0:	29 9a       	sbi	0x05, 1	; 5
     4c2:	08 95       	ret
			}
			else
			{
				PORTB  &= ~(1 << PORTB1);
     4c4:	29 98       	cbi	0x05, 1	; 5
     4c6:	08 95       	ret
		}
		break;

		case D13:
		{
			if(value)
     4c8:	66 23       	and	r22, r22
     4ca:	11 f0       	breq	.+4      	; 0x4d0 <_Z12digitalWritehh+0x72>
			{
				PORTB  |= (1 << PORTB5);
     4cc:	2d 9a       	sbi	0x05, 5	; 5
     4ce:	08 95       	ret
			}
			else
			{
				PORTB  &= ~(1 << PORTB5);
     4d0:	2d 98       	cbi	0x05, 5	; 5
     4d2:	08 95       	ret
		}
		break;

		case A0:
		{
			if(value)
     4d4:	66 23       	and	r22, r22
     4d6:	11 f0       	breq	.+4      	; 0x4dc <_Z12digitalWritehh+0x7e>
			{
				PORTC  |= (1 << PORTC0);
     4d8:	40 9a       	sbi	0x08, 0	; 8
     4da:	08 95       	ret
			}
			else
			{
				PORTC  &= ~(1 << PORTC0);
     4dc:	40 98       	cbi	0x08, 0	; 8
     4de:	08 95       	ret
		}
		break;

		case A1:
		{
			if(value)
     4e0:	66 23       	and	r22, r22
     4e2:	11 f0       	breq	.+4      	; 0x4e8 <_Z12digitalWritehh+0x8a>
			{
				PORTC  |= (1 << PORTC1);
     4e4:	41 9a       	sbi	0x08, 1	; 8
     4e6:	08 95       	ret
			}
			else
			{
				PORTC  &= ~(1 << PORTC1);
     4e8:	41 98       	cbi	0x08, 1	; 8
     4ea:	08 95       	ret
		}
		break;

		case A2:
		{
			if(value)
     4ec:	66 23       	and	r22, r22
     4ee:	11 f0       	breq	.+4      	; 0x4f4 <_Z12digitalWritehh+0x96>
			{
				PORTC  |= (1 << PORTC2);
     4f0:	42 9a       	sbi	0x08, 2	; 8
     4f2:	08 95       	ret
			}
			else
			{
				PORTC  &= ~(1 << PORTC2);
     4f4:	42 98       	cbi	0x08, 2	; 8
     4f6:	08 95       	ret
		}
		break;

		case A3:
		{
			if(value)
     4f8:	66 23       	and	r22, r22
     4fa:	11 f0       	breq	.+4      	; 0x500 <_Z12digitalWritehh+0xa2>
			{
				PORTC  |= (1 << PORTC3);
     4fc:	43 9a       	sbi	0x08, 3	; 8
     4fe:	08 95       	ret
			}
			else
			{
				PORTC  &= ~(1 << PORTC3);
     500:	43 98       	cbi	0x08, 3	; 8
     502:	08 95       	ret

00000504 <_Z16sendEEPROMStringPc>:
char EEMEM ee_textErrStartInPast[sizeof(TEXT_ERR_START_IN_PAST)];
char EEMEM ee_textErrInvalidTime[sizeof(TEXT_ERR_INVALID_TIME)];
char EEMEM ee_textErrTimeInPast[sizeof(TEXT_ERR_TIME_IN_PAST)];

void sendEEPROMString(char ee_addr[])
{
     504:	1f 93       	push	r17
     506:	cf 93       	push	r28
     508:	df 93       	push	r29
     50a:	ec 01       	movw	r28, r24
	char c = eeprom_read_byte((uint8_t*)&ee_addr[0]);
     50c:	0e 94 11 2d 	call	0x5a22	; 0x5a22 <eeprom_read_byte>
     510:	18 2f       	mov	r17, r24
	int i = 0;

	while(c)
     512:	88 23       	and	r24, r24
     514:	89 f0       	breq	.+34     	; 0x538 <_Z16sendEEPROMStringPc+0x34>
     516:	21 96       	adiw	r28, 0x01	; 1
     518:	03 c0       	rjmp	.+6      	; 0x520 <_Z16sendEEPROMStringPc+0x1c>
     51a:	21 96       	adiw	r28, 0x01	; 1
     51c:	11 23       	and	r17, r17
     51e:	61 f0       	breq	.+24     	; 0x538 <_Z16sendEEPROMStringPc+0x34>
	{
		lb_echo_char(c);
     520:	81 2f       	mov	r24, r17
     522:	0e 94 28 07 	call	0xe50	; 0xe50 <_Z12lb_echo_charh>
		c = eeprom_read_byte((uint8_t*)&ee_addr[++i]);
     526:	ce 01       	movw	r24, r28
     528:	0e 94 11 2d 	call	0x5a22	; 0x5a22 <eeprom_read_byte>
     52c:	18 2f       	mov	r17, r24

		while(linkbusTxInProgress())
     52e:	0e 94 99 06 	call	0xd32	; 0xd32 <_Z19linkbusTxInProgressv>
     532:	81 11       	cpse	r24, r1
     534:	fc cf       	rjmp	.-8      	; 0x52e <_Z16sendEEPROMStringPc+0x2a>
     536:	f1 cf       	rjmp	.-30     	; 0x51a <_Z16sendEEPROMStringPc+0x16>
		{
			;
		}
	}
}
     538:	df 91       	pop	r29
     53a:	cf 91       	pop	r28
     53c:	1f 91       	pop	r17
     53e:	08 95       	ret

00000540 <_ZN8GoertzelC1Eff>:
int _index = 0;
bool _samplesReady = false;

int* testData;

Goertzel::Goertzel(float N, float sampling_frequency)
     540:	ef 92       	push	r14
     542:	ff 92       	push	r15
     544:	0f 93       	push	r16
     546:	1f 93       	push	r17
     548:	cf 93       	push	r28
     54a:	df 93       	push	r29
     54c:	e4 2e       	mov	r14, r20
     54e:	f5 2e       	mov	r15, r21
     550:	d6 2f       	mov	r29, r22
     552:	c7 2f       	mov	r28, r23
{
	_SAMPLING_FREQUENCY = sampling_frequency;   /*on 16mhz, ~8928.57142857143, on 8mhz ~44444 */
     554:	00 93 ff 02 	sts	0x02FF, r16	; 0x8002ff <_SAMPLING_FREQUENCY>
     558:	10 93 00 03 	sts	0x0300, r17	; 0x800300 <_SAMPLING_FREQUENCY+0x1>
     55c:	20 93 01 03 	sts	0x0301, r18	; 0x800301 <_SAMPLING_FREQUENCY+0x2>
     560:	30 93 02 03 	sts	0x0302, r19	; 0x800302 <_SAMPLING_FREQUENCY+0x3>
	_N = CLAMP(100, N, MAXN);
     564:	20 e0       	ldi	r18, 0x00	; 0
     566:	30 e0       	ldi	r19, 0x00	; 0
     568:	41 e5       	ldi	r20, 0x51	; 81
     56a:	53 e4       	ldi	r21, 0x43	; 67
     56c:	6e 2d       	mov	r22, r14
     56e:	7f 2d       	mov	r23, r15
     570:	8d 2f       	mov	r24, r29
     572:	9c 2f       	mov	r25, r28
     574:	0e 94 10 27 	call	0x4e20	; 0x4e20 <__gesf2>
     578:	18 16       	cp	r1, r24
     57a:	6c f0       	brlt	.+26     	; 0x596 <_ZN8GoertzelC1Eff+0x56>
     57c:	20 e0       	ldi	r18, 0x00	; 0
     57e:	30 e0       	ldi	r19, 0x00	; 0
     580:	48 ec       	ldi	r20, 0xC8	; 200
     582:	52 e4       	ldi	r21, 0x42	; 66
     584:	6e 2d       	mov	r22, r14
     586:	7f 2d       	mov	r23, r15
     588:	8d 2f       	mov	r24, r29
     58a:	9c 2f       	mov	r25, r28
     58c:	0e 94 6d 25 	call	0x4ada	; 0x4ada <__cmpsf2>
     590:	88 23       	and	r24, r24
     592:	34 f0       	brlt	.+12     	; 0x5a0 <_ZN8GoertzelC1Eff+0x60>
     594:	09 c0       	rjmp	.+18     	; 0x5a8 <_ZN8GoertzelC1Eff+0x68>
     596:	e1 2c       	mov	r14, r1
     598:	f1 2c       	mov	r15, r1
     59a:	d1 e5       	ldi	r29, 0x51	; 81
     59c:	c3 e4       	ldi	r28, 0x43	; 67
     59e:	04 c0       	rjmp	.+8      	; 0x5a8 <_ZN8GoertzelC1Eff+0x68>
     5a0:	e1 2c       	mov	r14, r1
     5a2:	f1 2c       	mov	r15, r1
     5a4:	d8 ec       	ldi	r29, 0xC8	; 200
     5a6:	c2 e4       	ldi	r28, 0x42	; 66
     5a8:	6e 2d       	mov	r22, r14
     5aa:	7f 2d       	mov	r23, r15
     5ac:	8d 2f       	mov	r24, r29
     5ae:	9c 2f       	mov	r25, r28
     5b0:	0e 94 e9 25 	call	0x4bd2	; 0x4bd2 <__fixsfsi>
     5b4:	70 93 fa 02 	sts	0x02FA, r23	; 0x8002fa <_N+0x1>
     5b8:	60 93 f9 02 	sts	0x02F9, r22	; 0x8002f9 <_N>
	testData = (int*)malloc(_N * sizeof(int));
     5bc:	cb 01       	movw	r24, r22
     5be:	88 0f       	add	r24, r24
     5c0:	99 1f       	adc	r25, r25
     5c2:	0e 94 b2 28 	call	0x5164	; 0x5164 <malloc>
     5c6:	90 93 e9 02 	sts	0x02E9, r25	; 0x8002e9 <__data_end+0x1>
     5ca:	80 93 e8 02 	sts	0x02E8, r24	; 0x8002e8 <__data_end>
}
     5ce:	df 91       	pop	r29
     5d0:	cf 91       	pop	r28
     5d2:	1f 91       	pop	r17
     5d4:	0f 91       	pop	r16
     5d6:	ff 90       	pop	r15
     5d8:	ef 90       	pop	r14
     5da:	08 95       	ret

000005dc <_ZN8GoertzelD1Ev>:

Goertzel::~Goertzel()
{
	free(testData);
     5dc:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <__data_end>
     5e0:	90 91 e9 02 	lds	r25, 0x02E9	; 0x8002e9 <__data_end+0x1>
     5e4:	0e 94 4a 29 	call	0x5294	; 0x5294 <free>
     5e8:	08 95       	ret

000005ea <_ZN8Goertzel13ResetGoertzelEv>:
}

/* Call this routine before every "block" (size=N) of samples. */
void Goertzel::ResetGoertzel(void)
{
	Q2 = 0;
     5ea:	10 92 ed 02 	sts	0x02ED, r1	; 0x8002ed <Q2>
     5ee:	10 92 ee 02 	sts	0x02EE, r1	; 0x8002ee <Q2+0x1>
     5f2:	10 92 ef 02 	sts	0x02EF, r1	; 0x8002ef <Q2+0x2>
     5f6:	10 92 f0 02 	sts	0x02F0, r1	; 0x8002f0 <Q2+0x3>
	Q1 = 0;
     5fa:	10 92 f1 02 	sts	0x02F1, r1	; 0x8002f1 <Q1>
     5fe:	10 92 f2 02 	sts	0x02F2, r1	; 0x8002f2 <Q1+0x1>
     602:	10 92 f3 02 	sts	0x02F3, r1	; 0x8002f3 <Q1+0x2>
     606:	10 92 f4 02 	sts	0x02F4, r1	; 0x8002f4 <Q1+0x3>
	_samplesReady = false;
     60a:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <_samplesReady>
     60e:	08 95       	ret

00000610 <_ZN8Goertzel18SetTargetFrequencyEf>:
{
	free(testData);
}

void Goertzel::SetTargetFrequency(float target_frequency)
{
     610:	8f 92       	push	r8
     612:	9f 92       	push	r9
     614:	af 92       	push	r10
     616:	bf 92       	push	r11
     618:	cf 92       	push	r12
     61a:	df 92       	push	r13
     61c:	ef 92       	push	r14
     61e:	ff 92       	push	r15
     620:	cf 93       	push	r28
     622:	df 93       	push	r29
     624:	ec 01       	movw	r28, r24
     626:	4a 01       	movw	r8, r20
     628:	5b 01       	movw	r10, r22
	float floatN = (float)_N;
     62a:	60 91 f9 02 	lds	r22, 0x02F9	; 0x8002f9 <_N>
     62e:	70 91 fa 02 	lds	r23, 0x02FA	; 0x8002fa <_N+0x1>
     632:	07 2e       	mov	r0, r23
     634:	00 0c       	add	r0, r0
     636:	88 0b       	sbc	r24, r24
     638:	99 0b       	sbc	r25, r25
     63a:	0e 94 21 26 	call	0x4c42	; 0x4c42 <__floatsisf>
     63e:	6b 01       	movw	r12, r22
     640:	7c 01       	movw	r14, r24

	_TARGET_FREQUENCY = target_frequency;   /*should be integer of SAMPLING_RATE/N */
     642:	80 92 fb 02 	sts	0x02FB, r8	; 0x8002fb <_TARGET_FREQUENCY>
     646:	90 92 fc 02 	sts	0x02FC, r9	; 0x8002fc <_TARGET_FREQUENCY+0x1>
     64a:	a0 92 fd 02 	sts	0x02FD, r10	; 0x8002fd <_TARGET_FREQUENCY+0x2>
     64e:	b0 92 fe 02 	sts	0x02FE, r11	; 0x8002fe <_TARGET_FREQUENCY+0x3>
	int k = (int)(0.5 + ((floatN * _TARGET_FREQUENCY) / _SAMPLING_FREQUENCY));
	float w = (2.0 * PI * k) / floatN;
	g_coeff = 2.0 * cos(w);
     652:	a5 01       	movw	r20, r10
     654:	94 01       	movw	r18, r8
     656:	0e 94 15 27 	call	0x4e2a	; 0x4e2a <__mulsf3>
     65a:	20 91 ff 02 	lds	r18, 0x02FF	; 0x8002ff <_SAMPLING_FREQUENCY>
     65e:	30 91 00 03 	lds	r19, 0x0300	; 0x800300 <_SAMPLING_FREQUENCY+0x1>
     662:	40 91 01 03 	lds	r20, 0x0301	; 0x800301 <_SAMPLING_FREQUENCY+0x2>
     666:	50 91 02 03 	lds	r21, 0x0302	; 0x800302 <_SAMPLING_FREQUENCY+0x3>
     66a:	0e 94 77 25 	call	0x4aee	; 0x4aee <__divsf3>
     66e:	20 e0       	ldi	r18, 0x00	; 0
     670:	30 e0       	ldi	r19, 0x00	; 0
     672:	40 e0       	ldi	r20, 0x00	; 0
     674:	5f e3       	ldi	r21, 0x3F	; 63
     676:	0e 94 01 25 	call	0x4a02	; 0x4a02 <__addsf3>
     67a:	0e 94 e9 25 	call	0x4bd2	; 0x4bd2 <__fixsfsi>
     67e:	07 2e       	mov	r0, r23
     680:	00 0c       	add	r0, r0
     682:	88 0b       	sbc	r24, r24
     684:	99 0b       	sbc	r25, r25
     686:	0e 94 21 26 	call	0x4c42	; 0x4c42 <__floatsisf>
     68a:	2b ed       	ldi	r18, 0xDB	; 219
     68c:	3f e0       	ldi	r19, 0x0F	; 15
     68e:	49 ec       	ldi	r20, 0xC9	; 201
     690:	50 e4       	ldi	r21, 0x40	; 64
     692:	0e 94 15 27 	call	0x4e2a	; 0x4e2a <__mulsf3>
     696:	a7 01       	movw	r20, r14
     698:	96 01       	movw	r18, r12
     69a:	0e 94 77 25 	call	0x4aee	; 0x4aee <__divsf3>
     69e:	0e 94 72 25 	call	0x4ae4	; 0x4ae4 <cos>
     6a2:	9b 01       	movw	r18, r22
     6a4:	ac 01       	movw	r20, r24
     6a6:	0e 94 01 25 	call	0x4a02	; 0x4a02 <__addsf3>
     6aa:	60 93 f5 02 	sts	0x02F5, r22	; 0x8002f5 <g_coeff>
     6ae:	70 93 f6 02 	sts	0x02F6, r23	; 0x8002f6 <g_coeff+0x1>
     6b2:	80 93 f7 02 	sts	0x02F7, r24	; 0x8002f7 <g_coeff+0x2>
     6b6:	90 93 f8 02 	sts	0x02F8, r25	; 0x8002f8 <g_coeff+0x3>
	ResetGoertzel();
     6ba:	ce 01       	movw	r24, r28
     6bc:	0e 94 f5 02 	call	0x5ea	; 0x5ea <_ZN8Goertzel13ResetGoertzelEv>
}
     6c0:	df 91       	pop	r29
     6c2:	cf 91       	pop	r28
     6c4:	ff 90       	pop	r15
     6c6:	ef 90       	pop	r14
     6c8:	df 90       	pop	r13
     6ca:	cf 90       	pop	r12
     6cc:	bf 90       	pop	r11
     6ce:	af 90       	pop	r10
     6d0:	9f 90       	pop	r9
     6d2:	8f 90       	pop	r8
     6d4:	08 95       	ret

000006d6 <_ZN8Goertzel13ProcessSampleEi>:
	_samplesReady = false;
}

/* Call this routine for every sample. */
void Goertzel::ProcessSample(int sample)
{
     6d6:	8f 92       	push	r8
     6d8:	9f 92       	push	r9
     6da:	af 92       	push	r10
     6dc:	bf 92       	push	r11
     6de:	cf 92       	push	r12
     6e0:	df 92       	push	r13
     6e2:	ef 92       	push	r14
     6e4:	ff 92       	push	r15
     6e6:	cf 93       	push	r28
     6e8:	df 93       	push	r29
     6ea:	eb 01       	movw	r28, r22
	float Q0 = g_coeff * Q1 - Q2 + (float)(sample - ADCCENTER);
     6ec:	c0 90 f1 02 	lds	r12, 0x02F1	; 0x8002f1 <Q1>
     6f0:	d0 90 f2 02 	lds	r13, 0x02F2	; 0x8002f2 <Q1+0x1>
     6f4:	e0 90 f3 02 	lds	r14, 0x02F3	; 0x8002f3 <Q1+0x2>
     6f8:	f0 90 f4 02 	lds	r15, 0x02F4	; 0x8002f4 <Q1+0x3>
     6fc:	20 91 f5 02 	lds	r18, 0x02F5	; 0x8002f5 <g_coeff>
     700:	30 91 f6 02 	lds	r19, 0x02F6	; 0x8002f6 <g_coeff+0x1>
     704:	40 91 f7 02 	lds	r20, 0x02F7	; 0x8002f7 <g_coeff+0x2>
     708:	50 91 f8 02 	lds	r21, 0x02F8	; 0x8002f8 <g_coeff+0x3>
     70c:	c7 01       	movw	r24, r14
     70e:	b6 01       	movw	r22, r12
     710:	0e 94 15 27 	call	0x4e2a	; 0x4e2a <__mulsf3>
     714:	20 91 ed 02 	lds	r18, 0x02ED	; 0x8002ed <Q2>
     718:	30 91 ee 02 	lds	r19, 0x02EE	; 0x8002ee <Q2+0x1>
     71c:	40 91 ef 02 	lds	r20, 0x02EF	; 0x8002ef <Q2+0x2>
     720:	50 91 f0 02 	lds	r21, 0x02F0	; 0x8002f0 <Q2+0x3>
     724:	0e 94 00 25 	call	0x4a00	; 0x4a00 <__subsf3>
     728:	4b 01       	movw	r8, r22
     72a:	5c 01       	movw	r10, r24
     72c:	be 01       	movw	r22, r28
     72e:	72 50       	subi	r23, 0x02	; 2
     730:	07 2e       	mov	r0, r23
     732:	00 0c       	add	r0, r0
     734:	88 0b       	sbc	r24, r24
     736:	99 0b       	sbc	r25, r25
     738:	0e 94 21 26 	call	0x4c42	; 0x4c42 <__floatsisf>
     73c:	9b 01       	movw	r18, r22
     73e:	ac 01       	movw	r20, r24
     740:	c5 01       	movw	r24, r10
     742:	b4 01       	movw	r22, r8
     744:	0e 94 01 25 	call	0x4a02	; 0x4a02 <__addsf3>

	Q2 = Q1;
     748:	c0 92 ed 02 	sts	0x02ED, r12	; 0x8002ed <Q2>
     74c:	d0 92 ee 02 	sts	0x02EE, r13	; 0x8002ee <Q2+0x1>
     750:	e0 92 ef 02 	sts	0x02EF, r14	; 0x8002ef <Q2+0x2>
     754:	f0 92 f0 02 	sts	0x02F0, r15	; 0x8002f0 <Q2+0x3>
	Q1 = Q0;
     758:	60 93 f1 02 	sts	0x02F1, r22	; 0x8002f1 <Q1>
     75c:	70 93 f2 02 	sts	0x02F2, r23	; 0x8002f2 <Q1+0x1>
     760:	80 93 f3 02 	sts	0x02F3, r24	; 0x8002f3 <Q1+0x2>
     764:	90 93 f4 02 	sts	0x02F4, r25	; 0x8002f4 <Q1+0x3>
}
     768:	df 91       	pop	r29
     76a:	cf 91       	pop	r28
     76c:	ff 90       	pop	r15
     76e:	ef 90       	pop	r14
     770:	df 90       	pop	r13
     772:	cf 90       	pop	r12
     774:	bf 90       	pop	r11
     776:	af 90       	pop	r10
     778:	9f 90       	pop	r9
     77a:	8f 90       	pop	r8
     77c:	08 95       	ret

0000077e <_ZN8Goertzel9DataPointEi>:

bool Goertzel::DataPoint(int data)
{
	if(_samplesReady)
     77e:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <_samplesReady>
     782:	81 11       	cpse	r24, r1
     784:	27 c0       	rjmp	.+78     	; 0x7d4 <_ZN8Goertzel9DataPointEi+0x56>
	{
		return(_samplesReady);
	}

	testData[_index] = data;
     786:	e0 91 eb 02 	lds	r30, 0x02EB	; 0x8002eb <_index>
     78a:	f0 91 ec 02 	lds	r31, 0x02EC	; 0x8002ec <_index+0x1>
     78e:	ee 0f       	add	r30, r30
     790:	ff 1f       	adc	r31, r31
     792:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <__data_end>
     796:	90 91 e9 02 	lds	r25, 0x02E9	; 0x8002e9 <__data_end+0x1>
     79a:	e8 0f       	add	r30, r24
     79c:	f9 1f       	adc	r31, r25
     79e:	71 83       	std	Z+1, r23	; 0x01
     7a0:	60 83       	st	Z, r22
	_index++;
     7a2:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <_index>
     7a6:	90 91 ec 02 	lds	r25, 0x02EC	; 0x8002ec <_index+0x1>
     7aa:	01 96       	adiw	r24, 0x01	; 1
     7ac:	90 93 ec 02 	sts	0x02EC, r25	; 0x8002ec <_index+0x1>
     7b0:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <_index>
	if(_index >= _N)
     7b4:	20 91 f9 02 	lds	r18, 0x02F9	; 0x8002f9 <_N>
     7b8:	30 91 fa 02 	lds	r19, 0x02FA	; 0x8002fa <_N+0x1>
     7bc:	82 17       	cp	r24, r18
     7be:	93 07       	cpc	r25, r19
     7c0:	3c f0       	brlt	.+14     	; 0x7d0 <_ZN8Goertzel9DataPointEi+0x52>
	{
		_index = 0;
     7c2:	10 92 ec 02 	sts	0x02EC, r1	; 0x8002ec <_index+0x1>
     7c6:	10 92 eb 02 	sts	0x02EB, r1	; 0x8002eb <_index>
		_samplesReady = true;
     7ca:	81 e0       	ldi	r24, 0x01	; 1
     7cc:	80 93 ea 02 	sts	0x02EA, r24	; 0x8002ea <_samplesReady>
	}

	return(_samplesReady);
     7d0:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <_samplesReady>
}
     7d4:	08 95       	ret

000007d6 <_ZN8Goertzel12SamplesReadyEv>:

bool Goertzel::SamplesReady(void)
{
	return(_samplesReady);
}
     7d6:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <_samplesReady>
     7da:	08 95       	ret

000007dc <_ZN8Goertzel10Magnitude2Ev>:

float Goertzel::Magnitude2()
{
     7dc:	4f 92       	push	r4
     7de:	5f 92       	push	r5
     7e0:	6f 92       	push	r6
     7e2:	7f 92       	push	r7
     7e4:	8f 92       	push	r8
     7e6:	9f 92       	push	r9
     7e8:	af 92       	push	r10
     7ea:	bf 92       	push	r11
     7ec:	cf 92       	push	r12
     7ee:	df 92       	push	r13
     7f0:	ef 92       	push	r14
     7f2:	ff 92       	push	r15
     7f4:	0f 93       	push	r16
     7f6:	1f 93       	push	r17
     7f8:	cf 93       	push	r28
     7fa:	df 93       	push	r29
     7fc:	8c 01       	movw	r16, r24
	float magnitude2;

	/* Process the samples. */
	for(int index = 0; index < _N; index++)
     7fe:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <_N>
     802:	90 91 fa 02 	lds	r25, 0x02FA	; 0x8002fa <_N+0x1>
     806:	18 16       	cp	r1, r24
     808:	19 06       	cpc	r1, r25
     80a:	c4 f4       	brge	.+48     	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
     80c:	c0 e0       	ldi	r28, 0x00	; 0
     80e:	d0 e0       	ldi	r29, 0x00	; 0
	{
		ProcessSample(testData[index]);
     810:	ce 01       	movw	r24, r28
     812:	88 0f       	add	r24, r24
     814:	99 1f       	adc	r25, r25
     816:	e0 91 e8 02 	lds	r30, 0x02E8	; 0x8002e8 <__data_end>
     81a:	f0 91 e9 02 	lds	r31, 0x02E9	; 0x8002e9 <__data_end+0x1>
     81e:	e8 0f       	add	r30, r24
     820:	f9 1f       	adc	r31, r25
     822:	60 81       	ld	r22, Z
     824:	71 81       	ldd	r23, Z+1	; 0x01
     826:	c8 01       	movw	r24, r16
     828:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <_ZN8Goertzel13ProcessSampleEi>
float Goertzel::Magnitude2()
{
	float magnitude2;

	/* Process the samples. */
	for(int index = 0; index < _N; index++)
     82c:	21 96       	adiw	r28, 0x01	; 1
     82e:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <_N>
     832:	90 91 fa 02 	lds	r25, 0x02FA	; 0x8002fa <_N+0x1>
     836:	c8 17       	cp	r28, r24
     838:	d9 07       	cpc	r29, r25
     83a:	54 f3       	brlt	.-44     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
	{
		ProcessSample(testData[index]);
	}

	magnitude2 = Q1 * Q1 + Q2 * Q2 - g_coeff * Q1 * Q2;
     83c:	80 90 f1 02 	lds	r8, 0x02F1	; 0x8002f1 <Q1>
     840:	90 90 f2 02 	lds	r9, 0x02F2	; 0x8002f2 <Q1+0x1>
     844:	a0 90 f3 02 	lds	r10, 0x02F3	; 0x8002f3 <Q1+0x2>
     848:	b0 90 f4 02 	lds	r11, 0x02F4	; 0x8002f4 <Q1+0x3>
     84c:	c0 90 ed 02 	lds	r12, 0x02ED	; 0x8002ed <Q2>
     850:	d0 90 ee 02 	lds	r13, 0x02EE	; 0x8002ee <Q2+0x1>
     854:	e0 90 ef 02 	lds	r14, 0x02EF	; 0x8002ef <Q2+0x2>
     858:	f0 90 f0 02 	lds	r15, 0x02F0	; 0x8002f0 <Q2+0x3>
     85c:	a5 01       	movw	r20, r10
     85e:	94 01       	movw	r18, r8
     860:	c5 01       	movw	r24, r10
     862:	b4 01       	movw	r22, r8
     864:	0e 94 15 27 	call	0x4e2a	; 0x4e2a <__mulsf3>
     868:	2b 01       	movw	r4, r22
     86a:	3c 01       	movw	r6, r24
     86c:	a7 01       	movw	r20, r14
     86e:	96 01       	movw	r18, r12
     870:	c7 01       	movw	r24, r14
     872:	b6 01       	movw	r22, r12
     874:	0e 94 15 27 	call	0x4e2a	; 0x4e2a <__mulsf3>
     878:	9b 01       	movw	r18, r22
     87a:	ac 01       	movw	r20, r24
     87c:	c3 01       	movw	r24, r6
     87e:	b2 01       	movw	r22, r4
     880:	0e 94 01 25 	call	0x4a02	; 0x4a02 <__addsf3>
     884:	2b 01       	movw	r4, r22
     886:	3c 01       	movw	r6, r24
     888:	20 91 f5 02 	lds	r18, 0x02F5	; 0x8002f5 <g_coeff>
     88c:	30 91 f6 02 	lds	r19, 0x02F6	; 0x8002f6 <g_coeff+0x1>
     890:	40 91 f7 02 	lds	r20, 0x02F7	; 0x8002f7 <g_coeff+0x2>
     894:	50 91 f8 02 	lds	r21, 0x02F8	; 0x8002f8 <g_coeff+0x3>
     898:	c5 01       	movw	r24, r10
     89a:	b4 01       	movw	r22, r8
     89c:	0e 94 15 27 	call	0x4e2a	; 0x4e2a <__mulsf3>
     8a0:	a7 01       	movw	r20, r14
     8a2:	96 01       	movw	r18, r12
     8a4:	0e 94 15 27 	call	0x4e2a	; 0x4e2a <__mulsf3>
     8a8:	9b 01       	movw	r18, r22
     8aa:	ac 01       	movw	r20, r24
     8ac:	c3 01       	movw	r24, r6
     8ae:	b2 01       	movw	r22, r4
     8b0:	0e 94 00 25 	call	0x4a00	; 0x4a00 <__subsf3>
     8b4:	6b 01       	movw	r12, r22
     8b6:	7c 01       	movw	r14, r24

	ResetGoertzel();
     8b8:	c8 01       	movw	r24, r16
     8ba:	0e 94 f5 02 	call	0x5ea	; 0x5ea <_ZN8Goertzel13ResetGoertzelEv>
	return( magnitude2);
}
     8be:	c7 01       	movw	r24, r14
     8c0:	b6 01       	movw	r22, r12
     8c2:	df 91       	pop	r29
     8c4:	cf 91       	pop	r28
     8c6:	1f 91       	pop	r17
     8c8:	0f 91       	pop	r16
     8ca:	ff 90       	pop	r15
     8cc:	ef 90       	pop	r14
     8ce:	df 90       	pop	r13
     8d0:	cf 90       	pop	r12
     8d2:	bf 90       	pop	r11
     8d4:	af 90       	pop	r10
     8d6:	9f 90       	pop	r9
     8d8:	8f 90       	pop	r8
     8da:	7f 90       	pop	r7
     8dc:	6f 90       	pop	r6
     8de:	5f 90       	pop	r5
     8e0:	4f 90       	pop	r4
     8e2:	08 95       	ret

000008e4 <_Z8i2c_initv>:
	}
#endif /* SUPPORT_I2C_CLEARBUS_FUNCTION */

void i2c_init(void)
{
	power_twi_enable();
     8e4:	e4 e6       	ldi	r30, 0x64	; 100
     8e6:	f0 e0       	ldi	r31, 0x00	; 0
     8e8:	80 81       	ld	r24, Z
     8ea:	8f 77       	andi	r24, 0x7F	; 127
     8ec:	80 83       	st	Z, r24

	/* set SCL to ~100 kHz for 8 MHz CPU clock */
	TWSR = 0;   /* Prescale /1 */
     8ee:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	TWBR = 0x25;
     8f2:	85 e2       	ldi	r24, 0x25	; 37
     8f4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>

	/* enable I2C */
	TWCR = _BV(TWEN);
     8f8:	84 e0       	ldi	r24, 0x04	; 4
     8fa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	g_i2c_not_timed_out = TRUE;
     8fe:	81 e0       	ldi	r24, 0x01	; 1
     900:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <g_i2c_not_timed_out>
     904:	08 95       	ret

00000906 <_Z9i2c_startv>:
#else
	void i2c_start(void)
#endif
{
#ifdef I2C_TIMEOUT_SUPPORT
		TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN);
     906:	84 ea       	ldi	r24, 0xA4	; 164
     908:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
     90c:	ec eb       	ldi	r30, 0xBC	; 188
     90e:	f0 e0       	ldi	r31, 0x00	; 0
     910:	80 81       	ld	r24, Z
     912:	88 23       	and	r24, r24
     914:	64 f0       	brlt	.+24     	; 0x92e <_Z9i2c_startv+0x28>
     916:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_i2c_not_timed_out>
     91a:	81 11       	cpse	r24, r1
     91c:	f9 cf       	rjmp	.-14     	; 0x910 <_Z9i2c_startv+0xa>
     91e:	07 c0       	rjmp	.+14     	; 0x92e <_Z9i2c_startv+0x28>
			;
		}

		if(!g_i2c_not_timed_out)    /* if timed out, reset the bus */
		{
			TWCR = (1 << TWINT) | (1 << TWSTO);
     920:	80 e9       	ldi	r24, 0x90	; 144
     922:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
			g_i2c_not_timed_out = TRUE;
     926:	81 e0       	ldi	r24, 0x01	; 1
     928:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <g_i2c_not_timed_out>
			return( TRUE);
     92c:	08 95       	ret
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
		{
			;
		}

		if(!g_i2c_not_timed_out)    /* if timed out, reset the bus */
     92e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_i2c_not_timed_out>
     932:	88 23       	and	r24, r24
     934:	a9 f3       	breq	.-22     	; 0x920 <_Z9i2c_startv+0x1a>
			TWCR = (1 << TWINT) | (1 << TWSTO);
			g_i2c_not_timed_out = TRUE;
			return( TRUE);
		}

		return( FALSE);
     936:	80 e0       	ldi	r24, 0x00	; 0
		while(!(TWCR & _BV(TWINT)))
		{
			;
		}
#endif
}
     938:	08 95       	ret

0000093a <_Z8i2c_stopv>:

void i2c_stop(void)
{
	TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
     93a:	84 e9       	ldi	r24, 0x94	; 148
     93c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     940:	08 95       	ret

00000942 <_Z17i2c_write_successhh>:
}

BOOL i2c_write_success(uint8_t data, uint8_t success)
{
#ifdef I2C_TIMEOUT_SUPPORT
		TWDR = data;
     942:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR = _BV(TWINT) | _BV(TWEN);
     946:	84 e8       	ldi	r24, 0x84	; 132
     948:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
     94c:	ec eb       	ldi	r30, 0xBC	; 188
     94e:	f0 e0       	ldi	r31, 0x00	; 0
     950:	80 81       	ld	r24, Z
     952:	88 23       	and	r24, r24
     954:	64 f0       	brlt	.+24     	; 0x96e <_Z17i2c_write_successhh+0x2c>
     956:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_i2c_not_timed_out>
     95a:	81 11       	cpse	r24, r1
     95c:	f9 cf       	rjmp	.-14     	; 0x950 <_Z17i2c_write_successhh+0xe>
     95e:	07 c0       	rjmp	.+14     	; 0x96e <_Z17i2c_write_successhh+0x2c>
		uint8_t stat = TW_STATUS;

		/* ignore timeout condition to ensure i2c_stop() gets sent */
		if(stat != success)
		{
			TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
     960:	84 e9       	ldi	r24, 0x94	; 148
     962:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
			g_i2c_not_timed_out = TRUE;
     966:	81 e0       	ldi	r24, 0x01	; 1
     968:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <g_i2c_not_timed_out>
			return(TRUE);
     96c:	08 95       	ret
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
		{
			;
		}

		uint8_t stat = TW_STATUS;
     96e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>

		/* ignore timeout condition to ensure i2c_stop() gets sent */
		if(stat != success)
     972:	88 7f       	andi	r24, 0xF8	; 248
     974:	86 13       	cpse	r24, r22
     976:	f4 cf       	rjmp	.-24     	; 0x960 <_Z17i2c_write_successhh+0x1e>
			TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
			g_i2c_not_timed_out = TRUE;
			return(TRUE);
		}

		return( FALSE);
     978:	80 e0       	ldi	r24, 0x00	; 0
			return(TRUE);
		}

		return(FALSE);
#endif
}
     97a:	08 95       	ret

0000097c <_Z12i2c_read_ackv>:

uint8_t i2c_read_ack(void)
{
#ifdef I2C_TIMEOUT_SUPPORT
		TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);
     97c:	84 ec       	ldi	r24, 0xC4	; 196
     97e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
     982:	ec eb       	ldi	r30, 0xBC	; 188
     984:	f0 e0       	ldi	r31, 0x00	; 0
     986:	80 81       	ld	r24, Z
     988:	88 23       	and	r24, r24
     98a:	24 f0       	brlt	.+8      	; 0x994 <_Z12i2c_read_ackv+0x18>
     98c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_i2c_not_timed_out>
     990:	81 11       	cpse	r24, r1
     992:	f9 cf       	rjmp	.-14     	; 0x986 <_Z12i2c_read_ackv+0xa>
		{
			;
		}

		return(TWDR);
     994:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
			;
		}

		return( TWDR);
#endif
}
     998:	08 95       	ret

0000099a <_Z13i2c_read_nackv>:

uint8_t i2c_read_nack(void)
{
#ifdef I2C_TIMEOUT_SUPPORT
		TWCR = _BV(TWINT) | _BV(TWEN);
     99a:	84 e8       	ldi	r24, 0x84	; 132
     99c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
     9a0:	ec eb       	ldi	r30, 0xBC	; 188
     9a2:	f0 e0       	ldi	r31, 0x00	; 0
     9a4:	80 81       	ld	r24, Z
     9a6:	88 23       	and	r24, r24
     9a8:	24 f0       	brlt	.+8      	; 0x9b2 <_Z13i2c_read_nackv+0x18>
     9aa:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_i2c_not_timed_out>
     9ae:	81 11       	cpse	r24, r1
     9b0:	f9 cf       	rjmp	.-14     	; 0x9a4 <_Z13i2c_read_nackv+0xa>
		{
			;
		}

		return( TWDR);
     9b2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
			;
		}

		return( TWDR);
#endif
}
     9b6:	08 95       	ret

000009b8 <_Z10i2c_statush>:

BOOL i2c_status(uint8_t status)
{
	if(TW_STATUS != status)
     9b8:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     9bc:	28 7f       	andi	r18, 0xF8	; 248
     9be:	30 e0       	ldi	r19, 0x00	; 0
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	28 17       	cp	r18, r24
     9c4:	39 07       	cpc	r19, r25
     9c6:	29 f0       	breq	.+10     	; 0x9d2 <_Z10i2c_statush+0x1a>
	{
		TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
     9c8:	84 e9       	ldi	r24, 0x94	; 148
     9ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		return(TRUE);
     9ce:	81 e0       	ldi	r24, 0x01	; 1
     9d0:	08 95       	ret
	}

	return(FALSE);
     9d2:	80 e0       	ldi	r24, 0x00	; 0
}
     9d4:	08 95       	ret

000009d6 <_Z16i2c_device_writehhPhh>:
#ifdef SELECTIVELY_DISABLE_OPTIMIZATION
	BOOL __attribute__((optimize("O0"))) i2c_device_write(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2write)
#else
	BOOL i2c_device_write(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2write)
#endif
{
     9d6:	cf 93       	push	r28
     9d8:	df 93       	push	r29
     9da:	00 d0       	rcall	.+0      	; 0x9dc <_Z16i2c_device_writehhPhh+0x6>
     9dc:	00 d0       	rcall	.+0      	; 0x9de <_Z16i2c_device_writehhPhh+0x8>
     9de:	00 d0       	rcall	.+0      	; 0x9e0 <_Z16i2c_device_writehhPhh+0xa>
     9e0:	cd b7       	in	r28, 0x3d	; 61
     9e2:	de b7       	in	r29, 0x3e	; 62
     9e4:	8a 83       	std	Y+2, r24	; 0x02
     9e6:	6b 83       	std	Y+3, r22	; 0x03
     9e8:	5d 83       	std	Y+5, r21	; 0x05
     9ea:	4c 83       	std	Y+4, r20	; 0x04
     9ec:	2e 83       	std	Y+6, r18	; 0x06
		#ifndef DEBUG_WITHOUT_I2C
		uint8_t index = 0;
     9ee:	19 82       	std	Y+1, r1	; 0x01

		i2c_start();
     9f0:	0e 94 83 04 	call	0x906	; 0x906 <_Z9i2c_startv>
		if(i2c_status(TW_START))
     9f4:	88 e0       	ldi	r24, 0x08	; 8
     9f6:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <_Z10i2c_statush>
     9fa:	98 2f       	mov	r25, r24
     9fc:	81 e0       	ldi	r24, 0x01	; 1
     9fe:	99 23       	and	r25, r25
     a00:	09 f4       	brne	.+2      	; 0xa04 <_Z16i2c_device_writehhPhh+0x2e>
     a02:	80 e0       	ldi	r24, 0x00	; 0
     a04:	88 23       	and	r24, r24
     a06:	11 f0       	breq	.+4      	; 0xa0c <_Z16i2c_device_writehhPhh+0x36>
		{
			return(TRUE);
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	3f c0       	rjmp	.+126    	; 0xa8a <_Z16i2c_device_writehhPhh+0xb4>
		}

		if(i2c_write_success(slaveAddr, TW_MT_SLA_ACK))
     a0c:	68 e1       	ldi	r22, 0x18	; 24
     a0e:	8a 81       	ldd	r24, Y+2	; 0x02
     a10:	0e 94 a1 04 	call	0x942	; 0x942 <_Z17i2c_write_successhh>
     a14:	98 2f       	mov	r25, r24
     a16:	81 e0       	ldi	r24, 0x01	; 1
     a18:	99 23       	and	r25, r25
     a1a:	09 f4       	brne	.+2      	; 0xa1e <_Z16i2c_device_writehhPhh+0x48>
     a1c:	80 e0       	ldi	r24, 0x00	; 0
     a1e:	88 23       	and	r24, r24
     a20:	11 f0       	breq	.+4      	; 0xa26 <_Z16i2c_device_writehhPhh+0x50>
		{
			return(TRUE);
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	32 c0       	rjmp	.+100    	; 0xa8a <_Z16i2c_device_writehhPhh+0xb4>
		}

		if(i2c_write_success(addr, TW_MT_DATA_ACK))
     a26:	68 e2       	ldi	r22, 0x28	; 40
     a28:	8b 81       	ldd	r24, Y+3	; 0x03
     a2a:	0e 94 a1 04 	call	0x942	; 0x942 <_Z17i2c_write_successhh>
     a2e:	98 2f       	mov	r25, r24
     a30:	81 e0       	ldi	r24, 0x01	; 1
     a32:	99 23       	and	r25, r25
     a34:	09 f4       	brne	.+2      	; 0xa38 <_Z16i2c_device_writehhPhh+0x62>
     a36:	80 e0       	ldi	r24, 0x00	; 0
     a38:	88 23       	and	r24, r24
     a3a:	11 f0       	breq	.+4      	; 0xa40 <_Z16i2c_device_writehhPhh+0x6a>
		{
			return(TRUE);
     a3c:	81 e0       	ldi	r24, 0x01	; 1
     a3e:	25 c0       	rjmp	.+74     	; 0xa8a <_Z16i2c_device_writehhPhh+0xb4>
		}

		while(bytes2write--)
     a40:	8e 81       	ldd	r24, Y+6	; 0x06
     a42:	9f ef       	ldi	r25, 0xFF	; 255
     a44:	98 0f       	add	r25, r24
     a46:	9e 83       	std	Y+6, r25	; 0x06
     a48:	91 e0       	ldi	r25, 0x01	; 1
     a4a:	88 23       	and	r24, r24
     a4c:	09 f4       	brne	.+2      	; 0xa50 <_Z16i2c_device_writehhPhh+0x7a>
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	99 23       	and	r25, r25
     a52:	c1 f0       	breq	.+48     	; 0xa84 <_Z16i2c_device_writehhPhh+0xae>
		{
			if(i2c_write_success(data[index++], TW_MT_DATA_ACK))
     a54:	89 81       	ldd	r24, Y+1	; 0x01
     a56:	91 e0       	ldi	r25, 0x01	; 1
     a58:	98 0f       	add	r25, r24
     a5a:	99 83       	std	Y+1, r25	; 0x01
     a5c:	88 2f       	mov	r24, r24
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	2c 81       	ldd	r18, Y+4	; 0x04
     a62:	3d 81       	ldd	r19, Y+5	; 0x05
     a64:	82 0f       	add	r24, r18
     a66:	93 1f       	adc	r25, r19
     a68:	fc 01       	movw	r30, r24
     a6a:	80 81       	ld	r24, Z
     a6c:	68 e2       	ldi	r22, 0x28	; 40
     a6e:	0e 94 a1 04 	call	0x942	; 0x942 <_Z17i2c_write_successhh>
     a72:	98 2f       	mov	r25, r24
     a74:	81 e0       	ldi	r24, 0x01	; 1
     a76:	99 23       	and	r25, r25
     a78:	09 f4       	brne	.+2      	; 0xa7c <_Z16i2c_device_writehhPhh+0xa6>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	88 23       	and	r24, r24
     a7e:	01 f3       	breq	.-64     	; 0xa40 <_Z16i2c_device_writehhPhh+0x6a>
			{
				return(TRUE);
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	03 c0       	rjmp	.+6      	; 0xa8a <_Z16i2c_device_writehhPhh+0xb4>
			}
		}

		i2c_stop();
     a84:	0e 94 9d 04 	call	0x93a	; 0x93a <_Z8i2c_stopv>

		#endif  /* #ifndef DEBUG_WITHOUT_I2C */

	return(FALSE);
     a88:	80 e0       	ldi	r24, 0x00	; 0
}
     a8a:	26 96       	adiw	r28, 0x06	; 6
     a8c:	0f b6       	in	r0, 0x3f	; 63
     a8e:	f8 94       	cli
     a90:	de bf       	out	0x3e, r29	; 62
     a92:	0f be       	out	0x3f, r0	; 63
     a94:	cd bf       	out	0x3d, r28	; 61
     a96:	df 91       	pop	r29
     a98:	cf 91       	pop	r28
     a9a:	08 95       	ret

00000a9c <_Z15i2c_device_readhhPhh>:
#ifdef SELECTIVELY_DISABLE_OPTIMIZATION
	BOOL __attribute__((optimize("O0"))) i2c_device_read(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2read)
#else
	BOOL i2c_device_read(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2read)
#endif
{
     a9c:	0f 93       	push	r16
     a9e:	1f 93       	push	r17
     aa0:	cf 93       	push	r28
     aa2:	df 93       	push	r29
     aa4:	00 d0       	rcall	.+0      	; 0xaa6 <_Z15i2c_device_readhhPhh+0xa>
     aa6:	00 d0       	rcall	.+0      	; 0xaa8 <_Z15i2c_device_readhhPhh+0xc>
     aa8:	00 d0       	rcall	.+0      	; 0xaaa <_Z15i2c_device_readhhPhh+0xe>
     aaa:	cd b7       	in	r28, 0x3d	; 61
     aac:	de b7       	in	r29, 0x3e	; 62
     aae:	8a 83       	std	Y+2, r24	; 0x02
     ab0:	6b 83       	std	Y+3, r22	; 0x03
     ab2:	5d 83       	std	Y+5, r21	; 0x05
     ab4:	4c 83       	std	Y+4, r20	; 0x04
     ab6:	2e 83       	std	Y+6, r18	; 0x06
		#ifndef DEBUG_WITHOUT_I2C
		uint8_t index = 0;
     ab8:	19 82       	std	Y+1, r1	; 0x01

		i2c_start();
     aba:	0e 94 83 04 	call	0x906	; 0x906 <_Z9i2c_startv>
		if(i2c_status(TW_START))
     abe:	88 e0       	ldi	r24, 0x08	; 8
     ac0:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <_Z10i2c_statush>
     ac4:	98 2f       	mov	r25, r24
     ac6:	81 e0       	ldi	r24, 0x01	; 1
     ac8:	99 23       	and	r25, r25
     aca:	09 f4       	brne	.+2      	; 0xace <_Z15i2c_device_readhhPhh+0x32>
     acc:	80 e0       	ldi	r24, 0x00	; 0
     ace:	88 23       	and	r24, r24
     ad0:	11 f0       	breq	.+4      	; 0xad6 <_Z15i2c_device_readhhPhh+0x3a>
		{
			return(TRUE);
     ad2:	81 e0       	ldi	r24, 0x01	; 1
     ad4:	79 c0       	rjmp	.+242    	; 0xbc8 <_Z15i2c_device_readhhPhh+0x12c>
		}

		if(i2c_write_success(slaveAddr, TW_MT_SLA_ACK))
     ad6:	68 e1       	ldi	r22, 0x18	; 24
     ad8:	8a 81       	ldd	r24, Y+2	; 0x02
     ada:	0e 94 a1 04 	call	0x942	; 0x942 <_Z17i2c_write_successhh>
     ade:	98 2f       	mov	r25, r24
     ae0:	81 e0       	ldi	r24, 0x01	; 1
     ae2:	99 23       	and	r25, r25
     ae4:	09 f4       	brne	.+2      	; 0xae8 <_Z15i2c_device_readhhPhh+0x4c>
     ae6:	80 e0       	ldi	r24, 0x00	; 0
     ae8:	88 23       	and	r24, r24
     aea:	11 f0       	breq	.+4      	; 0xaf0 <_Z15i2c_device_readhhPhh+0x54>
		{
			return(TRUE);
     aec:	81 e0       	ldi	r24, 0x01	; 1
     aee:	6c c0       	rjmp	.+216    	; 0xbc8 <_Z15i2c_device_readhhPhh+0x12c>
		}

		if(i2c_write_success(addr, TW_MT_DATA_ACK))
     af0:	68 e2       	ldi	r22, 0x28	; 40
     af2:	8b 81       	ldd	r24, Y+3	; 0x03
     af4:	0e 94 a1 04 	call	0x942	; 0x942 <_Z17i2c_write_successhh>
     af8:	98 2f       	mov	r25, r24
     afa:	81 e0       	ldi	r24, 0x01	; 1
     afc:	99 23       	and	r25, r25
     afe:	09 f4       	brne	.+2      	; 0xb02 <_Z15i2c_device_readhhPhh+0x66>
     b00:	80 e0       	ldi	r24, 0x00	; 0
     b02:	88 23       	and	r24, r24
     b04:	11 f0       	breq	.+4      	; 0xb0a <_Z15i2c_device_readhhPhh+0x6e>
		{
			return(TRUE);
     b06:	81 e0       	ldi	r24, 0x01	; 1
     b08:	5f c0       	rjmp	.+190    	; 0xbc8 <_Z15i2c_device_readhhPhh+0x12c>
		}

		i2c_start();
     b0a:	0e 94 83 04 	call	0x906	; 0x906 <_Z9i2c_startv>
		if(i2c_status(TW_REP_START))
     b0e:	80 e1       	ldi	r24, 0x10	; 16
     b10:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <_Z10i2c_statush>
     b14:	98 2f       	mov	r25, r24
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	99 23       	and	r25, r25
     b1a:	09 f4       	brne	.+2      	; 0xb1e <_Z15i2c_device_readhhPhh+0x82>
     b1c:	80 e0       	ldi	r24, 0x00	; 0
     b1e:	88 23       	and	r24, r24
     b20:	11 f0       	breq	.+4      	; 0xb26 <_Z15i2c_device_readhhPhh+0x8a>
		{
			return(TRUE);
     b22:	81 e0       	ldi	r24, 0x01	; 1
     b24:	51 c0       	rjmp	.+162    	; 0xbc8 <_Z15i2c_device_readhhPhh+0x12c>
		}

		if(i2c_write_success((slaveAddr | TW_READ), TW_MR_SLA_ACK))
     b26:	8a 81       	ldd	r24, Y+2	; 0x02
     b28:	81 60       	ori	r24, 0x01	; 1
     b2a:	60 e4       	ldi	r22, 0x40	; 64
     b2c:	0e 94 a1 04 	call	0x942	; 0x942 <_Z17i2c_write_successhh>
     b30:	98 2f       	mov	r25, r24
     b32:	81 e0       	ldi	r24, 0x01	; 1
     b34:	99 23       	and	r25, r25
     b36:	09 f4       	brne	.+2      	; 0xb3a <_Z15i2c_device_readhhPhh+0x9e>
     b38:	80 e0       	ldi	r24, 0x00	; 0
     b3a:	88 23       	and	r24, r24
     b3c:	11 f0       	breq	.+4      	; 0xb42 <_Z15i2c_device_readhhPhh+0xa6>
		{
			return(TRUE);
     b3e:	81 e0       	ldi	r24, 0x01	; 1
     b40:	43 c0       	rjmp	.+134    	; 0xbc8 <_Z15i2c_device_readhhPhh+0x12c>
		}

		while(bytes2read--)
     b42:	8e 81       	ldd	r24, Y+6	; 0x06
     b44:	9f ef       	ldi	r25, 0xFF	; 255
     b46:	98 0f       	add	r25, r24
     b48:	9e 83       	std	Y+6, r25	; 0x06
     b4a:	91 e0       	ldi	r25, 0x01	; 1
     b4c:	88 23       	and	r24, r24
     b4e:	09 f4       	brne	.+2      	; 0xb52 <_Z15i2c_device_readhhPhh+0xb6>
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	99 23       	and	r25, r25
     b54:	b1 f1       	breq	.+108    	; 0xbc2 <_Z15i2c_device_readhhPhh+0x126>
		{
			if(bytes2read)
     b56:	8e 81       	ldd	r24, Y+6	; 0x06
     b58:	88 23       	and	r24, r24
     b5a:	d9 f0       	breq	.+54     	; 0xb92 <_Z15i2c_device_readhhPhh+0xf6>
			{
				data[index++] = i2c_read_ack();
     b5c:	89 81       	ldd	r24, Y+1	; 0x01
     b5e:	91 e0       	ldi	r25, 0x01	; 1
     b60:	98 0f       	add	r25, r24
     b62:	99 83       	std	Y+1, r25	; 0x01
     b64:	88 2f       	mov	r24, r24
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	2c 81       	ldd	r18, Y+4	; 0x04
     b6a:	3d 81       	ldd	r19, Y+5	; 0x05
     b6c:	89 01       	movw	r16, r18
     b6e:	08 0f       	add	r16, r24
     b70:	19 1f       	adc	r17, r25
     b72:	0e 94 be 04 	call	0x97c	; 0x97c <_Z12i2c_read_ackv>
     b76:	f8 01       	movw	r30, r16
     b78:	80 83       	st	Z, r24
				if(i2c_status(TW_MR_DATA_ACK))
     b7a:	80 e5       	ldi	r24, 0x50	; 80
     b7c:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <_Z10i2c_statush>
     b80:	98 2f       	mov	r25, r24
     b82:	81 e0       	ldi	r24, 0x01	; 1
     b84:	99 23       	and	r25, r25
     b86:	09 f4       	brne	.+2      	; 0xb8a <_Z15i2c_device_readhhPhh+0xee>
     b88:	80 e0       	ldi	r24, 0x00	; 0
     b8a:	88 23       	and	r24, r24
     b8c:	d1 f2       	breq	.-76     	; 0xb42 <_Z15i2c_device_readhhPhh+0xa6>
				{
					return(TRUE);
     b8e:	81 e0       	ldi	r24, 0x01	; 1
     b90:	1b c0       	rjmp	.+54     	; 0xbc8 <_Z15i2c_device_readhhPhh+0x12c>
				}
			}
			else
			{
				data[index] = i2c_read_nack();
     b92:	89 81       	ldd	r24, Y+1	; 0x01
     b94:	88 2f       	mov	r24, r24
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	2c 81       	ldd	r18, Y+4	; 0x04
     b9a:	3d 81       	ldd	r19, Y+5	; 0x05
     b9c:	89 01       	movw	r16, r18
     b9e:	08 0f       	add	r16, r24
     ba0:	19 1f       	adc	r17, r25
     ba2:	0e 94 cd 04 	call	0x99a	; 0x99a <_Z13i2c_read_nackv>
     ba6:	f8 01       	movw	r30, r16
     ba8:	80 83       	st	Z, r24
				if(i2c_status(TW_MR_DATA_NACK))
     baa:	88 e5       	ldi	r24, 0x58	; 88
     bac:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <_Z10i2c_statush>
     bb0:	98 2f       	mov	r25, r24
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	99 23       	and	r25, r25
     bb6:	09 f4       	brne	.+2      	; 0xbba <_Z15i2c_device_readhhPhh+0x11e>
     bb8:	80 e0       	ldi	r24, 0x00	; 0
     bba:	88 23       	and	r24, r24
     bbc:	11 f2       	breq	.-124    	; 0xb42 <_Z15i2c_device_readhhPhh+0xa6>
				{
					return(TRUE);
     bbe:	81 e0       	ldi	r24, 0x01	; 1
     bc0:	03 c0       	rjmp	.+6      	; 0xbc8 <_Z15i2c_device_readhhPhh+0x12c>
				}
			}
		}

		i2c_stop();
     bc2:	0e 94 9d 04 	call	0x93a	; 0x93a <_Z8i2c_stopv>

		#endif  /* #ifndef DEBUG_WITHOUT_I2C */

	return(FALSE);
     bc6:	80 e0       	ldi	r24, 0x00	; 0
}
     bc8:	26 96       	adiw	r28, 0x06	; 6
     bca:	0f b6       	in	r0, 0x3f	; 63
     bcc:	f8 94       	cli
     bce:	de bf       	out	0x3e, r29	; 62
     bd0:	0f be       	out	0x3f, r0	; 63
     bd2:	cd bf       	out	0x3d, r28	; 61
     bd4:	df 91       	pop	r29
     bd6:	cf 91       	pop	r28
     bd8:	1f 91       	pop	r17
     bda:	0f 91       	pop	r16
     bdc:	08 95       	ret

00000bde <_Z16nextFullTxBufferv>:

void lb_send_value(uint16_t value, char* label)
{
	sprintf(g_tempMsgBuff, "> %s=%d%s", label, value, lineTerm);
	linkbus_send_text(g_tempMsgBuff);
}
     bde:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <_ZZ16nextFullTxBuffervE11bufferIndex>
     be2:	94 e0       	ldi	r25, 0x04	; 4
     be4:	59 e2       	ldi	r21, 0x29	; 41
     be6:	28 2f       	mov	r18, r24
     be8:	30 e0       	ldi	r19, 0x00	; 0
     bea:	52 9f       	mul	r21, r18
     bec:	f0 01       	movw	r30, r0
     bee:	53 9f       	mul	r21, r19
     bf0:	f0 0d       	add	r31, r0
     bf2:	11 24       	eor	r1, r1
     bf4:	eb 57       	subi	r30, 0x7B	; 123
     bf6:	fc 4f       	sbci	r31, 0xFC	; 252
     bf8:	40 81       	ld	r20, Z
     bfa:	41 11       	cpse	r20, r1
     bfc:	0c c0       	rjmp	.+24     	; 0xc16 <_Z16nextFullTxBufferv+0x38>
     bfe:	91 50       	subi	r25, 0x01	; 1
     c00:	29 f0       	breq	.+10     	; 0xc0c <_Z16nextFullTxBufferv+0x2e>
     c02:	8f 5f       	subi	r24, 0xFF	; 255
     c04:	84 30       	cpi	r24, 0x04	; 4
     c06:	78 f3       	brcs	.-34     	; 0xbe6 <_Z16nextFullTxBufferv+0x8>
     c08:	80 e0       	ldi	r24, 0x00	; 0
     c0a:	ed cf       	rjmp	.-38     	; 0xbe6 <_Z16nextFullTxBufferv+0x8>
     c0c:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <_ZZ16nextFullTxBuffervE11bufferIndex>
     c10:	80 e0       	ldi	r24, 0x00	; 0
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	08 95       	ret
     c16:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <_ZZ16nextFullTxBuffervE11bufferIndex>
     c1a:	49 e2       	ldi	r20, 0x29	; 41
     c1c:	42 9f       	mul	r20, r18
     c1e:	c0 01       	movw	r24, r0
     c20:	43 9f       	mul	r20, r19
     c22:	90 0d       	add	r25, r0
     c24:	11 24       	eor	r1, r1
     c26:	8b 57       	subi	r24, 0x7B	; 123
     c28:	9c 4f       	sbci	r25, 0xFC	; 252
     c2a:	08 95       	ret

00000c2c <_Z17nextEmptyTxBufferv>:
     c2c:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <_ZZ17nextEmptyTxBuffervE11bufferIndex>
     c30:	94 e0       	ldi	r25, 0x04	; 4
     c32:	59 e2       	ldi	r21, 0x29	; 41
     c34:	28 2f       	mov	r18, r24
     c36:	30 e0       	ldi	r19, 0x00	; 0
     c38:	52 9f       	mul	r21, r18
     c3a:	f0 01       	movw	r30, r0
     c3c:	53 9f       	mul	r21, r19
     c3e:	f0 0d       	add	r31, r0
     c40:	11 24       	eor	r1, r1
     c42:	eb 57       	subi	r30, 0x7B	; 123
     c44:	fc 4f       	sbci	r31, 0xFC	; 252
     c46:	40 81       	ld	r20, Z
     c48:	44 23       	and	r20, r20
     c4a:	61 f0       	breq	.+24     	; 0xc64 <_Z17nextEmptyTxBufferv+0x38>
     c4c:	91 50       	subi	r25, 0x01	; 1
     c4e:	29 f0       	breq	.+10     	; 0xc5a <_Z17nextEmptyTxBufferv+0x2e>
     c50:	8f 5f       	subi	r24, 0xFF	; 255
     c52:	84 30       	cpi	r24, 0x04	; 4
     c54:	78 f3       	brcs	.-34     	; 0xc34 <_Z17nextEmptyTxBufferv+0x8>
     c56:	80 e0       	ldi	r24, 0x00	; 0
     c58:	ed cf       	rjmp	.-38     	; 0xc34 <_Z17nextEmptyTxBufferv+0x8>
     c5a:	80 93 05 03 	sts	0x0305, r24	; 0x800305 <_ZZ17nextEmptyTxBuffervE11bufferIndex>
     c5e:	80 e0       	ldi	r24, 0x00	; 0
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	08 95       	ret
     c64:	80 93 05 03 	sts	0x0305, r24	; 0x800305 <_ZZ17nextEmptyTxBuffervE11bufferIndex>
     c68:	49 e2       	ldi	r20, 0x29	; 41
     c6a:	42 9f       	mul	r20, r18
     c6c:	c0 01       	movw	r24, r0
     c6e:	43 9f       	mul	r20, r19
     c70:	90 0d       	add	r25, r0
     c72:	11 24       	eor	r1, r1
     c74:	8b 57       	subi	r24, 0x7B	; 123
     c76:	9c 4f       	sbci	r25, 0xFC	; 252
     c78:	08 95       	ret

00000c7a <_Z17nextEmptyRxBufferv>:
     c7a:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <_ZZ17nextEmptyRxBuffervE11bufferIndex>
     c7e:	28 2f       	mov	r18, r24
     c80:	30 e0       	ldi	r19, 0x00	; 0
     c82:	9f e3       	ldi	r25, 0x3F	; 63
     c84:	89 9f       	mul	r24, r25
     c86:	f0 01       	movw	r30, r0
     c88:	11 24       	eor	r1, r1
     c8a:	e9 5f       	subi	r30, 0xF9	; 249
     c8c:	fc 4f       	sbci	r31, 0xFC	; 252
     c8e:	41 81       	ldd	r20, Z+1	; 0x01
     c90:	52 81       	ldd	r21, Z+2	; 0x02
     c92:	45 2b       	or	r20, r21
     c94:	a9 f0       	breq	.+42     	; 0xcc0 <_Z17nextEmptyRxBufferv+0x46>
     c96:	8f 5f       	subi	r24, 0xFF	; 255
     c98:	82 30       	cpi	r24, 0x02	; 2
     c9a:	08 f0       	brcs	.+2      	; 0xc9e <_Z17nextEmptyRxBufferv+0x24>
     c9c:	80 e0       	ldi	r24, 0x00	; 0
     c9e:	28 2f       	mov	r18, r24
     ca0:	30 e0       	ldi	r19, 0x00	; 0
     ca2:	9f e3       	ldi	r25, 0x3F	; 63
     ca4:	89 9f       	mul	r24, r25
     ca6:	f0 01       	movw	r30, r0
     ca8:	11 24       	eor	r1, r1
     caa:	e9 5f       	subi	r30, 0xF9	; 249
     cac:	fc 4f       	sbci	r31, 0xFC	; 252
     cae:	41 81       	ldd	r20, Z+1	; 0x01
     cb0:	52 81       	ldd	r21, Z+2	; 0x02
     cb2:	45 2b       	or	r20, r21
     cb4:	29 f0       	breq	.+10     	; 0xcc0 <_Z17nextEmptyRxBufferv+0x46>
     cb6:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <_ZZ17nextEmptyRxBuffervE11bufferIndex>
     cba:	80 e0       	ldi	r24, 0x00	; 0
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	08 95       	ret
     cc0:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <_ZZ17nextEmptyRxBuffervE11bufferIndex>
     cc4:	4f e3       	ldi	r20, 0x3F	; 63
     cc6:	42 9f       	mul	r20, r18
     cc8:	c0 01       	movw	r24, r0
     cca:	43 9f       	mul	r20, r19
     ccc:	90 0d       	add	r25, r0
     cce:	11 24       	eor	r1, r1
     cd0:	89 5f       	subi	r24, 0xF9	; 249
     cd2:	9c 4f       	sbci	r25, 0xFC	; 252
     cd4:	08 95       	ret

00000cd6 <_Z16nextFullRxBufferv>:
     cd6:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <_ZZ16nextFullRxBuffervE11bufferIndex>
     cda:	28 2f       	mov	r18, r24
     cdc:	30 e0       	ldi	r19, 0x00	; 0
     cde:	9f e3       	ldi	r25, 0x3F	; 63
     ce0:	89 9f       	mul	r24, r25
     ce2:	f0 01       	movw	r30, r0
     ce4:	11 24       	eor	r1, r1
     ce6:	e9 5f       	subi	r30, 0xF9	; 249
     ce8:	fc 4f       	sbci	r31, 0xFC	; 252
     cea:	41 81       	ldd	r20, Z+1	; 0x01
     cec:	52 81       	ldd	r21, Z+2	; 0x02
     cee:	45 2b       	or	r20, r21
     cf0:	a9 f4       	brne	.+42     	; 0xd1c <_Z16nextFullRxBufferv+0x46>
     cf2:	8f 5f       	subi	r24, 0xFF	; 255
     cf4:	82 30       	cpi	r24, 0x02	; 2
     cf6:	08 f0       	brcs	.+2      	; 0xcfa <_Z16nextFullRxBufferv+0x24>
     cf8:	80 e0       	ldi	r24, 0x00	; 0
     cfa:	28 2f       	mov	r18, r24
     cfc:	30 e0       	ldi	r19, 0x00	; 0
     cfe:	9f e3       	ldi	r25, 0x3F	; 63
     d00:	89 9f       	mul	r24, r25
     d02:	f0 01       	movw	r30, r0
     d04:	11 24       	eor	r1, r1
     d06:	e9 5f       	subi	r30, 0xF9	; 249
     d08:	fc 4f       	sbci	r31, 0xFC	; 252
     d0a:	41 81       	ldd	r20, Z+1	; 0x01
     d0c:	52 81       	ldd	r21, Z+2	; 0x02
     d0e:	45 2b       	or	r20, r21
     d10:	29 f4       	brne	.+10     	; 0xd1c <_Z16nextFullRxBufferv+0x46>
     d12:	80 93 03 03 	sts	0x0303, r24	; 0x800303 <_ZZ16nextFullRxBuffervE11bufferIndex>
     d16:	80 e0       	ldi	r24, 0x00	; 0
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	08 95       	ret
     d1c:	80 93 03 03 	sts	0x0303, r24	; 0x800303 <_ZZ16nextFullRxBuffervE11bufferIndex>
     d20:	4f e3       	ldi	r20, 0x3F	; 63
     d22:	42 9f       	mul	r20, r18
     d24:	c0 01       	movw	r24, r0
     d26:	43 9f       	mul	r20, r19
     d28:	90 0d       	add	r25, r0
     d2a:	11 24       	eor	r1, r1
     d2c:	89 5f       	subi	r24, 0xF9	; 249
     d2e:	9c 4f       	sbci	r25, 0xFC	; 252
     d30:	08 95       	ret

00000d32 <_Z19linkbusTxInProgressv>:
     d32:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <_ZL17linkbus_tx_active>
     d36:	08 95       	ret

00000d38 <_Z16linkbus_start_txv>:
     d38:	90 91 29 04 	lds	r25, 0x0429	; 0x800429 <_ZL17linkbus_tx_active>
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	91 11       	cpse	r25, r1
     d40:	80 e0       	ldi	r24, 0x00	; 0
     d42:	91 11       	cpse	r25, r1
     d44:	08 c0       	rjmp	.+16     	; 0xd56 <_Z16linkbus_start_txv+0x1e>
     d46:	91 e0       	ldi	r25, 0x01	; 1
     d48:	90 93 29 04 	sts	0x0429, r25	; 0x800429 <_ZL17linkbus_tx_active>
     d4c:	e1 ec       	ldi	r30, 0xC1	; 193
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	90 81       	ld	r25, Z
     d52:	90 62       	ori	r25, 0x20	; 32
     d54:	90 83       	st	Z, r25
     d56:	08 95       	ret

00000d58 <_Z14linkbus_end_txv>:
     d58:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <_ZL17linkbus_tx_active>
     d5c:	88 23       	and	r24, r24
     d5e:	39 f0       	breq	.+14     	; 0xd6e <_Z14linkbus_end_txv+0x16>
     d60:	e1 ec       	ldi	r30, 0xC1	; 193
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	80 81       	ld	r24, Z
     d66:	8f 7d       	andi	r24, 0xDF	; 223
     d68:	80 83       	st	Z, r24
     d6a:	10 92 29 04 	sts	0x0429, r1	; 0x800429 <_ZL17linkbus_tx_active>
     d6e:	08 95       	ret

00000d70 <_Z12linkbus_initm>:
     d70:	9b 01       	movw	r18, r22
     d72:	ac 01       	movw	r20, r24
     d74:	8e e7       	ldi	r24, 0x7E	; 126
     d76:	e7 e0       	ldi	r30, 0x07	; 7
     d78:	f3 e0       	ldi	r31, 0x03	; 3
     d7a:	df 01       	movw	r26, r30
     d7c:	1d 92       	st	X+, r1
     d7e:	8a 95       	dec	r24
     d80:	e9 f7       	brne	.-6      	; 0xd7c <_Z12linkbus_initm+0xc>
     d82:	e5 e8       	ldi	r30, 0x85	; 133
     d84:	f3 e0       	ldi	r31, 0x03	; 3
     d86:	10 82       	st	Z, r1
     d88:	11 a6       	std	Z+41, r1	; 0x29
     d8a:	10 92 d7 03 	sts	0x03D7, r1	; 0x8003d7 <_ZL9tx_buffer+0x52>
     d8e:	10 92 00 04 	sts	0x0400, r1	; 0x800400 <_ZL9tx_buffer+0x7b>
     d92:	60 e4       	ldi	r22, 0x40	; 64
     d94:	72 e4       	ldi	r23, 0x42	; 66
     d96:	8f e0       	ldi	r24, 0x0F	; 15
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	0e 94 42 28 	call	0x5084	; 0x5084 <__udivmodsi4>
     d9e:	21 50       	subi	r18, 0x01	; 1
     da0:	31 09       	sbc	r19, r1
     da2:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     da6:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
     daa:	88 e9       	ldi	r24, 0x98	; 152
     dac:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     db0:	8e e0       	ldi	r24, 0x0E	; 14
     db2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     db6:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <_ZL14g_bus_disabled>
     dba:	08 95       	ret

00000dbc <_Z17linkbus_send_textPc>:
     dbc:	0f 93       	push	r16
     dbe:	1f 93       	push	r17
     dc0:	cf 93       	push	r28
     dc2:	df 93       	push	r29
     dc4:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <_ZL14g_bus_disabled>
     dc8:	21 11       	cpse	r18, r1
     dca:	14 c0       	rjmp	.+40     	; 0xdf4 <_Z17linkbus_send_textPc+0x38>
     dcc:	00 97       	sbiw	r24, 0x00	; 0
     dce:	a1 f0       	breq	.+40     	; 0xdf8 <_Z17linkbus_send_textPc+0x3c>
     dd0:	8c 01       	movw	r16, r24
     dd2:	0e 94 16 06 	call	0xc2c	; 0xc2c <_Z17nextEmptyTxBufferv>
     dd6:	00 97       	sbiw	r24, 0x00	; 0
     dd8:	b9 f4       	brne	.+46     	; 0xe08 <_Z17linkbus_send_textPc+0x4c>
     dda:	c8 ec       	ldi	r28, 0xC8	; 200
     ddc:	d0 e0       	ldi	r29, 0x00	; 0
     dde:	02 c0       	rjmp	.+4      	; 0xde4 <_Z17linkbus_send_textPc+0x28>
     de0:	20 97       	sbiw	r28, 0x00	; 0
     de2:	61 f0       	breq	.+24     	; 0xdfc <_Z17linkbus_send_textPc+0x40>
     de4:	90 91 29 04 	lds	r25, 0x0429	; 0x800429 <_ZL17linkbus_tx_active>
     de8:	99 23       	and	r25, r25
     dea:	51 f0       	breq	.+20     	; 0xe00 <_Z17linkbus_send_textPc+0x44>
     dec:	20 97       	sbiw	r28, 0x00	; 0
     dee:	d1 f0       	breq	.+52     	; 0xe24 <_Z17linkbus_send_textPc+0x68>
     df0:	21 97       	sbiw	r28, 0x01	; 1
     df2:	f8 cf       	rjmp	.-16     	; 0xde4 <_Z17linkbus_send_textPc+0x28>
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	1b c0       	rjmp	.+54     	; 0xe2e <_Z17linkbus_send_textPc+0x72>
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	19 c0       	rjmp	.+50     	; 0xe2e <_Z17linkbus_send_textPc+0x72>
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	17 c0       	rjmp	.+46     	; 0xe2e <_Z17linkbus_send_textPc+0x72>
     e00:	0e 94 16 06 	call	0xc2c	; 0xc2c <_Z17nextEmptyTxBufferv>
     e04:	00 97       	sbiw	r24, 0x00	; 0
     e06:	61 f3       	breq	.-40     	; 0xde0 <_Z17linkbus_send_textPc+0x24>
     e08:	1f 93       	push	r17
     e0a:	0f 93       	push	r16
     e0c:	9f 93       	push	r25
     e0e:	8f 93       	push	r24
     e10:	0e 94 5e 2a 	call	0x54bc	; 0x54bc <sprintf>
     e14:	0e 94 9c 06 	call	0xd38	; 0xd38 <_Z16linkbus_start_txv>
     e18:	0f 90       	pop	r0
     e1a:	0f 90       	pop	r0
     e1c:	0f 90       	pop	r0
     e1e:	0f 90       	pop	r0
     e20:	80 e0       	ldi	r24, 0x00	; 0
     e22:	05 c0       	rjmp	.+10     	; 0xe2e <_Z17linkbus_send_textPc+0x72>
     e24:	0e 94 16 06 	call	0xc2c	; 0xc2c <_Z17nextEmptyTxBufferv>
     e28:	00 97       	sbiw	r24, 0x00	; 0
     e2a:	71 f7       	brne	.-36     	; 0xe08 <_Z17linkbus_send_textPc+0x4c>
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	df 91       	pop	r29
     e30:	cf 91       	pop	r28
     e32:	1f 91       	pop	r17
     e34:	0f 91       	pop	r16
     e36:	08 95       	ret

00000e38 <_Z17lb_send_NewPromptv>:
     e38:	83 e2       	ldi	r24, 0x23	; 35
     e3a:	91 e0       	ldi	r25, 0x01	; 1
     e3c:	0e 94 de 06 	call	0xdbc	; 0xdbc <_Z17linkbus_send_textPc>
     e40:	81 11       	cpse	r24, r1
     e42:	fa cf       	rjmp	.-12     	; 0xe38 <_Z17lb_send_NewPromptv>
     e44:	08 95       	ret

00000e46 <_Z15lb_send_NewLinev>:
     e46:	86 e2       	ldi	r24, 0x26	; 38
     e48:	91 e0       	ldi	r25, 0x01	; 1
     e4a:	0e 94 de 06 	call	0xdbc	; 0xdbc <_Z17linkbus_send_textPc>
     e4e:	08 95       	ret

00000e50 <_Z12lb_echo_charh>:
     e50:	ea e2       	ldi	r30, 0x2A	; 42
     e52:	f4 e0       	ldi	r31, 0x04	; 4
     e54:	80 83       	st	Z, r24
     e56:	11 82       	std	Z+1, r1	; 0x01
     e58:	cf 01       	movw	r24, r30
     e5a:	0e 94 de 06 	call	0xdbc	; 0xdbc <_Z17linkbus_send_textPc>
     e5e:	08 95       	ret

00000e60 <_Z14lb_send_stringPch>:
     e60:	cf 93       	push	r28
     e62:	00 97       	sbiw	r24, 0x00	; 0
     e64:	19 f1       	breq	.+70     	; 0xeac <_Z14lb_send_stringPch+0x4c>
     e66:	fc 01       	movw	r30, r24
     e68:	01 90       	ld	r0, Z+
     e6a:	00 20       	and	r0, r0
     e6c:	e9 f7       	brne	.-6      	; 0xe68 <_Z14lb_send_stringPch+0x8>
     e6e:	31 97       	sbiw	r30, 0x01	; 1
     e70:	e8 1b       	sub	r30, r24
     e72:	f9 0b       	sbc	r31, r25
     e74:	ba 97       	sbiw	r30, 0x2a	; 42
     e76:	e0 f4       	brcc	.+56     	; 0xeb0 <_Z14lb_send_stringPch+0x50>
     e78:	c6 2f       	mov	r28, r22
     e7a:	bc 01       	movw	r22, r24
     e7c:	49 e2       	ldi	r20, 0x29	; 41
     e7e:	50 e0       	ldi	r21, 0x00	; 0
     e80:	8a e2       	ldi	r24, 0x2A	; 42
     e82:	94 e0       	ldi	r25, 0x04	; 4
     e84:	0e 94 32 2a 	call	0x5464	; 0x5464 <strncpy>
     e88:	cc 23       	and	r28, r28
     e8a:	59 f0       	breq	.+22     	; 0xea2 <_Z14lb_send_stringPch+0x42>
     e8c:	8a e2       	ldi	r24, 0x2A	; 42
     e8e:	94 e0       	ldi	r25, 0x04	; 4
     e90:	0e 94 de 06 	call	0xdbc	; 0xdbc <_Z17linkbus_send_textPc>
     e94:	81 11       	cpse	r24, r1
     e96:	fa cf       	rjmp	.-12     	; 0xe8c <_Z14lb_send_stringPch+0x2c>
     e98:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <_ZL17linkbus_tx_active>
     e9c:	81 11       	cpse	r24, r1
     e9e:	fc cf       	rjmp	.-8      	; 0xe98 <_Z14lb_send_stringPch+0x38>
     ea0:	08 c0       	rjmp	.+16     	; 0xeb2 <_Z14lb_send_stringPch+0x52>
     ea2:	8a e2       	ldi	r24, 0x2A	; 42
     ea4:	94 e0       	ldi	r25, 0x04	; 4
     ea6:	0e 94 de 06 	call	0xdbc	; 0xdbc <_Z17linkbus_send_textPc>
     eaa:	03 c0       	rjmp	.+6      	; 0xeb2 <_Z14lb_send_stringPch+0x52>
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	01 c0       	rjmp	.+2      	; 0xeb2 <_Z14lb_send_stringPch+0x52>
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	cf 91       	pop	r28
     eb4:	08 95       	ret

00000eb6 <_Z12lb_send_Helpv>:
/***********************************************************************
 * lb_send_Help(void)
 ************************************************************************/
void lb_send_Help(void)
{
	if(g_bus_disabled)
     eb6:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <_ZL14g_bus_disabled>
     eba:	81 11       	cpse	r24, r1
     ebc:	0e c0       	rjmp	.+28     	; 0xeda <_Z12lb_send_Helpv+0x24>
	{
		return;
	}

	lb_send_NewLine();
     ebe:	0e 94 23 07 	call	0xe46	; 0xe46 <_Z15lb_send_NewLinev>
	sendEEPROMString(&ee_textVersion[0]);
     ec2:	8f ef       	ldi	r24, 0xFF	; 255
     ec4:	91 e0       	ldi	r25, 0x01	; 1
     ec6:	0e 94 82 02 	call	0x504	; 0x504 <_Z16sendEEPROMStringPc>
	sendEEPROMString(&ee_textHelp[0]);
     eca:	84 e0       	ldi	r24, 0x04	; 4
     ecc:	91 e0       	ldi	r25, 0x01	; 1
     ece:	0e 94 82 02 	call	0x504	; 0x504 <_Z16sendEEPROMStringPc>
	lb_send_NewLine();
     ed2:	0e 94 23 07 	call	0xe46	; 0xe46 <_Z15lb_send_NewLinev>
	lb_send_NewLine();
     ed6:	0e 94 23 07 	call	0xe46	; 0xe46 <_Z15lb_send_NewLinev>
     eda:	08 95       	ret

00000edc <__vector_21>:
		g_audio_tone_state = ON;
	}
	else
	{
		OCR0A = DEFAULT_TONE_FREQUENCY;
		g_audio_tone_state = OFF;
     edc:	1f 92       	push	r1
     ede:	0f 92       	push	r0
     ee0:	0f b6       	in	r0, 0x3f	; 63
     ee2:	0f 92       	push	r0
     ee4:	11 24       	eor	r1, r1
     ee6:	2f 93       	push	r18
     ee8:	3f 93       	push	r19
     eea:	4f 93       	push	r20
     eec:	5f 93       	push	r21
     eee:	6f 93       	push	r22
     ef0:	7f 93       	push	r23
     ef2:	8f 93       	push	r24
     ef4:	9f 93       	push	r25
     ef6:	af 93       	push	r26
     ef8:	bf 93       	push	r27
     efa:	ef 93       	push	r30
     efc:	ff 93       	push	r31
     efe:	61 e0       	ldi	r22, 0x01	; 1
     f00:	8b e0       	ldi	r24, 0x0B	; 11
     f02:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>
     f06:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     f0a:	70 e0       	ldi	r23, 0x00	; 0
     f0c:	8a ef       	ldi	r24, 0xFA	; 250
     f0e:	94 e0       	ldi	r25, 0x04	; 4
     f10:	0e 94 bf 03 	call	0x77e	; 0x77e <_ZN8Goertzel9DataPointEi>
     f14:	88 23       	and	r24, r24
     f16:	29 f0       	breq	.+10     	; 0xf22 <__vector_21+0x46>
     f18:	ea e7       	ldi	r30, 0x7A	; 122
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	87 7f       	andi	r24, 0xF7	; 247
     f20:	80 83       	st	Z, r24
     f22:	60 e0       	ldi	r22, 0x00	; 0
     f24:	8b e0       	ldi	r24, 0x0B	; 11
     f26:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>
     f2a:	ff 91       	pop	r31
     f2c:	ef 91       	pop	r30
     f2e:	bf 91       	pop	r27
     f30:	af 91       	pop	r26
     f32:	9f 91       	pop	r25
     f34:	8f 91       	pop	r24
     f36:	7f 91       	pop	r23
     f38:	6f 91       	pop	r22
     f3a:	5f 91       	pop	r21
     f3c:	4f 91       	pop	r20
     f3e:	3f 91       	pop	r19
     f40:	2f 91       	pop	r18
     f42:	0f 90       	pop	r0
     f44:	0f be       	out	0x3f, r0	; 63
     f46:	0f 90       	pop	r0
     f48:	1f 90       	pop	r1
     f4a:	18 95       	reti

00000f4c <__vector_18>:
     f4c:	1f 92       	push	r1
     f4e:	0f 92       	push	r0
     f50:	0f b6       	in	r0, 0x3f	; 63
     f52:	0f 92       	push	r0
     f54:	11 24       	eor	r1, r1
     f56:	1f 93       	push	r17
     f58:	2f 93       	push	r18
     f5a:	3f 93       	push	r19
     f5c:	4f 93       	push	r20
     f5e:	5f 93       	push	r21
     f60:	6f 93       	push	r22
     f62:	7f 93       	push	r23
     f64:	8f 93       	push	r24
     f66:	9f 93       	push	r25
     f68:	af 93       	push	r26
     f6a:	bf 93       	push	r27
     f6c:	cf 93       	push	r28
     f6e:	df 93       	push	r29
     f70:	ef 93       	push	r30
     f72:	ff 93       	push	r31
     f74:	10 91 c6 00 	lds	r17, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     f78:	c0 91 cf 04 	lds	r28, 0x04CF	; 0x8004cf <_ZZ11__vector_18E4buff>
     f7c:	d0 91 d0 04 	lds	r29, 0x04D0	; 0x8004d0 <_ZZ11__vector_18E4buff+0x1>
     f80:	20 97       	sbiw	r28, 0x00	; 0
     f82:	51 f4       	brne	.+20     	; 0xf98 <__vector_18+0x4c>
     f84:	0e 94 3d 06 	call	0xc7a	; 0xc7a <_Z17nextEmptyRxBufferv>
     f88:	ec 01       	movw	r28, r24
     f8a:	90 93 d0 04 	sts	0x04D0, r25	; 0x8004d0 <_ZZ11__vector_18E4buff+0x1>
     f8e:	80 93 cf 04 	sts	0x04CF, r24	; 0x8004cf <_ZZ11__vector_18E4buff>
     f92:	89 2b       	or	r24, r25
     f94:	09 f4       	brne	.+2      	; 0xf98 <__vector_18+0x4c>
     f96:	62 c1       	rjmp	.+708    	; 0x125c <__vector_18+0x310>
     f98:	81 2f       	mov	r24, r17
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	0e 94 18 2a 	call	0x5430	; 0x5430 <toupper>
     fa0:	9c 01       	movw	r18, r24
     fa2:	80 91 ce 04 	lds	r24, 0x04CE	; 0x8004ce <_ZZ11__vector_18E11ignoreCount>
     fa6:	88 23       	and	r24, r24
     fa8:	21 f0       	breq	.+8      	; 0xfb2 <__vector_18+0x66>
     faa:	81 50       	subi	r24, 0x01	; 1
     fac:	80 93 ce 04 	sts	0x04CE, r24	; 0x8004ce <_ZZ11__vector_18E11ignoreCount>
     fb0:	55 c1       	rjmp	.+682    	; 0x125c <__vector_18+0x310>
     fb2:	2b 31       	cpi	r18, 0x1B	; 27
     fb4:	21 f4       	brne	.+8      	; 0xfbe <__vector_18+0x72>
     fb6:	82 e0       	ldi	r24, 0x02	; 2
     fb8:	80 93 ce 04 	sts	0x04CE, r24	; 0x8004ce <_ZZ11__vector_18E11ignoreCount>
     fbc:	4f c1       	rjmp	.+670    	; 0x125c <__vector_18+0x310>
     fbe:	2d 30       	cpi	r18, 0x0D	; 13
     fc0:	09 f0       	breq	.+2      	; 0xfc4 <__vector_18+0x78>
     fc2:	3f c0       	rjmp	.+126    	; 0x1042 <__vector_18+0xf6>
     fc4:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <_ZZ11__vector_18E13receiving_msg>
     fc8:	88 23       	and	r24, r24
     fca:	31 f1       	breq	.+76     	; 0x1018 <__vector_18+0xcc>
     fcc:	e0 91 cd 04 	lds	r30, 0x04CD	; 0x8004cd <_ZZ11__vector_18E9charIndex>
     fd0:	ee 23       	and	r30, r30
     fd2:	f9 f0       	breq	.+62     	; 0x1012 <__vector_18+0xc6>
     fd4:	82 e0       	ldi	r24, 0x02	; 2
     fd6:	88 83       	st	Y, r24
     fd8:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <_ZZ11__vector_18E6msg_ID>
     fdc:	90 91 8c 04 	lds	r25, 0x048C	; 0x80048c <_ZZ11__vector_18E6msg_ID+0x1>
     fe0:	9a 83       	std	Y+2, r25	; 0x02
     fe2:	89 83       	std	Y+1, r24	; 0x01
     fe4:	80 91 8a 04 	lds	r24, 0x048A	; 0x80048a <_ZZ11__vector_18E11field_index>
     fe8:	88 23       	and	r24, r24
     fea:	79 f0       	breq	.+30     	; 0x100a <__vector_18+0xbe>
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	01 97       	sbiw	r24, 0x01	; 1
     ff0:	40 91 89 04 	lds	r20, 0x0489	; 0x800489 <_ZZ11__vector_18E9field_len>
     ff4:	54 e1       	ldi	r21, 0x14	; 20
     ff6:	58 9f       	mul	r21, r24
     ff8:	90 01       	movw	r18, r0
     ffa:	59 9f       	mul	r21, r25
     ffc:	30 0d       	add	r19, r0
     ffe:	11 24       	eor	r1, r1
    1000:	c2 0f       	add	r28, r18
    1002:	d3 1f       	adc	r29, r19
    1004:	c4 0f       	add	r28, r20
    1006:	d1 1d       	adc	r29, r1
    1008:	1b 82       	std	Y+3, r1	; 0x03
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	e2 57       	subi	r30, 0x72	; 114
    100e:	fb 4f       	sbci	r31, 0xFB	; 251
    1010:	10 82       	st	Z, r1
    1012:	0e 94 23 07 	call	0xe46	; 0xe46 <_Z15lb_send_NewLinev>
    1016:	04 c0       	rjmp	.+8      	; 0x1020 <__vector_18+0xd4>
    1018:	8f ef       	ldi	r24, 0xFF	; 255
    101a:	9f e7       	ldi	r25, 0x7F	; 127
    101c:	9a 83       	std	Y+2, r25	; 0x02
    101e:	89 83       	std	Y+1, r24	; 0x01
    1020:	10 92 cd 04 	sts	0x04CD, r1	; 0x8004cd <_ZZ11__vector_18E9charIndex>
    1024:	10 92 89 04 	sts	0x0489, r1	; 0x800489 <_ZZ11__vector_18E9field_len>
    1028:	10 92 8c 04 	sts	0x048C, r1	; 0x80048c <_ZZ11__vector_18E6msg_ID+0x1>
    102c:	10 92 8b 04 	sts	0x048B, r1	; 0x80048b <_ZZ11__vector_18E6msg_ID>
    1030:	10 92 8a 04 	sts	0x048A, r1	; 0x80048a <_ZZ11__vector_18E11field_index>
    1034:	10 92 d0 04 	sts	0x04D0, r1	; 0x8004d0 <_ZZ11__vector_18E4buff+0x1>
    1038:	10 92 cf 04 	sts	0x04CF, r1	; 0x8004cf <_ZZ11__vector_18E4buff>
    103c:	10 92 8d 04 	sts	0x048D, r1	; 0x80048d <_ZZ11__vector_18E13receiving_msg>
    1040:	0d c1       	rjmp	.+538    	; 0x125c <__vector_18+0x310>
    1042:	22 23       	and	r18, r18
    1044:	09 f4       	brne	.+2      	; 0x1048 <__vector_18+0xfc>
    1046:	0a c1       	rjmp	.+532    	; 0x125c <__vector_18+0x310>
    1048:	e0 91 cd 04 	lds	r30, 0x04CD	; 0x8004cd <_ZZ11__vector_18E9charIndex>
    104c:	4e 2f       	mov	r20, r30
    104e:	50 e0       	ldi	r21, 0x00	; 0
    1050:	da 01       	movw	r26, r20
    1052:	a2 57       	subi	r26, 0x72	; 114
    1054:	bb 4f       	sbci	r27, 0xFB	; 251
    1056:	2c 93       	st	X, r18
    1058:	ee 23       	and	r30, r30
    105a:	09 f4       	brne	.+2      	; 0x105e <__vector_18+0x112>
    105c:	d6 c0       	rjmp	.+428    	; 0x120a <__vector_18+0x2be>
    105e:	2f 37       	cpi	r18, 0x7F	; 127
    1060:	09 f0       	breq	.+2      	; 0x1064 <__vector_18+0x118>
    1062:	5f c0       	rjmp	.+190    	; 0x1122 <__vector_18+0x1d6>
    1064:	e1 50       	subi	r30, 0x01	; 1
    1066:	e0 93 cd 04 	sts	0x04CD, r30	; 0x8004cd <_ZZ11__vector_18E9charIndex>
    106a:	80 91 8a 04 	lds	r24, 0x048A	; 0x80048a <_ZZ11__vector_18E11field_index>
    106e:	81 11       	cpse	r24, r1
    1070:	13 c0       	rjmp	.+38     	; 0x1098 <__vector_18+0x14c>
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	e2 57       	subi	r30, 0x72	; 114
    1076:	fb 4f       	sbci	r31, 0xFB	; 251
    1078:	40 81       	ld	r20, Z
    107a:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <_ZZ11__vector_18E6msg_ID>
    107e:	90 91 8c 04 	lds	r25, 0x048C	; 0x80048c <_ZZ11__vector_18E6msg_ID+0x1>
    1082:	84 1b       	sub	r24, r20
    1084:	91 09       	sbc	r25, r1
    1086:	6a e0       	ldi	r22, 0x0A	; 10
    1088:	70 e0       	ldi	r23, 0x00	; 0
    108a:	0e 94 2e 28 	call	0x505c	; 0x505c <__divmodhi4>
    108e:	70 93 8c 04 	sts	0x048C, r23	; 0x80048c <_ZZ11__vector_18E6msg_ID+0x1>
    1092:	60 93 8b 04 	sts	0x048B, r22	; 0x80048b <_ZZ11__vector_18E6msg_ID>
    1096:	39 c0       	rjmp	.+114    	; 0x110a <__vector_18+0x1be>
    1098:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <_ZZ11__vector_18E9field_len>
    109c:	99 23       	and	r25, r25
    109e:	91 f0       	breq	.+36     	; 0x10c4 <__vector_18+0x178>
    10a0:	4f ef       	ldi	r20, 0xFF	; 255
    10a2:	49 0f       	add	r20, r25
    10a4:	40 93 89 04 	sts	0x0489, r20	; 0x800489 <_ZZ11__vector_18E9field_len>
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	01 97       	sbiw	r24, 0x01	; 1
    10ac:	54 e1       	ldi	r21, 0x14	; 20
    10ae:	58 9f       	mul	r21, r24
    10b0:	b0 01       	movw	r22, r0
    10b2:	59 9f       	mul	r21, r25
    10b4:	70 0d       	add	r23, r0
    10b6:	11 24       	eor	r1, r1
    10b8:	c6 0f       	add	r28, r22
    10ba:	d7 1f       	adc	r29, r23
    10bc:	c4 0f       	add	r28, r20
    10be:	d1 1d       	adc	r29, r1
    10c0:	1b 82       	std	Y+3, r1	; 0x03
    10c2:	23 c0       	rjmp	.+70     	; 0x110a <__vector_18+0x1be>
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	e2 57       	subi	r30, 0x72	; 114
    10c8:	fb 4f       	sbci	r31, 0xFB	; 251
    10ca:	90 81       	ld	r25, Z
    10cc:	90 32       	cpi	r25, 0x20	; 32
    10ce:	a1 f4       	brne	.+40     	; 0x10f8 <__vector_18+0x1ac>
    10d0:	81 50       	subi	r24, 0x01	; 1
    10d2:	80 93 8a 04 	sts	0x048A, r24	; 0x80048a <_ZZ11__vector_18E11field_index>
    10d6:	de 01       	movw	r26, r28
    10d8:	94 e1       	ldi	r25, 0x14	; 20
    10da:	89 9f       	mul	r24, r25
    10dc:	a0 0d       	add	r26, r0
    10de:	b1 1d       	adc	r27, r1
    10e0:	11 24       	eor	r1, r1
    10e2:	13 96       	adiw	r26, 0x03	; 3
    10e4:	fd 01       	movw	r30, r26
    10e6:	01 90       	ld	r0, Z+
    10e8:	00 20       	and	r0, r0
    10ea:	e9 f7       	brne	.-6      	; 0x10e6 <__vector_18+0x19a>
    10ec:	31 97       	sbiw	r30, 0x01	; 1
    10ee:	ea 1b       	sub	r30, r26
    10f0:	fb 0b       	sbc	r31, r27
    10f2:	e0 93 89 04 	sts	0x0489, r30	; 0x800489 <_ZZ11__vector_18E9field_len>
    10f6:	09 c0       	rjmp	.+18     	; 0x110a <__vector_18+0x1be>
    10f8:	94 e1       	ldi	r25, 0x14	; 20
    10fa:	89 9f       	mul	r24, r25
    10fc:	c0 0d       	add	r28, r0
    10fe:	d1 1d       	adc	r29, r1
    1100:	11 24       	eor	r1, r1
    1102:	1b 82       	std	Y+3, r1	; 0x03
    1104:	81 50       	subi	r24, 0x01	; 1
    1106:	80 93 8a 04 	sts	0x048A, r24	; 0x80048a <_ZZ11__vector_18E11field_index>
    110a:	80 91 cd 04 	lds	r24, 0x04CD	; 0x8004cd <_ZZ11__vector_18E9charIndex>
    110e:	e8 2f       	mov	r30, r24
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	e2 57       	subi	r30, 0x72	; 114
    1114:	fb 4f       	sbci	r31, 0xFB	; 251
    1116:	10 82       	st	Z, r1
    1118:	81 11       	cpse	r24, r1
    111a:	93 c0       	rjmp	.+294    	; 0x1242 <__vector_18+0x2f6>
    111c:	10 92 8d 04 	sts	0x048D, r1	; 0x80048d <_ZZ11__vector_18E13receiving_msg>
    1120:	90 c0       	rjmp	.+288    	; 0x1242 <__vector_18+0x2f6>
    1122:	20 32       	cpi	r18, 0x20	; 32
    1124:	79 f5       	brne	.+94     	; 0x1184 <__vector_18+0x238>
    1126:	fa 01       	movw	r30, r20
    1128:	e3 57       	subi	r30, 0x73	; 115
    112a:	fb 4f       	sbci	r31, 0xFB	; 251
    112c:	80 81       	ld	r24, Z
    112e:	80 32       	cpi	r24, 0x20	; 32
    1130:	09 f4       	brne	.+2      	; 0x1134 <__vector_18+0x1e8>
    1132:	94 c0       	rjmp	.+296    	; 0x125c <__vector_18+0x310>
    1134:	80 91 8a 04 	lds	r24, 0x048A	; 0x80048a <_ZZ11__vector_18E11field_index>
    1138:	68 2f       	mov	r22, r24
    113a:	70 e0       	ldi	r23, 0x00	; 0
    113c:	fb 01       	movw	r30, r22
    113e:	31 96       	adiw	r30, 0x01	; 1
    1140:	33 97       	sbiw	r30, 0x03	; 3
    1142:	0c f0       	brlt	.+2      	; 0x1146 <__vector_18+0x1fa>
    1144:	8b c0       	rjmp	.+278    	; 0x125c <__vector_18+0x310>
    1146:	88 23       	and	r24, r24
    1148:	79 f0       	breq	.+30     	; 0x1168 <__vector_18+0x21c>
    114a:	61 50       	subi	r22, 0x01	; 1
    114c:	71 09       	sbc	r23, r1
    114e:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <_ZZ11__vector_18E9field_len>
    1152:	a4 e1       	ldi	r26, 0x14	; 20
    1154:	a6 9f       	mul	r26, r22
    1156:	f0 01       	movw	r30, r0
    1158:	a7 9f       	mul	r26, r23
    115a:	f0 0d       	add	r31, r0
    115c:	11 24       	eor	r1, r1
    115e:	ce 0f       	add	r28, r30
    1160:	df 1f       	adc	r29, r31
    1162:	c9 0f       	add	r28, r25
    1164:	d1 1d       	adc	r29, r1
    1166:	1b 82       	std	Y+3, r1	; 0x03
    1168:	8f 5f       	subi	r24, 0xFF	; 255
    116a:	80 93 8a 04 	sts	0x048A, r24	; 0x80048a <_ZZ11__vector_18E11field_index>
    116e:	10 92 89 04 	sts	0x0489, r1	; 0x800489 <_ZZ11__vector_18E9field_len>
    1172:	4f 5f       	subi	r20, 0xFF	; 255
    1174:	5f 4f       	sbci	r21, 0xFF	; 255
    1176:	4e 33       	cpi	r20, 0x3E	; 62
    1178:	51 05       	cpc	r21, r1
    117a:	0c f0       	brlt	.+2      	; 0x117e <__vector_18+0x232>
    117c:	4e e3       	ldi	r20, 0x3E	; 62
    117e:	40 93 cd 04 	sts	0x04CD, r20	; 0x8004cd <_ZZ11__vector_18E9charIndex>
    1182:	5f c0       	rjmp	.+190    	; 0x1242 <__vector_18+0x2f6>
    1184:	80 91 89 04 	lds	r24, 0x0489	; 0x800489 <_ZZ11__vector_18E9field_len>
    1188:	84 31       	cpi	r24, 0x14	; 20
    118a:	08 f0       	brcs	.+2      	; 0x118e <__vector_18+0x242>
    118c:	67 c0       	rjmp	.+206    	; 0x125c <__vector_18+0x310>
    118e:	40 91 8a 04 	lds	r20, 0x048A	; 0x80048a <_ZZ11__vector_18E11field_index>
    1192:	41 11       	cpse	r20, r1
    1194:	19 c0       	rjmp	.+50     	; 0x11c8 <__vector_18+0x27c>
    1196:	40 91 8b 04 	lds	r20, 0x048B	; 0x80048b <_ZZ11__vector_18E6msg_ID>
    119a:	50 91 8c 04 	lds	r21, 0x048C	; 0x80048c <_ZZ11__vector_18E6msg_ID+0x1>
    119e:	ba 01       	movw	r22, r20
    11a0:	66 0f       	add	r22, r22
    11a2:	77 1f       	adc	r23, r23
    11a4:	44 0f       	add	r20, r20
    11a6:	55 1f       	adc	r21, r21
    11a8:	44 0f       	add	r20, r20
    11aa:	55 1f       	adc	r21, r21
    11ac:	44 0f       	add	r20, r20
    11ae:	55 1f       	adc	r21, r21
    11b0:	46 0f       	add	r20, r22
    11b2:	57 1f       	adc	r21, r23
    11b4:	42 0f       	add	r20, r18
    11b6:	51 1d       	adc	r21, r1
    11b8:	50 93 8c 04 	sts	0x048C, r21	; 0x80048c <_ZZ11__vector_18E6msg_ID+0x1>
    11bc:	40 93 8b 04 	sts	0x048B, r20	; 0x80048b <_ZZ11__vector_18E6msg_ID>
    11c0:	8f 5f       	subi	r24, 0xFF	; 255
    11c2:	80 93 89 04 	sts	0x0489, r24	; 0x800489 <_ZZ11__vector_18E9field_len>
    11c6:	16 c0       	rjmp	.+44     	; 0x11f4 <__vector_18+0x2a8>
    11c8:	50 e0       	ldi	r21, 0x00	; 0
    11ca:	41 50       	subi	r20, 0x01	; 1
    11cc:	51 09       	sbc	r21, r1
    11ce:	91 e0       	ldi	r25, 0x01	; 1
    11d0:	98 0f       	add	r25, r24
    11d2:	90 93 89 04 	sts	0x0489, r25	; 0x800489 <_ZZ11__vector_18E9field_len>
    11d6:	e4 e1       	ldi	r30, 0x14	; 20
    11d8:	e4 9f       	mul	r30, r20
    11da:	b0 01       	movw	r22, r0
    11dc:	e5 9f       	mul	r30, r21
    11de:	70 0d       	add	r23, r0
    11e0:	11 24       	eor	r1, r1
    11e2:	c6 0f       	add	r28, r22
    11e4:	d7 1f       	adc	r29, r23
    11e6:	fe 01       	movw	r30, r28
    11e8:	e8 0f       	add	r30, r24
    11ea:	f1 1d       	adc	r31, r1
    11ec:	23 83       	std	Z+3, r18	; 0x03
    11ee:	c9 0f       	add	r28, r25
    11f0:	d1 1d       	adc	r29, r1
    11f2:	1b 82       	std	Y+3, r1	; 0x03
    11f4:	80 91 cd 04 	lds	r24, 0x04CD	; 0x8004cd <_ZZ11__vector_18E9charIndex>
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	01 96       	adiw	r24, 0x01	; 1
    11fc:	8e 33       	cpi	r24, 0x3E	; 62
    11fe:	91 05       	cpc	r25, r1
    1200:	0c f0       	brlt	.+2      	; 0x1204 <__vector_18+0x2b8>
    1202:	8e e3       	ldi	r24, 0x3E	; 62
    1204:	80 93 cd 04 	sts	0x04CD, r24	; 0x8004cd <_ZZ11__vector_18E9charIndex>
    1208:	1c c0       	rjmp	.+56     	; 0x1242 <__vector_18+0x2f6>
    120a:	2f 37       	cpi	r18, 0x7F	; 127
    120c:	41 f4       	brne	.+16     	; 0x121e <__vector_18+0x2d2>
    120e:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <_ZZ11__vector_18E6msg_ID>
    1212:	90 91 8c 04 	lds	r25, 0x048C	; 0x80048c <_ZZ11__vector_18E6msg_ID+0x1>
    1216:	18 16       	cp	r1, r24
    1218:	19 06       	cpc	r1, r25
    121a:	bc f0       	brlt	.+46     	; 0x124a <__vector_18+0x2fe>
    121c:	1b c0       	rjmp	.+54     	; 0x1254 <__vector_18+0x308>
    121e:	20 32       	cpi	r18, 0x20	; 32
    1220:	e9 f0       	breq	.+58     	; 0x125c <__vector_18+0x310>
    1222:	10 92 8a 04 	sts	0x048A, r1	; 0x80048a <_ZZ11__vector_18E11field_index>
    1226:	c9 01       	movw	r24, r18
    1228:	99 27       	eor	r25, r25
    122a:	90 93 8c 04 	sts	0x048C, r25	; 0x80048c <_ZZ11__vector_18E6msg_ID+0x1>
    122e:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <_ZZ11__vector_18E6msg_ID>
    1232:	1b 82       	std	Y+3, r1	; 0x03
    1234:	1f 8a       	std	Y+23, r1	; 0x17
    1236:	1b a6       	std	Y+43, r1	; 0x2b
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	80 93 8d 04 	sts	0x048D, r24	; 0x80048d <_ZZ11__vector_18E13receiving_msg>
    123e:	80 93 cd 04 	sts	0x04CD, r24	; 0x8004cd <_ZZ11__vector_18E9charIndex>
    1242:	82 2f       	mov	r24, r18
    1244:	0e 94 28 07 	call	0xe50	; 0xe50 <_Z12lb_echo_charh>
    1248:	09 c0       	rjmp	.+18     	; 0x125c <__vector_18+0x310>
    124a:	10 92 8c 04 	sts	0x048C, r1	; 0x80048c <_ZZ11__vector_18E6msg_ID+0x1>
    124e:	10 92 8b 04 	sts	0x048B, r1	; 0x80048b <_ZZ11__vector_18E6msg_ID>
    1252:	f7 cf       	rjmp	.-18     	; 0x1242 <__vector_18+0x2f6>
    1254:	10 92 8c 04 	sts	0x048C, r1	; 0x80048c <_ZZ11__vector_18E6msg_ID+0x1>
    1258:	10 92 8b 04 	sts	0x048B, r1	; 0x80048b <_ZZ11__vector_18E6msg_ID>
    125c:	ff 91       	pop	r31
    125e:	ef 91       	pop	r30
    1260:	df 91       	pop	r29
    1262:	cf 91       	pop	r28
    1264:	bf 91       	pop	r27
    1266:	af 91       	pop	r26
    1268:	9f 91       	pop	r25
    126a:	8f 91       	pop	r24
    126c:	7f 91       	pop	r23
    126e:	6f 91       	pop	r22
    1270:	5f 91       	pop	r21
    1272:	4f 91       	pop	r20
    1274:	3f 91       	pop	r19
    1276:	2f 91       	pop	r18
    1278:	1f 91       	pop	r17
    127a:	0f 90       	pop	r0
    127c:	0f be       	out	0x3f, r0	; 63
    127e:	0f 90       	pop	r0
    1280:	1f 90       	pop	r1
    1282:	18 95       	reti

00001284 <__vector_19>:
    1284:	1f 92       	push	r1
    1286:	0f 92       	push	r0
    1288:	0f b6       	in	r0, 0x3f	; 63
    128a:	0f 92       	push	r0
    128c:	11 24       	eor	r1, r1
    128e:	2f 93       	push	r18
    1290:	3f 93       	push	r19
    1292:	4f 93       	push	r20
    1294:	5f 93       	push	r21
    1296:	6f 93       	push	r22
    1298:	7f 93       	push	r23
    129a:	8f 93       	push	r24
    129c:	9f 93       	push	r25
    129e:	af 93       	push	r26
    12a0:	bf 93       	push	r27
    12a2:	ef 93       	push	r30
    12a4:	ff 93       	push	r31
    12a6:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <_ZZ11__vector_19E4buff>
    12aa:	90 91 88 04 	lds	r25, 0x0488	; 0x800488 <_ZZ11__vector_19E4buff+0x1>
    12ae:	89 2b       	or	r24, r25
    12b0:	31 f4       	brne	.+12     	; 0x12be <__vector_19+0x3a>
    12b2:	0e 94 ef 05 	call	0xbde	; 0xbde <_Z16nextFullTxBufferv>
    12b6:	90 93 88 04 	sts	0x0488, r25	; 0x800488 <_ZZ11__vector_19E4buff+0x1>
    12ba:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <_ZZ11__vector_19E4buff>
    12be:	e0 91 87 04 	lds	r30, 0x0487	; 0x800487 <_ZZ11__vector_19E4buff>
    12c2:	f0 91 88 04 	lds	r31, 0x0488	; 0x800488 <_ZZ11__vector_19E4buff+0x1>
    12c6:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <_ZZ11__vector_19E9charIndex>
    12ca:	df 01       	movw	r26, r30
    12cc:	a8 0f       	add	r26, r24
    12ce:	b1 1d       	adc	r27, r1
    12d0:	9c 91       	ld	r25, X
    12d2:	99 23       	and	r25, r25
    12d4:	31 f0       	breq	.+12     	; 0x12e2 <__vector_19+0x5e>
    12d6:	8f 5f       	subi	r24, 0xFF	; 255
    12d8:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <_ZZ11__vector_19E9charIndex>
    12dc:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    12e0:	0d c0       	rjmp	.+26     	; 0x12fc <__vector_19+0x78>
    12e2:	10 92 86 04 	sts	0x0486, r1	; 0x800486 <_ZZ11__vector_19E9charIndex>
    12e6:	10 82       	st	Z, r1
    12e8:	0e 94 ef 05 	call	0xbde	; 0xbde <_Z16nextFullTxBufferv>
    12ec:	90 93 88 04 	sts	0x0488, r25	; 0x800488 <_ZZ11__vector_19E4buff+0x1>
    12f0:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <_ZZ11__vector_19E4buff>
    12f4:	89 2b       	or	r24, r25
    12f6:	11 f4       	brne	.+4      	; 0x12fc <__vector_19+0x78>
    12f8:	0e 94 ac 06 	call	0xd58	; 0xd58 <_Z14linkbus_end_txv>
    12fc:	ff 91       	pop	r31
    12fe:	ef 91       	pop	r30
    1300:	bf 91       	pop	r27
    1302:	af 91       	pop	r26
    1304:	9f 91       	pop	r25
    1306:	8f 91       	pop	r24
    1308:	7f 91       	pop	r23
    130a:	6f 91       	pop	r22
    130c:	5f 91       	pop	r21
    130e:	4f 91       	pop	r20
    1310:	3f 91       	pop	r19
    1312:	2f 91       	pop	r18
    1314:	0f 90       	pop	r0
    1316:	0f be       	out	0x3f, r0	; 63
    1318:	0f 90       	pop	r0
    131a:	1f 90       	pop	r1
    131c:	18 95       	reti

0000131e <__vector_14>:
    131e:	1f 92       	push	r1
    1320:	0f 92       	push	r0
    1322:	0f b6       	in	r0, 0x3f	; 63
    1324:	0f 92       	push	r0
    1326:	11 24       	eor	r1, r1
    1328:	2f 93       	push	r18
    132a:	3f 93       	push	r19
    132c:	4f 93       	push	r20
    132e:	5f 93       	push	r21
    1330:	6f 93       	push	r22
    1332:	7f 93       	push	r23
    1334:	8f 93       	push	r24
    1336:	9f 93       	push	r25
    1338:	af 93       	push	r26
    133a:	bf 93       	push	r27
    133c:	ef 93       	push	r30
    133e:	ff 93       	push	r31
    1340:	80 91 7b 04 	lds	r24, 0x047B	; 0x80047b <_ZZ11__vector_14E6toggle>
    1344:	91 e0       	ldi	r25, 0x01	; 1
    1346:	81 11       	cpse	r24, r1
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	90 93 7b 04 	sts	0x047B, r25	; 0x80047b <_ZZ11__vector_14E6toggle>
    134e:	90 91 3d 05 	lds	r25, 0x053D	; 0x80053d <g_audio_tone_state>
    1352:	99 23       	and	r25, r25
    1354:	61 f0       	breq	.+24     	; 0x136e <__vector_14+0x50>
    1356:	81 11       	cpse	r24, r1
    1358:	05 c0       	rjmp	.+10     	; 0x1364 <__vector_14+0x46>
    135a:	61 e0       	ldi	r22, 0x01	; 1
    135c:	89 e0       	ldi	r24, 0x09	; 9
    135e:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>
    1362:	09 c0       	rjmp	.+18     	; 0x1376 <__vector_14+0x58>
    1364:	60 e0       	ldi	r22, 0x00	; 0
    1366:	89 e0       	ldi	r24, 0x09	; 9
    1368:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>
    136c:	04 c0       	rjmp	.+8      	; 0x1376 <__vector_14+0x58>
    136e:	60 e0       	ldi	r22, 0x00	; 0
    1370:	89 e0       	ldi	r24, 0x09	; 9
    1372:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>
    1376:	ff 91       	pop	r31
    1378:	ef 91       	pop	r30
    137a:	bf 91       	pop	r27
    137c:	af 91       	pop	r26
    137e:	9f 91       	pop	r25
    1380:	8f 91       	pop	r24
    1382:	7f 91       	pop	r23
    1384:	6f 91       	pop	r22
    1386:	5f 91       	pop	r21
    1388:	4f 91       	pop	r20
    138a:	3f 91       	pop	r19
    138c:	2f 91       	pop	r18
    138e:	0f 90       	pop	r0
    1390:	0f be       	out	0x3f, r0	; 63
    1392:	0f 90       	pop	r0
    1394:	1f 90       	pop	r1
    1396:	18 95       	reti

00001398 <_Z23clockConfigurationErrorv>:
    1398:	0f 93       	push	r16
    139a:	1f 93       	push	r17
    139c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <g_transmissions_disabled>
    13a0:	88 23       	and	r24, r24
    13a2:	09 f4       	brne	.+2      	; 0x13a6 <_Z23clockConfigurationErrorv+0xe>
    13a4:	61 c0       	rjmp	.+194    	; 0x1468 <_Z23clockConfigurationErrorv+0xd0>
    13a6:	80 91 4a 05 	lds	r24, 0x054A	; 0x80054a <g_event_finish_epoch>
    13aa:	90 91 4b 05 	lds	r25, 0x054B	; 0x80054b <g_event_finish_epoch+0x1>
    13ae:	a0 91 4c 05 	lds	r26, 0x054C	; 0x80054c <g_event_finish_epoch+0x2>
    13b2:	b0 91 4d 05 	lds	r27, 0x054D	; 0x80054d <g_event_finish_epoch+0x3>
    13b6:	89 2b       	or	r24, r25
    13b8:	8a 2b       	or	r24, r26
    13ba:	8b 2b       	or	r24, r27
    13bc:	09 f4       	brne	.+2      	; 0x13c0 <_Z23clockConfigurationErrorv+0x28>
    13be:	4d c0       	rjmp	.+154    	; 0x145a <_Z23clockConfigurationErrorv+0xc2>
    13c0:	80 91 4a 05 	lds	r24, 0x054A	; 0x80054a <g_event_finish_epoch>
    13c4:	90 91 4b 05 	lds	r25, 0x054B	; 0x80054b <g_event_finish_epoch+0x1>
    13c8:	a0 91 4c 05 	lds	r26, 0x054C	; 0x80054c <g_event_finish_epoch+0x2>
    13cc:	b0 91 4d 05 	lds	r27, 0x054D	; 0x80054d <g_event_finish_epoch+0x3>
    13d0:	89 2b       	or	r24, r25
    13d2:	8a 2b       	or	r24, r26
    13d4:	8b 2b       	or	r24, r27
    13d6:	09 f4       	brne	.+2      	; 0x13da <_Z23clockConfigurationErrorv+0x42>
    13d8:	42 c0       	rjmp	.+132    	; 0x145e <_Z23clockConfigurationErrorv+0xc6>
    13da:	80 91 52 05 	lds	r24, 0x0552	; 0x800552 <g_current_epoch>
    13de:	90 91 53 05 	lds	r25, 0x0553	; 0x800553 <g_current_epoch+0x1>
    13e2:	a0 91 54 05 	lds	r26, 0x0554	; 0x800554 <g_current_epoch+0x2>
    13e6:	b0 91 55 05 	lds	r27, 0x0555	; 0x800555 <g_current_epoch+0x3>
    13ea:	81 15       	cp	r24, r1
    13ec:	96 46       	sbci	r25, 0x66	; 102
    13ee:	ae 4e       	sbci	r26, 0xEE	; 238
    13f0:	bf 45       	sbci	r27, 0x5F	; 95
    13f2:	b8 f1       	brcs	.+110    	; 0x1462 <_Z23clockConfigurationErrorv+0xca>
    13f4:	40 91 4a 05 	lds	r20, 0x054A	; 0x80054a <g_event_finish_epoch>
    13f8:	50 91 4b 05 	lds	r21, 0x054B	; 0x80054b <g_event_finish_epoch+0x1>
    13fc:	60 91 4c 05 	lds	r22, 0x054C	; 0x80054c <g_event_finish_epoch+0x2>
    1400:	70 91 4d 05 	lds	r23, 0x054D	; 0x80054d <g_event_finish_epoch+0x3>
    1404:	80 91 4e 05 	lds	r24, 0x054E	; 0x80054e <g_event_start_epoch>
    1408:	90 91 4f 05 	lds	r25, 0x054F	; 0x80054f <g_event_start_epoch+0x1>
    140c:	a0 91 50 05 	lds	r26, 0x0550	; 0x800550 <g_event_start_epoch+0x2>
    1410:	b0 91 51 05 	lds	r27, 0x0551	; 0x800551 <g_event_start_epoch+0x3>
    1414:	84 17       	cp	r24, r20
    1416:	95 07       	cpc	r25, r21
    1418:	a6 07       	cpc	r26, r22
    141a:	b7 07       	cpc	r27, r23
    141c:	20 f5       	brcc	.+72     	; 0x1466 <_Z23clockConfigurationErrorv+0xce>
    141e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <g_transmissions_disabled>
    1422:	88 23       	and	r24, r24
    1424:	c1 f0       	breq	.+48     	; 0x1456 <_Z23clockConfigurationErrorv+0xbe>
    1426:	00 91 52 05 	lds	r16, 0x0552	; 0x800552 <g_current_epoch>
    142a:	10 91 53 05 	lds	r17, 0x0553	; 0x800553 <g_current_epoch+0x1>
    142e:	20 91 54 05 	lds	r18, 0x0554	; 0x800554 <g_current_epoch+0x2>
    1432:	30 91 55 05 	lds	r19, 0x0555	; 0x800555 <g_current_epoch+0x3>
    1436:	40 91 4a 05 	lds	r20, 0x054A	; 0x80054a <g_event_finish_epoch>
    143a:	50 91 4b 05 	lds	r21, 0x054B	; 0x80054b <g_event_finish_epoch+0x1>
    143e:	60 91 4c 05 	lds	r22, 0x054C	; 0x80054c <g_event_finish_epoch+0x2>
    1442:	70 91 4d 05 	lds	r23, 0x054D	; 0x80054d <g_event_finish_epoch+0x3>
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	40 17       	cp	r20, r16
    144a:	51 07       	cpc	r21, r17
    144c:	62 07       	cpc	r22, r18
    144e:	73 07       	cpc	r23, r19
    1450:	58 f0       	brcs	.+22     	; 0x1468 <_Z23clockConfigurationErrorv+0xd0>
    1452:	80 e0       	ldi	r24, 0x00	; 0
    1454:	09 c0       	rjmp	.+18     	; 0x1468 <_Z23clockConfigurationErrorv+0xd0>
    1456:	80 e0       	ldi	r24, 0x00	; 0
    1458:	07 c0       	rjmp	.+14     	; 0x1468 <_Z23clockConfigurationErrorv+0xd0>
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	05 c0       	rjmp	.+10     	; 0x1468 <_Z23clockConfigurationErrorv+0xd0>
    145e:	81 e0       	ldi	r24, 0x01	; 1
    1460:	03 c0       	rjmp	.+6      	; 0x1468 <_Z23clockConfigurationErrorv+0xd0>
    1462:	81 e0       	ldi	r24, 0x01	; 1
    1464:	01 c0       	rjmp	.+2      	; 0x1468 <_Z23clockConfigurationErrorv+0xd0>
    1466:	81 e0       	ldi	r24, 0x01	; 1
    1468:	1f 91       	pop	r17
    146a:	0f 91       	pop	r16
    146c:	08 95       	ret

0000146e <_Z13sendMorseToneh>:
    146e:	90 91 3c 05 	lds	r25, 0x053C	; 0x80053c <g_lastSeconds>
    1472:	91 11       	cpse	r25, r1
    1474:	0a c0       	rjmp	.+20     	; 0x148a <_Z13sendMorseToneh+0x1c>
    1476:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <g_fox_tone_offset>
    147a:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <g_fox_tone_offset+0x1>
    147e:	9f e2       	ldi	r25, 0x2F	; 47
    1480:	92 1b       	sub	r25, r18
    1482:	97 bd       	out	0x27, r25	; 39
    1484:	80 93 3d 05 	sts	0x053D, r24	; 0x80053d <g_audio_tone_state>
    1488:	08 95       	ret
    148a:	8f e2       	ldi	r24, 0x2F	; 47
    148c:	87 bd       	out	0x27, r24	; 39
    148e:	10 92 3d 05 	sts	0x053D, r1	; 0x80053d <g_audio_tone_state>
    1492:	08 95       	ret

00001494 <__vector_8>:
    1494:	1f 92       	push	r1
    1496:	0f 92       	push	r0
    1498:	0f b6       	in	r0, 0x3f	; 63
    149a:	0f 92       	push	r0
    149c:	11 24       	eor	r1, r1
    149e:	2f 93       	push	r18
    14a0:	3f 93       	push	r19
    14a2:	4f 93       	push	r20
    14a4:	5f 93       	push	r21
    14a6:	6f 93       	push	r22
    14a8:	7f 93       	push	r23
    14aa:	8f 93       	push	r24
    14ac:	9f 93       	push	r25
    14ae:	af 93       	push	r26
    14b0:	bf 93       	push	r27
    14b2:	ef 93       	push	r30
    14b4:	ff 93       	push	r31
    14b6:	cf 93       	push	r28
    14b8:	df 93       	push	r29
    14ba:	00 d0       	rcall	.+0      	; 0x14bc <__vector_8+0x28>
    14bc:	cd b7       	in	r28, 0x3d	; 61
    14be:	de b7       	in	r29, 0x3e	; 62
    14c0:	80 91 fb 04 	lds	r24, 0x04FB	; 0x8004fb <g_tick_count>
    14c4:	90 91 fc 04 	lds	r25, 0x04FC	; 0x8004fc <g_tick_count+0x1>
    14c8:	a0 91 fd 04 	lds	r26, 0x04FD	; 0x8004fd <g_tick_count+0x2>
    14cc:	b0 91 fe 04 	lds	r27, 0x04FE	; 0x8004fe <g_tick_count+0x3>
    14d0:	01 96       	adiw	r24, 0x01	; 1
    14d2:	a1 1d       	adc	r26, r1
    14d4:	b1 1d       	adc	r27, r1
    14d6:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <g_tick_count>
    14da:	90 93 fc 04 	sts	0x04FC, r25	; 0x8004fc <g_tick_count+0x1>
    14de:	a0 93 fd 04 	sts	0x04FD, r26	; 0x8004fd <g_tick_count+0x2>
    14e2:	b0 93 fe 04 	sts	0x04FE, r27	; 0x8004fe <g_tick_count+0x3>
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	89 83       	std	Y+1, r24	; 0x01
    14ea:	1a 82       	std	Y+2, r1	; 0x02
    14ec:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <g_sync_enabled>
    14f0:	88 23       	and	r24, r24
    14f2:	19 f1       	breq	.+70     	; 0x153a <__vector_8+0xa6>
    14f4:	84 e0       	ldi	r24, 0x04	; 4
    14f6:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_Z11digitalReadh>
    14fa:	81 11       	cpse	r24, r1
    14fc:	1e c0       	rjmp	.+60     	; 0x153a <__vector_8+0xa6>
    14fe:	80 91 3a 05 	lds	r24, 0x053A	; 0x80053a <g_sync_pin_timer>
    1502:	90 91 3b 05 	lds	r25, 0x053B	; 0x80053b <g_sync_pin_timer+0x1>
    1506:	8b 3b       	cpi	r24, 0xBB	; 187
    1508:	90 41       	sbci	r25, 0x10	; 16
    150a:	4c f4       	brge	.+18     	; 0x151e <__vector_8+0x8a>
    150c:	80 91 3a 05 	lds	r24, 0x053A	; 0x80053a <g_sync_pin_timer>
    1510:	90 91 3b 05 	lds	r25, 0x053B	; 0x80053b <g_sync_pin_timer+0x1>
    1514:	01 96       	adiw	r24, 0x01	; 1
    1516:	90 93 3b 05 	sts	0x053B, r25	; 0x80053b <g_sync_pin_timer+0x1>
    151a:	80 93 3a 05 	sts	0x053A, r24	; 0x80053a <g_sync_pin_timer>
    151e:	80 91 3a 05 	lds	r24, 0x053A	; 0x80053a <g_sync_pin_timer>
    1522:	90 91 3b 05 	lds	r25, 0x053B	; 0x80053b <g_sync_pin_timer+0x1>
    1526:	85 39       	cpi	r24, 0x95	; 149
    1528:	95 40       	sbci	r25, 0x05	; 5
    152a:	3c f0       	brlt	.+14     	; 0x153a <__vector_8+0xa6>
    152c:	81 e0       	ldi	r24, 0x01	; 1
    152e:	80 93 39 05 	sts	0x0539, r24	; 0x800539 <g_sync_pin_stable>
    1532:	61 e0       	ldi	r22, 0x01	; 1
    1534:	87 e0       	ldi	r24, 0x07	; 7
    1536:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>
    153a:	80 91 38 05 	lds	r24, 0x0538	; 0x800538 <g_dtmf_detected>
    153e:	81 11       	cpse	r24, r1
    1540:	04 c0       	rjmp	.+8      	; 0x154a <__vector_8+0xb6>
    1542:	80 91 36 05 	lds	r24, 0x0536	; 0x800536 <g_config_error>
    1546:	88 23       	and	r24, r24
    1548:	c1 f0       	breq	.+48     	; 0x157a <__vector_8+0xe6>
    154a:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <_ZZ10__vector_8E13blink_counter>
    154e:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <_ZZ10__vector_8E13blink_counter+0x1>
    1552:	22 3e       	cpi	r18, 0xE2	; 226
    1554:	8f ef       	ldi	r24, 0xFF	; 255
    1556:	38 07       	cpc	r19, r24
    1558:	34 f4       	brge	.+12     	; 0x1566 <__vector_8+0xd2>
    155a:	81 e0       	ldi	r24, 0x01	; 1
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <_ZZ10__vector_8E21blink_count_direction+0x1>
    1562:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <_ZZ10__vector_8E21blink_count_direction>
    1566:	2f 31       	cpi	r18, 0x1F	; 31
    1568:	31 05       	cpc	r19, r1
    156a:	a4 f0       	brlt	.+40     	; 0x1594 <__vector_8+0x100>
    156c:	8f ef       	ldi	r24, 0xFF	; 255
    156e:	9f ef       	ldi	r25, 0xFF	; 255
    1570:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <_ZZ10__vector_8E21blink_count_direction+0x1>
    1574:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <_ZZ10__vector_8E21blink_count_direction>
    1578:	0d c0       	rjmp	.+26     	; 0x1594 <__vector_8+0x100>
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <_ZZ10__vector_8E21blink_count_direction+0x1>
    1582:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <_ZZ10__vector_8E21blink_count_direction>
    1586:	8f e1       	ldi	r24, 0x1F	; 31
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <_ZZ10__vector_8E13blink_counter+0x1>
    158e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <_ZZ10__vector_8E13blink_counter>
    1592:	10 c0       	rjmp	.+32     	; 0x15b4 <__vector_8+0x120>
    1594:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <_ZZ10__vector_8E21blink_count_direction>
    1598:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <_ZZ10__vector_8E21blink_count_direction+0x1>
    159c:	82 0f       	add	r24, r18
    159e:	93 1f       	adc	r25, r19
    15a0:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <_ZZ10__vector_8E13blink_counter+0x1>
    15a4:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <_ZZ10__vector_8E13blink_counter>
    15a8:	99 23       	and	r25, r25
    15aa:	24 f4       	brge	.+8      	; 0x15b4 <__vector_8+0x120>
    15ac:	81 e0       	ldi	r24, 0x01	; 1
    15ae:	80 93 56 05 	sts	0x0556, r24	; 0x800556 <g_blinky_time>
    15b2:	02 c0       	rjmp	.+4      	; 0x15b8 <__vector_8+0x124>
    15b4:	10 92 56 05 	sts	0x0556, r1	; 0x800556 <g_blinky_time>
    15b8:	80 91 d1 04 	lds	r24, 0x04D1	; 0x8004d1 <_ZL16g_LEDs_Timed_Out>
    15bc:	81 11       	cpse	r24, r1
    15be:	24 c0       	rjmp	.+72     	; 0x1608 <__vector_8+0x174>
    15c0:	80 91 39 05 	lds	r24, 0x0539	; 0x800539 <g_sync_pin_stable>
    15c4:	88 23       	and	r24, r24
    15c6:	09 f4       	brne	.+2      	; 0x15ca <__vector_8+0x136>
    15c8:	05 c1       	rjmp	.+522    	; 0x17d4 <__vector_8+0x340>
    15ca:	1e c0       	rjmp	.+60     	; 0x1608 <__vector_8+0x174>
    15cc:	80 91 56 05 	lds	r24, 0x0556	; 0x800556 <g_blinky_time>
    15d0:	88 23       	and	r24, r24
    15d2:	29 f0       	breq	.+10     	; 0x15de <__vector_8+0x14a>
    15d4:	60 e0       	ldi	r22, 0x00	; 0
    15d6:	8d e0       	ldi	r24, 0x0D	; 13
    15d8:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>
    15dc:	04 c0       	rjmp	.+8      	; 0x15e6 <__vector_8+0x152>
    15de:	61 e0       	ldi	r22, 0x01	; 1
    15e0:	8d e0       	ldi	r24, 0x0D	; 13
    15e2:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>
    15e6:	80 91 36 05 	lds	r24, 0x0536	; 0x800536 <g_config_error>
    15ea:	88 23       	and	r24, r24
    15ec:	69 f0       	breq	.+26     	; 0x1608 <__vector_8+0x174>
    15ee:	80 91 56 05 	lds	r24, 0x0556	; 0x800556 <g_blinky_time>
    15f2:	88 23       	and	r24, r24
    15f4:	29 f0       	breq	.+10     	; 0x1600 <__vector_8+0x16c>
    15f6:	60 e0       	ldi	r22, 0x00	; 0
    15f8:	87 e0       	ldi	r24, 0x07	; 7
    15fa:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>
    15fe:	04 c0       	rjmp	.+8      	; 0x1608 <__vector_8+0x174>
    1600:	61 e0       	ldi	r22, 0x01	; 1
    1602:	87 e0       	ldi	r24, 0x07	; 7
    1604:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>
    1608:	80 91 07 05 	lds	r24, 0x0507	; 0x800507 <_ZL20g_enable_start_timer>
    160c:	88 23       	and	r24, r24
    160e:	09 f4       	brne	.+2      	; 0x1612 <__vector_8+0x17e>
    1610:	58 c0       	rjmp	.+176    	; 0x16c2 <__vector_8+0x22e>
    1612:	80 91 3c 05 	lds	r24, 0x053C	; 0x80053c <g_lastSeconds>
    1616:	90 91 85 04 	lds	r25, 0x0485	; 0x800485 <_ZZ10__vector_8E14hold_last10sec>
    161a:	98 17       	cp	r25, r24
    161c:	b1 f0       	breq	.+44     	; 0x164a <__vector_8+0x1b6>
    161e:	80 91 3c 05 	lds	r24, 0x053C	; 0x80053c <g_lastSeconds>
    1622:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <_ZZ10__vector_8E14hold_last10sec>
    1626:	88 23       	and	r24, r24
    1628:	49 f0       	breq	.+18     	; 0x163c <__vector_8+0x1a8>
    162a:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <_ZZ10__vector_8E9playMorse>
    162e:	83 e6       	ldi	r24, 0x63	; 99
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	90 93 84 04 	sts	0x0484, r25	; 0x800484 <_ZZ10__vector_8E13starting_blip+0x1>
    1636:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <_ZZ10__vector_8E13starting_blip>
    163a:	14 c0       	rjmp	.+40     	; 0x1664 <__vector_8+0x1d0>
    163c:	10 92 84 04 	sts	0x0484, r1	; 0x800484 <_ZZ10__vector_8E13starting_blip+0x1>
    1640:	10 92 83 04 	sts	0x0483, r1	; 0x800483 <_ZZ10__vector_8E13starting_blip>
    1644:	87 e2       	ldi	r24, 0x27	; 39
    1646:	9b e0       	ldi	r25, 0x0B	; 11
    1648:	28 c0       	rjmp	.+80     	; 0x169a <__vector_8+0x206>
    164a:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <_ZZ10__vector_8E13starting_blip>
    164e:	90 91 84 04 	lds	r25, 0x0484	; 0x800484 <_ZZ10__vector_8E13starting_blip+0x1>
    1652:	00 97       	sbiw	r24, 0x00	; 0
    1654:	e1 f0       	breq	.+56     	; 0x168e <__vector_8+0x1fa>
    1656:	01 97       	sbiw	r24, 0x01	; 1
    1658:	90 93 84 04 	sts	0x0484, r25	; 0x800484 <_ZZ10__vector_8E13starting_blip+0x1>
    165c:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <_ZZ10__vector_8E13starting_blip>
    1660:	89 2b       	or	r24, r25
    1662:	81 f0       	breq	.+32     	; 0x1684 <__vector_8+0x1f0>
    1664:	80 91 3c 05 	lds	r24, 0x053C	; 0x80053c <g_lastSeconds>
    1668:	86 30       	cpi	r24, 0x06	; 6
    166a:	30 f0       	brcs	.+12     	; 0x1678 <__vector_8+0x1e4>
    166c:	8f e3       	ldi	r24, 0x3F	; 63
    166e:	87 bd       	out	0x27, r24	; 39
    1670:	81 e0       	ldi	r24, 0x01	; 1
    1672:	80 93 3d 05 	sts	0x053D, r24	; 0x80053d <g_audio_tone_state>
    1676:	25 c0       	rjmp	.+74     	; 0x16c2 <__vector_8+0x22e>
    1678:	8f e1       	ldi	r24, 0x1F	; 31
    167a:	87 bd       	out	0x27, r24	; 39
    167c:	81 e0       	ldi	r24, 0x01	; 1
    167e:	80 93 3d 05 	sts	0x053D, r24	; 0x80053d <g_audio_tone_state>
    1682:	1f c0       	rjmp	.+62     	; 0x16c2 <__vector_8+0x22e>
    1684:	8f e2       	ldi	r24, 0x2F	; 47
    1686:	87 bd       	out	0x27, r24	; 39
    1688:	10 92 3d 05 	sts	0x053D, r1	; 0x80053d <g_audio_tone_state>
    168c:	1a c0       	rjmp	.+52     	; 0x16c2 <__vector_8+0x22e>
    168e:	80 91 81 04 	lds	r24, 0x0481	; 0x800481 <_ZZ10__vector_8E13starting_boop>
    1692:	90 91 82 04 	lds	r25, 0x0482	; 0x800482 <_ZZ10__vector_8E13starting_boop+0x1>
    1696:	00 97       	sbiw	r24, 0x00	; 0
    1698:	a1 f0       	breq	.+40     	; 0x16c2 <__vector_8+0x22e>
    169a:	01 97       	sbiw	r24, 0x01	; 1
    169c:	90 93 82 04 	sts	0x0482, r25	; 0x800482 <_ZZ10__vector_8E13starting_boop+0x1>
    16a0:	80 93 81 04 	sts	0x0481, r24	; 0x800481 <_ZZ10__vector_8E13starting_boop>
    16a4:	89 2b       	or	r24, r25
    16a6:	41 f4       	brne	.+16     	; 0x16b8 <__vector_8+0x224>
    16a8:	8f e2       	ldi	r24, 0x2F	; 47
    16aa:	87 bd       	out	0x27, r24	; 39
    16ac:	10 92 3d 05 	sts	0x053D, r1	; 0x80053d <g_audio_tone_state>
    16b0:	81 e0       	ldi	r24, 0x01	; 1
    16b2:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <_ZZ10__vector_8E9playMorse>
    16b6:	05 c0       	rjmp	.+10     	; 0x16c2 <__vector_8+0x22e>
    16b8:	8f e4       	ldi	r24, 0x4F	; 79
    16ba:	87 bd       	out	0x27, r24	; 39
    16bc:	81 e0       	ldi	r24, 0x01	; 1
    16be:	80 93 3d 05 	sts	0x053D, r24	; 0x80053d <g_audio_tone_state>
    16c2:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <g_transmissions_disabled>
    16c6:	81 11       	cpse	r24, r1
    16c8:	92 c0       	rjmp	.+292    	; 0x17ee <__vector_8+0x35a>
    16ca:	80 91 5a 05 	lds	r24, 0x055A	; 0x80055a <g_on_the_air>
    16ce:	90 91 5b 05 	lds	r25, 0x055B	; 0x80055b <g_on_the_air+0x1>
    16d2:	89 2b       	or	r24, r25
    16d4:	09 f0       	breq	.+2      	; 0x16d8 <__vector_8+0x244>
    16d6:	83 c0       	rjmp	.+262    	; 0x17de <__vector_8+0x34a>
    16d8:	8a c0       	rjmp	.+276    	; 0x17ee <__vector_8+0x35a>
    16da:	01 97       	sbiw	r24, 0x01	; 1
    16dc:	90 93 80 04 	sts	0x0480, r25	; 0x800480 <_ZZ10__vector_8E7codeInc+0x1>
    16e0:	80 93 7f 04 	sts	0x047F, r24	; 0x80047f <_ZZ10__vector_8E7codeInc>
    16e4:	89 2b       	or	r24, r25
    16e6:	09 f0       	breq	.+2      	; 0x16ea <__vector_8+0x256>
    16e8:	8d c0       	rjmp	.+282    	; 0x1804 <__vector_8+0x370>
    16ea:	ae 01       	movw	r20, r28
    16ec:	4e 5f       	subi	r20, 0xFE	; 254
    16ee:	5f 4f       	sbci	r21, 0xFF	; 255
    16f0:	be 01       	movw	r22, r28
    16f2:	6f 5f       	subi	r22, 0xFF	; 255
    16f4:	7f 4f       	sbci	r23, 0xFF	; 255
    16f6:	80 e0       	ldi	r24, 0x00	; 0
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	0e 94 00 21 	call	0x4200	; 0x4200 <_Z9makeMorsePcPhS0_>
    16fe:	80 93 7e 04 	sts	0x047E, r24	; 0x80047e <_ZZ10__vector_8E3key>
    1702:	99 81       	ldd	r25, Y+1	; 0x01
    1704:	91 11       	cpse	r25, r1
    1706:	11 c0       	rjmp	.+34     	; 0x172a <__vector_8+0x296>
    1708:	9a 81       	ldd	r25, Y+2	; 0x02
    170a:	99 23       	and	r25, r25
    170c:	71 f0       	breq	.+28     	; 0x172a <__vector_8+0x296>
    170e:	10 92 7e 04 	sts	0x047E, r1	; 0x80047e <_ZZ10__vector_8E3key>
    1712:	81 e0       	ldi	r24, 0x01	; 1
    1714:	80 93 57 05 	sts	0x0557, r24	; 0x800557 <g_callsign_sent>
    1718:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <_ZZ10__vector_8E9playMorse>
    171c:	88 23       	and	r24, r24
    171e:	09 f4       	brne	.+2      	; 0x1722 <__vector_8+0x28e>
    1720:	71 c0       	rjmp	.+226    	; 0x1804 <__vector_8+0x370>
    1722:	80 e0       	ldi	r24, 0x00	; 0
    1724:	0e 94 37 0a 	call	0x146e	; 0x146e <_Z13sendMorseToneh>
    1728:	17 c0       	rjmp	.+46     	; 0x1758 <__vector_8+0x2c4>
    172a:	88 23       	and	r24, r24
    172c:	81 f0       	breq	.+32     	; 0x174e <__vector_8+0x2ba>
    172e:	80 91 d1 04 	lds	r24, 0x04D1	; 0x8004d1 <_ZL16g_LEDs_Timed_Out>
    1732:	81 11       	cpse	r24, r1
    1734:	04 c0       	rjmp	.+8      	; 0x173e <__vector_8+0x2aa>
    1736:	61 e0       	ldi	r22, 0x01	; 1
    1738:	87 e0       	ldi	r24, 0x07	; 7
    173a:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>
    173e:	80 91 06 05 	lds	r24, 0x0506	; 0x800506 <_ZL20g_enable_transmitter>
    1742:	88 23       	and	r24, r24
    1744:	21 f0       	breq	.+8      	; 0x174e <__vector_8+0x2ba>
    1746:	61 e0       	ldi	r22, 0x01	; 1
    1748:	8a e0       	ldi	r24, 0x0A	; 10
    174a:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>
    174e:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <_ZZ10__vector_8E9playMorse>
    1752:	88 23       	and	r24, r24
    1754:	09 f4       	brne	.+2      	; 0x1758 <__vector_8+0x2c4>
    1756:	56 c0       	rjmp	.+172    	; 0x1804 <__vector_8+0x370>
    1758:	80 91 7e 04 	lds	r24, 0x047E	; 0x80047e <_ZZ10__vector_8E3key>
    175c:	0e 94 37 0a 	call	0x146e	; 0x146e <_Z13sendMorseToneh>
    1760:	51 c0       	rjmp	.+162    	; 0x1804 <__vector_8+0x370>
    1762:	80 91 d1 04 	lds	r24, 0x04D1	; 0x8004d1 <_ZL16g_LEDs_Timed_Out>
    1766:	81 11       	cpse	r24, r1
    1768:	05 c0       	rjmp	.+10     	; 0x1774 <__vector_8+0x2e0>
    176a:	80 91 39 05 	lds	r24, 0x0539	; 0x800539 <g_sync_pin_stable>
    176e:	88 23       	and	r24, r24
    1770:	09 f4       	brne	.+2      	; 0x1774 <__vector_8+0x2e0>
    1772:	42 c0       	rjmp	.+132    	; 0x17f8 <__vector_8+0x364>
    1774:	80 91 06 05 	lds	r24, 0x0506	; 0x800506 <_ZL20g_enable_transmitter>
    1778:	88 23       	and	r24, r24
    177a:	29 f0       	breq	.+10     	; 0x1786 <__vector_8+0x2f2>
    177c:	60 91 7e 04 	lds	r22, 0x047E	; 0x80047e <_ZZ10__vector_8E3key>
    1780:	8a e0       	ldi	r24, 0x0A	; 10
    1782:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>
    1786:	80 91 58 05 	lds	r24, 0x0558	; 0x800558 <g_code_throttle>
    178a:	90 91 59 05 	lds	r25, 0x0559	; 0x800559 <g_code_throttle+0x1>
    178e:	90 93 80 04 	sts	0x0480, r25	; 0x800480 <_ZZ10__vector_8E7codeInc+0x1>
    1792:	80 93 7f 04 	sts	0x047F, r24	; 0x80047f <_ZZ10__vector_8E7codeInc>
    1796:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <_ZZ10__vector_8E9playMorse>
    179a:	88 23       	and	r24, r24
    179c:	99 f1       	breq	.+102    	; 0x1804 <__vector_8+0x370>
    179e:	80 91 7e 04 	lds	r24, 0x047E	; 0x80047e <_ZZ10__vector_8E3key>
    17a2:	0e 94 37 0a 	call	0x146e	; 0x146e <_Z13sendMorseToneh>
    17a6:	2e c0       	rjmp	.+92     	; 0x1804 <__vector_8+0x370>
    17a8:	10 92 7e 04 	sts	0x047E, r1	; 0x80047e <_ZZ10__vector_8E3key>
    17ac:	80 91 39 05 	lds	r24, 0x0539	; 0x800539 <g_sync_pin_stable>
    17b0:	81 11       	cpse	r24, r1
    17b2:	04 c0       	rjmp	.+8      	; 0x17bc <__vector_8+0x328>
    17b4:	60 e0       	ldi	r22, 0x00	; 0
    17b6:	87 e0       	ldi	r24, 0x07	; 7
    17b8:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>
    17bc:	60 e0       	ldi	r22, 0x00	; 0
    17be:	8a e0       	ldi	r24, 0x0A	; 10
    17c0:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>
    17c4:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <_ZZ10__vector_8E9playMorse>
    17c8:	88 23       	and	r24, r24
    17ca:	e1 f0       	breq	.+56     	; 0x1804 <__vector_8+0x370>
    17cc:	80 e0       	ldi	r24, 0x00	; 0
    17ce:	0e 94 37 0a 	call	0x146e	; 0x146e <_Z13sendMorseToneh>
    17d2:	18 c0       	rjmp	.+48     	; 0x1804 <__vector_8+0x370>
    17d4:	80 91 38 05 	lds	r24, 0x0538	; 0x800538 <g_dtmf_detected>
    17d8:	81 11       	cpse	r24, r1
    17da:	f8 ce       	rjmp	.-528    	; 0x15cc <__vector_8+0x138>
    17dc:	04 cf       	rjmp	.-504    	; 0x15e6 <__vector_8+0x152>
    17de:	80 91 7f 04 	lds	r24, 0x047F	; 0x80047f <_ZZ10__vector_8E7codeInc>
    17e2:	90 91 80 04 	lds	r25, 0x0480	; 0x800480 <_ZZ10__vector_8E7codeInc+0x1>
    17e6:	00 97       	sbiw	r24, 0x00	; 0
    17e8:	09 f0       	breq	.+2      	; 0x17ec <__vector_8+0x358>
    17ea:	77 cf       	rjmp	.-274    	; 0x16da <__vector_8+0x246>
    17ec:	ba cf       	rjmp	.-140    	; 0x1762 <__vector_8+0x2ce>
    17ee:	80 91 7e 04 	lds	r24, 0x047E	; 0x80047e <_ZZ10__vector_8E3key>
    17f2:	81 11       	cpse	r24, r1
    17f4:	d9 cf       	rjmp	.-78     	; 0x17a8 <__vector_8+0x314>
    17f6:	e6 cf       	rjmp	.-52     	; 0x17c4 <__vector_8+0x330>
    17f8:	60 91 7e 04 	lds	r22, 0x047E	; 0x80047e <_ZZ10__vector_8E3key>
    17fc:	87 e0       	ldi	r24, 0x07	; 7
    17fe:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>
    1802:	b8 cf       	rjmp	.-144    	; 0x1774 <__vector_8+0x2e0>
    1804:	0f 90       	pop	r0
    1806:	0f 90       	pop	r0
    1808:	df 91       	pop	r29
    180a:	cf 91       	pop	r28
    180c:	ff 91       	pop	r31
    180e:	ef 91       	pop	r30
    1810:	bf 91       	pop	r27
    1812:	af 91       	pop	r26
    1814:	9f 91       	pop	r25
    1816:	8f 91       	pop	r24
    1818:	7f 91       	pop	r23
    181a:	6f 91       	pop	r22
    181c:	5f 91       	pop	r21
    181e:	4f 91       	pop	r20
    1820:	3f 91       	pop	r19
    1822:	2f 91       	pop	r18
    1824:	0f 90       	pop	r0
    1826:	0f be       	out	0x3f, r0	; 63
    1828:	0f 90       	pop	r0
    182a:	1f 90       	pop	r1
    182c:	18 95       	reti

0000182e <_Z20initializeEEPROMVarsh>:

/*
 * Set non-volatile variables to their values stored in EEPROM
 */
void initializeEEPROMVars(BOOL resetAll)
{
    182e:	cf 92       	push	r12
    1830:	df 92       	push	r13
    1832:	ef 92       	push	r14
    1834:	ff 92       	push	r15
    1836:	0f 93       	push	r16
    1838:	1f 93       	push	r17
    183a:	cf 93       	push	r28
    183c:	df 93       	push	r29
    183e:	c8 2f       	mov	r28, r24
	uint16_t i;
	uint8_t initialization_flag = eeprom_read_byte(&ee_interface_eeprom_initialization_flag);
    1840:	86 ec       	ldi	r24, 0xC6	; 198
    1842:	92 e0       	ldi	r25, 0x02	; 2
    1844:	0e 94 11 2d 	call	0x5a22	; 0x5a22 <eeprom_read_byte>
    1848:	d8 2f       	mov	r29, r24

	i2c_init();                                                         /* Needs to happen here */
    184a:	0e 94 72 04 	call	0x8e4	; 0x8e4 <_Z8i2c_initv>

	if(!resetAll && (initialization_flag == EEPROM_INITIALIZED_FLAG))   /* EEPROM is up to date */
    184e:	c1 11       	cpse	r28, r1
    1850:	df c1       	rjmp	.+958    	; 0x1c10 <_Z20initializeEEPROMVarsh+0x3e2>
    1852:	da 3b       	cpi	r29, 0xBA	; 186
    1854:	09 f0       	breq	.+2      	; 0x1858 <_Z20initializeEEPROMVarsh+0x2a>
    1856:	6b c0       	rjmp	.+214    	; 0x192e <_Z20initializeEEPROMVarsh+0x100>
	{
		g_id_codespeed = CLAMP(MIN_CODE_SPEED_WPM,eeprom_read_byte(&ee_id_codespeed),MAX_CODE_SPEED_WPM);
    1858:	88 e3       	ldi	r24, 0x38	; 56
    185a:	92 e0       	ldi	r25, 0x02	; 2
    185c:	0e 94 11 2d 	call	0x5a22	; 0x5a22 <eeprom_read_byte>
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	85 30       	cpi	r24, 0x05	; 5
    1864:	91 05       	cpc	r25, r1
    1866:	14 f4       	brge	.+4      	; 0x186c <_Z20initializeEEPROMVarsh+0x3e>
    1868:	85 e0       	ldi	r24, 0x05	; 5
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	85 31       	cpi	r24, 0x15	; 21
    186e:	91 05       	cpc	r25, r1
    1870:	14 f0       	brlt	.+4      	; 0x1876 <_Z20initializeEEPROMVarsh+0x48>
    1872:	84 e1       	ldi	r24, 0x14	; 20
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <_ZL14g_id_codespeed>
		g_fox = CLAMP(BEACON,(Fox_t)eeprom_read_byte(&ee_fox_setting),NO_CODE_START_TONES_5M);
    187a:	87 e3       	ldi	r24, 0x37	; 55
    187c:	92 e0       	ldi	r25, 0x02	; 2
    187e:	0e 94 11 2d 	call	0x5a22	; 0x5a22 <eeprom_read_byte>
    1882:	86 31       	cpi	r24, 0x16	; 22
    1884:	08 f0       	brcs	.+2      	; 0x1888 <_Z20initializeEEPROMVarsh+0x5a>
    1886:	85 e1       	ldi	r24, 0x15	; 21
    1888:	80 93 5c 05 	sts	0x055C, r24	; 0x80055c <g_fox>
		g_atmega_temp_calibration = (int16_t)eeprom_read_word((uint16_t*)&ee_atmega_temp_calibration);
    188c:	84 e3       	ldi	r24, 0x34	; 52
    188e:	92 e0       	ldi	r25, 0x02	; 2
    1890:	0e 94 1f 2d 	call	0x5a3e	; 0x5a3e <eeprom_read_word>
    1894:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <_ZL25g_atmega_temp_calibration+0x1>
    1898:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <_ZL25g_atmega_temp_calibration>
		g_rv3028_offset = (int16_t)eeprom_read_word((uint16_t*)&ee_rv3028_offset);
    189c:	82 e3       	ldi	r24, 0x32	; 50
    189e:	92 e0       	ldi	r25, 0x02	; 2
    18a0:	0e 94 1f 2d 	call	0x5a3e	; 0x5a3e <eeprom_read_word>
    18a4:	90 93 05 05 	sts	0x0505, r25	; 0x800505 <_ZL15g_rv3028_offset+0x1>
    18a8:	80 93 04 05 	sts	0x0504, r24	; 0x800504 <_ZL15g_rv3028_offset>
		g_enable_LEDs = eeprom_read_byte(&ee_enable_LEDs);
    18ac:	86 e3       	ldi	r24, 0x36	; 54
    18ae:	92 e0       	ldi	r25, 0x02	; 2
    18b0:	0e 94 11 2d 	call	0x5a22	; 0x5a22 <eeprom_read_byte>
    18b4:	80 93 08 05 	sts	0x0508, r24	; 0x800508 <_ZL13g_enable_LEDs>
		g_enable_start_timer = eeprom_read_byte(&ee_enable_start_timer);
    18b8:	81 e3       	ldi	r24, 0x31	; 49
    18ba:	92 e0       	ldi	r25, 0x02	; 2
    18bc:	0e 94 11 2d 	call	0x5a22	; 0x5a22 <eeprom_read_byte>
    18c0:	80 93 07 05 	sts	0x0507, r24	; 0x800507 <_ZL20g_enable_start_timer>
		g_enable_transmitter = eeprom_read_byte(&ee_enable_transmitter);
    18c4:	80 e3       	ldi	r24, 0x30	; 48
    18c6:	92 e0       	ldi	r25, 0x02	; 2
    18c8:	0e 94 11 2d 	call	0x5a22	; 0x5a22 <eeprom_read_byte>
    18cc:	80 93 06 05 	sts	0x0506, r24	; 0x800506 <_ZL20g_enable_transmitter>
		g_event_start_epoch = eeprom_read_dword(&ee_event_start_epoch);
    18d0:	8c e2       	ldi	r24, 0x2C	; 44
    18d2:	92 e0       	ldi	r25, 0x02	; 2
    18d4:	0e 94 19 2d 	call	0x5a32	; 0x5a32 <eeprom_read_dword>
    18d8:	60 93 4e 05 	sts	0x054E, r22	; 0x80054e <g_event_start_epoch>
    18dc:	70 93 4f 05 	sts	0x054F, r23	; 0x80054f <g_event_start_epoch+0x1>
    18e0:	80 93 50 05 	sts	0x0550, r24	; 0x800550 <g_event_start_epoch+0x2>
    18e4:	90 93 51 05 	sts	0x0551, r25	; 0x800551 <g_event_start_epoch+0x3>
		g_event_finish_epoch = eeprom_read_dword(&ee_event_finish_epoch);
    18e8:	88 e2       	ldi	r24, 0x28	; 40
    18ea:	92 e0       	ldi	r25, 0x02	; 2
    18ec:	0e 94 19 2d 	call	0x5a32	; 0x5a32 <eeprom_read_dword>
    18f0:	60 93 4a 05 	sts	0x054A, r22	; 0x80054a <g_event_finish_epoch>
    18f4:	70 93 4b 05 	sts	0x054B, r23	; 0x80054b <g_event_finish_epoch+0x1>
    18f8:	80 93 4c 05 	sts	0x054C, r24	; 0x80054c <g_event_finish_epoch+0x2>
    18fc:	90 93 4d 05 	sts	0x054D, r25	; 0x80054d <g_event_finish_epoch+0x3>
    1900:	01 eb       	ldi	r16, 0xB1	; 177
    1902:	12 e0       	ldi	r17, 0x02	; 2
    1904:	c0 e2       	ldi	r28, 0x20	; 32
    1906:	d5 e0       	ldi	r29, 0x05	; 5
    1908:	0f 2e       	mov	r0, r31
    190a:	f4 e3       	ldi	r31, 0x34	; 52
    190c:	ef 2e       	mov	r14, r31
    190e:	f5 e0       	ldi	r31, 0x05	; 5
    1910:	ff 2e       	mov	r15, r31
    1912:	f0 2d       	mov	r31, r0

		for(i = 0; i < MAX_PATTERN_TEXT_LENGTH; i++)
		{
			g_messages_text[STATION_ID][i] = (char)eeprom_read_byte((uint8_t*)(&ee_stationID_text[i]));
    1914:	c8 01       	movw	r24, r16
    1916:	0e 94 11 2d 	call	0x5a22	; 0x5a22 <eeprom_read_byte>
    191a:	89 93       	st	Y+, r24
			if(!g_messages_text[STATION_ID][i])
    191c:	88 23       	and	r24, r24
    191e:	09 f4       	brne	.+2      	; 0x1922 <_Z20initializeEEPROMVarsh+0xf4>
    1920:	2e c1       	rjmp	.+604    	; 0x1b7e <_Z20initializeEEPROMVarsh+0x350>
    1922:	0f 5f       	subi	r16, 0xFF	; 255
    1924:	1f 4f       	sbci	r17, 0xFF	; 255
		g_enable_start_timer = eeprom_read_byte(&ee_enable_start_timer);
		g_enable_transmitter = eeprom_read_byte(&ee_enable_transmitter);
		g_event_start_epoch = eeprom_read_dword(&ee_event_start_epoch);
		g_event_finish_epoch = eeprom_read_dword(&ee_event_finish_epoch);

		for(i = 0; i < MAX_PATTERN_TEXT_LENGTH; i++)
    1926:	ce 15       	cp	r28, r14
    1928:	df 05       	cpc	r29, r15
    192a:	a1 f7       	brne	.-24     	; 0x1914 <_Z20initializeEEPROMVarsh+0xe6>
    192c:	28 c1       	rjmp	.+592    	; 0x1b7e <_Z20initializeEEPROMVarsh+0x350>
			}
		}
	}
	else    /* EEPROM is missing some updates */
	{
		if(resetAll || (eeprom_read_byte(&ee_id_codespeed) == 0xFF))
    192e:	88 e3       	ldi	r24, 0x38	; 56
    1930:	92 e0       	ldi	r25, 0x02	; 2
    1932:	0e 94 11 2d 	call	0x5a22	; 0x5a22 <eeprom_read_byte>
    1936:	8f 3f       	cpi	r24, 0xFF	; 255
    1938:	09 f4       	brne	.+2      	; 0x193c <_Z20initializeEEPROMVarsh+0x10e>
    193a:	59 c1       	rjmp	.+690    	; 0x1bee <_Z20initializeEEPROMVarsh+0x3c0>
			g_id_codespeed = EEPROM_ID_CODE_SPEED_DEFAULT;
			eeprom_update_byte(&ee_id_codespeed,g_id_codespeed);
		}
		else
		{
			g_id_codespeed = CLAMP(MIN_CODE_SPEED_WPM,eeprom_read_byte(&ee_id_codespeed),MAX_CODE_SPEED_WPM);
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	85 30       	cpi	r24, 0x05	; 5
    1940:	91 05       	cpc	r25, r1
    1942:	14 f4       	brge	.+4      	; 0x1948 <_Z20initializeEEPROMVarsh+0x11a>
    1944:	85 e0       	ldi	r24, 0x05	; 5
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	85 31       	cpi	r24, 0x15	; 21
    194a:	91 05       	cpc	r25, r1
    194c:	14 f0       	brlt	.+4      	; 0x1952 <_Z20initializeEEPROMVarsh+0x124>
    194e:	84 e1       	ldi	r24, 0x14	; 20
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <_ZL14g_id_codespeed>
		}

		if(resetAll || (eeprom_read_byte(&ee_fox_setting) == 0xFF))
    1956:	87 e3       	ldi	r24, 0x37	; 55
    1958:	92 e0       	ldi	r25, 0x02	; 2
    195a:	0e 94 11 2d 	call	0x5a22	; 0x5a22 <eeprom_read_byte>
    195e:	8f 3f       	cpi	r24, 0xFF	; 255
    1960:	61 f4       	brne	.+24     	; 0x197a <_Z20initializeEEPROMVarsh+0x14c>
    1962:	60 c1       	rjmp	.+704    	; 0x1c24 <_Z20initializeEEPROMVarsh+0x3f6>
		{
			g_fox = EEPROM_FOX_SETTING_DEFAULT;
    1964:	10 92 5c 05 	sts	0x055C, r1	; 0x80055c <g_fox>
			eeprom_update_byte(&ee_fox_setting,g_fox);
    1968:	60 91 5c 05 	lds	r22, 0x055C	; 0x80055c <g_fox>
    196c:	87 e3       	ldi	r24, 0x37	; 55
    196e:	92 e0       	ldi	r25, 0x02	; 2
    1970:	0e 94 25 2d 	call	0x5a4a	; 0x5a4a <eeprom_update_byte>
		else
		{
			g_fox = CLAMP(BEACON,(Fox_t)eeprom_read_byte(&ee_fox_setting),INVALID_FOX);
		}

		if(resetAll || ((uint16_t)eeprom_read_word((uint16_t*)&ee_atmega_temp_calibration) == 0xFFFF))
    1974:	c1 11       	cpse	r28, r1
    1976:	0e c0       	rjmp	.+28     	; 0x1994 <_Z20initializeEEPROMVarsh+0x166>
    1978:	05 c0       	rjmp	.+10     	; 0x1984 <_Z20initializeEEPROMVarsh+0x156>
    197a:	87 31       	cpi	r24, 0x17	; 23
    197c:	08 f0       	brcs	.+2      	; 0x1980 <_Z20initializeEEPROMVarsh+0x152>
    197e:	86 e1       	ldi	r24, 0x16	; 22
			g_fox = EEPROM_FOX_SETTING_DEFAULT;
			eeprom_update_byte(&ee_fox_setting,g_fox);
		}
		else
		{
			g_fox = CLAMP(BEACON,(Fox_t)eeprom_read_byte(&ee_fox_setting),INVALID_FOX);
    1980:	80 93 5c 05 	sts	0x055C, r24	; 0x80055c <g_fox>
		}

		if(resetAll || ((uint16_t)eeprom_read_word((uint16_t*)&ee_atmega_temp_calibration) == 0xFFFF))
    1984:	84 e3       	ldi	r24, 0x34	; 52
    1986:	92 e0       	ldi	r25, 0x02	; 2
    1988:	0e 94 1f 2d 	call	0x5a3e	; 0x5a3e <eeprom_read_word>
    198c:	8f 3f       	cpi	r24, 0xFF	; 255
    198e:	2f ef       	ldi	r18, 0xFF	; 255
    1990:	92 07       	cpc	r25, r18
    1992:	79 f4       	brne	.+30     	; 0x19b2 <_Z20initializeEEPROMVarsh+0x184>
		{
			g_atmega_temp_calibration = EEPROM_TEMP_CALIBRATION_DEFAULT;
    1994:	82 e9       	ldi	r24, 0x92	; 146
    1996:	9f ef       	ldi	r25, 0xFF	; 255
    1998:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <_ZL25g_atmega_temp_calibration+0x1>
    199c:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <_ZL25g_atmega_temp_calibration>
			eeprom_update_word((uint16_t*)&ee_atmega_temp_calibration,(uint16_t)g_atmega_temp_calibration);
    19a0:	60 91 15 01 	lds	r22, 0x0115	; 0x800115 <_ZL25g_atmega_temp_calibration>
    19a4:	70 91 16 01 	lds	r23, 0x0116	; 0x800116 <_ZL25g_atmega_temp_calibration+0x1>
    19a8:	84 e3       	ldi	r24, 0x34	; 52
    19aa:	92 e0       	ldi	r25, 0x02	; 2
    19ac:	0e 94 43 2d 	call	0x5a86	; 0x5a86 <eeprom_update_word>
    19b0:	04 c0       	rjmp	.+8      	; 0x19ba <_Z20initializeEEPROMVarsh+0x18c>
		}
		else
		{
			g_atmega_temp_calibration = (int16_t)eeprom_read_word((uint16_t*)&ee_atmega_temp_calibration);
    19b2:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <_ZL25g_atmega_temp_calibration+0x1>
    19b6:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <_ZL25g_atmega_temp_calibration>
		}

		if((uint16_t)eeprom_read_word((uint16_t*)&ee_rv3028_offset) == 0xFFFF)
    19ba:	82 e3       	ldi	r24, 0x32	; 50
    19bc:	92 e0       	ldi	r25, 0x02	; 2
    19be:	0e 94 1f 2d 	call	0x5a3e	; 0x5a3e <eeprom_read_word>
    19c2:	8f 3f       	cpi	r24, 0xFF	; 255
    19c4:	2f ef       	ldi	r18, 0xFF	; 255
    19c6:	92 07       	cpc	r25, r18
    19c8:	91 f4       	brne	.+36     	; 0x19ee <_Z20initializeEEPROMVarsh+0x1c0>
		{
			g_rv3028_offset = rv3028_get_offset_RAM();
    19ca:	0e 94 af 23 	call	0x475e	; 0x475e <_Z21rv3028_get_offset_RAMv>
    19ce:	90 93 05 05 	sts	0x0505, r25	; 0x800505 <_ZL15g_rv3028_offset+0x1>
    19d2:	80 93 04 05 	sts	0x0504, r24	; 0x800504 <_ZL15g_rv3028_offset>
			eeprom_update_word((uint16_t*)&ee_rv3028_offset,(uint16_t)g_rv3028_offset);
    19d6:	60 91 04 05 	lds	r22, 0x0504	; 0x800504 <_ZL15g_rv3028_offset>
    19da:	70 91 05 05 	lds	r23, 0x0505	; 0x800505 <_ZL15g_rv3028_offset+0x1>
    19de:	82 e3       	ldi	r24, 0x32	; 50
    19e0:	92 e0       	ldi	r25, 0x02	; 2
    19e2:	0e 94 43 2d 	call	0x5a86	; 0x5a86 <eeprom_update_word>
			g_allow_rv3028_eeprom_changes = TRUE;   /* Allow 1-sec interrupt to get permanently saved within the RTC EEPROM */
    19e6:	81 e0       	ldi	r24, 0x01	; 1
    19e8:	80 93 6d 05 	sts	0x056D, r24	; 0x80056d <g_allow_rv3028_eeprom_changes>
    19ec:	04 c0       	rjmp	.+8      	; 0x19f6 <_Z20initializeEEPROMVarsh+0x1c8>
		}
		else
		{
			g_rv3028_offset = (int16_t)eeprom_read_word((uint16_t*)&ee_rv3028_offset);
    19ee:	90 93 05 05 	sts	0x0505, r25	; 0x800505 <_ZL15g_rv3028_offset+0x1>
    19f2:	80 93 04 05 	sts	0x0504, r24	; 0x800504 <_ZL15g_rv3028_offset>
		}

		if(resetAll || (eeprom_read_byte(&ee_enable_LEDs) == 0xFF))
    19f6:	c1 11       	cpse	r28, r1
    19f8:	28 c1       	rjmp	.+592    	; 0x1c4a <_Z20initializeEEPROMVarsh+0x41c>
    19fa:	86 e3       	ldi	r24, 0x36	; 54
    19fc:	92 e0       	ldi	r25, 0x02	; 2
    19fe:	0e 94 11 2d 	call	0x5a22	; 0x5a22 <eeprom_read_byte>
    1a02:	8f 3f       	cpi	r24, 0xFF	; 255
    1a04:	09 f4       	brne	.+2      	; 0x1a08 <_Z20initializeEEPROMVarsh+0x1da>
    1a06:	17 c1       	rjmp	.+558    	; 0x1c36 <_Z20initializeEEPROMVarsh+0x408>
			g_enable_LEDs = EEPROM_ENABLE_LEDS_DEFAULT;
			eeprom_update_byte(&ee_enable_LEDs,g_enable_LEDs);  /* Only gets set by a serial command */
		}
		else
		{
			g_enable_LEDs = eeprom_read_byte(&ee_enable_LEDs);
    1a08:	80 93 08 05 	sts	0x0508, r24	; 0x800508 <_ZL13g_enable_LEDs>
		}

		if(resetAll || (eeprom_read_byte(&ee_enable_start_timer) == 0xFF))
    1a0c:	81 e3       	ldi	r24, 0x31	; 49
    1a0e:	92 e0       	ldi	r25, 0x02	; 2
    1a10:	0e 94 11 2d 	call	0x5a22	; 0x5a22 <eeprom_read_byte>
    1a14:	8f 3f       	cpi	r24, 0xFF	; 255
    1a16:	59 f4       	brne	.+22     	; 0x1a2e <_Z20initializeEEPROMVarsh+0x200>
		{
			g_enable_start_timer = EEPROM_ENABLE_STARTTIMER_DEFAULT;
    1a18:	10 92 07 05 	sts	0x0507, r1	; 0x800507 <_ZL20g_enable_start_timer>
			eeprom_update_byte(&ee_enable_start_timer,g_enable_start_timer);    /* Only gets set by a serial command */
    1a1c:	60 91 07 05 	lds	r22, 0x0507	; 0x800507 <_ZL20g_enable_start_timer>
    1a20:	81 e3       	ldi	r24, 0x31	; 49
    1a22:	92 e0       	ldi	r25, 0x02	; 2
    1a24:	0e 94 25 2d 	call	0x5a4a	; 0x5a4a <eeprom_update_byte>
		else
		{
			g_enable_start_timer = eeprom_read_byte(&ee_enable_start_timer);
		}

		if(resetAll || (eeprom_read_byte(&ee_enable_transmitter) == 0xFF))
    1a28:	c1 11       	cpse	r28, r1
    1a2a:	19 c1       	rjmp	.+562    	; 0x1c5e <_Z20initializeEEPROMVarsh+0x430>
    1a2c:	02 c0       	rjmp	.+4      	; 0x1a32 <_Z20initializeEEPROMVarsh+0x204>
			g_enable_start_timer = EEPROM_ENABLE_STARTTIMER_DEFAULT;
			eeprom_update_byte(&ee_enable_start_timer,g_enable_start_timer);    /* Only gets set by a serial command */
		}
		else
		{
			g_enable_start_timer = eeprom_read_byte(&ee_enable_start_timer);
    1a2e:	80 93 07 05 	sts	0x0507, r24	; 0x800507 <_ZL20g_enable_start_timer>
		}

		if(resetAll || (eeprom_read_byte(&ee_enable_transmitter) == 0xFF))
    1a32:	80 e3       	ldi	r24, 0x30	; 48
    1a34:	92 e0       	ldi	r25, 0x02	; 2
    1a36:	0e 94 11 2d 	call	0x5a22	; 0x5a22 <eeprom_read_byte>
    1a3a:	8f 3f       	cpi	r24, 0xFF	; 255
    1a3c:	61 f4       	brne	.+24     	; 0x1a56 <_Z20initializeEEPROMVarsh+0x228>
		{
			g_enable_transmitter = EEPROM_ENABLE_TRANSMITTER_DEFAULT;
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
    1a40:	80 93 06 05 	sts	0x0506, r24	; 0x800506 <_ZL20g_enable_transmitter>
			eeprom_update_byte(&ee_enable_transmitter,g_enable_transmitter);    /* Only gets set by a serial command */
    1a44:	60 91 06 05 	lds	r22, 0x0506	; 0x800506 <_ZL20g_enable_transmitter>
    1a48:	80 e3       	ldi	r24, 0x30	; 48
    1a4a:	92 e0       	ldi	r25, 0x02	; 2
    1a4c:	0e 94 25 2d 	call	0x5a4a	; 0x5a4a <eeprom_update_byte>
		else
		{
			g_enable_transmitter = eeprom_read_byte(&ee_enable_transmitter);
		}

		if(resetAll || (eeprom_read_dword(&ee_event_start_epoch) == 0xFFFFFFFF))
    1a50:	cc 23       	and	r28, r28
    1a52:	19 f0       	breq	.+6      	; 0x1a5a <_Z20initializeEEPROMVarsh+0x22c>
    1a54:	0e c1       	rjmp	.+540    	; 0x1c72 <_Z20initializeEEPROMVarsh+0x444>
			g_enable_transmitter = EEPROM_ENABLE_TRANSMITTER_DEFAULT;
			eeprom_update_byte(&ee_enable_transmitter,g_enable_transmitter);    /* Only gets set by a serial command */
		}
		else
		{
			g_enable_transmitter = eeprom_read_byte(&ee_enable_transmitter);
    1a56:	80 93 06 05 	sts	0x0506, r24	; 0x800506 <_ZL20g_enable_transmitter>
		}

		if(resetAll || (eeprom_read_dword(&ee_event_start_epoch) == 0xFFFFFFFF))
    1a5a:	8c e2       	ldi	r24, 0x2C	; 44
    1a5c:	92 e0       	ldi	r25, 0x02	; 2
    1a5e:	0e 94 19 2d 	call	0x5a32	; 0x5a32 <eeprom_read_dword>
    1a62:	6f 3f       	cpi	r22, 0xFF	; 255
    1a64:	2f ef       	ldi	r18, 0xFF	; 255
    1a66:	72 07       	cpc	r23, r18
    1a68:	82 07       	cpc	r24, r18
    1a6a:	92 07       	cpc	r25, r18
    1a6c:	b9 f4       	brne	.+46     	; 0x1a9c <_Z20initializeEEPROMVarsh+0x26e>
		{
			g_event_start_epoch = EEPROM_START_EPOCH_DEFAULT;
    1a6e:	10 92 4e 05 	sts	0x054E, r1	; 0x80054e <g_event_start_epoch>
    1a72:	10 92 4f 05 	sts	0x054F, r1	; 0x80054f <g_event_start_epoch+0x1>
    1a76:	10 92 50 05 	sts	0x0550, r1	; 0x800550 <g_event_start_epoch+0x2>
    1a7a:	10 92 51 05 	sts	0x0551, r1	; 0x800551 <g_event_start_epoch+0x3>
			eeprom_update_dword(&ee_event_start_epoch,g_event_start_epoch);
    1a7e:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <g_event_start_epoch>
    1a82:	50 91 4f 05 	lds	r21, 0x054F	; 0x80054f <g_event_start_epoch+0x1>
    1a86:	60 91 50 05 	lds	r22, 0x0550	; 0x800550 <g_event_start_epoch+0x2>
    1a8a:	70 91 51 05 	lds	r23, 0x0551	; 0x800551 <g_event_start_epoch+0x3>
    1a8e:	8c e2       	ldi	r24, 0x2C	; 44
    1a90:	92 e0       	ldi	r25, 0x02	; 2
    1a92:	0e 94 37 2d 	call	0x5a6e	; 0x5a6e <eeprom_update_dword>
		else
		{
			g_event_start_epoch = eeprom_read_dword(&ee_event_start_epoch);
		}

		if(resetAll || (eeprom_read_dword(&ee_event_finish_epoch) == 0xFFFFFFFF))
    1a96:	c1 11       	cpse	r28, r1
    1a98:	22 c1       	rjmp	.+580    	; 0x1cde <_Z20initializeEEPROMVarsh+0x4b0>
    1a9a:	15 c1       	rjmp	.+554    	; 0x1cc6 <_Z20initializeEEPROMVarsh+0x498>
			g_event_start_epoch = EEPROM_START_EPOCH_DEFAULT;
			eeprom_update_dword(&ee_event_start_epoch,g_event_start_epoch);
		}
		else
		{
			g_event_start_epoch = eeprom_read_dword(&ee_event_start_epoch);
    1a9c:	60 93 4e 05 	sts	0x054E, r22	; 0x80054e <g_event_start_epoch>
    1aa0:	70 93 4f 05 	sts	0x054F, r23	; 0x80054f <g_event_start_epoch+0x1>
    1aa4:	80 93 50 05 	sts	0x0550, r24	; 0x800550 <g_event_start_epoch+0x2>
    1aa8:	90 93 51 05 	sts	0x0551, r25	; 0x800551 <g_event_start_epoch+0x3>
		}

		if(resetAll || (eeprom_read_dword(&ee_event_finish_epoch) == 0xFFFFFFFF))
    1aac:	88 e2       	ldi	r24, 0x28	; 40
    1aae:	92 e0       	ldi	r25, 0x02	; 2
    1ab0:	0e 94 19 2d 	call	0x5a32	; 0x5a32 <eeprom_read_dword>
    1ab4:	6f 3f       	cpi	r22, 0xFF	; 255
    1ab6:	2f ef       	ldi	r18, 0xFF	; 255
    1ab8:	72 07       	cpc	r23, r18
    1aba:	82 07       	cpc	r24, r18
    1abc:	92 07       	cpc	r25, r18
    1abe:	b9 f4       	brne	.+46     	; 0x1aee <_Z20initializeEEPROMVarsh+0x2c0>
		{
			g_event_start_epoch = EEPROM_START_EPOCH_DEFAULT;
    1ac0:	10 92 4e 05 	sts	0x054E, r1	; 0x80054e <g_event_start_epoch>
    1ac4:	10 92 4f 05 	sts	0x054F, r1	; 0x80054f <g_event_start_epoch+0x1>
    1ac8:	10 92 50 05 	sts	0x0550, r1	; 0x800550 <g_event_start_epoch+0x2>
    1acc:	10 92 51 05 	sts	0x0551, r1	; 0x800551 <g_event_start_epoch+0x3>
			eeprom_update_dword(&ee_event_finish_epoch,g_event_start_epoch);
    1ad0:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <g_event_start_epoch>
    1ad4:	50 91 4f 05 	lds	r21, 0x054F	; 0x80054f <g_event_start_epoch+0x1>
    1ad8:	60 91 50 05 	lds	r22, 0x0550	; 0x800550 <g_event_start_epoch+0x2>
    1adc:	70 91 51 05 	lds	r23, 0x0551	; 0x800551 <g_event_start_epoch+0x3>
    1ae0:	88 e2       	ldi	r24, 0x28	; 40
    1ae2:	92 e0       	ldi	r25, 0x02	; 2
    1ae4:	0e 94 37 2d 	call	0x5a6e	; 0x5a6e <eeprom_update_dword>
		else
		{
			g_event_start_epoch = eeprom_read_dword(&ee_event_finish_epoch);
		}

		if(resetAll || (eeprom_read_byte((uint8_t*)(&ee_stationID_text[0])) == 0xFF))
    1ae8:	cc 23       	and	r28, r28
    1aea:	49 f0       	breq	.+18     	; 0x1afe <_Z20initializeEEPROMVarsh+0x2d0>
    1aec:	0e c0       	rjmp	.+28     	; 0x1b0a <_Z20initializeEEPROMVarsh+0x2dc>
			g_event_start_epoch = EEPROM_START_EPOCH_DEFAULT;
			eeprom_update_dword(&ee_event_finish_epoch,g_event_start_epoch);
		}
		else
		{
			g_event_start_epoch = eeprom_read_dword(&ee_event_finish_epoch);
    1aee:	60 93 4e 05 	sts	0x054E, r22	; 0x80054e <g_event_start_epoch>
    1af2:	70 93 4f 05 	sts	0x054F, r23	; 0x80054f <g_event_start_epoch+0x1>
    1af6:	80 93 50 05 	sts	0x0550, r24	; 0x800550 <g_event_start_epoch+0x2>
    1afa:	90 93 51 05 	sts	0x0551, r25	; 0x800551 <g_event_start_epoch+0x3>
		}

		if(resetAll || (eeprom_read_byte((uint8_t*)(&ee_stationID_text[0])) == 0xFF))
    1afe:	81 eb       	ldi	r24, 0xB1	; 177
    1b00:	92 e0       	ldi	r25, 0x02	; 2
    1b02:	0e 94 11 2d 	call	0x5a22	; 0x5a22 <eeprom_read_byte>
    1b06:	8f 3f       	cpi	r24, 0xFF	; 255
    1b08:	31 f4       	brne	.+12     	; 0x1b16 <_Z20initializeEEPROMVarsh+0x2e8>

//			for(i = 0; i < strlen(g_messages_text[STATION_ID]); i++)    /* Only gets set by a serial command */
//			{
//				eeprom_update_byte((uint8_t*)&ee_stationID_text[i],(uint8_t)g_messages_text[STATION_ID][i]);
//			}
			eeprom_update_byte((uint8_t*)&ee_stationID_text[0],0);
    1b0a:	60 e0       	ldi	r22, 0x00	; 0
    1b0c:	81 eb       	ldi	r24, 0xB1	; 177
    1b0e:	92 e0       	ldi	r25, 0x02	; 2
    1b10:	0e 94 25 2d 	call	0x5a4a	; 0x5a4a <eeprom_update_byte>
    1b14:	5f c0       	rjmp	.+190    	; 0x1bd4 <_Z20initializeEEPROMVarsh+0x3a6>
    1b16:	01 eb       	ldi	r16, 0xB1	; 177
    1b18:	12 e0       	ldi	r17, 0x02	; 2
    1b1a:	c0 e2       	ldi	r28, 0x20	; 32
    1b1c:	d5 e0       	ldi	r29, 0x05	; 5
    1b1e:	0f 2e       	mov	r0, r31
    1b20:	f4 e3       	ldi	r31, 0x34	; 52
    1b22:	ef 2e       	mov	r14, r31
    1b24:	f5 e0       	ldi	r31, 0x05	; 5
    1b26:	ff 2e       	mov	r15, r31
    1b28:	f0 2d       	mov	r31, r0
		}
		else
		{
			for(i = 0; i < MAX_PATTERN_TEXT_LENGTH; i++)
			{
				g_messages_text[STATION_ID][i] = (char)eeprom_read_byte((uint8_t*)(&ee_stationID_text[i]));
    1b2a:	c8 01       	movw	r24, r16
    1b2c:	0e 94 11 2d 	call	0x5a22	; 0x5a22 <eeprom_read_byte>
    1b30:	89 93       	st	Y+, r24
				if(!g_messages_text[STATION_ID][i])
    1b32:	88 23       	and	r24, r24
    1b34:	09 f4       	brne	.+2      	; 0x1b38 <_Z20initializeEEPROMVarsh+0x30a>
    1b36:	4e c0       	rjmp	.+156    	; 0x1bd4 <_Z20initializeEEPROMVarsh+0x3a6>
    1b38:	0f 5f       	subi	r16, 0xFF	; 255
    1b3a:	1f 4f       	sbci	r17, 0xFF	; 255
//			}
			eeprom_update_byte((uint8_t*)&ee_stationID_text[0],0);
		}
		else
		{
			for(i = 0; i < MAX_PATTERN_TEXT_LENGTH; i++)
    1b3c:	ce 15       	cp	r28, r14
    1b3e:	df 05       	cpc	r29, r15
    1b40:	a1 f7       	brne	.-24     	; 0x1b2a <_Z20initializeEEPROMVarsh+0x2fc>
    1b42:	48 c0       	rjmp	.+144    	; 0x1bd4 <_Z20initializeEEPROMVarsh+0x3a6>
		 * ppm frequency change = -0.035 * (T-T0)^2 (+/-10%)
		 * Table[0] = 25C, Table[1] = 24C or 26C, Table[2] = 23C or 27C, etc. */
		for(i = 0; i < SIZE_OF_TEMPERATURE_TABLE; i++)  /* Use 1-degree steps and take advantage of parabola symmetry for -35C to +85C coverage */
		{
			uint16_t val = (uint16_t)(((i * i) * 37L) / 1000L);
			eeprom_update_byte((uint8_t*)&ee_temperature_table[i],val);
    1b44:	cc 9f       	mul	r28, r28
    1b46:	90 01       	movw	r18, r0
    1b48:	cd 9f       	mul	r28, r29
    1b4a:	30 0d       	add	r19, r0
    1b4c:	30 0d       	add	r19, r0
    1b4e:	11 24       	eor	r1, r1
    1b50:	a5 e2       	ldi	r26, 0x25	; 37
    1b52:	b0 e0       	ldi	r27, 0x00	; 0
    1b54:	0e 94 89 28 	call	0x5112	; 0x5112 <__umulhisi3>
    1b58:	a7 01       	movw	r20, r14
    1b5a:	96 01       	movw	r18, r12
    1b5c:	0e 94 64 28 	call	0x50c8	; 0x50c8 <__divmodsi4>
    1b60:	62 2f       	mov	r22, r18
    1b62:	c8 01       	movw	r24, r16
    1b64:	0e 94 25 2d 	call	0x5a4a	; 0x5a4a <eeprom_update_byte>
		}

		/* Each correction pulse = 1 tick corresponds to 1 / (16384 x 64) = 0.9537 ppm.
		 * ppm frequency change = -0.035 * (T-T0)^2 (+/-10%)
		 * Table[0] = 25C, Table[1] = 24C or 26C, Table[2] = 23C or 27C, etc. */
		for(i = 0; i < SIZE_OF_TEMPERATURE_TABLE; i++)  /* Use 1-degree steps and take advantage of parabola symmetry for -35C to +85C coverage */
    1b68:	21 96       	adiw	r28, 0x01	; 1
    1b6a:	0e 5f       	subi	r16, 0xFE	; 254
    1b6c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b6e:	cc 33       	cpi	r28, 0x3C	; 60
    1b70:	d1 05       	cpc	r29, r1
    1b72:	41 f7       	brne	.-48     	; 0x1b44 <_Z20initializeEEPROMVarsh+0x316>
		{
			uint16_t val = (uint16_t)(((i * i) * 37L) / 1000L);
			eeprom_update_byte((uint8_t*)&ee_temperature_table[i],val);
		}

		eeprom_update_byte(&ee_interface_eeprom_initialization_flag,EEPROM_INITIALIZED_FLAG);
    1b74:	6a eb       	ldi	r22, 0xBA	; 186
    1b76:	86 ec       	ldi	r24, 0xC6	; 198
    1b78:	92 e0       	ldi	r25, 0x02	; 2
    1b7a:	0e 94 25 2d 	call	0x5a4a	; 0x5a4a <eeprom_update_byte>
	}

/* Perform sanity checks */
	if(g_event_finish_epoch <= g_event_start_epoch)
    1b7e:	40 91 4a 05 	lds	r20, 0x054A	; 0x80054a <g_event_finish_epoch>
    1b82:	50 91 4b 05 	lds	r21, 0x054B	; 0x80054b <g_event_finish_epoch+0x1>
    1b86:	60 91 4c 05 	lds	r22, 0x054C	; 0x80054c <g_event_finish_epoch+0x2>
    1b8a:	70 91 4d 05 	lds	r23, 0x054D	; 0x80054d <g_event_finish_epoch+0x3>
    1b8e:	80 91 4e 05 	lds	r24, 0x054E	; 0x80054e <g_event_start_epoch>
    1b92:	90 91 4f 05 	lds	r25, 0x054F	; 0x80054f <g_event_start_epoch+0x1>
    1b96:	a0 91 50 05 	lds	r26, 0x0550	; 0x800550 <g_event_start_epoch+0x2>
    1b9a:	b0 91 51 05 	lds	r27, 0x0551	; 0x800551 <g_event_start_epoch+0x3>
    1b9e:	84 17       	cp	r24, r20
    1ba0:	95 07       	cpc	r25, r21
    1ba2:	a6 07       	cpc	r26, r22
    1ba4:	b7 07       	cpc	r27, r23
    1ba6:	08 f4       	brcc	.+2      	; 0x1baa <_Z20initializeEEPROMVarsh+0x37c>
    1ba8:	af c0       	rjmp	.+350    	; 0x1d08 <_Z20initializeEEPROMVarsh+0x4da>
	{
		g_event_finish_epoch = g_event_start_epoch + SECONDS_24H;
    1baa:	80 91 4e 05 	lds	r24, 0x054E	; 0x80054e <g_event_start_epoch>
    1bae:	90 91 4f 05 	lds	r25, 0x054F	; 0x80054f <g_event_start_epoch+0x1>
    1bb2:	a0 91 50 05 	lds	r26, 0x0550	; 0x800550 <g_event_start_epoch+0x2>
    1bb6:	b0 91 51 05 	lds	r27, 0x0551	; 0x800551 <g_event_start_epoch+0x3>
    1bba:	80 58       	subi	r24, 0x80	; 128
    1bbc:	9e 4a       	sbci	r25, 0xAE	; 174
    1bbe:	ae 4f       	sbci	r26, 0xFE	; 254
    1bc0:	bf 4f       	sbci	r27, 0xFF	; 255
    1bc2:	80 93 4a 05 	sts	0x054A, r24	; 0x80054a <g_event_finish_epoch>
    1bc6:	90 93 4b 05 	sts	0x054B, r25	; 0x80054b <g_event_finish_epoch+0x1>
    1bca:	a0 93 4c 05 	sts	0x054C, r26	; 0x80054c <g_event_finish_epoch+0x2>
    1bce:	b0 93 4d 05 	sts	0x054D, r27	; 0x80054d <g_event_finish_epoch+0x3>
	}

	return;
    1bd2:	9a c0       	rjmp	.+308    	; 0x1d08 <_Z20initializeEEPROMVarsh+0x4da>
    1bd4:	09 e3       	ldi	r16, 0x39	; 57
    1bd6:	12 e0       	ldi	r17, 0x02	; 2

/*
 * Set non-volatile variables to their values stored in EEPROM
 */
void initializeEEPROMVars(BOOL resetAll)
{
    1bd8:	c0 e0       	ldi	r28, 0x00	; 0
    1bda:	d0 e0       	ldi	r29, 0x00	; 0
		 * ppm frequency change = -0.035 * (T-T0)^2 (+/-10%)
		 * Table[0] = 25C, Table[1] = 24C or 26C, Table[2] = 23C or 27C, etc. */
		for(i = 0; i < SIZE_OF_TEMPERATURE_TABLE; i++)  /* Use 1-degree steps and take advantage of parabola symmetry for -35C to +85C coverage */
		{
			uint16_t val = (uint16_t)(((i * i) * 37L) / 1000L);
			eeprom_update_byte((uint8_t*)&ee_temperature_table[i],val);
    1bdc:	0f 2e       	mov	r0, r31
    1bde:	f8 ee       	ldi	r31, 0xE8	; 232
    1be0:	cf 2e       	mov	r12, r31
    1be2:	f3 e0       	ldi	r31, 0x03	; 3
    1be4:	df 2e       	mov	r13, r31
    1be6:	e1 2c       	mov	r14, r1
    1be8:	f1 2c       	mov	r15, r1
    1bea:	f0 2d       	mov	r31, r0
    1bec:	ab cf       	rjmp	.-170    	; 0x1b44 <_Z20initializeEEPROMVarsh+0x316>
	}
	else    /* EEPROM is missing some updates */
	{
		if(resetAll || (eeprom_read_byte(&ee_id_codespeed) == 0xFF))
		{
			g_id_codespeed = EEPROM_ID_CODE_SPEED_DEFAULT;
    1bee:	84 e1       	ldi	r24, 0x14	; 20
    1bf0:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <_ZL14g_id_codespeed>
			eeprom_update_byte(&ee_id_codespeed,g_id_codespeed);
    1bf4:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <_ZL14g_id_codespeed>
    1bf8:	88 e3       	ldi	r24, 0x38	; 56
    1bfa:	92 e0       	ldi	r25, 0x02	; 2
    1bfc:	0e 94 25 2d 	call	0x5a4a	; 0x5a4a <eeprom_update_byte>
		else
		{
			g_id_codespeed = CLAMP(MIN_CODE_SPEED_WPM,eeprom_read_byte(&ee_id_codespeed),MAX_CODE_SPEED_WPM);
		}

		if(resetAll || (eeprom_read_byte(&ee_fox_setting) == 0xFF))
    1c00:	87 e3       	ldi	r24, 0x37	; 55
    1c02:	92 e0       	ldi	r25, 0x02	; 2
    1c04:	0e 94 11 2d 	call	0x5a22	; 0x5a22 <eeprom_read_byte>
    1c08:	8f 3f       	cpi	r24, 0xFF	; 255
    1c0a:	09 f0       	breq	.+2      	; 0x1c0e <_Z20initializeEEPROMVarsh+0x3e0>
    1c0c:	b6 ce       	rjmp	.-660    	; 0x197a <_Z20initializeEEPROMVarsh+0x14c>
    1c0e:	aa ce       	rjmp	.-684    	; 0x1964 <_Z20initializeEEPROMVarsh+0x136>
	}
	else    /* EEPROM is missing some updates */
	{
		if(resetAll || (eeprom_read_byte(&ee_id_codespeed) == 0xFF))
		{
			g_id_codespeed = EEPROM_ID_CODE_SPEED_DEFAULT;
    1c10:	84 e1       	ldi	r24, 0x14	; 20
    1c12:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <_ZL14g_id_codespeed>
			eeprom_update_byte(&ee_id_codespeed,g_id_codespeed);
    1c16:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <_ZL14g_id_codespeed>
    1c1a:	88 e3       	ldi	r24, 0x38	; 56
    1c1c:	92 e0       	ldi	r25, 0x02	; 2
    1c1e:	0e 94 25 2d 	call	0x5a4a	; 0x5a4a <eeprom_update_byte>
    1c22:	a0 ce       	rjmp	.-704    	; 0x1964 <_Z20initializeEEPROMVarsh+0x136>
			g_id_codespeed = CLAMP(MIN_CODE_SPEED_WPM,eeprom_read_byte(&ee_id_codespeed),MAX_CODE_SPEED_WPM);
		}

		if(resetAll || (eeprom_read_byte(&ee_fox_setting) == 0xFF))
		{
			g_fox = EEPROM_FOX_SETTING_DEFAULT;
    1c24:	10 92 5c 05 	sts	0x055C, r1	; 0x80055c <g_fox>
			eeprom_update_byte(&ee_fox_setting,g_fox);
    1c28:	60 91 5c 05 	lds	r22, 0x055C	; 0x80055c <g_fox>
    1c2c:	87 e3       	ldi	r24, 0x37	; 55
    1c2e:	92 e0       	ldi	r25, 0x02	; 2
    1c30:	0e 94 25 2d 	call	0x5a4a	; 0x5a4a <eeprom_update_byte>
    1c34:	a7 ce       	rjmp	.-690    	; 0x1984 <_Z20initializeEEPROMVarsh+0x156>
			g_rv3028_offset = (int16_t)eeprom_read_word((uint16_t*)&ee_rv3028_offset);
		}

		if(resetAll || (eeprom_read_byte(&ee_enable_LEDs) == 0xFF))
		{
			g_enable_LEDs = EEPROM_ENABLE_LEDS_DEFAULT;
    1c36:	81 e0       	ldi	r24, 0x01	; 1
    1c38:	80 93 08 05 	sts	0x0508, r24	; 0x800508 <_ZL13g_enable_LEDs>
			eeprom_update_byte(&ee_enable_LEDs,g_enable_LEDs);  /* Only gets set by a serial command */
    1c3c:	60 91 08 05 	lds	r22, 0x0508	; 0x800508 <_ZL13g_enable_LEDs>
    1c40:	86 e3       	ldi	r24, 0x36	; 54
    1c42:	92 e0       	ldi	r25, 0x02	; 2
    1c44:	0e 94 25 2d 	call	0x5a4a	; 0x5a4a <eeprom_update_byte>
    1c48:	e1 ce       	rjmp	.-574    	; 0x1a0c <_Z20initializeEEPROMVarsh+0x1de>
			g_rv3028_offset = (int16_t)eeprom_read_word((uint16_t*)&ee_rv3028_offset);
		}

		if(resetAll || (eeprom_read_byte(&ee_enable_LEDs) == 0xFF))
		{
			g_enable_LEDs = EEPROM_ENABLE_LEDS_DEFAULT;
    1c4a:	81 e0       	ldi	r24, 0x01	; 1
    1c4c:	80 93 08 05 	sts	0x0508, r24	; 0x800508 <_ZL13g_enable_LEDs>
			eeprom_update_byte(&ee_enable_LEDs,g_enable_LEDs);  /* Only gets set by a serial command */
    1c50:	60 91 08 05 	lds	r22, 0x0508	; 0x800508 <_ZL13g_enable_LEDs>
    1c54:	86 e3       	ldi	r24, 0x36	; 54
    1c56:	92 e0       	ldi	r25, 0x02	; 2
    1c58:	0e 94 25 2d 	call	0x5a4a	; 0x5a4a <eeprom_update_byte>
    1c5c:	dd ce       	rjmp	.-582    	; 0x1a18 <_Z20initializeEEPROMVarsh+0x1ea>
			g_enable_start_timer = eeprom_read_byte(&ee_enable_start_timer);
		}

		if(resetAll || (eeprom_read_byte(&ee_enable_transmitter) == 0xFF))
		{
			g_enable_transmitter = EEPROM_ENABLE_TRANSMITTER_DEFAULT;
    1c5e:	81 e0       	ldi	r24, 0x01	; 1
    1c60:	80 93 06 05 	sts	0x0506, r24	; 0x800506 <_ZL20g_enable_transmitter>
			eeprom_update_byte(&ee_enable_transmitter,g_enable_transmitter);    /* Only gets set by a serial command */
    1c64:	60 91 06 05 	lds	r22, 0x0506	; 0x800506 <_ZL20g_enable_transmitter>
    1c68:	80 e3       	ldi	r24, 0x30	; 48
    1c6a:	92 e0       	ldi	r25, 0x02	; 2
    1c6c:	0e 94 25 2d 	call	0x5a4a	; 0x5a4a <eeprom_update_byte>
    1c70:	fe ce       	rjmp	.-516    	; 0x1a6e <_Z20initializeEEPROMVarsh+0x240>
			g_enable_transmitter = eeprom_read_byte(&ee_enable_transmitter);
		}

		if(resetAll || (eeprom_read_dword(&ee_event_start_epoch) == 0xFFFFFFFF))
		{
			g_event_start_epoch = EEPROM_START_EPOCH_DEFAULT;
    1c72:	10 92 4e 05 	sts	0x054E, r1	; 0x80054e <g_event_start_epoch>
    1c76:	10 92 4f 05 	sts	0x054F, r1	; 0x80054f <g_event_start_epoch+0x1>
    1c7a:	10 92 50 05 	sts	0x0550, r1	; 0x800550 <g_event_start_epoch+0x2>
    1c7e:	10 92 51 05 	sts	0x0551, r1	; 0x800551 <g_event_start_epoch+0x3>
			eeprom_update_dword(&ee_event_start_epoch,g_event_start_epoch);
    1c82:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <g_event_start_epoch>
    1c86:	50 91 4f 05 	lds	r21, 0x054F	; 0x80054f <g_event_start_epoch+0x1>
    1c8a:	60 91 50 05 	lds	r22, 0x0550	; 0x800550 <g_event_start_epoch+0x2>
    1c8e:	70 91 51 05 	lds	r23, 0x0551	; 0x800551 <g_event_start_epoch+0x3>
    1c92:	8c e2       	ldi	r24, 0x2C	; 44
    1c94:	92 e0       	ldi	r25, 0x02	; 2
    1c96:	0e 94 37 2d 	call	0x5a6e	; 0x5a6e <eeprom_update_dword>
    1c9a:	12 cf       	rjmp	.-476    	; 0x1ac0 <_Z20initializeEEPROMVarsh+0x292>
			g_event_start_epoch = eeprom_read_dword(&ee_event_start_epoch);
		}

		if(resetAll || (eeprom_read_dword(&ee_event_finish_epoch) == 0xFFFFFFFF))
		{
			g_event_start_epoch = EEPROM_START_EPOCH_DEFAULT;
    1c9c:	10 92 4e 05 	sts	0x054E, r1	; 0x80054e <g_event_start_epoch>
    1ca0:	10 92 4f 05 	sts	0x054F, r1	; 0x80054f <g_event_start_epoch+0x1>
    1ca4:	10 92 50 05 	sts	0x0550, r1	; 0x800550 <g_event_start_epoch+0x2>
    1ca8:	10 92 51 05 	sts	0x0551, r1	; 0x800551 <g_event_start_epoch+0x3>
			eeprom_update_dword(&ee_event_finish_epoch,g_event_start_epoch);
    1cac:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <g_event_start_epoch>
    1cb0:	50 91 4f 05 	lds	r21, 0x054F	; 0x80054f <g_event_start_epoch+0x1>
    1cb4:	60 91 50 05 	lds	r22, 0x0550	; 0x800550 <g_event_start_epoch+0x2>
    1cb8:	70 91 51 05 	lds	r23, 0x0551	; 0x800551 <g_event_start_epoch+0x3>
    1cbc:	88 e2       	ldi	r24, 0x28	; 40
    1cbe:	92 e0       	ldi	r25, 0x02	; 2
    1cc0:	0e 94 37 2d 	call	0x5a6e	; 0x5a6e <eeprom_update_dword>
    1cc4:	1c cf       	rjmp	.-456    	; 0x1afe <_Z20initializeEEPROMVarsh+0x2d0>
		else
		{
			g_event_start_epoch = eeprom_read_dword(&ee_event_start_epoch);
		}

		if(resetAll || (eeprom_read_dword(&ee_event_finish_epoch) == 0xFFFFFFFF))
    1cc6:	88 e2       	ldi	r24, 0x28	; 40
    1cc8:	92 e0       	ldi	r25, 0x02	; 2
    1cca:	0e 94 19 2d 	call	0x5a32	; 0x5a32 <eeprom_read_dword>
    1cce:	6f 3f       	cpi	r22, 0xFF	; 255
    1cd0:	2f ef       	ldi	r18, 0xFF	; 255
    1cd2:	72 07       	cpc	r23, r18
    1cd4:	82 07       	cpc	r24, r18
    1cd6:	92 07       	cpc	r25, r18
    1cd8:	09 f0       	breq	.+2      	; 0x1cdc <_Z20initializeEEPROMVarsh+0x4ae>
    1cda:	09 cf       	rjmp	.-494    	; 0x1aee <_Z20initializeEEPROMVarsh+0x2c0>
    1cdc:	df cf       	rjmp	.-66     	; 0x1c9c <_Z20initializeEEPROMVarsh+0x46e>
		{
			g_event_start_epoch = EEPROM_START_EPOCH_DEFAULT;
    1cde:	10 92 4e 05 	sts	0x054E, r1	; 0x80054e <g_event_start_epoch>
    1ce2:	10 92 4f 05 	sts	0x054F, r1	; 0x80054f <g_event_start_epoch+0x1>
    1ce6:	10 92 50 05 	sts	0x0550, r1	; 0x800550 <g_event_start_epoch+0x2>
    1cea:	10 92 51 05 	sts	0x0551, r1	; 0x800551 <g_event_start_epoch+0x3>
			eeprom_update_dword(&ee_event_finish_epoch,g_event_start_epoch);
    1cee:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <g_event_start_epoch>
    1cf2:	50 91 4f 05 	lds	r21, 0x054F	; 0x80054f <g_event_start_epoch+0x1>
    1cf6:	60 91 50 05 	lds	r22, 0x0550	; 0x800550 <g_event_start_epoch+0x2>
    1cfa:	70 91 51 05 	lds	r23, 0x0551	; 0x800551 <g_event_start_epoch+0x3>
    1cfe:	88 e2       	ldi	r24, 0x28	; 40
    1d00:	92 e0       	ldi	r25, 0x02	; 2
    1d02:	0e 94 37 2d 	call	0x5a6e	; 0x5a6e <eeprom_update_dword>
    1d06:	01 cf       	rjmp	.-510    	; 0x1b0a <_Z20initializeEEPROMVarsh+0x2dc>
	{
		g_event_finish_epoch = g_event_start_epoch + SECONDS_24H;
	}

	return;
}
    1d08:	df 91       	pop	r29
    1d0a:	cf 91       	pop	r28
    1d0c:	1f 91       	pop	r17
    1d0e:	0f 91       	pop	r16
    1d10:	ff 90       	pop	r15
    1d12:	ef 90       	pop	r14
    1d14:	df 90       	pop	r13
    1d16:	cf 90       	pop	r12
    1d18:	08 95       	ret

00001d1a <_Z11setupForFoxP5Fox_t>:

void setupForFox(Fox_t* fox)
{
	if(fox)
    1d1a:	00 97       	sbiw	r24, 0x00	; 0
    1d1c:	31 f0       	breq	.+12     	; 0x1d2a <_Z11setupForFoxP5Fox_t+0x10>
	{
		if(*fox != INVALID_FOX)
    1d1e:	fc 01       	movw	r30, r24
    1d20:	80 81       	ld	r24, Z
    1d22:	86 31       	cpi	r24, 0x16	; 22
    1d24:	11 f0       	breq	.+4      	; 0x1d2a <_Z11setupForFoxP5Fox_t+0x10>
		{
			g_fox = *fox;
    1d26:	80 93 5c 05 	sts	0x055C, r24	; 0x80055c <g_fox>
		}
	}

	switch(g_fox)
    1d2a:	e0 91 5c 05 	lds	r30, 0x055C	; 0x80055c <g_fox>
    1d2e:	8e 2f       	mov	r24, r30
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	fc 01       	movw	r30, r24
    1d34:	31 97       	sbiw	r30, 0x01	; 1
    1d36:	e5 31       	cpi	r30, 0x15	; 21
    1d38:	f1 05       	cpc	r31, r1
    1d3a:	08 f0       	brcs	.+2      	; 0x1d3e <_Z11setupForFoxP5Fox_t+0x24>
    1d3c:	6b c0       	rjmp	.+214    	; 0x1e14 <_Z11setupForFoxP5Fox_t+0xfa>
    1d3e:	ea 59       	subi	r30, 0x9A	; 154
    1d40:	ff 4f       	sbci	r31, 0xFF	; 255
    1d42:	0c 94 83 28 	jmp	0x5106	; 0x5106 <__tablejump2__>
	{
		case NO_CODE_START_TONES_2M:
		{
			g_startclock_interval = 120;
    1d46:	88 e7       	ldi	r24, 0x78	; 120
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <g_startclock_interval+0x1>
    1d4e:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <g_startclock_interval>
			g_enable_start_timer = TRUE;
    1d52:	81 e0       	ldi	r24, 0x01	; 1
    1d54:	80 93 07 05 	sts	0x0507, r24	; 0x800507 <_ZL20g_enable_start_timer>
		}
		break;
    1d58:	7d c0       	rjmp	.+250    	; 0x1e54 <_Z11setupForFoxP5Fox_t+0x13a>

		case NO_CODE_START_TONES_5M:
		{
			g_startclock_interval = 300;
    1d5a:	8c e2       	ldi	r24, 0x2C	; 44
    1d5c:	91 e0       	ldi	r25, 0x01	; 1
    1d5e:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <g_startclock_interval+0x1>
    1d62:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <g_startclock_interval>
			g_enable_start_timer = TRUE;
    1d66:	81 e0       	ldi	r24, 0x01	; 1
    1d68:	80 93 07 05 	sts	0x0507, r24	; 0x800507 <_ZL20g_enable_start_timer>
		}
		break;
    1d6c:	73 c0       	rjmp	.+230    	; 0x1e54 <_Z11setupForFoxP5Fox_t+0x13a>
		case FOX_3:
		case FOX_4:
		case FOX_5:
		case FOX_DEMO:
		{
			g_on_air_interval = 60;
    1d6e:	8c e3       	ldi	r24, 0x3C	; 60
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	90 93 49 05 	sts	0x0549, r25	; 0x800549 <g_on_air_interval+0x1>
    1d76:	80 93 48 05 	sts	0x0548, r24	; 0x800548 <g_on_air_interval>
			g_number_of_foxes = 5;
    1d7a:	25 e0       	ldi	r18, 0x05	; 5
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
    1d7e:	30 93 45 05 	sts	0x0545, r19	; 0x800545 <g_number_of_foxes+0x1>
    1d82:	20 93 44 05 	sts	0x0544, r18	; 0x800544 <g_number_of_foxes>
			g_fox_id_offset = 0;
    1d86:	10 92 42 05 	sts	0x0542, r1	; 0x800542 <g_fox_id_offset+0x1>
    1d8a:	10 92 41 05 	sts	0x0541, r1	; 0x800541 <g_fox_id_offset>
			g_pattern_codespeed = 8;
    1d8e:	28 e0       	ldi	r18, 0x08	; 8
    1d90:	20 93 17 01 	sts	0x0117, r18	; 0x800117 <_ZL19g_pattern_codespeed>
			g_id_interval = 60;
    1d94:	90 93 40 05 	sts	0x0540, r25	; 0x800540 <g_id_interval+0x1>
    1d98:	80 93 3f 05 	sts	0x053F, r24	; 0x80053f <g_id_interval>
			g_startclock_interval = 300;
    1d9c:	8c e2       	ldi	r24, 0x2C	; 44
    1d9e:	91 e0       	ldi	r25, 0x01	; 1
    1da0:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <g_startclock_interval+0x1>
    1da4:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <g_startclock_interval>
		}
		break;
    1da8:	55 c0       	rjmp	.+170    	; 0x1e54 <_Z11setupForFoxP5Fox_t+0x13a>

		case SPRINT_S1:
		case SPRINT_F5:
		case SPRINT_DEMO:
		{
			g_on_air_interval = 12;
    1daa:	8c e0       	ldi	r24, 0x0C	; 12
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	90 93 49 05 	sts	0x0549, r25	; 0x800549 <g_on_air_interval+0x1>
    1db2:	80 93 48 05 	sts	0x0548, r24	; 0x800548 <g_on_air_interval>
			g_number_of_foxes = 5;
    1db6:	85 e0       	ldi	r24, 0x05	; 5
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	90 93 45 05 	sts	0x0545, r25	; 0x800545 <g_number_of_foxes+0x1>
    1dbe:	80 93 44 05 	sts	0x0544, r24	; 0x800544 <g_number_of_foxes>
			g_pattern_codespeed = ((g_fox == SPRINT_DEMO) || (g_fox <= SPRINT_S5)) ? 10 : 15;
    1dc2:	80 91 5c 05 	lds	r24, 0x055C	; 0x80055c <g_fox>
    1dc6:	83 31       	cpi	r24, 0x13	; 19
    1dc8:	31 f0       	breq	.+12     	; 0x1dd6 <_Z11setupForFoxP5Fox_t+0xbc>
    1dca:	80 91 5c 05 	lds	r24, 0x055C	; 0x80055c <g_fox>
    1dce:	8e 30       	cpi	r24, 0x0E	; 14
    1dd0:	20 f0       	brcs	.+8      	; 0x1dda <_Z11setupForFoxP5Fox_t+0xc0>
    1dd2:	8f e0       	ldi	r24, 0x0F	; 15
    1dd4:	03 c0       	rjmp	.+6      	; 0x1ddc <_Z11setupForFoxP5Fox_t+0xc2>
    1dd6:	8a e0       	ldi	r24, 0x0A	; 10
    1dd8:	01 c0       	rjmp	.+2      	; 0x1ddc <_Z11setupForFoxP5Fox_t+0xc2>
    1dda:	8a e0       	ldi	r24, 0x0A	; 10
    1ddc:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <_ZL19g_pattern_codespeed>
			g_fox_id_offset = g_fox <= SPRINT_S5 ? SPRINT_S1 - 1 : SPRINT_F1 - 1;
    1de0:	80 91 5c 05 	lds	r24, 0x055C	; 0x80055c <g_fox>
    1de4:	8e 30       	cpi	r24, 0x0E	; 14
    1de6:	18 f0       	brcs	.+6      	; 0x1dee <_Z11setupForFoxP5Fox_t+0xd4>
    1de8:	8d e0       	ldi	r24, 0x0D	; 13
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	02 c0       	rjmp	.+4      	; 0x1df2 <_Z11setupForFoxP5Fox_t+0xd8>
    1dee:	88 e0       	ldi	r24, 0x08	; 8
    1df0:	90 e0       	ldi	r25, 0x00	; 0
    1df2:	90 93 42 05 	sts	0x0542, r25	; 0x800542 <g_fox_id_offset+0x1>
    1df6:	80 93 41 05 	sts	0x0541, r24	; 0x800541 <g_fox_id_offset>
			g_id_interval = 600;
    1dfa:	88 e5       	ldi	r24, 0x58	; 88
    1dfc:	92 e0       	ldi	r25, 0x02	; 2
    1dfe:	90 93 40 05 	sts	0x0540, r25	; 0x800540 <g_id_interval+0x1>
    1e02:	80 93 3f 05 	sts	0x053F, r24	; 0x80053f <g_id_interval>
			g_startclock_interval = 120;
    1e06:	88 e7       	ldi	r24, 0x78	; 120
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <g_startclock_interval+0x1>
    1e0e:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <g_startclock_interval>
		}
		break;
    1e12:	20 c0       	rjmp	.+64     	; 0x1e54 <_Z11setupForFoxP5Fox_t+0x13a>

/* case BEACON: */
/* case SPECTATOR: */
		default:
		{
			g_on_air_interval = 600;
    1e14:	88 e5       	ldi	r24, 0x58	; 88
    1e16:	92 e0       	ldi	r25, 0x02	; 2
    1e18:	90 93 49 05 	sts	0x0549, r25	; 0x800549 <g_on_air_interval+0x1>
    1e1c:	80 93 48 05 	sts	0x0548, r24	; 0x800548 <g_on_air_interval>
			g_number_of_foxes = 1;
    1e20:	21 e0       	ldi	r18, 0x01	; 1
    1e22:	30 e0       	ldi	r19, 0x00	; 0
    1e24:	30 93 45 05 	sts	0x0545, r19	; 0x800545 <g_number_of_foxes+0x1>
    1e28:	20 93 44 05 	sts	0x0544, r18	; 0x800544 <g_number_of_foxes>
			g_pattern_codespeed = 8;
    1e2c:	28 e0       	ldi	r18, 0x08	; 8
    1e2e:	20 93 17 01 	sts	0x0117, r18	; 0x800117 <_ZL19g_pattern_codespeed>
			g_id_interval = 600;
    1e32:	90 93 40 05 	sts	0x0540, r25	; 0x800540 <g_id_interval+0x1>
    1e36:	80 93 3f 05 	sts	0x053F, r24	; 0x80053f <g_id_interval>
			g_startclock_interval = (g_fox == SPECTATOR) ? 120 : 300;
    1e3a:	80 91 5c 05 	lds	r24, 0x055C	; 0x80055c <g_fox>
    1e3e:	88 30       	cpi	r24, 0x08	; 8
    1e40:	19 f0       	breq	.+6      	; 0x1e48 <_Z11setupForFoxP5Fox_t+0x12e>
    1e42:	8c e2       	ldi	r24, 0x2C	; 44
    1e44:	91 e0       	ldi	r25, 0x01	; 1
    1e46:	02 c0       	rjmp	.+4      	; 0x1e4c <_Z11setupForFoxP5Fox_t+0x132>
    1e48:	88 e7       	ldi	r24, 0x78	; 120
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <g_startclock_interval+0x1>
    1e50:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <g_startclock_interval>
		}
		break;
	}

	if(g_use_rtc_to_start)
    1e54:	80 91 35 05 	lds	r24, 0x0535	; 0x800535 <g_use_rtc_to_start>
    1e58:	88 23       	and	r24, r24
    1e5a:	09 f4       	brne	.+2      	; 0x1e5e <_Z11setupForFoxP5Fox_t+0x144>
    1e5c:	8a c0       	rjmp	.+276    	; 0x1f72 <_Z11setupForFoxP5Fox_t+0x258>
	{
		if(g_event_start_epoch < g_current_epoch)   /* timed event in progress */
    1e5e:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <g_event_start_epoch>
    1e62:	50 91 4f 05 	lds	r21, 0x054F	; 0x80054f <g_event_start_epoch+0x1>
    1e66:	60 91 50 05 	lds	r22, 0x0550	; 0x800550 <g_event_start_epoch+0x2>
    1e6a:	70 91 51 05 	lds	r23, 0x0551	; 0x800551 <g_event_start_epoch+0x3>
    1e6e:	80 91 52 05 	lds	r24, 0x0552	; 0x800552 <g_current_epoch>
    1e72:	90 91 53 05 	lds	r25, 0x0553	; 0x800553 <g_current_epoch+0x1>
    1e76:	a0 91 54 05 	lds	r26, 0x0554	; 0x800554 <g_current_epoch+0x2>
    1e7a:	b0 91 55 05 	lds	r27, 0x0555	; 0x800555 <g_current_epoch+0x3>
    1e7e:	48 17       	cp	r20, r24
    1e80:	59 07       	cpc	r21, r25
    1e82:	6a 07       	cpc	r22, r26
    1e84:	7b 07       	cpc	r23, r27
    1e86:	08 f0       	brcs	.+2      	; 0x1e8a <_Z11setupForFoxP5Fox_t+0x170>
    1e88:	4d c0       	rjmp	.+154    	; 0x1f24 <_Z11setupForFoxP5Fox_t+0x20a>
		{
			g_seconds_since_sync = g_current_epoch - g_event_start_epoch;               /* Total elapsed time counter: synced at event start time */
    1e8a:	80 91 52 05 	lds	r24, 0x0552	; 0x800552 <g_current_epoch>
    1e8e:	90 91 53 05 	lds	r25, 0x0553	; 0x800553 <g_current_epoch+0x1>
    1e92:	a0 91 54 05 	lds	r26, 0x0554	; 0x800554 <g_current_epoch+0x2>
    1e96:	b0 91 55 05 	lds	r27, 0x0555	; 0x800555 <g_current_epoch+0x3>
    1e9a:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <g_event_start_epoch>
    1e9e:	50 91 4f 05 	lds	r21, 0x054F	; 0x80054f <g_event_start_epoch+0x1>
    1ea2:	60 91 50 05 	lds	r22, 0x0550	; 0x800550 <g_event_start_epoch+0x2>
    1ea6:	70 91 51 05 	lds	r23, 0x0551	; 0x800551 <g_event_start_epoch+0x3>
    1eaa:	84 1b       	sub	r24, r20
    1eac:	95 0b       	sbc	r25, r21
    1eae:	a6 0b       	sbc	r26, r22
    1eb0:	b7 0b       	sbc	r27, r23
    1eb2:	80 93 5d 05 	sts	0x055D, r24	; 0x80055d <g_seconds_since_sync>
    1eb6:	90 93 5e 05 	sts	0x055E, r25	; 0x80055e <g_seconds_since_sync+0x1>
    1eba:	a0 93 5f 05 	sts	0x055F, r26	; 0x80055f <g_seconds_since_sync+0x2>
    1ebe:	b0 93 60 05 	sts	0x0560, r27	; 0x800560 <g_seconds_since_sync+0x3>
			g_on_the_air       = FALSE;             /* Controls transmitter Morse activity */
    1ec2:	10 92 5b 05 	sts	0x055B, r1	; 0x80055b <g_on_the_air+0x1>
    1ec6:	10 92 5a 05 	sts	0x055A, r1	; 0x80055a <g_on_the_air>
			g_code_throttle    = 0;                 /* Adjusts Morse code speed */
    1eca:	10 92 59 05 	sts	0x0559, r1	; 0x800559 <g_code_throttle+0x1>
    1ece:	10 92 58 05 	sts	0x0558, r1	; 0x800558 <g_code_throttle>
			g_callsign_sent = FALSE;
    1ed2:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <g_callsign_sent>

			g_fox_counter = 1 + (g_seconds_since_sync % g_on_air_interval);
    1ed6:	60 91 5d 05 	lds	r22, 0x055D	; 0x80055d <g_seconds_since_sync>
    1eda:	70 91 5e 05 	lds	r23, 0x055E	; 0x80055e <g_seconds_since_sync+0x1>
    1ede:	80 91 5f 05 	lds	r24, 0x055F	; 0x80055f <g_seconds_since_sync+0x2>
    1ee2:	90 91 60 05 	lds	r25, 0x0560	; 0x800560 <g_seconds_since_sync+0x3>
    1ee6:	20 91 48 05 	lds	r18, 0x0548	; 0x800548 <g_on_air_interval>
    1eea:	30 91 49 05 	lds	r19, 0x0549	; 0x800549 <g_on_air_interval+0x1>
    1eee:	03 2e       	mov	r0, r19
    1ef0:	00 0c       	add	r0, r0
    1ef2:	44 0b       	sbc	r20, r20
    1ef4:	55 0b       	sbc	r21, r21
    1ef6:	0e 94 64 28 	call	0x50c8	; 0x50c8 <__divmodsi4>
    1efa:	6f 5f       	subi	r22, 0xFF	; 255
    1efc:	7f 4f       	sbci	r23, 0xFF	; 255
    1efe:	70 93 1f 01 	sts	0x011F, r23	; 0x80011f <g_fox_counter+0x1>
    1f02:	60 93 1e 01 	sts	0x011E, r22	; 0x80011e <g_fox_counter>
//			g_on_air_interval = 0;
			g_fox_seconds_into_interval = 0;
    1f06:	10 92 47 05 	sts	0x0547, r1	; 0x800547 <g_fox_seconds_into_interval+0x1>
    1f0a:	10 92 46 05 	sts	0x0546, r1	; 0x800546 <g_fox_seconds_into_interval>
//			g_number_of_foxes = 0;
			g_fox_transition = FALSE;
    1f0e:	10 92 43 05 	sts	0x0543, r1	; 0x800543 <g_fox_transition>
			g_fox_id_offset = 0;
    1f12:	10 92 42 05 	sts	0x0542, r1	; 0x800542 <g_fox_id_offset+0x1>
    1f16:	10 92 41 05 	sts	0x0541, r1	; 0x800541 <g_fox_id_offset>
//			g_id_interval = 0;
			g_time_to_ID = FALSE;
    1f1a:	10 92 3e 05 	sts	0x053E, r1	; 0x80053e <g_time_to_ID>
			g_audio_tone_state = OFF;
    1f1e:	10 92 3d 05 	sts	0x053D, r1	; 0x80053d <g_audio_tone_state>
    1f22:	47 c0       	rjmp	.+142    	; 0x1fb2 <_Z11setupForFoxP5Fox_t+0x298>
		}
		else                            /* event starts in the future */
		{
			g_seconds_since_sync = 0;   /* Total elapsed time counter */
    1f24:	10 92 5d 05 	sts	0x055D, r1	; 0x80055d <g_seconds_since_sync>
    1f28:	10 92 5e 05 	sts	0x055E, r1	; 0x80055e <g_seconds_since_sync+0x1>
    1f2c:	10 92 5f 05 	sts	0x055F, r1	; 0x80055f <g_seconds_since_sync+0x2>
    1f30:	10 92 60 05 	sts	0x0560, r1	; 0x800560 <g_seconds_since_sync+0x3>
			g_on_the_air       = FALSE; /* Controls transmitter Morse activity */
    1f34:	10 92 5b 05 	sts	0x055B, r1	; 0x80055b <g_on_the_air+0x1>
    1f38:	10 92 5a 05 	sts	0x055A, r1	; 0x80055a <g_on_the_air>
			g_code_throttle    = 0;     /* Adjusts Morse code speed */
    1f3c:	10 92 59 05 	sts	0x0559, r1	; 0x800559 <g_code_throttle+0x1>
    1f40:	10 92 58 05 	sts	0x0558, r1	; 0x800558 <g_code_throttle>
			g_callsign_sent = FALSE;
    1f44:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <g_callsign_sent>

			g_fox_counter = 1;
    1f48:	81 e0       	ldi	r24, 0x01	; 1
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <g_fox_counter+0x1>
    1f50:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <g_fox_counter>
//			g_on_air_interval = 0;
			g_fox_seconds_into_interval = 0;
    1f54:	10 92 47 05 	sts	0x0547, r1	; 0x800547 <g_fox_seconds_into_interval+0x1>
    1f58:	10 92 46 05 	sts	0x0546, r1	; 0x800546 <g_fox_seconds_into_interval>
//			g_number_of_foxes = 0;
			g_fox_transition = FALSE;
    1f5c:	10 92 43 05 	sts	0x0543, r1	; 0x800543 <g_fox_transition>
			g_fox_id_offset = 0;
    1f60:	10 92 42 05 	sts	0x0542, r1	; 0x800542 <g_fox_id_offset+0x1>
    1f64:	10 92 41 05 	sts	0x0541, r1	; 0x800541 <g_fox_id_offset>
//			g_id_interval = 0;
			g_time_to_ID = FALSE;
    1f68:	10 92 3e 05 	sts	0x053E, r1	; 0x80053e <g_time_to_ID>
			g_audio_tone_state = OFF;
    1f6c:	10 92 3d 05 	sts	0x053D, r1	; 0x80053d <g_audio_tone_state>
    1f70:	20 c0       	rjmp	.+64     	; 0x1fb2 <_Z11setupForFoxP5Fox_t+0x298>
		}
	}
	else                            /* manual start */
	{
		g_seconds_since_sync = 0;   /* Total elapsed time counter */
    1f72:	10 92 5d 05 	sts	0x055D, r1	; 0x80055d <g_seconds_since_sync>
    1f76:	10 92 5e 05 	sts	0x055E, r1	; 0x80055e <g_seconds_since_sync+0x1>
    1f7a:	10 92 5f 05 	sts	0x055F, r1	; 0x80055f <g_seconds_since_sync+0x2>
    1f7e:	10 92 60 05 	sts	0x0560, r1	; 0x800560 <g_seconds_since_sync+0x3>
		g_on_the_air       = FALSE; /* Controls transmitter Morse activity */
    1f82:	10 92 5b 05 	sts	0x055B, r1	; 0x80055b <g_on_the_air+0x1>
    1f86:	10 92 5a 05 	sts	0x055A, r1	; 0x80055a <g_on_the_air>
		g_code_throttle    = 0;     /* Adjusts Morse code speed */
    1f8a:	10 92 59 05 	sts	0x0559, r1	; 0x800559 <g_code_throttle+0x1>
    1f8e:	10 92 58 05 	sts	0x0558, r1	; 0x800558 <g_code_throttle>
		g_callsign_sent = FALSE;
    1f92:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <g_callsign_sent>

//		g_on_air_interval = 0;
		g_fox_seconds_into_interval = 0;
    1f96:	10 92 47 05 	sts	0x0547, r1	; 0x800547 <g_fox_seconds_into_interval+0x1>
    1f9a:	10 92 46 05 	sts	0x0546, r1	; 0x800546 <g_fox_seconds_into_interval>
//		g_number_of_foxes = 0;
		g_fox_transition = FALSE;
    1f9e:	10 92 43 05 	sts	0x0543, r1	; 0x800543 <g_fox_transition>
		g_fox_id_offset = 0;
    1fa2:	10 92 42 05 	sts	0x0542, r1	; 0x800542 <g_fox_id_offset+0x1>
    1fa6:	10 92 41 05 	sts	0x0541, r1	; 0x800541 <g_fox_id_offset>
//		g_id_interval = 0;
		g_time_to_ID = FALSE;
    1faa:	10 92 3e 05 	sts	0x053E, r1	; 0x80053e <g_time_to_ID>
		g_audio_tone_state = OFF;
    1fae:	10 92 3d 05 	sts	0x053D, r1	; 0x80053d <g_audio_tone_state>
	}

	g_LEDs_Timed_Out = !g_enable_LEDs;
    1fb2:	90 91 08 05 	lds	r25, 0x0508	; 0x800508 <_ZL13g_enable_LEDs>
    1fb6:	81 e0       	ldi	r24, 0x01	; 1
    1fb8:	91 11       	cpse	r25, r1
    1fba:	80 e0       	ldi	r24, 0x00	; 0
    1fbc:	80 93 d1 04 	sts	0x04D1, r24	; 0x8004d1 <_ZL16g_LEDs_Timed_Out>
	digitalWrite(PIN_LED2,OFF); /*  LED Off - in case it was on in the middle of a transmission */
    1fc0:	60 e0       	ldi	r22, 0x00	; 0
    1fc2:	87 e0       	ldi	r24, 0x07	; 7
    1fc4:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>
    1fc8:	08 95       	ret

00001fca <__vector_1>:

/***********************************************************************
 * Handle RTC 1-second interrupts
 **********************************************************************/
ISR( INT0_vect )
{
    1fca:	1f 92       	push	r1
    1fcc:	0f 92       	push	r0
    1fce:	0f b6       	in	r0, 0x3f	; 63
    1fd0:	0f 92       	push	r0
    1fd2:	11 24       	eor	r1, r1
    1fd4:	2f 93       	push	r18
    1fd6:	3f 93       	push	r19
    1fd8:	4f 93       	push	r20
    1fda:	5f 93       	push	r21
    1fdc:	6f 93       	push	r22
    1fde:	7f 93       	push	r23
    1fe0:	8f 93       	push	r24
    1fe2:	9f 93       	push	r25
    1fe4:	af 93       	push	r26
    1fe6:	bf 93       	push	r27
    1fe8:	ef 93       	push	r30
    1fea:	ff 93       	push	r31
	static int id_countdown = 0;

	g_current_epoch++;
    1fec:	80 91 52 05 	lds	r24, 0x0552	; 0x800552 <g_current_epoch>
    1ff0:	90 91 53 05 	lds	r25, 0x0553	; 0x800553 <g_current_epoch+0x1>
    1ff4:	a0 91 54 05 	lds	r26, 0x0554	; 0x800554 <g_current_epoch+0x2>
    1ff8:	b0 91 55 05 	lds	r27, 0x0555	; 0x800555 <g_current_epoch+0x3>
    1ffc:	01 96       	adiw	r24, 0x01	; 1
    1ffe:	a1 1d       	adc	r26, r1
    2000:	b1 1d       	adc	r27, r1
    2002:	80 93 52 05 	sts	0x0552, r24	; 0x800552 <g_current_epoch>
    2006:	90 93 53 05 	sts	0x0553, r25	; 0x800553 <g_current_epoch+0x1>
    200a:	a0 93 54 05 	sts	0x0554, r26	; 0x800554 <g_current_epoch+0x2>
    200e:	b0 93 55 05 	sts	0x0555, r27	; 0x800555 <g_current_epoch+0x3>

	if(g_temperature_check_countdown)
    2012:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <_ZL29g_temperature_check_countdown>
    2016:	88 23       	and	r24, r24
    2018:	29 f0       	breq	.+10     	; 0x2024 <__vector_1+0x5a>
	{
		g_temperature_check_countdown--;
    201a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <_ZL29g_temperature_check_countdown>
    201e:	81 50       	subi	r24, 0x01	; 1
    2020:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <_ZL29g_temperature_check_countdown>
		/* TODO: only access RTC/I2C functions if sleeping - never if foreground processes are running
		 * g_current_epoch = rv3028_get_epoch(NULL, NULL); / * resync to RTC periodically * / */
	}

	if(g_transmissions_disabled)
    2024:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <g_transmissions_disabled>
    2028:	88 23       	and	r24, r24
    202a:	91 f1       	breq	.+100    	; 0x2090 <__vector_1+0xc6>
	{
		if(g_use_rtc_to_start)
    202c:	80 91 35 05 	lds	r24, 0x0535	; 0x800535 <g_use_rtc_to_start>
    2030:	88 23       	and	r24, r24
    2032:	09 f4       	brne	.+2      	; 0x2036 <__vector_1+0x6c>
    2034:	4f c1       	rjmp	.+670    	; 0x22d4 <__vector_1+0x30a>
		{
			if((g_current_epoch >= g_event_start_epoch) && (g_current_epoch < g_event_finish_epoch))
    2036:	40 91 52 05 	lds	r20, 0x0552	; 0x800552 <g_current_epoch>
    203a:	50 91 53 05 	lds	r21, 0x0553	; 0x800553 <g_current_epoch+0x1>
    203e:	60 91 54 05 	lds	r22, 0x0554	; 0x800554 <g_current_epoch+0x2>
    2042:	70 91 55 05 	lds	r23, 0x0555	; 0x800555 <g_current_epoch+0x3>
    2046:	80 91 4e 05 	lds	r24, 0x054E	; 0x80054e <g_event_start_epoch>
    204a:	90 91 4f 05 	lds	r25, 0x054F	; 0x80054f <g_event_start_epoch+0x1>
    204e:	a0 91 50 05 	lds	r26, 0x0550	; 0x800550 <g_event_start_epoch+0x2>
    2052:	b0 91 51 05 	lds	r27, 0x0551	; 0x800551 <g_event_start_epoch+0x3>
    2056:	48 17       	cp	r20, r24
    2058:	59 07       	cpc	r21, r25
    205a:	6a 07       	cpc	r22, r26
    205c:	7b 07       	cpc	r23, r27
    205e:	08 f4       	brcc	.+2      	; 0x2062 <__vector_1+0x98>
    2060:	39 c1       	rjmp	.+626    	; 0x22d4 <__vector_1+0x30a>
    2062:	40 91 52 05 	lds	r20, 0x0552	; 0x800552 <g_current_epoch>
    2066:	50 91 53 05 	lds	r21, 0x0553	; 0x800553 <g_current_epoch+0x1>
    206a:	60 91 54 05 	lds	r22, 0x0554	; 0x800554 <g_current_epoch+0x2>
    206e:	70 91 55 05 	lds	r23, 0x0555	; 0x800555 <g_current_epoch+0x3>
    2072:	80 91 4a 05 	lds	r24, 0x054A	; 0x80054a <g_event_finish_epoch>
    2076:	90 91 4b 05 	lds	r25, 0x054B	; 0x80054b <g_event_finish_epoch+0x1>
    207a:	a0 91 4c 05 	lds	r26, 0x054C	; 0x80054c <g_event_finish_epoch+0x2>
    207e:	b0 91 4d 05 	lds	r27, 0x054D	; 0x80054d <g_event_finish_epoch+0x3>
    2082:	48 17       	cp	r20, r24
    2084:	59 07       	cpc	r21, r25
    2086:	6a 07       	cpc	r22, r26
    2088:	7b 07       	cpc	r23, r27
    208a:	08 f4       	brcc	.+2      	; 0x208e <__vector_1+0xc4>
    208c:	e9 c0       	rjmp	.+466    	; 0x2260 <__vector_1+0x296>
    208e:	22 c1       	rjmp	.+580    	; 0x22d4 <__vector_1+0x30a>
			}
		}
	}
	else
	{
		if(g_use_rtc_to_start)
    2090:	80 91 35 05 	lds	r24, 0x0535	; 0x800535 <g_use_rtc_to_start>
    2094:	88 23       	and	r24, r24
    2096:	f1 f0       	breq	.+60     	; 0x20d4 <__vector_1+0x10a>
		{
			if(g_current_epoch >= g_event_finish_epoch)
    2098:	40 91 52 05 	lds	r20, 0x0552	; 0x800552 <g_current_epoch>
    209c:	50 91 53 05 	lds	r21, 0x0553	; 0x800553 <g_current_epoch+0x1>
    20a0:	60 91 54 05 	lds	r22, 0x0554	; 0x800554 <g_current_epoch+0x2>
    20a4:	70 91 55 05 	lds	r23, 0x0555	; 0x800555 <g_current_epoch+0x3>
    20a8:	80 91 4a 05 	lds	r24, 0x054A	; 0x80054a <g_event_finish_epoch>
    20ac:	90 91 4b 05 	lds	r25, 0x054B	; 0x80054b <g_event_finish_epoch+0x1>
    20b0:	a0 91 4c 05 	lds	r26, 0x054C	; 0x80054c <g_event_finish_epoch+0x2>
    20b4:	b0 91 4d 05 	lds	r27, 0x054D	; 0x80054d <g_event_finish_epoch+0x3>
    20b8:	48 17       	cp	r20, r24
    20ba:	59 07       	cpc	r21, r25
    20bc:	6a 07       	cpc	r22, r26
    20be:	7b 07       	cpc	r23, r27
    20c0:	48 f0       	brcs	.+18     	; 0x20d4 <__vector_1+0x10a>
			{
				g_use_rtc_to_start = FALSE;
    20c2:	10 92 35 05 	sts	0x0535, r1	; 0x800535 <g_use_rtc_to_start>
				g_transmissions_disabled = TRUE;
    20c6:	81 e0       	ldi	r24, 0x01	; 1
    20c8:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <g_transmissions_disabled>
				g_on_the_air = FALSE;
    20cc:	10 92 5b 05 	sts	0x055B, r1	; 0x80055b <g_on_the_air+0x1>
    20d0:	10 92 5a 05 	sts	0x055A, r1	; 0x80055a <g_on_the_air>
			}
		}

		if(!g_transmissions_disabled)
    20d4:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <g_transmissions_disabled>
    20d8:	81 11       	cpse	r24, r1
    20da:	fc c0       	rjmp	.+504    	; 0x22d4 <__vector_1+0x30a>
		{
			if(g_seconds_since_sync == 0)   /* sync just occurred */
    20dc:	80 91 5d 05 	lds	r24, 0x055D	; 0x80055d <g_seconds_since_sync>
    20e0:	90 91 5e 05 	lds	r25, 0x055E	; 0x80055e <g_seconds_since_sync+0x1>
    20e4:	a0 91 5f 05 	lds	r26, 0x055F	; 0x80055f <g_seconds_since_sync+0x2>
    20e8:	b0 91 60 05 	lds	r27, 0x0560	; 0x800560 <g_seconds_since_sync+0x3>
    20ec:	89 2b       	or	r24, r25
    20ee:	8a 2b       	or	r24, r26
    20f0:	8b 2b       	or	r24, r27
    20f2:	81 f4       	brne	.+32     	; 0x2114 <__vector_1+0x14a>
			{
				id_countdown = g_id_interval;
    20f4:	80 91 3f 05 	lds	r24, 0x053F	; 0x80053f <g_id_interval>
    20f8:	90 91 40 05 	lds	r25, 0x0540	; 0x800540 <g_id_interval+0x1>
    20fc:	90 93 7d 04 	sts	0x047D, r25	; 0x80047d <_ZZ10__vector_1E12id_countdown+0x1>
    2100:	80 93 7c 04 	sts	0x047C, r24	; 0x80047c <_ZZ10__vector_1E12id_countdown>
				g_fox_counter = 1;
    2104:	81 e0       	ldi	r24, 0x01	; 1
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <g_fox_counter+0x1>
    210c:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <g_fox_counter>
				g_lastSeconds = 0;
    2110:	10 92 3c 05 	sts	0x053C, r1	; 0x80053c <g_lastSeconds>
				/* TODO: only access RTC/I2C functions if sleeping - never if foreground processes are running
				 * g_current_epoch = rv3028_get_epoch(NULL, NULL); / * resync to RTC periodically * / */
			}

			g_seconds_since_sync++; /* Total elapsed time counter */
    2114:	80 91 5d 05 	lds	r24, 0x055D	; 0x80055d <g_seconds_since_sync>
    2118:	90 91 5e 05 	lds	r25, 0x055E	; 0x80055e <g_seconds_since_sync+0x1>
    211c:	a0 91 5f 05 	lds	r26, 0x055F	; 0x80055f <g_seconds_since_sync+0x2>
    2120:	b0 91 60 05 	lds	r27, 0x0560	; 0x800560 <g_seconds_since_sync+0x3>
    2124:	01 96       	adiw	r24, 0x01	; 1
    2126:	a1 1d       	adc	r26, r1
    2128:	b1 1d       	adc	r27, r1
    212a:	80 93 5d 05 	sts	0x055D, r24	; 0x80055d <g_seconds_since_sync>
    212e:	90 93 5e 05 	sts	0x055E, r25	; 0x80055e <g_seconds_since_sync+0x1>
    2132:	a0 93 5f 05 	sts	0x055F, r26	; 0x80055f <g_seconds_since_sync+0x2>
    2136:	b0 93 60 05 	sts	0x0560, r27	; 0x800560 <g_seconds_since_sync+0x3>
			g_fox_seconds_into_interval++;
    213a:	80 91 46 05 	lds	r24, 0x0546	; 0x800546 <g_fox_seconds_into_interval>
    213e:	90 91 47 05 	lds	r25, 0x0547	; 0x800547 <g_fox_seconds_into_interval+0x1>
    2142:	01 96       	adiw	r24, 0x01	; 1
    2144:	90 93 47 05 	sts	0x0547, r25	; 0x800547 <g_fox_seconds_into_interval+0x1>
    2148:	80 93 46 05 	sts	0x0546, r24	; 0x800546 <g_fox_seconds_into_interval>

			if(id_countdown)
    214c:	80 91 7c 04 	lds	r24, 0x047C	; 0x80047c <_ZZ10__vector_1E12id_countdown>
    2150:	90 91 7d 04 	lds	r25, 0x047D	; 0x80047d <_ZZ10__vector_1E12id_countdown+0x1>
    2154:	00 97       	sbiw	r24, 0x00	; 0
    2156:	29 f0       	breq	.+10     	; 0x2162 <__vector_1+0x198>
			{
				id_countdown--;
    2158:	01 97       	sbiw	r24, 0x01	; 1
    215a:	90 93 7d 04 	sts	0x047D, r25	; 0x80047d <_ZZ10__vector_1E12id_countdown+0x1>
    215e:	80 93 7c 04 	sts	0x047C, r24	; 0x80047c <_ZZ10__vector_1E12id_countdown>
			}

			if(g_number_of_foxes && ((g_seconds_since_sync % g_on_air_interval) == 0))
    2162:	80 91 44 05 	lds	r24, 0x0544	; 0x800544 <g_number_of_foxes>
    2166:	90 91 45 05 	lds	r25, 0x0545	; 0x800545 <g_number_of_foxes+0x1>
    216a:	89 2b       	or	r24, r25
    216c:	09 f4       	brne	.+2      	; 0x2170 <__vector_1+0x1a6>
    216e:	55 c0       	rjmp	.+170    	; 0x221a <__vector_1+0x250>
    2170:	60 91 5d 05 	lds	r22, 0x055D	; 0x80055d <g_seconds_since_sync>
    2174:	70 91 5e 05 	lds	r23, 0x055E	; 0x80055e <g_seconds_since_sync+0x1>
    2178:	80 91 5f 05 	lds	r24, 0x055F	; 0x80055f <g_seconds_since_sync+0x2>
    217c:	90 91 60 05 	lds	r25, 0x0560	; 0x800560 <g_seconds_since_sync+0x3>
    2180:	20 91 48 05 	lds	r18, 0x0548	; 0x800548 <g_on_air_interval>
    2184:	30 91 49 05 	lds	r19, 0x0549	; 0x800549 <g_on_air_interval+0x1>
    2188:	03 2e       	mov	r0, r19
    218a:	00 0c       	add	r0, r0
    218c:	44 0b       	sbc	r20, r20
    218e:	55 0b       	sbc	r21, r21
    2190:	0e 94 64 28 	call	0x50c8	; 0x50c8 <__divmodsi4>
    2194:	67 2b       	or	r22, r23
    2196:	68 2b       	or	r22, r24
    2198:	69 2b       	or	r22, r25
    219a:	09 f4       	brne	.+2      	; 0x219e <__vector_1+0x1d4>
    219c:	68 c0       	rjmp	.+208    	; 0x226e <__vector_1+0x2a4>
    219e:	3d c0       	rjmp	.+122    	; 0x221a <__vector_1+0x250>
			{
				g_fox_counter++;

				if(g_fox_counter > g_number_of_foxes)
				{
					g_fox_counter = 1;
    21a0:	81 e0       	ldi	r24, 0x01	; 1
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <g_fox_counter+0x1>
    21a8:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <g_fox_counter>

					if(g_sync_enabled)
    21ac:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <g_sync_enabled>
    21b0:	88 23       	and	r24, r24
    21b2:	a1 f0       	breq	.+40     	; 0x21dc <__vector_1+0x212>
					{
						PCMSK2 &= ~(1 << PCINT20);  /* Disable PCINT20 */
    21b4:	ed e6       	ldi	r30, 0x6D	; 109
    21b6:	f0 e0       	ldi	r31, 0x00	; 0
    21b8:	80 81       	ld	r24, Z
    21ba:	8f 7e       	andi	r24, 0xEF	; 239
    21bc:	80 83       	st	Z, r24
						PCICR &= ~(1 << PCIE2);     /* Disable pin change interrupt 2 */
    21be:	e8 e6       	ldi	r30, 0x68	; 104
    21c0:	f0 e0       	ldi	r31, 0x00	; 0
    21c2:	80 81       	ld	r24, Z
    21c4:	8b 7f       	andi	r24, 0xFB	; 251
    21c6:	80 83       	st	Z, r24
						pinMode(PIN_SYNC, INPUT);
    21c8:	60 e0       	ldi	r22, 0x00	; 0
    21ca:	84 e0       	ldi	r24, 0x04	; 4
    21cc:	0e 94 41 01 	call	0x282	; 0x282 <_Z7pinModehh>
						pinMode(PIN_SYNC, OUTPUT);  /* Set sync pin as output low */
    21d0:	61 e0       	ldi	r22, 0x01	; 1
    21d2:	84 e0       	ldi	r24, 0x04	; 4
    21d4:	0e 94 41 01 	call	0x282	; 0x282 <_Z7pinModehh>
						g_sync_enabled = FALSE;
    21d8:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <g_sync_enabled>
					}

					g_LEDs_Timed_Out = TRUE;
    21dc:	81 e0       	ldi	r24, 0x01	; 1
    21de:	80 93 d1 04 	sts	0x04D1, r24	; 0x8004d1 <_ZL16g_LEDs_Timed_Out>
					digitalWrite(PIN_LED2, OFF);
    21e2:	60 e0       	ldi	r22, 0x00	; 0
    21e4:	87 e0       	ldi	r24, 0x07	; 7
    21e6:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>
				}
				g_fox_transition = TRUE;
    21ea:	81 e0       	ldi	r24, 0x01	; 1
    21ec:	80 93 43 05 	sts	0x0543, r24	; 0x800543 <g_fox_transition>
				g_fox_seconds_into_interval = 0;
    21f0:	10 92 47 05 	sts	0x0547, r1	; 0x800547 <g_fox_seconds_into_interval+0x1>
    21f4:	10 92 46 05 	sts	0x0546, r1	; 0x800546 <g_fox_seconds_into_interval>

				if(!id_countdown)
    21f8:	80 91 7c 04 	lds	r24, 0x047C	; 0x80047c <_ZZ10__vector_1E12id_countdown>
    21fc:	90 91 7d 04 	lds	r25, 0x047D	; 0x80047d <_ZZ10__vector_1E12id_countdown+0x1>
    2200:	89 2b       	or	r24, r25
    2202:	59 f4       	brne	.+22     	; 0x221a <__vector_1+0x250>
				{
					id_countdown = g_id_interval;
    2204:	80 91 3f 05 	lds	r24, 0x053F	; 0x80053f <g_id_interval>
    2208:	90 91 40 05 	lds	r25, 0x0540	; 0x800540 <g_id_interval+0x1>
    220c:	90 93 7d 04 	sts	0x047D, r25	; 0x80047d <_ZZ10__vector_1E12id_countdown+0x1>
    2210:	80 93 7c 04 	sts	0x047C, r24	; 0x80047c <_ZZ10__vector_1E12id_countdown>
					g_time_to_ID = TRUE;
    2214:	81 e0       	ldi	r24, 0x01	; 1
    2216:	80 93 3e 05 	sts	0x053E, r24	; 0x80053e <g_time_to_ID>
				}
			}

			if(g_enable_start_timer && ((g_seconds_since_sync + 11) % g_startclock_interval <= 10))
    221a:	80 91 07 05 	lds	r24, 0x0507	; 0x800507 <_ZL20g_enable_start_timer>
    221e:	88 23       	and	r24, r24
    2220:	09 f4       	brne	.+2      	; 0x2224 <__vector_1+0x25a>
    2222:	56 c0       	rjmp	.+172    	; 0x22d0 <__vector_1+0x306>
    2224:	80 91 5d 05 	lds	r24, 0x055D	; 0x80055d <g_seconds_since_sync>
    2228:	90 91 5e 05 	lds	r25, 0x055E	; 0x80055e <g_seconds_since_sync+0x1>
    222c:	a0 91 5f 05 	lds	r26, 0x055F	; 0x80055f <g_seconds_since_sync+0x2>
    2230:	b0 91 60 05 	lds	r27, 0x0560	; 0x800560 <g_seconds_since_sync+0x3>
    2234:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <g_startclock_interval>
    2238:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <g_startclock_interval+0x1>
    223c:	bc 01       	movw	r22, r24
    223e:	cd 01       	movw	r24, r26
    2240:	65 5f       	subi	r22, 0xF5	; 245
    2242:	7f 4f       	sbci	r23, 0xFF	; 255
    2244:	8f 4f       	sbci	r24, 0xFF	; 255
    2246:	9f 4f       	sbci	r25, 0xFF	; 255
    2248:	03 2e       	mov	r0, r19
    224a:	00 0c       	add	r0, r0
    224c:	44 0b       	sbc	r20, r20
    224e:	55 0b       	sbc	r21, r21
    2250:	0e 94 64 28 	call	0x50c8	; 0x50c8 <__divmodsi4>
    2254:	6b 30       	cpi	r22, 0x0B	; 11
    2256:	71 05       	cpc	r23, r1
    2258:	81 05       	cpc	r24, r1
    225a:	91 05       	cpc	r25, r1
    225c:	f4 f0       	brlt	.+60     	; 0x229a <__vector_1+0x2d0>
    225e:	38 c0       	rjmp	.+112    	; 0x22d0 <__vector_1+0x306>
	{
		if(g_use_rtc_to_start)
		{
			if((g_current_epoch >= g_event_start_epoch) && (g_current_epoch < g_event_finish_epoch))
			{
				setupForFox(NULL);
    2260:	80 e0       	ldi	r24, 0x00	; 0
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <_Z11setupForFoxP5Fox_t>
				g_transmissions_disabled = FALSE;
    2268:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <g_transmissions_disabled>
    226c:	33 c0       	rjmp	.+102    	; 0x22d4 <__vector_1+0x30a>
				id_countdown--;
			}

			if(g_number_of_foxes && ((g_seconds_since_sync % g_on_air_interval) == 0))
			{
				g_fox_counter++;
    226e:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <g_fox_counter>
    2272:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <g_fox_counter+0x1>
    2276:	01 96       	adiw	r24, 0x01	; 1
    2278:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <g_fox_counter+0x1>
    227c:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <g_fox_counter>

				if(g_fox_counter > g_number_of_foxes)
    2280:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <g_fox_counter>
    2284:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <g_fox_counter+0x1>
    2288:	80 91 44 05 	lds	r24, 0x0544	; 0x800544 <g_number_of_foxes>
    228c:	90 91 45 05 	lds	r25, 0x0545	; 0x800545 <g_number_of_foxes+0x1>
    2290:	82 17       	cp	r24, r18
    2292:	93 07       	cpc	r25, r19
    2294:	0c f4       	brge	.+2      	; 0x2298 <__vector_1+0x2ce>
    2296:	84 cf       	rjmp	.-248    	; 0x21a0 <__vector_1+0x1d6>
    2298:	a8 cf       	rjmp	.-176    	; 0x21ea <__vector_1+0x220>
				}
			}

			if(g_enable_start_timer && ((g_seconds_since_sync + 11) % g_startclock_interval <= 10))
			{
				g_lastSeconds = (uint8_t)((g_seconds_since_sync + 11) % g_startclock_interval);
    229a:	80 91 5d 05 	lds	r24, 0x055D	; 0x80055d <g_seconds_since_sync>
    229e:	90 91 5e 05 	lds	r25, 0x055E	; 0x80055e <g_seconds_since_sync+0x1>
    22a2:	a0 91 5f 05 	lds	r26, 0x055F	; 0x80055f <g_seconds_since_sync+0x2>
    22a6:	b0 91 60 05 	lds	r27, 0x0560	; 0x800560 <g_seconds_since_sync+0x3>
    22aa:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <g_startclock_interval>
    22ae:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <g_startclock_interval+0x1>
    22b2:	bc 01       	movw	r22, r24
    22b4:	cd 01       	movw	r24, r26
    22b6:	65 5f       	subi	r22, 0xF5	; 245
    22b8:	7f 4f       	sbci	r23, 0xFF	; 255
    22ba:	8f 4f       	sbci	r24, 0xFF	; 255
    22bc:	9f 4f       	sbci	r25, 0xFF	; 255
    22be:	03 2e       	mov	r0, r19
    22c0:	00 0c       	add	r0, r0
    22c2:	44 0b       	sbc	r20, r20
    22c4:	55 0b       	sbc	r21, r21
    22c6:	0e 94 64 28 	call	0x50c8	; 0x50c8 <__divmodsi4>
    22ca:	60 93 3c 05 	sts	0x053C, r22	; 0x80053c <g_lastSeconds>
    22ce:	02 c0       	rjmp	.+4      	; 0x22d4 <__vector_1+0x30a>
			}
			else
			{
				g_lastSeconds = 0;
    22d0:	10 92 3c 05 	sts	0x053C, r1	; 0x80053c <g_lastSeconds>
			}
		}
	}
}   /* end of Timer1 ISR */
    22d4:	ff 91       	pop	r31
    22d6:	ef 91       	pop	r30
    22d8:	bf 91       	pop	r27
    22da:	af 91       	pop	r26
    22dc:	9f 91       	pop	r25
    22de:	8f 91       	pop	r24
    22e0:	7f 91       	pop	r23
    22e2:	6f 91       	pop	r22
    22e4:	5f 91       	pop	r21
    22e6:	4f 91       	pop	r20
    22e8:	3f 91       	pop	r19
    22ea:	2f 91       	pop	r18
    22ec:	0f 90       	pop	r0
    22ee:	0f be       	out	0x3f, r0	; 63
    22f0:	0f 90       	pop	r0
    22f2:	1f 90       	pop	r1
    22f4:	18 95       	reti

000022f6 <_Z12permCallsignPc>:
	g_LEDs_Timed_Out = !g_enable_LEDs;
	digitalWrite(PIN_LED2,OFF); /*  LED Off - in case it was on in the middle of a transmission */
}

void permCallsign(char* call)
{
    22f6:	0f 93       	push	r16
    22f8:	1f 93       	push	r17
    22fa:	cf 93       	push	r28
	uint8_t i;

	strncpy(g_messages_text[STATION_ID],call,MAX_PATTERN_TEXT_LENGTH);
    22fc:	44 e1       	ldi	r20, 0x14	; 20
    22fe:	50 e0       	ldi	r21, 0x00	; 0
    2300:	bc 01       	movw	r22, r24
    2302:	80 e2       	ldi	r24, 0x20	; 32
    2304:	95 e0       	ldi	r25, 0x05	; 5
    2306:	0e 94 32 2a 	call	0x5464	; 0x5464 <strncpy>

	for(i = 0; i < strlen(g_messages_text[STATION_ID]); i++)
    230a:	c0 e0       	ldi	r28, 0x00	; 0
    230c:	00 e2       	ldi	r16, 0x20	; 32
    230e:	15 e0       	ldi	r17, 0x05	; 5
    2310:	f8 01       	movw	r30, r16
    2312:	01 90       	ld	r0, Z+
    2314:	00 20       	and	r0, r0
    2316:	e9 f7       	brne	.-6      	; 0x2312 <_Z12permCallsignPc+0x1c>
    2318:	cf 01       	movw	r24, r30
    231a:	81 52       	subi	r24, 0x21	; 33
    231c:	95 40       	sbci	r25, 0x05	; 5
    231e:	2c 2f       	mov	r18, r28
    2320:	30 e0       	ldi	r19, 0x00	; 0
    2322:	28 17       	cp	r18, r24
    2324:	39 07       	cpc	r19, r25
    2326:	58 f4       	brcc	.+22     	; 0x233e <_Z12permCallsignPc+0x48>
	{
		eeprom_update_byte((uint8_t*)&ee_stationID_text[i],(uint8_t)g_messages_text[STATION_ID][i]);
    2328:	c9 01       	movw	r24, r18
    232a:	fc 01       	movw	r30, r24
    232c:	e5 5f       	subi	r30, 0xF5	; 245
    232e:	fa 4f       	sbci	r31, 0xFA	; 250
    2330:	65 89       	ldd	r22, Z+21	; 0x15
    2332:	8f 54       	subi	r24, 0x4F	; 79
    2334:	9d 4f       	sbci	r25, 0xFD	; 253
    2336:	0e 94 25 2d 	call	0x5a4a	; 0x5a4a <eeprom_update_byte>
{
	uint8_t i;

	strncpy(g_messages_text[STATION_ID],call,MAX_PATTERN_TEXT_LENGTH);

	for(i = 0; i < strlen(g_messages_text[STATION_ID]); i++)
    233a:	cf 5f       	subi	r28, 0xFF	; 255
    233c:	e9 cf       	rjmp	.-46     	; 0x2310 <_Z12permCallsignPc+0x1a>
	{
		eeprom_update_byte((uint8_t*)&ee_stationID_text[i],(uint8_t)g_messages_text[STATION_ID][i]);
	}

	eeprom_update_byte((uint8_t*)&ee_stationID_text[i],0);
    233e:	8c 2f       	mov	r24, r28
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	60 e0       	ldi	r22, 0x00	; 0
    2344:	8f 54       	subi	r24, 0x4F	; 79
    2346:	9d 4f       	sbci	r25, 0xFD	; 253
    2348:	0e 94 25 2d 	call	0x5a4a	; 0x5a4a <eeprom_update_byte>
}
    234c:	cf 91       	pop	r28
    234e:	1f 91       	pop	r17
    2350:	0f 91       	pop	r16
    2352:	08 95       	ret

00002354 <_Z7permFox5Fox_t>:

void permFox(Fox_t fox)
{
	eeprom_update_byte((uint8_t*)&ee_fox_setting,(uint8_t)fox);
    2354:	68 2f       	mov	r22, r24
    2356:	87 e3       	ldi	r24, 0x37	; 55
    2358:	92 e0       	ldi	r25, 0x02	; 2
    235a:	0e 94 25 2d 	call	0x5a4a	; 0x5a4a <eeprom_update_byte>
    235e:	08 95       	ret

00002360 <_Z10processKeyc>:
 *  *B nn # - Address the following command to only those foxes in the specified competition format (used in case more than one competition's foxes might be listening)
 *  *D c...c # - Unlock Arducon (re-enable DTMF commands) where c...c is the password
 *  *D# - Lock Arducon (disables all DTMF commands except *Dc...c#)
 */
void processKey(char key)
{
    2360:	cf 93       	push	r28
    2362:	df 93       	push	r29
    2364:	1f 92       	push	r1
    2366:	cd b7       	in	r28, 0x3d	; 61
    2368:	de b7       	in	r29, 0x3e	; 62
	static int digits;
	static int value;
	static int stringLength;
	static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };

	switch(state)
    236a:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <_ZZ10processKeycE5state>
    236e:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <_ZZ10processKeycE5state+0x1>
    2372:	ed 30       	cpi	r30, 0x0D	; 13
    2374:	f1 05       	cpc	r31, r1
    2376:	08 f0       	brcs	.+2      	; 0x237a <_Z10processKeyc+0x1a>
    2378:	53 c1       	rjmp	.+678    	; 0x2620 <_Z10processKeyc+0x2c0>
    237a:	e5 58       	subi	r30, 0x85	; 133
    237c:	ff 4f       	sbci	r31, 0xFF	; 255
    237e:	0c 94 83 28 	jmp	0x5106	; 0x5106 <__tablejump2__>
	{
		case STATE_SHUTDOWN:
		{
			if(key == '*')
    2382:	8a 32       	cpi	r24, 0x2A	; 42
    2384:	09 f0       	breq	.+2      	; 0x2388 <_Z10processKeyc+0x28>
    2386:	4c c1       	rjmp	.+664    	; 0x2620 <_Z10processKeyc+0x2c0>
			{
				state = STATE_SENTENCE_START;
    2388:	81 e0       	ldi	r24, 0x01	; 1
    238a:	90 e0       	ldi	r25, 0x00	; 0
    238c:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    2390:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    2394:	45 c1       	rjmp	.+650    	; 0x2620 <_Z10processKeyc+0x2c0>
		}
		break;

		case STATE_SENTENCE_START:
		{
			stringLength = 0;
    2396:	10 92 76 04 	sts	0x0476, r1	; 0x800476 <_ZZ10processKeycE12stringLength+0x1>
    239a:	10 92 75 04 	sts	0x0475, r1	; 0x800475 <_ZZ10processKeycE12stringLength>
			value = 0;
    239e:	10 92 74 04 	sts	0x0474, r1	; 0x800474 <_ZZ10processKeycE5value+0x1>
    23a2:	10 92 73 04 	sts	0x0473, r1	; 0x800473 <_ZZ10processKeycE5value>
			digits = 0;
    23a6:	10 92 72 04 	sts	0x0472, r1	; 0x800472 <_ZZ10processKeycE6digits+0x1>
    23aa:	10 92 71 04 	sts	0x0471, r1	; 0x800471 <_ZZ10processKeycE6digits>

			if(key == 'C')
    23ae:	83 34       	cpi	r24, 0x43	; 67
    23b0:	39 f4       	brne	.+14     	; 0x23c0 <_Z10processKeyc+0x60>
			{
				state = STATE_C;
    23b2:	86 e0       	ldi	r24, 0x06	; 6
    23b4:	90 e0       	ldi	r25, 0x00	; 0
    23b6:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    23ba:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    23be:	30 c1       	rjmp	.+608    	; 0x2620 <_Z10processKeyc+0x2c0>
			}
			else if(key == 'A')
    23c0:	81 34       	cpi	r24, 0x41	; 65
    23c2:	09 f0       	breq	.+2      	; 0x23c6 <_Z10processKeyc+0x66>
    23c4:	2d c1       	rjmp	.+602    	; 0x2620 <_Z10processKeyc+0x2c0>
			{
				state = STATE_A;
    23c6:	82 e0       	ldi	r24, 0x02	; 2
    23c8:	90 e0       	ldi	r25, 0x00	; 0
    23ca:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    23ce:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    23d2:	26 c1       	rjmp	.+588    	; 0x2620 <_Z10processKeyc+0x2c0>
		}
		break;

		case STATE_A:
		{
			if(key == '0')
    23d4:	80 33       	cpi	r24, 0x30	; 48
    23d6:	39 f4       	brne	.+14     	; 0x23e6 <_Z10processKeyc+0x86>
			{
				state = STATE_PAUSE_TRANSMISSIONS;
    23d8:	83 e0       	ldi	r24, 0x03	; 3
    23da:	90 e0       	ldi	r25, 0x00	; 0
    23dc:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    23e0:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    23e4:	1d c1       	rjmp	.+570    	; 0x2620 <_Z10processKeyc+0x2c0>
			}
			else if(key == '1')
    23e6:	81 33       	cpi	r24, 0x31	; 49
    23e8:	39 f4       	brne	.+14     	; 0x23f8 <_Z10processKeyc+0x98>
			{
				state = STATE_START_TRANSMISSIONS;
    23ea:	84 e0       	ldi	r24, 0x04	; 4
    23ec:	90 e0       	ldi	r25, 0x00	; 0
    23ee:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    23f2:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    23f6:	14 c1       	rjmp	.+552    	; 0x2620 <_Z10processKeyc+0x2c0>
			}
			else if(key == '2')
    23f8:	82 33       	cpi	r24, 0x32	; 50
    23fa:	09 f0       	breq	.+2      	; 0x23fe <_Z10processKeyc+0x9e>
    23fc:	11 c1       	rjmp	.+546    	; 0x2620 <_Z10processKeyc+0x2c0>
			{
				state = STATE_RESTART_TRANSMISSIONS;
    23fe:	85 e0       	ldi	r24, 0x05	; 5
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    2406:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    240a:	0a c1       	rjmp	.+532    	; 0x2620 <_Z10processKeyc+0x2c0>
		}
		break;

		case STATE_PAUSE_TRANSMISSIONS:
		{
			if(key == '#')
    240c:	83 32       	cpi	r24, 0x23	; 35
    240e:	09 f0       	breq	.+2      	; 0x2412 <_Z10processKeyc+0xb2>
    2410:	07 c1       	rjmp	.+526    	; 0x2620 <_Z10processKeyc+0x2c0>
			{
				state = STATE_SHUTDOWN;
    2412:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    2416:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    241a:	02 c1       	rjmp	.+516    	; 0x2620 <_Z10processKeyc+0x2c0>
		}
		break;

		case STATE_C:
		{
			if(key == '1')
    241c:	81 33       	cpi	r24, 0x31	; 49
    241e:	39 f4       	brne	.+14     	; 0x242e <_Z10processKeyc+0xce>
			{
				state = STATE_RECEIVING_CALLSIGN;
    2420:	87 e0       	ldi	r24, 0x07	; 7
    2422:	90 e0       	ldi	r25, 0x00	; 0
    2424:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    2428:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    242c:	f9 c0       	rjmp	.+498    	; 0x2620 <_Z10processKeyc+0x2c0>
			}
			else if(key == '2')
    242e:	82 33       	cpi	r24, 0x32	; 50
    2430:	39 f4       	brne	.+14     	; 0x2440 <_Z10processKeyc+0xe0>
			{
				state = STATE_RECEIVING_FOXFORMATANDID;
    2432:	88 e0       	ldi	r24, 0x08	; 8
    2434:	90 e0       	ldi	r25, 0x00	; 0
    2436:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    243a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    243e:	f0 c0       	rjmp	.+480    	; 0x2620 <_Z10processKeyc+0x2c0>
			}
			else if(key == '4')
    2440:	84 33       	cpi	r24, 0x34	; 52
    2442:	39 f4       	brne	.+14     	; 0x2452 <_Z10processKeyc+0xf2>
			{
				state = STATE_RECEIVING_START_TIME;
    2444:	89 e0       	ldi	r24, 0x09	; 9
    2446:	90 e0       	ldi	r25, 0x00	; 0
    2448:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    244c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    2450:	e7 c0       	rjmp	.+462    	; 0x2620 <_Z10processKeyc+0x2c0>
			}
			else if(key == '5')
    2452:	85 33       	cpi	r24, 0x35	; 53
    2454:	39 f4       	brne	.+14     	; 0x2464 <_Z10processKeyc+0x104>
			{
				state = STATE_RECEIVING_FINISH_TIME;
    2456:	8a e0       	ldi	r24, 0x0A	; 10
    2458:	90 e0       	ldi	r25, 0x00	; 0
    245a:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    245e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    2462:	de c0       	rjmp	.+444    	; 0x2620 <_Z10processKeyc+0x2c0>
			}
			else if(key == '6')
    2464:	86 33       	cpi	r24, 0x36	; 54
    2466:	39 f4       	brne	.+14     	; 0x2476 <_Z10processKeyc+0x116>
			{
				state = STATE_RECEIVING_START_NOW;
    2468:	8b e0       	ldi	r24, 0x0B	; 11
    246a:	90 e0       	ldi	r25, 0x00	; 0
    246c:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    2470:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    2474:	d5 c0       	rjmp	.+426    	; 0x2620 <_Z10processKeyc+0x2c0>
			}
			else if(key == '7') /* *C7YYMMDDhhmmss# Set RTC to this time and date */
    2476:	87 33       	cpi	r24, 0x37	; 55
    2478:	09 f0       	breq	.+2      	; 0x247c <_Z10processKeyc+0x11c>
    247a:	d2 c0       	rjmp	.+420    	; 0x2620 <_Z10processKeyc+0x2c0>
			{
				state = STATE_RECEIVING_SET_CLOCK;
    247c:	8c e0       	ldi	r24, 0x0C	; 12
    247e:	90 e0       	ldi	r25, 0x00	; 0
    2480:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    2484:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    2488:	cb c0       	rjmp	.+406    	; 0x2620 <_Z10processKeyc+0x2c0>
		}
		break;

		case STATE_RECEIVING_CALLSIGN:
		{
			if(key == '#')
    248a:	83 32       	cpi	r24, 0x23	; 35
    248c:	71 f4       	brne	.+28     	; 0x24aa <_Z10processKeyc+0x14a>
			{
				permCallsign(receivedString);
    248e:	8c e5       	ldi	r24, 0x5C	; 92
    2490:	94 e0       	ldi	r25, 0x04	; 4
    2492:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <_Z12permCallsignPc>
				lb_send_string(receivedString,FALSE);
    2496:	60 e0       	ldi	r22, 0x00	; 0
    2498:	8c e5       	ldi	r24, 0x5C	; 92
    249a:	94 e0       	ldi	r25, 0x04	; 4
    249c:	0e 94 30 07 	call	0xe60	; 0xe60 <_Z14lb_send_stringPch>
				state = STATE_SHUTDOWN;
    24a0:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    24a4:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    24a8:	bb c0       	rjmp	.+374    	; 0x2620 <_Z10processKeyc+0x2c0>
			}
			else if((key >= '0') && (key <= '9'))
    24aa:	90 ed       	ldi	r25, 0xD0	; 208
    24ac:	98 0f       	add	r25, r24
    24ae:	9a 30       	cpi	r25, 0x0A	; 10
    24b0:	08 f0       	brcs	.+2      	; 0x24b4 <_Z10processKeyc+0x154>
    24b2:	b6 c0       	rjmp	.+364    	; 0x2620 <_Z10processKeyc+0x2c0>
			{
				if(digits)
    24b4:	20 91 71 04 	lds	r18, 0x0471	; 0x800471 <_ZZ10processKeycE6digits>
    24b8:	30 91 72 04 	lds	r19, 0x0472	; 0x800472 <_ZZ10processKeycE6digits+0x1>
    24bc:	23 2b       	or	r18, r19
    24be:	c1 f1       	breq	.+112    	; 0x2530 <_Z10processKeyc+0x1d0>
				{
					value = value * 10 + (key - '0');
    24c0:	20 91 73 04 	lds	r18, 0x0473	; 0x800473 <_ZZ10processKeycE5value>
    24c4:	30 91 74 04 	lds	r19, 0x0474	; 0x800474 <_ZZ10processKeycE5value+0x1>
    24c8:	a9 01       	movw	r20, r18
    24ca:	44 0f       	add	r20, r20
    24cc:	55 1f       	adc	r21, r21
    24ce:	22 0f       	add	r18, r18
    24d0:	33 1f       	adc	r19, r19
    24d2:	22 0f       	add	r18, r18
    24d4:	33 1f       	adc	r19, r19
    24d6:	22 0f       	add	r18, r18
    24d8:	33 1f       	adc	r19, r19
    24da:	24 0f       	add	r18, r20
    24dc:	35 1f       	adc	r19, r21
    24de:	90 e0       	ldi	r25, 0x00	; 0
    24e0:	c0 97       	sbiw	r24, 0x30	; 48
    24e2:	82 0f       	add	r24, r18
    24e4:	93 1f       	adc	r25, r19
    24e6:	90 93 74 04 	sts	0x0474, r25	; 0x800474 <_ZZ10processKeycE5value+0x1>
    24ea:	80 93 73 04 	sts	0x0473, r24	; 0x800473 <_ZZ10processKeycE5value>
					if((value < numMorseChars) && (stringLength < MAX_PATTERN_TEXT_LENGTH))
    24ee:	87 32       	cpi	r24, 0x27	; 39
    24f0:	91 05       	cpc	r25, r1
    24f2:	cc f4       	brge	.+50     	; 0x2526 <_Z10processKeyc+0x1c6>
    24f4:	20 91 75 04 	lds	r18, 0x0475	; 0x800475 <_ZZ10processKeycE12stringLength>
    24f8:	30 91 76 04 	lds	r19, 0x0476	; 0x800476 <_ZZ10processKeycE12stringLength+0x1>
    24fc:	24 31       	cpi	r18, 0x14	; 20
    24fe:	31 05       	cpc	r19, r1
    2500:	94 f4       	brge	.+36     	; 0x2526 <_Z10processKeyc+0x1c6>
					{
						receivedString[stringLength] = keyMorse[value];
    2502:	f9 01       	movw	r30, r18
    2504:	e4 5a       	subi	r30, 0xA4	; 164
    2506:	fb 4f       	sbci	r31, 0xFB	; 251
    2508:	dc 01       	movw	r26, r24
    250a:	af 5c       	subi	r26, 0xCF	; 207
    250c:	bd 4f       	sbci	r27, 0xFD	; 253
    250e:	8c 91       	ld	r24, X
    2510:	80 83       	st	Z, r24
						stringLength++;
    2512:	2f 5f       	subi	r18, 0xFF	; 255
    2514:	3f 4f       	sbci	r19, 0xFF	; 255
    2516:	30 93 76 04 	sts	0x0476, r19	; 0x800476 <_ZZ10processKeycE12stringLength+0x1>
    251a:	20 93 75 04 	sts	0x0475, r18	; 0x800475 <_ZZ10processKeycE12stringLength>
						receivedString[stringLength] = '\0';
    251e:	f9 01       	movw	r30, r18
    2520:	e4 5a       	subi	r30, 0xA4	; 164
    2522:	fb 4f       	sbci	r31, 0xFB	; 251
    2524:	10 82       	st	Z, r1
					}

					digits = 0;
    2526:	10 92 72 04 	sts	0x0472, r1	; 0x800472 <_ZZ10processKeycE6digits+0x1>
    252a:	10 92 71 04 	sts	0x0471, r1	; 0x800471 <_ZZ10processKeycE6digits>
    252e:	78 c0       	rjmp	.+240    	; 0x2620 <_Z10processKeyc+0x2c0>
				}
				else
				{
					value = key - '0';
    2530:	90 e0       	ldi	r25, 0x00	; 0
    2532:	c0 97       	sbiw	r24, 0x30	; 48
    2534:	90 93 74 04 	sts	0x0474, r25	; 0x800474 <_ZZ10processKeycE5value+0x1>
    2538:	80 93 73 04 	sts	0x0473, r24	; 0x800473 <_ZZ10processKeycE5value>
					digits = 1;
    253c:	81 e0       	ldi	r24, 0x01	; 1
    253e:	90 e0       	ldi	r25, 0x00	; 0
    2540:	90 93 72 04 	sts	0x0472, r25	; 0x800472 <_ZZ10processKeycE6digits+0x1>
    2544:	80 93 71 04 	sts	0x0471, r24	; 0x800471 <_ZZ10processKeycE6digits>
    2548:	6b c0       	rjmp	.+214    	; 0x2620 <_Z10processKeyc+0x2c0>
		}
		break;

		case STATE_RECEIVING_FOXFORMATANDID:
		{
			if(key == '#')
    254a:	83 32       	cpi	r24, 0x23	; 35
    254c:	c1 f4       	brne	.+48     	; 0x257e <_Z10processKeyc+0x21e>
			{
				if((value >= BEACON) && (value < INVALID_FOX))
    254e:	80 91 73 04 	lds	r24, 0x0473	; 0x800473 <_ZZ10processKeycE5value>
    2552:	90 91 74 04 	lds	r25, 0x0474	; 0x800474 <_ZZ10processKeycE5value+0x1>
    2556:	86 31       	cpi	r24, 0x16	; 22
    2558:	91 05       	cpc	r25, r1
    255a:	60 f4       	brcc	.+24     	; 0x2574 <_Z10processKeyc+0x214>
				{
					Fox_t holdFox = (Fox_t)value;
    255c:	89 83       	std	Y+1, r24	; 0x01
					permFox(holdFox);
    255e:	0e 94 aa 11 	call	0x2354	; 0x2354 <_Z7permFox5Fox_t>
					if(holdFox != g_fox)
    2562:	80 91 5c 05 	lds	r24, 0x055C	; 0x80055c <g_fox>
    2566:	99 81       	ldd	r25, Y+1	; 0x01
    2568:	98 17       	cp	r25, r24
    256a:	21 f0       	breq	.+8      	; 0x2574 <_Z10processKeyc+0x214>
					{
						setupForFox(&holdFox);
    256c:	ce 01       	movw	r24, r28
    256e:	01 96       	adiw	r24, 0x01	; 1
    2570:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <_Z11setupForFoxP5Fox_t>
					}
				}
				state = STATE_SHUTDOWN;
    2574:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    2578:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    257c:	51 c0       	rjmp	.+162    	; 0x2620 <_Z10processKeyc+0x2c0>
			}
			else if((key >= '0') && (key <= '9'))
    257e:	90 ed       	ldi	r25, 0xD0	; 208
    2580:	98 0f       	add	r25, r24
    2582:	9a 30       	cpi	r25, 0x0A	; 10
    2584:	08 f0       	brcs	.+2      	; 0x2588 <_Z10processKeyc+0x228>
    2586:	4c c0       	rjmp	.+152    	; 0x2620 <_Z10processKeyc+0x2c0>
			{
				value += key - '0';
    2588:	90 e0       	ldi	r25, 0x00	; 0
    258a:	c0 97       	sbiw	r24, 0x30	; 48
    258c:	20 91 73 04 	lds	r18, 0x0473	; 0x800473 <_ZZ10processKeycE5value>
    2590:	30 91 74 04 	lds	r19, 0x0474	; 0x800474 <_ZZ10processKeycE5value+0x1>
    2594:	82 0f       	add	r24, r18
    2596:	93 1f       	adc	r25, r19
    2598:	90 93 74 04 	sts	0x0474, r25	; 0x800474 <_ZZ10processKeycE5value+0x1>
    259c:	80 93 73 04 	sts	0x0473, r24	; 0x800473 <_ZZ10processKeycE5value>
    25a0:	3f c0       	rjmp	.+126    	; 0x2620 <_Z10processKeyc+0x2c0>
		}
		break;

		case STATE_RECEIVING_START_TIME:
		{
			if(key == '#')
    25a2:	83 32       	cpi	r24, 0x23	; 35
    25a4:	e9 f5       	brne	.+122    	; 0x2620 <_Z10processKeyc+0x2c0>
			{
				state = STATE_SHUTDOWN;
    25a6:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    25aa:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    25ae:	38 c0       	rjmp	.+112    	; 0x2620 <_Z10processKeyc+0x2c0>
		}
		break;

		case STATE_RECEIVING_FINISH_TIME:
		{
			if(key == '#')
    25b0:	83 32       	cpi	r24, 0x23	; 35
    25b2:	b1 f5       	brne	.+108    	; 0x2620 <_Z10processKeyc+0x2c0>
			{
				state = STATE_SHUTDOWN;
    25b4:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    25b8:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    25bc:	31 c0       	rjmp	.+98     	; 0x2620 <_Z10processKeyc+0x2c0>
		}
		break;

		case STATE_RECEIVING_START_NOW:
		{
			if(key == '#')
    25be:	83 32       	cpi	r24, 0x23	; 35
    25c0:	79 f5       	brne	.+94     	; 0x2620 <_Z10processKeyc+0x2c0>
			{
				state = STATE_SHUTDOWN;
    25c2:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    25c6:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    25ca:	2a c0       	rjmp	.+84     	; 0x2620 <_Z10processKeyc+0x2c0>
		}
		break;

		case STATE_RECEIVING_SET_CLOCK:
		{
			if(key == '#')
    25cc:	83 32       	cpi	r24, 0x23	; 35
    25ce:	79 f4       	brne	.+30     	; 0x25ee <_Z10processKeyc+0x28e>
			{
				if(stringLength == 12)
    25d0:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <_ZZ10processKeycE12stringLength>
    25d4:	90 91 76 04 	lds	r25, 0x0476	; 0x800476 <_ZZ10processKeycE12stringLength+0x1>
    25d8:	0c 97       	sbiw	r24, 0x0c	; 12
    25da:	11 f5       	brne	.+68     	; 0x2620 <_Z10processKeyc+0x2c0>
				{
					rv3028_set_date_time(receivedString);   /* String format "YYMMDDhhmmss" */
    25dc:	8c e5       	ldi	r24, 0x5C	; 92
    25de:	94 e0       	ldi	r25, 0x04	; 4
    25e0:	0e 94 55 23 	call	0x46aa	; 0x46aa <_Z20rv3028_set_date_timePc>
					state = STATE_SHUTDOWN;
    25e4:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    25e8:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    25ec:	19 c0       	rjmp	.+50     	; 0x2620 <_Z10processKeyc+0x2c0>
				}
			}
			else if((key >= '0') && (key <= '9'))
    25ee:	90 ed       	ldi	r25, 0xD0	; 208
    25f0:	98 0f       	add	r25, r24
    25f2:	9a 30       	cpi	r25, 0x0A	; 10
    25f4:	a8 f4       	brcc	.+42     	; 0x2620 <_Z10processKeyc+0x2c0>
			{
				if(stringLength < MAX_DTMF_ARG_LENGTH)
    25f6:	20 91 75 04 	lds	r18, 0x0475	; 0x800475 <_ZZ10processKeycE12stringLength>
    25fa:	30 91 76 04 	lds	r19, 0x0476	; 0x800476 <_ZZ10processKeycE12stringLength+0x1>
    25fe:	28 32       	cpi	r18, 0x28	; 40
    2600:	31 05       	cpc	r19, r1
    2602:	74 f4       	brge	.+28     	; 0x2620 <_Z10processKeyc+0x2c0>
				{
					receivedString[stringLength] = key;
    2604:	f9 01       	movw	r30, r18
    2606:	e4 5a       	subi	r30, 0xA4	; 164
    2608:	fb 4f       	sbci	r31, 0xFB	; 251
    260a:	80 83       	st	Z, r24
					stringLength++;
    260c:	2f 5f       	subi	r18, 0xFF	; 255
    260e:	3f 4f       	sbci	r19, 0xFF	; 255
    2610:	30 93 76 04 	sts	0x0476, r19	; 0x800476 <_ZZ10processKeycE12stringLength+0x1>
    2614:	20 93 75 04 	sts	0x0475, r18	; 0x800475 <_ZZ10processKeycE12stringLength>
					receivedString[stringLength] = '\0';
    2618:	f9 01       	movw	r30, r18
    261a:	e4 5a       	subi	r30, 0xA4	; 164
    261c:	fb 4f       	sbci	r31, 0xFB	; 251
    261e:	10 82       	st	Z, r1
				}
			}
		}
		break;
	}
}
    2620:	0f 90       	pop	r0
    2622:	df 91       	pop	r29
    2624:	cf 91       	pop	r28
    2626:	08 95       	ret

00002628 <_Z7readADCv>:
 * Read the temperature ADC value
 */
uint16_t readADC()
{
	/* Make sure the most recent ADC read is complete. */
	while((ADCSRA & (1 << ADSC)))
    2628:	ea e7       	ldi	r30, 0x7A	; 122
    262a:	f0 e0       	ldi	r31, 0x00	; 0
    262c:	80 81       	ld	r24, Z
    262e:	86 fd       	sbrc	r24, 6
    2630:	fd cf       	rjmp	.-6      	; 0x262c <_Z7readADCv+0x4>
	{
		;   /* Just wait for ADC to finish. */
	}
	uint16_t result = ADCW;
    2632:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    2636:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	/* Initiate another reading. */
	ADCSRA |= (1 << ADSC);
    263a:	ea e7       	ldi	r30, 0x7A	; 122
    263c:	f0 e0       	ldi	r31, 0x00	; 0
    263e:	90 81       	ld	r25, Z
    2640:	90 64       	ori	r25, 0x40	; 64
    2642:	90 83       	st	Z, r25
	return( result);
}
    2644:	c9 01       	movw	r24, r18
    2646:	08 95       	ret

00002648 <_Z9setUpTempv>:
	/* The internal temperature has to be used
	 * with the internal reference of 1.1V.
	 * Channel 8 can not be selected with
	 * the analogRead function yet. */
	/* Set the internal reference and mux. */
	ADMUX = ((1 << REFS1) | (1 << REFS0) | (1 << MUX3));
    2648:	88 ec       	ldi	r24, 0xC8	; 200
    264a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>

	/* Slow the ADC clock down to 125 KHz
	 * by dividing by 128. Assumes that the
	 * standard Arduino 16 MHz clock is in use. */
	ADCSRA = (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
    264e:	ea e7       	ldi	r30, 0x7A	; 122
    2650:	f0 e0       	ldi	r31, 0x00	; 0
    2652:	87 e0       	ldi	r24, 0x07	; 7
    2654:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);  /* enable the ADC */
    2656:	80 81       	ld	r24, Z
    2658:	80 68       	ori	r24, 0x80	; 128
    265a:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);  /* Start the ADC */
    265c:	80 81       	ld	r24, Z
    265e:	80 64       	ori	r24, 0x40	; 64
    2660:	80 83       	st	Z, r24
	readADC();
    2662:	0e 94 14 13 	call	0x2628	; 0x2628 <_Z7readADCv>
    2666:	08 95       	ret

00002668 <_Z7getTempv>:

/*
 * Returns the most recent temperature reading
 */
float getTemp(void)
{
    2668:	0f 93       	push	r16
    266a:	1f 93       	push	r17
    266c:	cf 93       	push	r28
    266e:	df 93       	push	r29
	float offset = CLAMP(-200.,(float)g_atmega_temp_calibration / 10.,200.);
    2670:	60 91 15 01 	lds	r22, 0x0115	; 0x800115 <_ZL25g_atmega_temp_calibration>
    2674:	70 91 16 01 	lds	r23, 0x0116	; 0x800116 <_ZL25g_atmega_temp_calibration+0x1>
    2678:	07 2e       	mov	r0, r23
    267a:	00 0c       	add	r0, r0
    267c:	88 0b       	sbc	r24, r24
    267e:	99 0b       	sbc	r25, r25
    2680:	0e 94 21 26 	call	0x4c42	; 0x4c42 <__floatsisf>
    2684:	20 e0       	ldi	r18, 0x00	; 0
    2686:	30 e0       	ldi	r19, 0x00	; 0
    2688:	40 e2       	ldi	r20, 0x20	; 32
    268a:	51 e4       	ldi	r21, 0x41	; 65
    268c:	0e 94 77 25 	call	0x4aee	; 0x4aee <__divsf3>
    2690:	06 2f       	mov	r16, r22
    2692:	17 2f       	mov	r17, r23
    2694:	d8 2f       	mov	r29, r24
    2696:	c9 2f       	mov	r28, r25
    2698:	20 e0       	ldi	r18, 0x00	; 0
    269a:	30 e0       	ldi	r19, 0x00	; 0
    269c:	48 e4       	ldi	r20, 0x48	; 72
    269e:	53 e4       	ldi	r21, 0x43	; 67
    26a0:	0e 94 10 27 	call	0x4e20	; 0x4e20 <__gesf2>
    26a4:	18 16       	cp	r1, r24
    26a6:	6c f0       	brlt	.+26     	; 0x26c2 <_Z7getTempv+0x5a>
    26a8:	20 e0       	ldi	r18, 0x00	; 0
    26aa:	30 e0       	ldi	r19, 0x00	; 0
    26ac:	48 e4       	ldi	r20, 0x48	; 72
    26ae:	53 ec       	ldi	r21, 0xC3	; 195
    26b0:	60 2f       	mov	r22, r16
    26b2:	71 2f       	mov	r23, r17
    26b4:	8d 2f       	mov	r24, r29
    26b6:	9c 2f       	mov	r25, r28
    26b8:	0e 94 6d 25 	call	0x4ada	; 0x4ada <__cmpsf2>
    26bc:	88 23       	and	r24, r24
    26be:	34 f0       	brlt	.+12     	; 0x26cc <_Z7getTempv+0x64>
    26c0:	09 c0       	rjmp	.+18     	; 0x26d4 <_Z7getTempv+0x6c>
    26c2:	00 e0       	ldi	r16, 0x00	; 0
    26c4:	10 e0       	ldi	r17, 0x00	; 0
    26c6:	d8 e4       	ldi	r29, 0x48	; 72
    26c8:	c3 e4       	ldi	r28, 0x43	; 67
    26ca:	04 c0       	rjmp	.+8      	; 0x26d4 <_Z7getTempv+0x6c>
    26cc:	00 e0       	ldi	r16, 0x00	; 0
    26ce:	10 e0       	ldi	r17, 0x00	; 0
    26d0:	d8 e4       	ldi	r29, 0x48	; 72
    26d2:	c3 ec       	ldi	r28, 0xC3	; 195

	/* The offset in 1/10ths C (first term) was determined empirically */
	readADC();  /* throw away first reading */
    26d4:	0e 94 14 13 	call	0x2628	; 0x2628 <_Z7readADCv>
	return(roundf(offset + (readADC() - 324.31) / 1.22));
    26d8:	0e 94 14 13 	call	0x2628	; 0x2628 <_Z7readADCv>
    26dc:	bc 01       	movw	r22, r24
    26de:	80 e0       	ldi	r24, 0x00	; 0
    26e0:	90 e0       	ldi	r25, 0x00	; 0
    26e2:	0e 94 1f 26 	call	0x4c3e	; 0x4c3e <__floatunsisf>
    26e6:	2e ea       	ldi	r18, 0xAE	; 174
    26e8:	37 e2       	ldi	r19, 0x27	; 39
    26ea:	42 ea       	ldi	r20, 0xA2	; 162
    26ec:	53 e4       	ldi	r21, 0x43	; 67
    26ee:	0e 94 00 25 	call	0x4a00	; 0x4a00 <__subsf3>
    26f2:	26 ef       	ldi	r18, 0xF6	; 246
    26f4:	38 e2       	ldi	r19, 0x28	; 40
    26f6:	4c e9       	ldi	r20, 0x9C	; 156
    26f8:	5f e3       	ldi	r21, 0x3F	; 63
    26fa:	0e 94 77 25 	call	0x4aee	; 0x4aee <__divsf3>
    26fe:	20 2f       	mov	r18, r16
    2700:	31 2f       	mov	r19, r17
    2702:	4d 2f       	mov	r20, r29
    2704:	5c 2f       	mov	r21, r28
    2706:	0e 94 01 25 	call	0x4a02	; 0x4a02 <__addsf3>
    270a:	0e 94 82 27 	call	0x4f04	; 0x4f04 <round>
}
    270e:	df 91       	pop	r29
    2710:	cf 91       	pop	r28
    2712:	1f 91       	pop	r17
    2714:	0f 91       	pop	r16
    2716:	08 95       	ret

00002718 <_Z18setUpAudioSamplingh>:

void setUpAudioSampling(BOOL enableSampling)
{
	ADCSRA = 0;                             /* clear ADCSRA register */
    2718:	ea e7       	ldi	r30, 0x7A	; 122
    271a:	f0 e0       	ldi	r31, 0x00	; 0
    271c:	10 82       	st	Z, r1
	ADCSRB = 0;                             /* clear ADCSRB register */
    271e:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
	ADMUX = 0;
    2722:	ac e7       	ldi	r26, 0x7C	; 124
    2724:	b0 e0       	ldi	r27, 0x00	; 0
    2726:	1c 92       	st	X, r1
	ADMUX |= 0x06;                          /* set A6 analog input pin */
    2728:	9c 91       	ld	r25, X
    272a:	96 60       	ori	r25, 0x06	; 6
    272c:	9c 93       	st	X, r25
	ADMUX |= (1 << REFS1) | (1 << REFS0);   /* set reference voltage to internal 1.1V */
    272e:	9c 91       	ld	r25, X
    2730:	90 6c       	ori	r25, 0xC0	; 192
    2732:	9c 93       	st	X, r25
	ADMUX |= (1 << ADLAR);                  /* left align ADC value to 8 bits from ADCH register */
    2734:	9c 91       	ld	r25, X
    2736:	90 62       	ori	r25, 0x20	; 32
    2738:	9c 93       	st	X, r25
#elif SAMPLE_RATE == 77040
		ADCSRA |= (1 << ADPS2);                                 /* 16 prescaler for 76900 sps */
#elif SAMPLE_RATE == 38520
		ADCSRA |= (1 << ADPS2) | (1 << ADPS0);                  /* 32 prescaler for 38500 sps */
#elif SAMPLE_RATE == 19260
		ADCSRA |= (1 << ADPS2) | (1 << ADPS1);                  /* 64 prescaler for 19250 sps */
    273a:	90 81       	ld	r25, Z
    273c:	96 60       	ori	r25, 0x06	; 6
    273e:	90 83       	st	Z, r25
		ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);   /* 128 prescaler for 9630 sps */
#else
#error "Select a valid sample rate."
#endif

	ADCSRA |= (1 << ADATE);     /* enable auto trigger */
    2740:	90 81       	ld	r25, Z
    2742:	90 62       	ori	r25, 0x20	; 32
    2744:	90 83       	st	Z, r25
	ADCSRA |= (1 << ADIE);      /* enable interrupts when measurement complete */
    2746:	90 81       	ld	r25, Z
    2748:	98 60       	ori	r25, 0x08	; 8
    274a:	90 83       	st	Z, r25
	ADCSRA |= (1 << ADEN);      /* enable ADC */
    274c:	90 81       	ld	r25, Z
    274e:	90 68       	ori	r25, 0x80	; 128
    2750:	90 83       	st	Z, r25

	if(enableSampling)
    2752:	88 23       	and	r24, r24
    2754:	31 f0       	breq	.+12     	; 0x2762 <_Z18setUpAudioSamplingh+0x4a>
	{
		ADCSRA |= (1 << ADIE);  /* enable interrupts when measurement complete */
    2756:	80 81       	ld	r24, Z
    2758:	88 60       	ori	r24, 0x08	; 8
    275a:	80 83       	st	Z, r24
		ADCSRA |= (1 << ADSC);  /* start ADC measurements */
    275c:	80 81       	ld	r24, Z
    275e:	80 64       	ori	r24, 0x40	; 64
    2760:	80 83       	st	Z, r24
    2762:	08 95       	ret

00002764 <_Z11only_digitsPc>:
	}
}

BOOL only_digits(char *s)
{
    2764:	fc 01       	movw	r30, r24
	while(*s)
    2766:	21 91       	ld	r18, Z+
    2768:	22 23       	and	r18, r18
    276a:	41 f0       	breq	.+16     	; 0x277c <_Z11only_digitsPc+0x18>
	{
		if(isdigit(*s++) == 0)
    276c:	30 e0       	ldi	r19, 0x00	; 0
    276e:	20 53       	subi	r18, 0x30	; 48
    2770:	31 09       	sbc	r19, r1
    2772:	2a 30       	cpi	r18, 0x0A	; 10
    2774:	31 05       	cpc	r19, r1
    2776:	b8 f3       	brcs	.-18     	; 0x2766 <_Z11only_digitsPc+0x2>
		{
			return( FALSE);
    2778:	80 e0       	ldi	r24, 0x00	; 0
    277a:	08 95       	ret
		}
	}

	return( TRUE);
    277c:	81 e0       	ldi	r24, 0x01	; 1
}
    277e:	08 95       	ret

00002780 <_Z13startEventNowv>:

void startEventNow(void)
{
	setupForFox(NULL);
    2780:	80 e0       	ldi	r24, 0x00	; 0
    2782:	90 e0       	ldi	r25, 0x00	; 0
    2784:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <_Z11setupForFoxP5Fox_t>
	g_transmissions_disabled = FALSE;
    2788:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <g_transmissions_disabled>
	lb_send_string((char*)"Sync OK\n> ",FALSE);
    278c:	60 e0       	ldi	r22, 0x00	; 0
    278e:	88 e2       	ldi	r24, 0x28	; 40
    2790:	91 e0       	ldi	r25, 0x01	; 1
    2792:	0e 94 30 07 	call	0xe60	; 0xe60 <_Z14lb_send_stringPch>
    2796:	08 95       	ret

00002798 <__vector_5>:
 *
 * Handles pushbutton presses
 *
 ************************************************************************/
ISR(PCINT2_vect)
{
    2798:	1f 92       	push	r1
    279a:	0f 92       	push	r0
    279c:	0f b6       	in	r0, 0x3f	; 63
    279e:	0f 92       	push	r0
    27a0:	11 24       	eor	r1, r1
    27a2:	2f 93       	push	r18
    27a4:	3f 93       	push	r19
    27a6:	4f 93       	push	r20
    27a8:	5f 93       	push	r21
    27aa:	6f 93       	push	r22
    27ac:	7f 93       	push	r23
    27ae:	8f 93       	push	r24
    27b0:	9f 93       	push	r25
    27b2:	af 93       	push	r26
    27b4:	bf 93       	push	r27
    27b6:	ef 93       	push	r30
    27b8:	ff 93       	push	r31
	BOOL pinVal = digitalRead(PIN_SYNC);
    27ba:	84 e0       	ldi	r24, 0x04	; 4
    27bc:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_Z11digitalReadh>

	if(pinVal)  /* Sync is high */
    27c0:	88 23       	and	r24, r24
    27c2:	61 f0       	breq	.+24     	; 0x27dc <__vector_5+0x44>
	{
		if(g_sync_pin_stable)
    27c4:	80 91 39 05 	lds	r24, 0x0539	; 0x800539 <g_sync_pin_stable>
    27c8:	88 23       	and	r24, r24
    27ca:	41 f0       	breq	.+16     	; 0x27dc <__vector_5+0x44>
		{
			startEventNow();
    27cc:	0e 94 c0 13 	call	0x2780	; 0x2780 <_Z13startEventNowv>
			g_sync_pin_stable = FALSE;
    27d0:	10 92 39 05 	sts	0x0539, r1	; 0x800539 <g_sync_pin_stable>
			digitalWrite(PIN_LED2, OFF);    /*  LED */
    27d4:	60 e0       	ldi	r22, 0x00	; 0
    27d6:	87 e0       	ldi	r24, 0x07	; 7
    27d8:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>
		}
	}

	g_sync_pin_timer = 0;
    27dc:	10 92 3b 05 	sts	0x053B, r1	; 0x80053b <g_sync_pin_timer+0x1>
    27e0:	10 92 3a 05 	sts	0x053A, r1	; 0x80053a <g_sync_pin_timer>
}
    27e4:	ff 91       	pop	r31
    27e6:	ef 91       	pop	r30
    27e8:	bf 91       	pop	r27
    27ea:	af 91       	pop	r26
    27ec:	9f 91       	pop	r25
    27ee:	8f 91       	pop	r24
    27f0:	7f 91       	pop	r23
    27f2:	6f 91       	pop	r22
    27f4:	5f 91       	pop	r21
    27f6:	4f 91       	pop	r20
    27f8:	3f 91       	pop	r19
    27fa:	2f 91       	pop	r18
    27fc:	0f 90       	pop	r0
    27fe:	0f be       	out	0x3f, r0	; 63
    2800:	0f 90       	pop	r0
    2802:	1f 90       	pop	r1
    2804:	18 95       	reti

00002806 <_Z18reportConfigErrorsv>:
	lb_send_string((char*)"Sync OK\n> ",FALSE);
}

void reportConfigErrors(void)
{
	if(g_messages_text[STATION_ID][0] == '\0')
    2806:	80 91 20 05 	lds	r24, 0x0520	; 0x800520 <_ZL15g_messages_text+0x15>
    280a:	81 11       	cpse	r24, r1
    280c:	04 c0       	rjmp	.+8      	; 0x2816 <_Z18reportConfigErrorsv+0x10>
	{
		sendEEPROMString(&ee_textSetID[0]);
    280e:	8e e6       	ldi	r24, 0x6E	; 110
    2810:	90 e0       	ldi	r25, 0x00	; 0
    2812:	0e 94 82 02 	call	0x504	; 0x504 <_Z16sendEEPROMStringPc>
	}
	
	if(g_current_epoch < MINIMUM_EPOCH) /* Current time is invalid */
    2816:	80 91 52 05 	lds	r24, 0x0552	; 0x800552 <g_current_epoch>
    281a:	90 91 53 05 	lds	r25, 0x0553	; 0x800553 <g_current_epoch+0x1>
    281e:	a0 91 54 05 	lds	r26, 0x0554	; 0x800554 <g_current_epoch+0x2>
    2822:	b0 91 55 05 	lds	r27, 0x0555	; 0x800555 <g_current_epoch+0x3>
    2826:	81 15       	cp	r24, r1
    2828:	96 46       	sbci	r25, 0x66	; 102
    282a:	ae 4e       	sbci	r26, 0xEE	; 238
    282c:	bf 45       	sbci	r27, 0x5F	; 95
    282e:	20 f4       	brcc	.+8      	; 0x2838 <_Z18reportConfigErrorsv+0x32>
	{
		sendEEPROMString(&ee_textSetTime[0]);
    2830:	8c ed       	ldi	r24, 0xDC	; 220
    2832:	90 e0       	ldi	r25, 0x00	; 0
    2834:	0e 94 82 02 	call	0x504	; 0x504 <_Z16sendEEPROMStringPc>
	}

	if(g_event_finish_epoch < g_current_epoch)  /* Event has already finished */
    2838:	40 91 4a 05 	lds	r20, 0x054A	; 0x80054a <g_event_finish_epoch>
    283c:	50 91 4b 05 	lds	r21, 0x054B	; 0x80054b <g_event_finish_epoch+0x1>
    2840:	60 91 4c 05 	lds	r22, 0x054C	; 0x80054c <g_event_finish_epoch+0x2>
    2844:	70 91 4d 05 	lds	r23, 0x054D	; 0x80054d <g_event_finish_epoch+0x3>
    2848:	80 91 52 05 	lds	r24, 0x0552	; 0x800552 <g_current_epoch>
    284c:	90 91 53 05 	lds	r25, 0x0553	; 0x800553 <g_current_epoch+0x1>
    2850:	a0 91 54 05 	lds	r26, 0x0554	; 0x800554 <g_current_epoch+0x2>
    2854:	b0 91 55 05 	lds	r27, 0x0555	; 0x800555 <g_current_epoch+0x3>
    2858:	48 17       	cp	r20, r24
    285a:	59 07       	cpc	r21, r25
    285c:	6a 07       	cpc	r22, r26
    285e:	7b 07       	cpc	r23, r27
    2860:	f0 f4       	brcc	.+60     	; 0x289e <_Z18reportConfigErrorsv+0x98>
	{	
		if(g_event_start_epoch < g_current_epoch)   /* Event has already started */
    2862:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <g_event_start_epoch>
    2866:	50 91 4f 05 	lds	r21, 0x054F	; 0x80054f <g_event_start_epoch+0x1>
    286a:	60 91 50 05 	lds	r22, 0x0550	; 0x800550 <g_event_start_epoch+0x2>
    286e:	70 91 51 05 	lds	r23, 0x0551	; 0x800551 <g_event_start_epoch+0x3>
    2872:	80 91 52 05 	lds	r24, 0x0552	; 0x800552 <g_current_epoch>
    2876:	90 91 53 05 	lds	r25, 0x0553	; 0x800553 <g_current_epoch+0x1>
    287a:	a0 91 54 05 	lds	r26, 0x0554	; 0x800554 <g_current_epoch+0x2>
    287e:	b0 91 55 05 	lds	r27, 0x0555	; 0x800555 <g_current_epoch+0x3>
    2882:	48 17       	cp	r20, r24
    2884:	59 07       	cpc	r21, r25
    2886:	6a 07       	cpc	r22, r26
    2888:	7b 07       	cpc	r23, r27
    288a:	20 f4       	brcc	.+8      	; 0x2894 <_Z18reportConfigErrorsv+0x8e>
		{
			sendEEPROMString(&ee_textSetStart[0]);
    288c:	86 eb       	ldi	r24, 0xB6	; 182
    288e:	90 e0       	ldi	r25, 0x00	; 0
    2890:	0e 94 82 02 	call	0x504	; 0x504 <_Z16sendEEPROMStringPc>
		}

		sendEEPROMString(&ee_textSetFinish[0]);
    2894:	8f e8       	ldi	r24, 0x8F	; 143
    2896:	90 e0       	ldi	r25, 0x00	; 0
    2898:	0e 94 82 02 	call	0x504	; 0x504 <_Z16sendEEPROMStringPc>
    289c:	08 95       	ret
	}
	else if(g_event_start_epoch < g_current_epoch)   /* Event has already started */
    289e:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <g_event_start_epoch>
    28a2:	50 91 4f 05 	lds	r21, 0x054F	; 0x80054f <g_event_start_epoch+0x1>
    28a6:	60 91 50 05 	lds	r22, 0x0550	; 0x800550 <g_event_start_epoch+0x2>
    28aa:	70 91 51 05 	lds	r23, 0x0551	; 0x800551 <g_event_start_epoch+0x3>
    28ae:	80 91 52 05 	lds	r24, 0x0552	; 0x800552 <g_current_epoch>
    28b2:	90 91 53 05 	lds	r25, 0x0553	; 0x800553 <g_current_epoch+0x1>
    28b6:	a0 91 54 05 	lds	r26, 0x0554	; 0x800554 <g_current_epoch+0x2>
    28ba:	b0 91 55 05 	lds	r27, 0x0555	; 0x800555 <g_current_epoch+0x3>
    28be:	48 17       	cp	r20, r24
    28c0:	59 07       	cpc	r21, r25
    28c2:	6a 07       	cpc	r22, r26
    28c4:	7b 07       	cpc	r23, r27
    28c6:	28 f4       	brcc	.+10     	; 0x28d2 <_Z18reportConfigErrorsv+0xcc>
	{
		lb_send_string((char *)"Event running...\n", TRUE);
    28c8:	61 e0       	ldi	r22, 0x01	; 1
    28ca:	83 e3       	ldi	r24, 0x33	; 51
    28cc:	91 e0       	ldi	r25, 0x01	; 1
    28ce:	0e 94 30 07 	call	0xe60	; 0xe60 <_Z14lb_send_stringPch>
    28d2:	08 95       	ret

000028d4 <_Z14reportTimeTillmmPKcS0_>:
	}
}

BOOL reportTimeTill(time_t from,time_t until,const char* prefix,const char* failMsg)
{
    28d4:	2f 92       	push	r2
    28d6:	3f 92       	push	r3
    28d8:	4f 92       	push	r4
    28da:	5f 92       	push	r5
    28dc:	6f 92       	push	r6
    28de:	7f 92       	push	r7
    28e0:	8f 92       	push	r8
    28e2:	9f 92       	push	r9
    28e4:	af 92       	push	r10
    28e6:	bf 92       	push	r11
    28e8:	cf 92       	push	r12
    28ea:	df 92       	push	r13
    28ec:	ef 92       	push	r14
    28ee:	ff 92       	push	r15
    28f0:	0f 93       	push	r16
    28f2:	1f 93       	push	r17
    28f4:	cf 93       	push	r28
    28f6:	df 93       	push	r29
    28f8:	cd b7       	in	r28, 0x3d	; 61
    28fa:	de b7       	in	r29, 0x3e	; 62
    28fc:	2c 97       	sbiw	r28, 0x0c	; 12
    28fe:	0f b6       	in	r0, 0x3f	; 63
    2900:	f8 94       	cli
    2902:	de bf       	out	0x3e, r29	; 62
    2904:	0f be       	out	0x3f, r0	; 63
    2906:	cd bf       	out	0x3d, r28	; 61
    2908:	2b 01       	movw	r4, r22
    290a:	3c 01       	movw	r6, r24
    290c:	49 01       	movw	r8, r18
    290e:	5a 01       	movw	r10, r20
	BOOL failure = FALSE;

	if(from >= until)   /* Negative time */
    2910:	62 17       	cp	r22, r18
    2912:	73 07       	cpc	r23, r19
    2914:	84 07       	cpc	r24, r20
    2916:	95 07       	cpc	r25, r21
    2918:	50 f0       	brcs	.+20     	; 0x292e <_Z14reportTimeTillmmPKcS0_+0x5a>
	{
		failure = TRUE;
		if(failMsg)
    291a:	e1 14       	cp	r14, r1
    291c:	f1 04       	cpc	r15, r1
    291e:	09 f4       	brne	.+2      	; 0x2922 <_Z14reportTimeTillmmPKcS0_+0x4e>
    2920:	04 c1       	rjmp	.+520    	; 0x2b2a <_Z14reportTimeTillmmPKcS0_+0x256>
		{
			lb_send_string((char*)failMsg,TRUE);
    2922:	61 e0       	ldi	r22, 0x01	; 1
    2924:	c7 01       	movw	r24, r14
    2926:	0e 94 30 07 	call	0xe60	; 0xe60 <_Z14lb_send_stringPch>
{
	BOOL failure = FALSE;

	if(from >= until)   /* Negative time */
	{
		failure = TRUE;
    292a:	81 e0       	ldi	r24, 0x01	; 1
    292c:	ff c0       	rjmp	.+510    	; 0x2b2c <_Z14reportTimeTillmmPKcS0_+0x258>
			lb_send_string((char*)failMsg,TRUE);
		}
	}
	else
	{
		if(prefix)
    292e:	01 15       	cp	r16, r1
    2930:	11 05       	cpc	r17, r1
    2932:	21 f0       	breq	.+8      	; 0x293c <_Z14reportTimeTillmmPKcS0_+0x68>
		{
			lb_send_string((char*)prefix,TRUE);
    2934:	61 e0       	ldi	r22, 0x01	; 1
    2936:	c8 01       	movw	r24, r16
    2938:	0e 94 30 07 	call	0xe60	; 0xe60 <_Z14lb_send_stringPch>
		}
		time_t dif = until - from;
    293c:	75 01       	movw	r14, r10
    293e:	64 01       	movw	r12, r8
    2940:	c4 18       	sub	r12, r4
    2942:	d5 08       	sbc	r13, r5
    2944:	e6 08       	sbc	r14, r6
    2946:	f7 08       	sbc	r15, r7
		uint16_t years = dif / YEAR;
    2948:	c7 01       	movw	r24, r14
    294a:	b6 01       	movw	r22, r12
    294c:	20 e8       	ldi	r18, 0x80	; 128
    294e:	33 e3       	ldi	r19, 0x33	; 51
    2950:	41 ee       	ldi	r20, 0xE1	; 225
    2952:	51 e0       	ldi	r21, 0x01	; 1
    2954:	0e 94 42 28 	call	0x5084	; 0x5084 <__udivmodsi4>
    2958:	29 01       	movw	r4, r18
    295a:	3a 01       	movw	r6, r20
		time_t hold = dif - (years * YEAR);
    295c:	44 27       	eor	r20, r20
    295e:	55 27       	eor	r21, r21
    2960:	60 e8       	ldi	r22, 0x80	; 128
    2962:	73 e3       	ldi	r23, 0x33	; 51
    2964:	81 ee       	ldi	r24, 0xE1	; 225
    2966:	91 e0       	ldi	r25, 0x01	; 1
    2968:	0e 94 0a 28 	call	0x5014	; 0x5014 <__mulsi3>
    296c:	c6 1a       	sub	r12, r22
    296e:	d7 0a       	sbc	r13, r23
    2970:	e8 0a       	sbc	r14, r24
    2972:	f9 0a       	sbc	r15, r25
		uint16_t days = hold / DAY;
    2974:	c7 01       	movw	r24, r14
    2976:	b6 01       	movw	r22, r12
    2978:	20 e8       	ldi	r18, 0x80	; 128
    297a:	31 e5       	ldi	r19, 0x51	; 81
    297c:	41 e0       	ldi	r20, 0x01	; 1
    297e:	50 e0       	ldi	r21, 0x00	; 0
    2980:	0e 94 42 28 	call	0x5084	; 0x5084 <__udivmodsi4>
    2984:	49 01       	movw	r8, r18
    2986:	5a 01       	movw	r10, r20
    2988:	19 01       	movw	r2, r18
		hold -= (days * DAY);
    298a:	44 27       	eor	r20, r20
    298c:	55 27       	eor	r21, r21
    298e:	60 e8       	ldi	r22, 0x80	; 128
    2990:	71 e5       	ldi	r23, 0x51	; 81
    2992:	81 e0       	ldi	r24, 0x01	; 1
    2994:	90 e0       	ldi	r25, 0x00	; 0
    2996:	0e 94 0a 28 	call	0x5014	; 0x5014 <__mulsi3>
    299a:	c6 1a       	sub	r12, r22
    299c:	d7 0a       	sbc	r13, r23
    299e:	e8 0a       	sbc	r14, r24
    29a0:	f9 0a       	sbc	r15, r25
		uint16_t hours = hold / HOUR;
    29a2:	c7 01       	movw	r24, r14
    29a4:	b6 01       	movw	r22, r12
    29a6:	20 e1       	ldi	r18, 0x10	; 16
    29a8:	3e e0       	ldi	r19, 0x0E	; 14
    29aa:	40 e0       	ldi	r20, 0x00	; 0
    29ac:	50 e0       	ldi	r21, 0x00	; 0
    29ae:	0e 94 42 28 	call	0x5084	; 0x5084 <__udivmodsi4>
    29b2:	29 83       	std	Y+1, r18	; 0x01
    29b4:	3a 83       	std	Y+2, r19	; 0x02
    29b6:	4b 83       	std	Y+3, r20	; 0x03
    29b8:	5c 83       	std	Y+4, r21	; 0x04
    29ba:	29 81       	ldd	r18, Y+1	; 0x01
    29bc:	3a 81       	ldd	r19, Y+2	; 0x02
    29be:	3a 87       	std	Y+10, r19	; 0x0a
    29c0:	29 87       	std	Y+9, r18	; 0x09
		hold -= (hours * HOUR);
    29c2:	29 81       	ldd	r18, Y+1	; 0x01
    29c4:	3a 81       	ldd	r19, Y+2	; 0x02
    29c6:	4b 81       	ldd	r20, Y+3	; 0x03
    29c8:	5c 81       	ldd	r21, Y+4	; 0x04
    29ca:	44 27       	eor	r20, r20
    29cc:	55 27       	eor	r21, r21
    29ce:	a0 e1       	ldi	r26, 0x10	; 16
    29d0:	be e0       	ldi	r27, 0x0E	; 14
    29d2:	0e 94 9f 28 	call	0x513e	; 0x513e <__muluhisi3>
    29d6:	c6 1a       	sub	r12, r22
    29d8:	d7 0a       	sbc	r13, r23
    29da:	e8 0a       	sbc	r14, r24
    29dc:	f9 0a       	sbc	r15, r25
		uint16_t minutes = hold / MINUTE;
    29de:	c7 01       	movw	r24, r14
    29e0:	b6 01       	movw	r22, r12
    29e2:	2c e3       	ldi	r18, 0x3C	; 60
    29e4:	30 e0       	ldi	r19, 0x00	; 0
    29e6:	40 e0       	ldi	r20, 0x00	; 0
    29e8:	50 e0       	ldi	r21, 0x00	; 0
    29ea:	0e 94 42 28 	call	0x5084	; 0x5084 <__udivmodsi4>
    29ee:	2d 83       	std	Y+5, r18	; 0x05
    29f0:	3e 83       	std	Y+6, r19	; 0x06
    29f2:	4f 83       	std	Y+7, r20	; 0x07
    29f4:	58 87       	std	Y+8, r21	; 0x08
    29f6:	0d 81       	ldd	r16, Y+5	; 0x05
    29f8:	1e 81       	ldd	r17, Y+6	; 0x06
		uint16_t seconds = hold - (minutes * MINUTE);
    29fa:	2c e3       	ldi	r18, 0x3C	; 60
    29fc:	20 9f       	mul	r18, r16
    29fe:	c0 01       	movw	r24, r0
    2a00:	21 9f       	mul	r18, r17
    2a02:	90 0d       	add	r25, r0
    2a04:	11 24       	eor	r1, r1
    2a06:	a6 01       	movw	r20, r12
    2a08:	48 1b       	sub	r20, r24
    2a0a:	59 0b       	sbc	r21, r25
    2a0c:	5c 87       	std	Y+12, r21	; 0x0c
    2a0e:	4b 87       	std	Y+11, r20	; 0x0b

		g_tempStr[0] = '\0';
    2a10:	10 92 d2 04 	sts	0x04D2, r1	; 0x8004d2 <g_tempStr>

		if(years)
    2a14:	41 14       	cp	r4, r1
    2a16:	51 04       	cpc	r5, r1
    2a18:	b9 f0       	breq	.+46     	; 0x2a48 <_Z14reportTimeTillmmPKcS0_+0x174>
		{
			sprintf(g_tempStr,"%d yrs ",years);
    2a1a:	5f 92       	push	r5
    2a1c:	4f 92       	push	r4
    2a1e:	85 e4       	ldi	r24, 0x45	; 69
    2a20:	91 e0       	ldi	r25, 0x01	; 1
    2a22:	9f 93       	push	r25
    2a24:	8f 93       	push	r24
    2a26:	82 ed       	ldi	r24, 0xD2	; 210
    2a28:	94 e0       	ldi	r25, 0x04	; 4
    2a2a:	9f 93       	push	r25
    2a2c:	8f 93       	push	r24
    2a2e:	0e 94 5e 2a 	call	0x54bc	; 0x54bc <sprintf>
			lb_send_string(g_tempStr,TRUE);
    2a32:	61 e0       	ldi	r22, 0x01	; 1
    2a34:	82 ed       	ldi	r24, 0xD2	; 210
    2a36:	94 e0       	ldi	r25, 0x04	; 4
    2a38:	0e 94 30 07 	call	0xe60	; 0xe60 <_Z14lb_send_stringPch>
    2a3c:	0f 90       	pop	r0
    2a3e:	0f 90       	pop	r0
    2a40:	0f 90       	pop	r0
    2a42:	0f 90       	pop	r0
    2a44:	0f 90       	pop	r0
    2a46:	0f 90       	pop	r0
		}

		if(days)
    2a48:	23 28       	or	r2, r3
    2a4a:	b9 f0       	breq	.+46     	; 0x2a7a <_Z14reportTimeTillmmPKcS0_+0x1a6>
		{
			sprintf(g_tempStr,"%d days ",days);
    2a4c:	9f 92       	push	r9
    2a4e:	8f 92       	push	r8
    2a50:	8d e4       	ldi	r24, 0x4D	; 77
    2a52:	91 e0       	ldi	r25, 0x01	; 1
    2a54:	9f 93       	push	r25
    2a56:	8f 93       	push	r24
    2a58:	82 ed       	ldi	r24, 0xD2	; 210
    2a5a:	94 e0       	ldi	r25, 0x04	; 4
    2a5c:	9f 93       	push	r25
    2a5e:	8f 93       	push	r24
    2a60:	0e 94 5e 2a 	call	0x54bc	; 0x54bc <sprintf>
			lb_send_string(g_tempStr,TRUE);
    2a64:	61 e0       	ldi	r22, 0x01	; 1
    2a66:	82 ed       	ldi	r24, 0xD2	; 210
    2a68:	94 e0       	ldi	r25, 0x04	; 4
    2a6a:	0e 94 30 07 	call	0xe60	; 0xe60 <_Z14lb_send_stringPch>
    2a6e:	0f 90       	pop	r0
    2a70:	0f 90       	pop	r0
    2a72:	0f 90       	pop	r0
    2a74:	0f 90       	pop	r0
    2a76:	0f 90       	pop	r0
    2a78:	0f 90       	pop	r0
		}

		if(hours)
    2a7a:	89 85       	ldd	r24, Y+9	; 0x09
    2a7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a7e:	89 2b       	or	r24, r25
    2a80:	c9 f0       	breq	.+50     	; 0x2ab4 <_Z14reportTimeTillmmPKcS0_+0x1e0>
		{
			sprintf(g_tempStr,"%d hrs ",hours);
    2a82:	9a 81       	ldd	r25, Y+2	; 0x02
    2a84:	9f 93       	push	r25
    2a86:	e9 81       	ldd	r30, Y+1	; 0x01
    2a88:	ef 93       	push	r30
    2a8a:	86 e5       	ldi	r24, 0x56	; 86
    2a8c:	91 e0       	ldi	r25, 0x01	; 1
    2a8e:	9f 93       	push	r25
    2a90:	8f 93       	push	r24
    2a92:	82 ed       	ldi	r24, 0xD2	; 210
    2a94:	94 e0       	ldi	r25, 0x04	; 4
    2a96:	9f 93       	push	r25
    2a98:	8f 93       	push	r24
    2a9a:	0e 94 5e 2a 	call	0x54bc	; 0x54bc <sprintf>
			lb_send_string(g_tempStr,TRUE);
    2a9e:	61 e0       	ldi	r22, 0x01	; 1
    2aa0:	82 ed       	ldi	r24, 0xD2	; 210
    2aa2:	94 e0       	ldi	r25, 0x04	; 4
    2aa4:	0e 94 30 07 	call	0xe60	; 0xe60 <_Z14lb_send_stringPch>
    2aa8:	0f 90       	pop	r0
    2aaa:	0f 90       	pop	r0
    2aac:	0f 90       	pop	r0
    2aae:	0f 90       	pop	r0
    2ab0:	0f 90       	pop	r0
    2ab2:	0f 90       	pop	r0
		}

		if(minutes)
    2ab4:	01 2b       	or	r16, r17
    2ab6:	c9 f0       	breq	.+50     	; 0x2aea <_Z14reportTimeTillmmPKcS0_+0x216>
		{
			sprintf(g_tempStr,"%d min ",minutes);
    2ab8:	fe 81       	ldd	r31, Y+6	; 0x06
    2aba:	ff 93       	push	r31
    2abc:	2d 81       	ldd	r18, Y+5	; 0x05
    2abe:	2f 93       	push	r18
    2ac0:	8e e5       	ldi	r24, 0x5E	; 94
    2ac2:	91 e0       	ldi	r25, 0x01	; 1
    2ac4:	9f 93       	push	r25
    2ac6:	8f 93       	push	r24
    2ac8:	82 ed       	ldi	r24, 0xD2	; 210
    2aca:	94 e0       	ldi	r25, 0x04	; 4
    2acc:	9f 93       	push	r25
    2ace:	8f 93       	push	r24
    2ad0:	0e 94 5e 2a 	call	0x54bc	; 0x54bc <sprintf>
			lb_send_string(g_tempStr,TRUE);
    2ad4:	61 e0       	ldi	r22, 0x01	; 1
    2ad6:	82 ed       	ldi	r24, 0xD2	; 210
    2ad8:	94 e0       	ldi	r25, 0x04	; 4
    2ada:	0e 94 30 07 	call	0xe60	; 0xe60 <_Z14lb_send_stringPch>
    2ade:	0f 90       	pop	r0
    2ae0:	0f 90       	pop	r0
    2ae2:	0f 90       	pop	r0
    2ae4:	0f 90       	pop	r0
    2ae6:	0f 90       	pop	r0
    2ae8:	0f 90       	pop	r0
		}

		sprintf(g_tempStr,"%d sec",seconds);
    2aea:	3c 85       	ldd	r19, Y+12	; 0x0c
    2aec:	3f 93       	push	r19
    2aee:	4b 85       	ldd	r20, Y+11	; 0x0b
    2af0:	4f 93       	push	r20
    2af2:	86 e6       	ldi	r24, 0x66	; 102
    2af4:	91 e0       	ldi	r25, 0x01	; 1
    2af6:	9f 93       	push	r25
    2af8:	8f 93       	push	r24
    2afa:	82 ed       	ldi	r24, 0xD2	; 210
    2afc:	94 e0       	ldi	r25, 0x04	; 4
    2afe:	9f 93       	push	r25
    2b00:	8f 93       	push	r24
    2b02:	0e 94 5e 2a 	call	0x54bc	; 0x54bc <sprintf>
		lb_send_string(g_tempStr,TRUE);
    2b06:	61 e0       	ldi	r22, 0x01	; 1
    2b08:	82 ed       	ldi	r24, 0xD2	; 210
    2b0a:	94 e0       	ldi	r25, 0x04	; 4
    2b0c:	0e 94 30 07 	call	0xe60	; 0xe60 <_Z14lb_send_stringPch>

		lb_send_NewLine();
    2b10:	0e 94 23 07 	call	0xe46	; 0xe46 <_Z15lb_send_NewLinev>
		g_tempStr[0] = '\0';
    2b14:	e2 ed       	ldi	r30, 0xD2	; 210
    2b16:	f4 e0       	ldi	r31, 0x04	; 4
    2b18:	10 82       	st	Z, r1
    2b1a:	0f 90       	pop	r0
    2b1c:	0f 90       	pop	r0
    2b1e:	0f 90       	pop	r0
    2b20:	0f 90       	pop	r0
    2b22:	0f 90       	pop	r0
    2b24:	0f 90       	pop	r0
	}
}

BOOL reportTimeTill(time_t from,time_t until,const char* prefix,const char* failMsg)
{
	BOOL failure = FALSE;
    2b26:	80 e0       	ldi	r24, 0x00	; 0
    2b28:	01 c0       	rjmp	.+2      	; 0x2b2c <_Z14reportTimeTillmmPKcS0_+0x258>

	if(from >= until)   /* Negative time */
	{
		failure = TRUE;
    2b2a:	81 e0       	ldi	r24, 0x01	; 1
		lb_send_NewLine();
		g_tempStr[0] = '\0';
	}

	return( failure);
}
    2b2c:	2c 96       	adiw	r28, 0x0c	; 12
    2b2e:	0f b6       	in	r0, 0x3f	; 63
    2b30:	f8 94       	cli
    2b32:	de bf       	out	0x3e, r29	; 62
    2b34:	0f be       	out	0x3f, r0	; 63
    2b36:	cd bf       	out	0x3d, r28	; 61
    2b38:	df 91       	pop	r29
    2b3a:	cf 91       	pop	r28
    2b3c:	1f 91       	pop	r17
    2b3e:	0f 91       	pop	r16
    2b40:	ff 90       	pop	r15
    2b42:	ef 90       	pop	r14
    2b44:	df 90       	pop	r13
    2b46:	cf 90       	pop	r12
    2b48:	bf 90       	pop	r11
    2b4a:	af 90       	pop	r10
    2b4c:	9f 90       	pop	r9
    2b4e:	8f 90       	pop	r8
    2b50:	7f 90       	pop	r7
    2b52:	6f 90       	pop	r6
    2b54:	5f 90       	pop	r5
    2b56:	4f 90       	pop	r4
    2b58:	3f 90       	pop	r3
    2b5a:	2f 90       	pop	r2
    2b5c:	08 95       	ret

00002b5e <_Z17handleLinkBusMsgsv>:


/* The compiler does not seem to optimize large switch statements correctly
 * void __attribute__((optimize("O0"))) handleLinkBusMsgs() */
void handleLinkBusMsgs()
{
    2b5e:	2f 92       	push	r2
    2b60:	3f 92       	push	r3
    2b62:	4f 92       	push	r4
    2b64:	5f 92       	push	r5
    2b66:	6f 92       	push	r6
    2b68:	7f 92       	push	r7
    2b6a:	8f 92       	push	r8
    2b6c:	9f 92       	push	r9
    2b6e:	af 92       	push	r10
    2b70:	bf 92       	push	r11
    2b72:	cf 92       	push	r12
    2b74:	df 92       	push	r13
    2b76:	ef 92       	push	r14
    2b78:	ff 92       	push	r15
    2b7a:	0f 93       	push	r16
    2b7c:	1f 93       	push	r17
    2b7e:	cf 93       	push	r28
    2b80:	df 93       	push	r29
    2b82:	cd b7       	in	r28, 0x3d	; 61
    2b84:	de b7       	in	r29, 0x3e	; 62
    2b86:	28 97       	sbiw	r28, 0x08	; 8
    2b88:	0f b6       	in	r0, 0x3f	; 63
    2b8a:	f8 94       	cli
    2b8c:	de bf       	out	0x3e, r29	; 62
    2b8e:	0f be       	out	0x3f, r0	; 63
    2b90:	cd bf       	out	0x3d, r28	; 61
					}

					eeprom_update_byte(&ee_enable_start_timer,g_enable_start_timer);
				}

				sprintf(g_tempStr,"STA:%s\n",g_enable_start_timer ? "ON" : "OFF");
    2b92:	0f 2e       	mov	r0, r31
    2b94:	f4 e8       	ldi	r31, 0x84	; 132
    2b96:	6f 2e       	mov	r6, r31
    2b98:	f1 e0       	ldi	r31, 0x01	; 1
    2b9a:	7f 2e       	mov	r7, r31
    2b9c:	f0 2d       	mov	r31, r0
    2b9e:	0f 2e       	mov	r0, r31
    2ba0:	f2 ed       	ldi	r31, 0xD2	; 210
    2ba2:	af 2e       	mov	r10, r31
    2ba4:	f4 e0       	ldi	r31, 0x04	; 4
    2ba6:	bf 2e       	mov	r11, r31
    2ba8:	f0 2d       	mov	r31, r0

					sprintf(g_tempStr,"T Cal= %d\n",g_atmega_temp_calibration);
					lb_send_string(g_tempStr,FALSE);
				}

				sprintf(g_tempStr,"T=%d\n",g_temperature);
    2baa:	0f 2e       	mov	r0, r31
    2bac:	f8 e0       	ldi	r31, 0x08	; 8
    2bae:	8f 2e       	mov	r8, r31
    2bb0:	f2 e0       	ldi	r31, 0x02	; 2
    2bb2:	9f 2e       	mov	r9, r31
    2bb4:	f0 2d       	mov	r31, r0
						{
							g_time_needed_for_ID = (500 + timeRequiredToSendStrAtWPM(g_messages_text[STATION_ID],g_id_codespeed)) / 1000;
						}
					}
				}
				sprintf(g_tempStr,"ID: %d wpm\n",g_id_codespeed);
    2bb6:	0f 2e       	mov	r0, r31
    2bb8:	f5 ec       	ldi	r31, 0xC5	; 197
    2bba:	4f 2e       	mov	r4, r31
    2bbc:	f1 e0       	ldi	r31, 0x01	; 1
    2bbe:	5f 2e       	mov	r5, r31
    2bc0:	f0 2d       	mov	r31, r0
							setupForFox(&holdFox);
						}
					}
				}

				sprintf(g_tempStr,"Fox=%u\n",g_fox);
    2bc2:	0f 2e       	mov	r0, r31
    2bc4:	f4 e7       	ldi	r31, 0x74	; 116
    2bc6:	2f 2e       	mov	r2, r31
    2bc8:	f1 e0       	ldi	r31, 0x01	; 1
    2bca:	3f 2e       	mov	r3, r31
    2bcc:	f0 2d       	mov	r31, r0
void handleLinkBusMsgs()
{
	LinkbusRxBuffer* lb_buff;
	BOOL send_ack = TRUE;

	while((lb_buff = nextFullRxBuffer()))
    2bce:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <_Z16nextFullRxBufferv>
    2bd2:	6c 01       	movw	r12, r24
    2bd4:	00 97       	sbiw	r24, 0x00	; 0
    2bd6:	09 f4       	brne	.+2      	; 0x2bda <_Z17handleLinkBusMsgsv+0x7c>
    2bd8:	cf c5       	rjmp	.+2974   	; 0x3778 <_Z17handleLinkBusMsgsv+0xc1a>
	{
		LBMessageID msg_id = lb_buff->id;

		switch(msg_id)
    2bda:	fc 01       	movw	r30, r24
    2bdc:	81 81       	ldd	r24, Z+1	; 0x01
    2bde:	92 81       	ldd	r25, Z+2	; 0x02
    2be0:	8a 39       	cpi	r24, 0x9A	; 154
    2be2:	f3 e2       	ldi	r31, 0x23	; 35
    2be4:	9f 07       	cpc	r25, r31
    2be6:	09 f4       	brne	.+2      	; 0x2bea <_Z17handleLinkBusMsgsv+0x8c>
    2be8:	af c5       	rjmp	.+2910   	; 0x3748 <_Z17handleLinkBusMsgsv+0xbea>
    2bea:	c8 f4       	brcc	.+50     	; 0x2c1e <_Z17handleLinkBusMsgsv+0xc0>
    2bec:	85 32       	cpi	r24, 0x25	; 37
    2bee:	3e e1       	ldi	r19, 0x1E	; 30
    2bf0:	93 07       	cpc	r25, r19
    2bf2:	09 f4       	brne	.+2      	; 0x2bf6 <_Z17handleLinkBusMsgsv+0x98>
    2bf4:	a9 c5       	rjmp	.+2898   	; 0x3748 <_Z17handleLinkBusMsgsv+0xbea>
    2bf6:	50 f4       	brcc	.+20     	; 0x2c0c <_Z17handleLinkBusMsgsv+0xae>
    2bf8:	8e 31       	cpi	r24, 0x1E	; 30
    2bfa:	e3 e0       	ldi	r30, 0x03	; 3
    2bfc:	9e 07       	cpc	r25, r30
    2bfe:	09 f4       	brne	.+2      	; 0x2c02 <_Z17handleLinkBusMsgsv+0xa4>
    2c00:	c8 c1       	rjmp	.+912    	; 0x2f92 <_Z17handleLinkBusMsgsv+0x434>
    2c02:	8f 36       	cpi	r24, 0x6F	; 111
    2c04:	9d 41       	sbci	r25, 0x1D	; 29
    2c06:	09 f4       	brne	.+2      	; 0x2c0a <_Z17handleLinkBusMsgsv+0xac>
    2c08:	a9 c2       	rjmp	.+1362   	; 0x315c <_Z17handleLinkBusMsgsv+0x5fe>
    2c0a:	9c c5       	rjmp	.+2872   	; 0x3744 <_Z17handleLinkBusMsgsv+0xbe6>
    2c0c:	86 3c       	cpi	r24, 0xC6	; 198
    2c0e:	2e e1       	ldi	r18, 0x1E	; 30
    2c10:	92 07       	cpc	r25, r18
    2c12:	f9 f0       	breq	.+62     	; 0x2c52 <_Z17handleLinkBusMsgsv+0xf4>
    2c14:	86 3a       	cpi	r24, 0xA6	; 166
    2c16:	90 42       	sbci	r25, 0x20	; 32
    2c18:	09 f4       	brne	.+2      	; 0x2c1c <_Z17handleLinkBusMsgsv+0xbe>
    2c1a:	c5 c0       	rjmp	.+394    	; 0x2da6 <_Z17handleLinkBusMsgsv+0x248>
    2c1c:	93 c5       	rjmp	.+2854   	; 0x3744 <_Z17handleLinkBusMsgsv+0xbe6>
    2c1e:	85 3f       	cpi	r24, 0xF5	; 245
    2c20:	43 e2       	ldi	r20, 0x23	; 35
    2c22:	94 07       	cpc	r25, r20
    2c24:	09 f4       	brne	.+2      	; 0x2c28 <_Z17handleLinkBusMsgsv+0xca>
    2c26:	05 c1       	rjmp	.+522    	; 0x2e32 <_Z17handleLinkBusMsgsv+0x2d4>
    2c28:	50 f4       	brcc	.+20     	; 0x2c3e <_Z17handleLinkBusMsgsv+0xe0>
    2c2a:	8f 3c       	cpi	r24, 0xCF	; 207
    2c2c:	f3 e2       	ldi	r31, 0x23	; 35
    2c2e:	9f 07       	cpc	r25, r31
    2c30:	09 f4       	brne	.+2      	; 0x2c34 <_Z17handleLinkBusMsgsv+0xd6>
    2c32:	3a c5       	rjmp	.+2676   	; 0x36a8 <_Z17handleLinkBusMsgsv+0xb4a>
    2c34:	80 3d       	cpi	r24, 0xD0	; 208
    2c36:	93 42       	sbci	r25, 0x23	; 35
    2c38:	09 f4       	brne	.+2      	; 0x2c3c <_Z17handleLinkBusMsgsv+0xde>
    2c3a:	36 c2       	rjmp	.+1132   	; 0x30a8 <_Z17handleLinkBusMsgsv+0x54a>
    2c3c:	83 c5       	rjmp	.+2822   	; 0x3744 <_Z17handleLinkBusMsgsv+0xbe6>
    2c3e:	84 33       	cpi	r24, 0x34	; 52
    2c40:	34 e2       	ldi	r19, 0x24	; 36
    2c42:	93 07       	cpc	r25, r19
    2c44:	09 f4       	brne	.+2      	; 0x2c48 <_Z17handleLinkBusMsgsv+0xea>
    2c46:	2a c1       	rjmp	.+596    	; 0x2e9c <_Z17handleLinkBusMsgsv+0x33e>
    2c48:	8c 39       	cpi	r24, 0x9C	; 156
    2c4a:	94 42       	sbci	r25, 0x24	; 36
    2c4c:	09 f4       	brne	.+2      	; 0x2c50 <_Z17handleLinkBusMsgsv+0xf2>
    2c4e:	81 c2       	rjmp	.+1282   	; 0x3152 <_Z17handleLinkBusMsgsv+0x5f4>
    2c50:	79 c5       	rjmp	.+2802   	; 0x3744 <_Z17handleLinkBusMsgsv+0xbe6>
			}
			break;

			case MESSAGE_SET_FOX:
			{
				int c = (int)(lb_buff->fields[FIELD1][0]);
    2c52:	f6 01       	movw	r30, r12
    2c54:	83 81       	ldd	r24, Z+3	; 0x03
    2c56:	90 e0       	ldi	r25, 0x00	; 0

				if(c)
    2c58:	00 97       	sbiw	r24, 0x00	; 0
    2c5a:	09 f4       	brne	.+2      	; 0x2c5e <_Z17handleLinkBusMsgsv+0x100>
    2c5c:	8f c0       	rjmp	.+286    	; 0x2d7c <_Z17handleLinkBusMsgsv+0x21e>
				{
					if(c == 'B')
    2c5e:	82 34       	cpi	r24, 0x42	; 66
    2c60:	91 05       	cpc	r25, r1
    2c62:	09 f4       	brne	.+2      	; 0x2c66 <_Z17handleLinkBusMsgsv+0x108>
    2c64:	77 c5       	rjmp	.+2798   	; 0x3754 <_Z17handleLinkBusMsgsv+0xbf6>
					{
						c = BEACON;
					}
					else if(c == 'D')
    2c66:	84 34       	cpi	r24, 0x44	; 68
    2c68:	91 05       	cpc	r25, r1
    2c6a:	39 f4       	brne	.+14     	; 0x2c7a <_Z17handleLinkBusMsgsv+0x11c>
					{
						char t = lb_buff->fields[FIELD2][0];

						if(t == 'S')
    2c6c:	87 89       	ldd	r24, Z+23	; 0x17
    2c6e:	83 35       	cpi	r24, 0x53	; 83
    2c70:	09 f4       	brne	.+2      	; 0x2c74 <_Z17handleLinkBusMsgsv+0x116>
    2c72:	73 c5       	rjmp	.+2790   	; 0x375a <_Z17handleLinkBusMsgsv+0xbfc>
						{
							c = SPRINT_DEMO;
						}
						else
						{
							c = FOX_DEMO;
    2c74:	86 e0       	ldi	r24, 0x06	; 6
    2c76:	90 e0       	ldi	r25, 0x00	; 0
    2c78:	75 c0       	rjmp	.+234    	; 0x2d64 <_Z17handleLinkBusMsgsv+0x206>
						}
					}
					else if(c == 'F')
    2c7a:	86 34       	cpi	r24, 0x46	; 70
    2c7c:	91 05       	cpc	r25, r1
    2c7e:	09 f4       	brne	.+2      	; 0x2c82 <_Z17handleLinkBusMsgsv+0x124>
    2c80:	6f c5       	rjmp	.+2782   	; 0x3760 <_Z17handleLinkBusMsgsv+0xc02>
					{
						c = FOXORING;
					}
					else if(c == 'C')
    2c82:	83 34       	cpi	r24, 0x43	; 67
    2c84:	91 05       	cpc	r25, r1
    2c86:	c9 f4       	brne	.+50     	; 0x2cba <_Z17handleLinkBusMsgsv+0x15c>
					{
						char t = lb_buff->fields[FIELD2][0];
    2c88:	f6 01       	movw	r30, r12
    2c8a:	87 89       	ldd	r24, Z+23	; 0x17
						lb_buff->fields[FIELD2][1] = '\0';
    2c8c:	10 8e       	std	Z+24, r1	; 0x18

						if(t == 'B')
    2c8e:	82 34       	cpi	r24, 0x42	; 66
    2c90:	29 f0       	breq	.+10     	; 0x2c9c <_Z17handleLinkBusMsgsv+0x13e>
						{
							t = '0';
						}

						if(isdigit(t))
    2c92:	90 e0       	ldi	r25, 0x00	; 0
    2c94:	c0 97       	sbiw	r24, 0x30	; 48
    2c96:	0a 97       	sbiw	r24, 0x0a	; 10
    2c98:	08 f0       	brcs	.+2      	; 0x2c9c <_Z17handleLinkBusMsgsv+0x13e>
    2c9a:	70 c0       	rjmp	.+224    	; 0x2d7c <_Z17handleLinkBusMsgsv+0x21e>
						{
							c = CLAMP(BEACON,atoi(lb_buff->fields[FIELD2]),FOX_5);
    2c9c:	c6 01       	movw	r24, r12
    2c9e:	47 96       	adiw	r24, 0x17	; 23
    2ca0:	0e 94 d3 29 	call	0x53a6	; 0x53a6 <atoi>
    2ca4:	99 23       	and	r25, r25
    2ca6:	14 f4       	brge	.+4      	; 0x2cac <_Z17handleLinkBusMsgsv+0x14e>
    2ca8:	80 e0       	ldi	r24, 0x00	; 0
    2caa:	90 e0       	ldi	r25, 0x00	; 0
    2cac:	86 30       	cpi	r24, 0x06	; 6
    2cae:	91 05       	cpc	r25, r1
    2cb0:	0c f4       	brge	.+2      	; 0x2cb4 <_Z17handleLinkBusMsgsv+0x156>
    2cb2:	55 c0       	rjmp	.+170    	; 0x2d5e <_Z17handleLinkBusMsgsv+0x200>
    2cb4:	85 e0       	ldi	r24, 0x05	; 5
    2cb6:	90 e0       	ldi	r25, 0x00	; 0
    2cb8:	52 c0       	rjmp	.+164    	; 0x2d5e <_Z17handleLinkBusMsgsv+0x200>
						}
					}
					else if(c == 'S')
    2cba:	83 35       	cpi	r24, 0x53	; 83
    2cbc:	91 05       	cpc	r25, r1
    2cbe:	e9 f5       	brne	.+122    	; 0x2d3a <_Z17handleLinkBusMsgsv+0x1dc>
					{
						int x = 0;
						char t = lb_buff->fields[FIELD2][0];
    2cc0:	f6 01       	movw	r30, r12
    2cc2:	87 89       	ldd	r24, Z+23	; 0x17
						char u = lb_buff->fields[FIELD2][1];
    2cc4:	90 8d       	ldd	r25, Z+24	; 0x18
						lb_buff->fields[FIELD2][2] = '\0';
    2cc6:	11 8e       	std	Z+25, r1	; 0x19

						if(t == 'B')
    2cc8:	82 34       	cpi	r24, 0x42	; 66
    2cca:	09 f4       	brne	.+2      	; 0x2cce <_Z17handleLinkBusMsgsv+0x170>
    2ccc:	57 c0       	rjmp	.+174    	; 0x2d7c <_Z17handleLinkBusMsgsv+0x21e>
						{
							x = BEACON;
						}
						else if(t == 'F')
    2cce:	86 34       	cpi	r24, 0x46	; 70
    2cd0:	49 f4       	brne	.+18     	; 0x2ce4 <_Z17handleLinkBusMsgsv+0x186>
						{
							if((u > '0') && (u < '6'))
    2cd2:	8f ec       	ldi	r24, 0xCF	; 207
    2cd4:	89 0f       	add	r24, r25
    2cd6:	85 30       	cpi	r24, 0x05	; 5
    2cd8:	08 f0       	brcs	.+2      	; 0x2cdc <_Z17handleLinkBusMsgsv+0x17e>
    2cda:	50 c0       	rjmp	.+160    	; 0x2d7c <_Z17handleLinkBusMsgsv+0x21e>
							{
								x = SPRINT_F1 + (u - '1');
    2cdc:	89 2f       	mov	r24, r25
    2cde:	90 e0       	ldi	r25, 0x00	; 0
    2ce0:	83 97       	sbiw	r24, 0x23	; 35
    2ce2:	1b c0       	rjmp	.+54     	; 0x2d1a <_Z17handleLinkBusMsgsv+0x1bc>
							}
						}
						else if(t == 'S')
    2ce4:	83 35       	cpi	r24, 0x53	; 83
    2ce6:	41 f4       	brne	.+16     	; 0x2cf8 <_Z17handleLinkBusMsgsv+0x19a>
						{
							if((u > '0') && (u < '6'))
    2ce8:	8f ec       	ldi	r24, 0xCF	; 207
    2cea:	89 0f       	add	r24, r25
    2cec:	85 30       	cpi	r24, 0x05	; 5
    2cee:	c0 f4       	brcc	.+48     	; 0x2d20 <_Z17handleLinkBusMsgsv+0x1c2>
							{
								x = SPRINT_S1 + (u - '1');
    2cf0:	89 2f       	mov	r24, r25
    2cf2:	90 e0       	ldi	r25, 0x00	; 0
    2cf4:	88 97       	sbiw	r24, 0x28	; 40
    2cf6:	11 c0       	rjmp	.+34     	; 0x2d1a <_Z17handleLinkBusMsgsv+0x1bc>
							else
							{
								x = SPECTATOR;
							}
						}
						else if(u == 'F')
    2cf8:	96 34       	cpi	r25, 0x46	; 70
    2cfa:	39 f4       	brne	.+14     	; 0x2d0a <_Z17handleLinkBusMsgsv+0x1ac>
						{
							if((t > '0') && (t < '6'))
    2cfc:	9f ec       	ldi	r25, 0xCF	; 207
    2cfe:	98 0f       	add	r25, r24
    2d00:	95 30       	cpi	r25, 0x05	; 5
    2d02:	e0 f5       	brcc	.+120    	; 0x2d7c <_Z17handleLinkBusMsgsv+0x21e>
							{
								x = SPRINT_F1 + (t - '1');
    2d04:	90 e0       	ldi	r25, 0x00	; 0
    2d06:	83 97       	sbiw	r24, 0x23	; 35
    2d08:	08 c0       	rjmp	.+16     	; 0x2d1a <_Z17handleLinkBusMsgsv+0x1bc>
							}
						}
						else if(u == 'S')
    2d0a:	93 35       	cpi	r25, 0x53	; 83
    2d0c:	b9 f5       	brne	.+110    	; 0x2d7c <_Z17handleLinkBusMsgsv+0x21e>
						{
							if((t > '0') && (t < '6'))
    2d0e:	9f ec       	ldi	r25, 0xCF	; 207
    2d10:	98 0f       	add	r25, r24
    2d12:	95 30       	cpi	r25, 0x05	; 5
    2d14:	98 f5       	brcc	.+102    	; 0x2d7c <_Z17handleLinkBusMsgsv+0x21e>
							{
								x = SPRINT_S1 + (t - '1');
    2d16:	90 e0       	ldi	r25, 0x00	; 0
    2d18:	88 97       	sbiw	r24, 0x28	; 40
							}
						}

						if(x != BEACON)
    2d1a:	00 97       	sbiw	r24, 0x00	; 0
    2d1c:	19 f4       	brne	.+6      	; 0x2d24 <_Z17handleLinkBusMsgsv+0x1c6>
    2d1e:	2e c0       	rjmp	.+92     	; 0x2d7c <_Z17handleLinkBusMsgsv+0x21e>
							{
								x = SPRINT_S1 + (u - '1');
							}
							else
							{
								x = SPECTATOR;
    2d20:	88 e0       	ldi	r24, 0x08	; 8
    2d22:	90 e0       	ldi	r25, 0x00	; 0
							}
						}

						if(x != BEACON)
						{
							c = CLAMP(SPECTATOR,x,SPRINT_F5);
    2d24:	88 30       	cpi	r24, 0x08	; 8
    2d26:	91 05       	cpc	r25, r1
    2d28:	14 f4       	brge	.+4      	; 0x2d2e <_Z17handleLinkBusMsgsv+0x1d0>
    2d2a:	88 e0       	ldi	r24, 0x08	; 8
    2d2c:	90 e0       	ldi	r25, 0x00	; 0
    2d2e:	83 31       	cpi	r24, 0x13	; 19
    2d30:	91 05       	cpc	r25, r1
    2d32:	ac f0       	brlt	.+42     	; 0x2d5e <_Z17handleLinkBusMsgsv+0x200>
    2d34:	82 e1       	ldi	r24, 0x12	; 18
    2d36:	90 e0       	ldi	r25, 0x00	; 0
    2d38:	12 c0       	rjmp	.+36     	; 0x2d5e <_Z17handleLinkBusMsgsv+0x200>
						}
					}
					else if(c == 'N')
    2d3a:	8e 34       	cpi	r24, 0x4E	; 78
    2d3c:	91 05       	cpc	r25, r1
    2d3e:	59 f4       	brne	.+22     	; 0x2d56 <_Z17handleLinkBusMsgsv+0x1f8>
					{
						char t = lb_buff->fields[FIELD2][0];
    2d40:	f6 01       	movw	r30, r12
    2d42:	87 89       	ldd	r24, Z+23	; 0x17

						if(t == '2')
    2d44:	82 33       	cpi	r24, 0x32	; 50
    2d46:	09 f4       	brne	.+2      	; 0x2d4a <_Z17handleLinkBusMsgsv+0x1ec>
    2d48:	0d c5       	rjmp	.+2586   	; 0x3764 <_Z17handleLinkBusMsgsv+0xc06>
						{
							c = NO_CODE_START_TONES_2M;
						}
						else if(t == '5')
    2d4a:	85 33       	cpi	r24, 0x35	; 53
    2d4c:	09 f4       	brne	.+2      	; 0x2d50 <_Z17handleLinkBusMsgsv+0x1f2>
    2d4e:	0c c5       	rjmp	.+2584   	; 0x3768 <_Z17handleLinkBusMsgsv+0xc0a>
						{
							c = NO_CODE_START_TONES_5M;
						}
						else
						{
							c = BEACON;
    2d50:	80 e0       	ldi	r24, 0x00	; 0
    2d52:	90 e0       	ldi	r25, 0x00	; 0
    2d54:	07 c0       	rjmp	.+14     	; 0x2d64 <_Z17handleLinkBusMsgsv+0x206>
						}
					}
					else
					{
						c = atoi(lb_buff->fields[FIELD1]);
    2d56:	c6 01       	movw	r24, r12
    2d58:	03 96       	adiw	r24, 0x03	; 3
    2d5a:	0e 94 d3 29 	call	0x53a6	; 0x53a6 <atoi>
					}

					if((c >= BEACON) && (c < INVALID_FOX))
    2d5e:	86 31       	cpi	r24, 0x16	; 22
    2d60:	91 05       	cpc	r25, r1
    2d62:	60 f4       	brcc	.+24     	; 0x2d7c <_Z17handleLinkBusMsgsv+0x21e>
					{
						Fox_t holdFox = (Fox_t)c;
    2d64:	89 83       	std	Y+1, r24	; 0x01
						permFox(holdFox);
    2d66:	0e 94 aa 11 	call	0x2354	; 0x2354 <_Z7permFox5Fox_t>
						if(holdFox != g_fox)
    2d6a:	80 91 5c 05 	lds	r24, 0x055C	; 0x80055c <g_fox>
    2d6e:	99 81       	ldd	r25, Y+1	; 0x01
    2d70:	98 17       	cp	r25, r24
    2d72:	21 f0       	breq	.+8      	; 0x2d7c <_Z17handleLinkBusMsgsv+0x21e>
						{
							setupForFox(&holdFox);
    2d74:	ce 01       	movw	r24, r28
    2d76:	01 96       	adiw	r24, 0x01	; 1
    2d78:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <_Z11setupForFoxP5Fox_t>
						}
					}
				}

				sprintf(g_tempStr,"Fox=%u\n",g_fox);
    2d7c:	80 91 5c 05 	lds	r24, 0x055C	; 0x80055c <g_fox>
    2d80:	1f 92       	push	r1
    2d82:	8f 93       	push	r24
    2d84:	3f 92       	push	r3
    2d86:	2f 92       	push	r2
    2d88:	bf 92       	push	r11
    2d8a:	af 92       	push	r10
    2d8c:	0e 94 5e 2a 	call	0x54bc	; 0x54bc <sprintf>
				lb_send_string(g_tempStr,FALSE);
    2d90:	60 e0       	ldi	r22, 0x00	; 0
    2d92:	c5 01       	movw	r24, r10
    2d94:	0e 94 30 07 	call	0xe60	; 0xe60 <_Z14lb_send_stringPch>
			}
			break;
    2d98:	0f 90       	pop	r0
    2d9a:	0f 90       	pop	r0
    2d9c:	0f 90       	pop	r0
    2d9e:	0f 90       	pop	r0
    2da0:	0f 90       	pop	r0
    2da2:	0f 90       	pop	r0
    2da4:	d1 c4       	rjmp	.+2466   	; 0x3748 <_Z17handleLinkBusMsgsv+0xbea>

			case MESSAGE_LEDS:
			{
				if(lb_buff->fields[FIELD1][0])
    2da6:	f6 01       	movw	r30, r12
    2da8:	83 81       	ldd	r24, Z+3	; 0x03
    2daa:	88 23       	and	r24, r24
    2dac:	01 f1       	breq	.+64     	; 0x2dee <_Z17handleLinkBusMsgsv+0x290>
				{
					if((lb_buff->fields[FIELD1][1] == 'F') || (lb_buff->fields[FIELD1][0] == '0'))
    2dae:	94 81       	ldd	r25, Z+4	; 0x04
    2db0:	96 34       	cpi	r25, 0x46	; 70
    2db2:	11 f0       	breq	.+4      	; 0x2db8 <_Z17handleLinkBusMsgsv+0x25a>
    2db4:	80 33       	cpi	r24, 0x30	; 48
    2db6:	59 f4       	brne	.+22     	; 0x2dce <_Z17handleLinkBusMsgsv+0x270>
					{
						g_enable_LEDs = FALSE;
    2db8:	10 92 08 05 	sts	0x0508, r1	; 0x800508 <_ZL13g_enable_LEDs>
						digitalWrite(PIN_LED1,OFF); /*  LED Off */
    2dbc:	60 e0       	ldi	r22, 0x00	; 0
    2dbe:	8d e0       	ldi	r24, 0x0D	; 13
    2dc0:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>
						digitalWrite(PIN_LED2,OFF);
    2dc4:	60 e0       	ldi	r22, 0x00	; 0
    2dc6:	87 e0       	ldi	r24, 0x07	; 7
    2dc8:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>
    2dcc:	03 c0       	rjmp	.+6      	; 0x2dd4 <_Z17handleLinkBusMsgsv+0x276>
					}
					else
					{
						g_enable_LEDs = TRUE;
    2dce:	81 e0       	ldi	r24, 0x01	; 1
    2dd0:	80 93 08 05 	sts	0x0508, r24	; 0x800508 <_ZL13g_enable_LEDs>
					}

					eeprom_update_byte(&ee_enable_LEDs,g_enable_LEDs);
    2dd4:	60 91 08 05 	lds	r22, 0x0508	; 0x800508 <_ZL13g_enable_LEDs>
    2dd8:	86 e3       	ldi	r24, 0x36	; 54
    2dda:	92 e0       	ldi	r25, 0x02	; 2
    2ddc:	0e 94 25 2d 	call	0x5a4a	; 0x5a4a <eeprom_update_byte>
					g_LEDs_Timed_Out = !g_enable_LEDs;
    2de0:	90 91 08 05 	lds	r25, 0x0508	; 0x800508 <_ZL13g_enable_LEDs>
    2de4:	81 e0       	ldi	r24, 0x01	; 1
    2de6:	91 11       	cpse	r25, r1
    2de8:	80 e0       	ldi	r24, 0x00	; 0
    2dea:	80 93 d1 04 	sts	0x04D1, r24	; 0x8004d1 <_ZL16g_LEDs_Timed_Out>
				}

				sprintf(g_tempStr,"LED:%s\n",g_enable_LEDs ? "ON" : "OFF");
    2dee:	80 91 08 05 	lds	r24, 0x0508	; 0x800508 <_ZL13g_enable_LEDs>
    2df2:	81 11       	cpse	r24, r1
    2df4:	05 c0       	rjmp	.+10     	; 0x2e00 <_Z17handleLinkBusMsgsv+0x2a2>
    2df6:	20 e7       	ldi	r18, 0x70	; 112
    2df8:	31 e0       	ldi	r19, 0x01	; 1
    2dfa:	82 2f       	mov	r24, r18
    2dfc:	93 2f       	mov	r25, r19
    2dfe:	04 c0       	rjmp	.+8      	; 0x2e08 <_Z17handleLinkBusMsgsv+0x2aa>
    2e00:	ed e6       	ldi	r30, 0x6D	; 109
    2e02:	f1 e0       	ldi	r31, 0x01	; 1
    2e04:	8e 2f       	mov	r24, r30
    2e06:	9f 2f       	mov	r25, r31
    2e08:	9f 93       	push	r25
    2e0a:	8f 93       	push	r24
    2e0c:	8c e7       	ldi	r24, 0x7C	; 124
    2e0e:	91 e0       	ldi	r25, 0x01	; 1
    2e10:	9f 93       	push	r25
    2e12:	8f 93       	push	r24
    2e14:	bf 92       	push	r11
    2e16:	af 92       	push	r10
    2e18:	0e 94 5e 2a 	call	0x54bc	; 0x54bc <sprintf>
				lb_send_string(g_tempStr,FALSE);
    2e1c:	60 e0       	ldi	r22, 0x00	; 0
    2e1e:	c5 01       	movw	r24, r10
    2e20:	0e 94 30 07 	call	0xe60	; 0xe60 <_Z14lb_send_stringPch>
			}
			break;
    2e24:	0f 90       	pop	r0
    2e26:	0f 90       	pop	r0
    2e28:	0f 90       	pop	r0
    2e2a:	0f 90       	pop	r0
    2e2c:	0f 90       	pop	r0
    2e2e:	0f 90       	pop	r0
    2e30:	8b c4       	rjmp	.+2326   	; 0x3748 <_Z17handleLinkBusMsgsv+0xbea>

			case MESSAGE_STARTTONES_ENABLE:
			{
				if(lb_buff->fields[FIELD1][0])
    2e32:	f6 01       	movw	r30, r12
    2e34:	83 81       	ldd	r24, Z+3	; 0x03
    2e36:	88 23       	and	r24, r24
    2e38:	89 f0       	breq	.+34     	; 0x2e5c <_Z17handleLinkBusMsgsv+0x2fe>
				{
					if((lb_buff->fields[FIELD1][1] == 'F') || (lb_buff->fields[FIELD1][0] == '0'))
    2e3a:	94 81       	ldd	r25, Z+4	; 0x04
    2e3c:	96 34       	cpi	r25, 0x46	; 70
    2e3e:	11 f0       	breq	.+4      	; 0x2e44 <_Z17handleLinkBusMsgsv+0x2e6>
    2e40:	80 33       	cpi	r24, 0x30	; 48
    2e42:	19 f4       	brne	.+6      	; 0x2e4a <_Z17handleLinkBusMsgsv+0x2ec>
					{
						g_enable_start_timer = FALSE;
    2e44:	10 92 07 05 	sts	0x0507, r1	; 0x800507 <_ZL20g_enable_start_timer>
    2e48:	03 c0       	rjmp	.+6      	; 0x2e50 <_Z17handleLinkBusMsgsv+0x2f2>
					}
					else
					{
						g_enable_start_timer = TRUE;
    2e4a:	81 e0       	ldi	r24, 0x01	; 1
    2e4c:	80 93 07 05 	sts	0x0507, r24	; 0x800507 <_ZL20g_enable_start_timer>
					}

					eeprom_update_byte(&ee_enable_start_timer,g_enable_start_timer);
    2e50:	60 91 07 05 	lds	r22, 0x0507	; 0x800507 <_ZL20g_enable_start_timer>
    2e54:	81 e3       	ldi	r24, 0x31	; 49
    2e56:	92 e0       	ldi	r25, 0x02	; 2
    2e58:	0e 94 25 2d 	call	0x5a4a	; 0x5a4a <eeprom_update_byte>
				}

				sprintf(g_tempStr,"STA:%s\n",g_enable_start_timer ? "ON" : "OFF");
    2e5c:	80 91 07 05 	lds	r24, 0x0507	; 0x800507 <_ZL20g_enable_start_timer>
    2e60:	81 11       	cpse	r24, r1
    2e62:	05 c0       	rjmp	.+10     	; 0x2e6e <_Z17handleLinkBusMsgsv+0x310>
    2e64:	20 e7       	ldi	r18, 0x70	; 112
    2e66:	31 e0       	ldi	r19, 0x01	; 1
    2e68:	82 2f       	mov	r24, r18
    2e6a:	93 2f       	mov	r25, r19
    2e6c:	04 c0       	rjmp	.+8      	; 0x2e76 <_Z17handleLinkBusMsgsv+0x318>
    2e6e:	ed e6       	ldi	r30, 0x6D	; 109
    2e70:	f1 e0       	ldi	r31, 0x01	; 1
    2e72:	8e 2f       	mov	r24, r30
    2e74:	9f 2f       	mov	r25, r31
    2e76:	9f 93       	push	r25
    2e78:	8f 93       	push	r24
    2e7a:	7f 92       	push	r7
    2e7c:	6f 92       	push	r6
    2e7e:	bf 92       	push	r11
    2e80:	af 92       	push	r10
    2e82:	0e 94 5e 2a 	call	0x54bc	; 0x54bc <sprintf>
				lb_send_string(g_tempStr,FALSE);
    2e86:	60 e0       	ldi	r22, 0x00	; 0
    2e88:	c5 01       	movw	r24, r10
    2e8a:	0e 94 30 07 	call	0xe60	; 0xe60 <_Z14lb_send_stringPch>
			}
			break;
    2e8e:	0f 90       	pop	r0
    2e90:	0f 90       	pop	r0
    2e92:	0f 90       	pop	r0
    2e94:	0f 90       	pop	r0
    2e96:	0f 90       	pop	r0
    2e98:	0f 90       	pop	r0
    2e9a:	56 c4       	rjmp	.+2220   	; 0x3748 <_Z17handleLinkBusMsgsv+0xbea>

			case MESSAGE_SYNC:
			{
				if(lb_buff->fields[FIELD1][0])
    2e9c:	f6 01       	movw	r30, r12
    2e9e:	83 81       	ldd	r24, Z+3	; 0x03
    2ea0:	88 23       	and	r24, r24
    2ea2:	09 f4       	brne	.+2      	; 0x2ea6 <_Z17handleLinkBusMsgsv+0x348>
    2ea4:	51 c4       	rjmp	.+2210   	; 0x3748 <_Z17handleLinkBusMsgsv+0xbea>
				{
					if(lb_buff->fields[FIELD1][0] == '0')       /* Stop the event. Re-sync will occur on next start */
    2ea6:	80 33       	cpi	r24, 0x30	; 48
    2ea8:	21 f4       	brne	.+8      	; 0x2eb2 <_Z17handleLinkBusMsgsv+0x354>
					{
						g_transmissions_disabled = TRUE;
    2eaa:	81 e0       	ldi	r24, 0x01	; 1
    2eac:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <g_transmissions_disabled>
    2eb0:	4b c4       	rjmp	.+2198   	; 0x3748 <_Z17handleLinkBusMsgsv+0xbea>
					}
					else if(lb_buff->fields[FIELD1][0] == '1')  /* Start the event, re-syncing to a start time of now - same as a button press */
    2eb2:	81 33       	cpi	r24, 0x31	; 49
    2eb4:	19 f4       	brne	.+6      	; 0x2ebc <_Z17handleLinkBusMsgsv+0x35e>
					{
						startEventNow();
    2eb6:	0e 94 c0 13 	call	0x2780	; 0x2780 <_Z13startEventNowv>
    2eba:	46 c4       	rjmp	.+2188   	; 0x3748 <_Z17handleLinkBusMsgsv+0xbea>
					}
					else if(lb_buff->fields[FIELD1][0] == '2')  /* Start the event at the programmed start time */
    2ebc:	82 33       	cpi	r24, 0x32	; 50
    2ebe:	09 f0       	breq	.+2      	; 0x2ec2 <_Z17handleLinkBusMsgsv+0x364>
    2ec0:	43 c4       	rjmp	.+2182   	; 0x3748 <_Z17handleLinkBusMsgsv+0xbea>
					{
						g_transmissions_disabled = TRUE;
    2ec2:	81 e0       	ldi	r24, 0x01	; 1
    2ec4:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <g_transmissions_disabled>

						if(!clockConfigurationError())
    2ec8:	0e 94 cc 09 	call	0x1398	; 0x1398 <_Z23clockConfigurationErrorv>
    2ecc:	81 11       	cpse	r24, r1
    2ece:	5e c0       	rjmp	.+188    	; 0x2f8c <_Z17handleLinkBusMsgsv+0x42e>
						{
							g_use_rtc_to_start = TRUE;
    2ed0:	81 e0       	ldi	r24, 0x01	; 1
    2ed2:	80 93 35 05 	sts	0x0535, r24	; 0x800535 <g_use_rtc_to_start>
							reportTimeTill(g_current_epoch,g_event_start_epoch,"Starts in: ","In progress\n");
    2ed6:	20 91 4e 05 	lds	r18, 0x054E	; 0x80054e <g_event_start_epoch>
    2eda:	30 91 4f 05 	lds	r19, 0x054F	; 0x80054f <g_event_start_epoch+0x1>
    2ede:	40 91 50 05 	lds	r20, 0x0550	; 0x800550 <g_event_start_epoch+0x2>
    2ee2:	50 91 51 05 	lds	r21, 0x0551	; 0x800551 <g_event_start_epoch+0x3>
    2ee6:	60 91 52 05 	lds	r22, 0x0552	; 0x800552 <g_current_epoch>
    2eea:	70 91 53 05 	lds	r23, 0x0553	; 0x800553 <g_current_epoch+0x1>
    2eee:	80 91 54 05 	lds	r24, 0x0554	; 0x800554 <g_current_epoch+0x2>
    2ef2:	90 91 55 05 	lds	r25, 0x0555	; 0x800555 <g_current_epoch+0x3>
    2ef6:	0f 2e       	mov	r0, r31
    2ef8:	fc e8       	ldi	r31, 0x8C	; 140
    2efa:	ef 2e       	mov	r14, r31
    2efc:	f1 e0       	ldi	r31, 0x01	; 1
    2efe:	ff 2e       	mov	r15, r31
    2f00:	f0 2d       	mov	r31, r0
    2f02:	09 e9       	ldi	r16, 0x99	; 153
    2f04:	11 e0       	ldi	r17, 0x01	; 1
    2f06:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <_Z14reportTimeTillmmPKcS0_>
							reportTimeTill(g_event_start_epoch,g_event_finish_epoch,"Lasts: ",NULL);
    2f0a:	20 91 4a 05 	lds	r18, 0x054A	; 0x80054a <g_event_finish_epoch>
    2f0e:	30 91 4b 05 	lds	r19, 0x054B	; 0x80054b <g_event_finish_epoch+0x1>
    2f12:	40 91 4c 05 	lds	r20, 0x054C	; 0x80054c <g_event_finish_epoch+0x2>
    2f16:	50 91 4d 05 	lds	r21, 0x054D	; 0x80054d <g_event_finish_epoch+0x3>
    2f1a:	60 91 4e 05 	lds	r22, 0x054E	; 0x80054e <g_event_start_epoch>
    2f1e:	70 91 4f 05 	lds	r23, 0x054F	; 0x80054f <g_event_start_epoch+0x1>
    2f22:	80 91 50 05 	lds	r24, 0x0550	; 0x800550 <g_event_start_epoch+0x2>
    2f26:	90 91 51 05 	lds	r25, 0x0551	; 0x800551 <g_event_start_epoch+0x3>
    2f2a:	e1 2c       	mov	r14, r1
    2f2c:	f1 2c       	mov	r15, r1
    2f2e:	05 ea       	ldi	r16, 0xA5	; 165
    2f30:	11 e0       	ldi	r17, 0x01	; 1
    2f32:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <_Z14reportTimeTillmmPKcS0_>
							if(g_event_start_epoch < g_current_epoch)
    2f36:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <g_event_start_epoch>
    2f3a:	50 91 4f 05 	lds	r21, 0x054F	; 0x80054f <g_event_start_epoch+0x1>
    2f3e:	60 91 50 05 	lds	r22, 0x0550	; 0x800550 <g_event_start_epoch+0x2>
    2f42:	70 91 51 05 	lds	r23, 0x0551	; 0x800551 <g_event_start_epoch+0x3>
    2f46:	80 91 52 05 	lds	r24, 0x0552	; 0x800552 <g_current_epoch>
    2f4a:	90 91 53 05 	lds	r25, 0x0553	; 0x800553 <g_current_epoch+0x1>
    2f4e:	a0 91 54 05 	lds	r26, 0x0554	; 0x800554 <g_current_epoch+0x2>
    2f52:	b0 91 55 05 	lds	r27, 0x0555	; 0x800555 <g_current_epoch+0x3>
    2f56:	48 17       	cp	r20, r24
    2f58:	59 07       	cpc	r21, r25
    2f5a:	6a 07       	cpc	r22, r26
    2f5c:	7b 07       	cpc	r23, r27
    2f5e:	08 f0       	brcs	.+2      	; 0x2f62 <_Z17handleLinkBusMsgsv+0x404>
    2f60:	f3 c3       	rjmp	.+2022   	; 0x3748 <_Z17handleLinkBusMsgsv+0xbea>
							{
								reportTimeTill(g_current_epoch,g_event_finish_epoch,"Time Remaining: ",NULL);
    2f62:	20 91 4a 05 	lds	r18, 0x054A	; 0x80054a <g_event_finish_epoch>
    2f66:	30 91 4b 05 	lds	r19, 0x054B	; 0x80054b <g_event_finish_epoch+0x1>
    2f6a:	40 91 4c 05 	lds	r20, 0x054C	; 0x80054c <g_event_finish_epoch+0x2>
    2f6e:	50 91 4d 05 	lds	r21, 0x054D	; 0x80054d <g_event_finish_epoch+0x3>
    2f72:	60 91 52 05 	lds	r22, 0x0552	; 0x800552 <g_current_epoch>
    2f76:	70 91 53 05 	lds	r23, 0x0553	; 0x800553 <g_current_epoch+0x1>
    2f7a:	80 91 54 05 	lds	r24, 0x0554	; 0x800554 <g_current_epoch+0x2>
    2f7e:	90 91 55 05 	lds	r25, 0x0555	; 0x800555 <g_current_epoch+0x3>
    2f82:	0d ea       	ldi	r16, 0xAD	; 173
    2f84:	11 e0       	ldi	r17, 0x01	; 1
    2f86:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <_Z14reportTimeTillmmPKcS0_>
    2f8a:	de c3       	rjmp	.+1980   	; 0x3748 <_Z17handleLinkBusMsgsv+0xbea>
							}
						}
						else
						{
							reportConfigErrors();
    2f8c:	0e 94 03 14 	call	0x2806	; 0x2806 <_Z18reportConfigErrorsv>
    2f90:	db c3       	rjmp	.+1974   	; 0x3748 <_Z17handleLinkBusMsgsv+0xbea>
			}
			break;

			case MESSAGE_SET_STATION_ID:
			{
				if(lb_buff->fields[FIELD1][0])
    2f92:	f6 01       	movw	r30, r12
    2f94:	83 81       	ldd	r24, Z+3	; 0x03
    2f96:	88 23       	and	r24, r24
    2f98:	09 f4       	brne	.+2      	; 0x2f9c <_Z17handleLinkBusMsgsv+0x43e>
    2f9a:	4d c0       	rjmp	.+154    	; 0x3036 <_Z17handleLinkBusMsgsv+0x4d8>
				{
					strcpy(g_tempStr," ");  /* Space before ID gets sent */
    2f9c:	80 e2       	ldi	r24, 0x20	; 32
    2f9e:	90 e0       	ldi	r25, 0x00	; 0
    2fa0:	f5 01       	movw	r30, r10
    2fa2:	91 83       	std	Z+1, r25	; 0x01
    2fa4:	80 83       	st	Z, r24
					strcat(g_tempStr,lb_buff->fields[FIELD1]);
    2fa6:	b6 01       	movw	r22, r12
    2fa8:	6d 5f       	subi	r22, 0xFD	; 253
    2faa:	7f 4f       	sbci	r23, 0xFF	; 255
    2fac:	c5 01       	movw	r24, r10
    2fae:	0e 94 20 2a 	call	0x5440	; 0x5440 <strcat>

					if(lb_buff->fields[FIELD2][0])
    2fb2:	f6 01       	movw	r30, r12
    2fb4:	87 89       	ldd	r24, Z+23	; 0x17
    2fb6:	88 23       	and	r24, r24
    2fb8:	79 f0       	breq	.+30     	; 0x2fd8 <_Z17handleLinkBusMsgsv+0x47a>
					{
						strcat(g_tempStr," ");
    2fba:	f5 01       	movw	r30, r10
    2fbc:	01 90       	ld	r0, Z+
    2fbe:	00 20       	and	r0, r0
    2fc0:	e9 f7       	brne	.-6      	; 0x2fbc <_Z17handleLinkBusMsgsv+0x45e>
    2fc2:	31 97       	sbiw	r30, 0x01	; 1
    2fc4:	80 e2       	ldi	r24, 0x20	; 32
    2fc6:	90 e0       	ldi	r25, 0x00	; 0
    2fc8:	91 83       	std	Z+1, r25	; 0x01
    2fca:	80 83       	st	Z, r24
						strcat(g_tempStr,lb_buff->fields[FIELD2]);
    2fcc:	b6 01       	movw	r22, r12
    2fce:	69 5e       	subi	r22, 0xE9	; 233
    2fd0:	7f 4f       	sbci	r23, 0xFF	; 255
    2fd2:	c5 01       	movw	r24, r10
    2fd4:	0e 94 20 2a 	call	0x5440	; 0x5440 <strcat>
					}

					if(strlen(g_tempStr) <= MAX_PATTERN_TEXT_LENGTH)
    2fd8:	f5 01       	movw	r30, r10
    2fda:	01 90       	ld	r0, Z+
    2fdc:	00 20       	and	r0, r0
    2fde:	e9 f7       	brne	.-6      	; 0x2fda <_Z17handleLinkBusMsgsv+0x47c>
    2fe0:	31 97       	sbiw	r30, 0x01	; 1
    2fe2:	e2 5d       	subi	r30, 0xD2	; 210
    2fe4:	f4 40       	sbci	r31, 0x04	; 4
    2fe6:	75 97       	sbiw	r30, 0x15	; 21
    2fe8:	30 f5       	brcc	.+76     	; 0x3036 <_Z17handleLinkBusMsgsv+0x4d8>
					{
						uint8_t i;
						strcpy(g_messages_text[STATION_ID],g_tempStr);
    2fea:	b5 01       	movw	r22, r10
    2fec:	80 e2       	ldi	r24, 0x20	; 32
    2fee:	95 e0       	ldi	r25, 0x05	; 5
    2ff0:	0e 94 2b 2a 	call	0x5456	; 0x5456 <strcpy>

						for(i = 0; i < strlen(g_messages_text[STATION_ID]); i++)
    2ff4:	f1 2c       	mov	r15, r1
    2ff6:	00 e2       	ldi	r16, 0x20	; 32
    2ff8:	15 e0       	ldi	r17, 0x05	; 5
    2ffa:	f8 01       	movw	r30, r16
    2ffc:	01 90       	ld	r0, Z+
    2ffe:	00 20       	and	r0, r0
    3000:	e9 f7       	brne	.-6      	; 0x2ffc <_Z17handleLinkBusMsgsv+0x49e>
    3002:	cf 01       	movw	r24, r30
    3004:	81 52       	subi	r24, 0x21	; 33
    3006:	95 40       	sbci	r25, 0x05	; 5
    3008:	2f 2d       	mov	r18, r15
    300a:	30 e0       	ldi	r19, 0x00	; 0
    300c:	28 17       	cp	r18, r24
    300e:	39 07       	cpc	r19, r25
    3010:	58 f4       	brcc	.+22     	; 0x3028 <_Z17handleLinkBusMsgsv+0x4ca>
						{
							eeprom_update_byte((uint8_t*)&ee_stationID_text[i],(uint8_t)g_messages_text[STATION_ID][i]);
    3012:	c9 01       	movw	r24, r18
    3014:	fc 01       	movw	r30, r24
    3016:	e5 5f       	subi	r30, 0xF5	; 245
    3018:	fa 4f       	sbci	r31, 0xFA	; 250
    301a:	65 89       	ldd	r22, Z+21	; 0x15
    301c:	8f 54       	subi	r24, 0x4F	; 79
    301e:	9d 4f       	sbci	r25, 0xFD	; 253
    3020:	0e 94 25 2d 	call	0x5a4a	; 0x5a4a <eeprom_update_byte>
					if(strlen(g_tempStr) <= MAX_PATTERN_TEXT_LENGTH)
					{
						uint8_t i;
						strcpy(g_messages_text[STATION_ID],g_tempStr);

						for(i = 0; i < strlen(g_messages_text[STATION_ID]); i++)
    3024:	f3 94       	inc	r15
    3026:	e9 cf       	rjmp	.-46     	; 0x2ffa <_Z17handleLinkBusMsgsv+0x49c>
						{
							eeprom_update_byte((uint8_t*)&ee_stationID_text[i],(uint8_t)g_messages_text[STATION_ID][i]);
						}

						eeprom_update_byte((uint8_t*)&ee_stationID_text[i],0);
    3028:	8f 2d       	mov	r24, r15
    302a:	90 e0       	ldi	r25, 0x00	; 0
    302c:	60 e0       	ldi	r22, 0x00	; 0
    302e:	8f 54       	subi	r24, 0x4F	; 79
    3030:	9d 4f       	sbci	r25, 0xFD	; 253
    3032:	0e 94 25 2d 	call	0x5a4a	; 0x5a4a <eeprom_update_byte>
					}
				}

				if(g_messages_text[STATION_ID][0])
    3036:	80 91 20 05 	lds	r24, 0x0520	; 0x800520 <_ZL15g_messages_text+0x15>
    303a:	88 23       	and	r24, r24
    303c:	f1 f0       	breq	.+60     	; 0x307a <_Z17handleLinkBusMsgsv+0x51c>
				{
					g_time_needed_for_ID = (500 + timeRequiredToSendStrAtWPM(g_messages_text[STATION_ID],g_id_codespeed)) / 1000;
    303e:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <_ZL14g_id_codespeed>
    3042:	70 e0       	ldi	r23, 0x00	; 0
    3044:	80 e2       	ldi	r24, 0x20	; 32
    3046:	95 e0       	ldi	r25, 0x05	; 5
    3048:	0e 94 fe 21 	call	0x43fc	; 0x43fc <_Z26timeRequiredToSendStrAtWPMPcj>
    304c:	8c 50       	subi	r24, 0x0C	; 12
    304e:	9e 4f       	sbci	r25, 0xFE	; 254
    3050:	9c 01       	movw	r18, r24
    3052:	36 95       	lsr	r19
    3054:	27 95       	ror	r18
    3056:	36 95       	lsr	r19
    3058:	27 95       	ror	r18
    305a:	36 95       	lsr	r19
    305c:	27 95       	ror	r18
    305e:	a5 ec       	ldi	r26, 0xC5	; 197
    3060:	b0 e2       	ldi	r27, 0x20	; 32
    3062:	0e 94 89 28 	call	0x5112	; 0x5112 <__umulhisi3>
    3066:	92 95       	swap	r25
    3068:	82 95       	swap	r24
    306a:	8f 70       	andi	r24, 0x0F	; 15
    306c:	89 27       	eor	r24, r25
    306e:	9f 70       	andi	r25, 0x0F	; 15
    3070:	89 27       	eor	r24, r25
    3072:	90 93 0a 05 	sts	0x050A, r25	; 0x80050a <_ZL20g_time_needed_for_ID+0x1>
    3076:	80 93 09 05 	sts	0x0509, r24	; 0x800509 <_ZL20g_time_needed_for_ID>
				}

				sprintf(g_tempStr,"ID:%s\n",g_messages_text[STATION_ID]);
    307a:	80 e2       	ldi	r24, 0x20	; 32
    307c:	95 e0       	ldi	r25, 0x05	; 5
    307e:	9f 93       	push	r25
    3080:	8f 93       	push	r24
    3082:	8e eb       	ldi	r24, 0xBE	; 190
    3084:	91 e0       	ldi	r25, 0x01	; 1
    3086:	9f 93       	push	r25
    3088:	8f 93       	push	r24
    308a:	bf 92       	push	r11
    308c:	af 92       	push	r10
    308e:	0e 94 5e 2a 	call	0x54bc	; 0x54bc <sprintf>
				lb_send_string(g_tempStr,TRUE);
    3092:	61 e0       	ldi	r22, 0x01	; 1
    3094:	c5 01       	movw	r24, r10
    3096:	0e 94 30 07 	call	0xe60	; 0xe60 <_Z14lb_send_stringPch>
			}
			break;
    309a:	0f 90       	pop	r0
    309c:	0f 90       	pop	r0
    309e:	0f 90       	pop	r0
    30a0:	0f 90       	pop	r0
    30a2:	0f 90       	pop	r0
    30a4:	0f 90       	pop	r0
    30a6:	50 c3       	rjmp	.+1696   	; 0x3748 <_Z17handleLinkBusMsgsv+0xbea>


			case MESSAGE_CODE_SPEED:
			{
				if(lb_buff->fields[FIELD1][0] == 'I')
    30a8:	f6 01       	movw	r30, r12
    30aa:	83 81       	ldd	r24, Z+3	; 0x03
    30ac:	89 34       	cpi	r24, 0x49	; 73
    30ae:	e1 f5       	brne	.+120    	; 0x3128 <_Z17handleLinkBusMsgsv+0x5ca>
				{
					if(lb_buff->fields[FIELD2][0])
    30b0:	87 89       	ldd	r24, Z+23	; 0x17
    30b2:	88 23       	and	r24, r24
    30b4:	c9 f1       	breq	.+114    	; 0x3128 <_Z17handleLinkBusMsgsv+0x5ca>
					{
						uint8_t speed = atol(lb_buff->fields[FIELD2]);
    30b6:	c6 01       	movw	r24, r12
    30b8:	47 96       	adiw	r24, 0x17	; 23
    30ba:	0e 94 f1 29 	call	0x53e2	; 0x53e2 <atol>
						g_id_codespeed = CLAMP(MIN_CODE_SPEED_WPM,speed,MAX_CODE_SPEED_WPM);
    30be:	86 2f       	mov	r24, r22
    30c0:	90 e0       	ldi	r25, 0x00	; 0
    30c2:	85 30       	cpi	r24, 0x05	; 5
    30c4:	91 05       	cpc	r25, r1
    30c6:	14 f4       	brge	.+4      	; 0x30cc <_Z17handleLinkBusMsgsv+0x56e>
    30c8:	85 e0       	ldi	r24, 0x05	; 5
    30ca:	90 e0       	ldi	r25, 0x00	; 0
    30cc:	85 31       	cpi	r24, 0x15	; 21
    30ce:	91 05       	cpc	r25, r1
    30d0:	0c f0       	brlt	.+2      	; 0x30d4 <_Z17handleLinkBusMsgsv+0x576>
    30d2:	84 e1       	ldi	r24, 0x14	; 20
    30d4:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <_ZL14g_id_codespeed>
						eeprom_update_byte(&ee_id_codespeed,g_id_codespeed);
    30d8:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <_ZL14g_id_codespeed>
    30dc:	88 e3       	ldi	r24, 0x38	; 56
    30de:	92 e0       	ldi	r25, 0x02	; 2
    30e0:	0e 94 25 2d 	call	0x5a4a	; 0x5a4a <eeprom_update_byte>

						if(g_messages_text[STATION_ID][0])
    30e4:	80 91 20 05 	lds	r24, 0x0520	; 0x800520 <_ZL15g_messages_text+0x15>
    30e8:	88 23       	and	r24, r24
    30ea:	f1 f0       	breq	.+60     	; 0x3128 <_Z17handleLinkBusMsgsv+0x5ca>
						{
							g_time_needed_for_ID = (500 + timeRequiredToSendStrAtWPM(g_messages_text[STATION_ID],g_id_codespeed)) / 1000;
    30ec:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <_ZL14g_id_codespeed>
    30f0:	70 e0       	ldi	r23, 0x00	; 0
    30f2:	80 e2       	ldi	r24, 0x20	; 32
    30f4:	95 e0       	ldi	r25, 0x05	; 5
    30f6:	0e 94 fe 21 	call	0x43fc	; 0x43fc <_Z26timeRequiredToSendStrAtWPMPcj>
    30fa:	8c 50       	subi	r24, 0x0C	; 12
    30fc:	9e 4f       	sbci	r25, 0xFE	; 254
    30fe:	9c 01       	movw	r18, r24
    3100:	36 95       	lsr	r19
    3102:	27 95       	ror	r18
    3104:	36 95       	lsr	r19
    3106:	27 95       	ror	r18
    3108:	36 95       	lsr	r19
    310a:	27 95       	ror	r18
    310c:	a5 ec       	ldi	r26, 0xC5	; 197
    310e:	b0 e2       	ldi	r27, 0x20	; 32
    3110:	0e 94 89 28 	call	0x5112	; 0x5112 <__umulhisi3>
    3114:	92 95       	swap	r25
    3116:	82 95       	swap	r24
    3118:	8f 70       	andi	r24, 0x0F	; 15
    311a:	89 27       	eor	r24, r25
    311c:	9f 70       	andi	r25, 0x0F	; 15
    311e:	89 27       	eor	r24, r25
    3120:	90 93 0a 05 	sts	0x050A, r25	; 0x80050a <_ZL20g_time_needed_for_ID+0x1>
    3124:	80 93 09 05 	sts	0x0509, r24	; 0x800509 <_ZL20g_time_needed_for_ID>
						}
					}
				}
				sprintf(g_tempStr,"ID: %d wpm\n",g_id_codespeed);
    3128:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <_ZL14g_id_codespeed>
    312c:	1f 92       	push	r1
    312e:	8f 93       	push	r24
    3130:	5f 92       	push	r5
    3132:	4f 92       	push	r4
    3134:	bf 92       	push	r11
    3136:	af 92       	push	r10
    3138:	0e 94 5e 2a 	call	0x54bc	; 0x54bc <sprintf>
				lb_send_string(g_tempStr,FALSE);
    313c:	60 e0       	ldi	r22, 0x00	; 0
    313e:	c5 01       	movw	r24, r10
    3140:	0e 94 30 07 	call	0xe60	; 0xe60 <_Z14lb_send_stringPch>
			}
			break;
    3144:	0f 90       	pop	r0
    3146:	0f 90       	pop	r0
    3148:	0f 90       	pop	r0
    314a:	0f 90       	pop	r0
    314c:	0f 90       	pop	r0
    314e:	0f 90       	pop	r0
    3150:	fb c2       	rjmp	.+1526   	; 0x3748 <_Z17handleLinkBusMsgsv+0xbea>

			case MESSAGE_VERSION:
			{
				sendEEPROMString(&ee_textVersion[0]);
    3152:	8f ef       	ldi	r24, 0xFF	; 255
    3154:	91 e0       	ldi	r25, 0x01	; 1
    3156:	0e 94 82 02 	call	0x504	; 0x504 <_Z16sendEEPROMStringPc>
			}
			break;
    315a:	f6 c2       	rjmp	.+1516   	; 0x3748 <_Z17handleLinkBusMsgsv+0xbea>

			case MESSAGE_CLOCK:
			{
				BOOL doprint = false;

				if(lb_buff->fields[FIELD1][0] == 'T')   /* Current time format "YYMMDDhhmmss" */
    315c:	f6 01       	movw	r30, r12
    315e:	83 81       	ldd	r24, Z+3	; 0x03
    3160:	84 35       	cpi	r24, 0x54	; 84
    3162:	09 f0       	breq	.+2      	; 0x3166 <_Z17handleLinkBusMsgsv+0x608>
    3164:	8b c0       	rjmp	.+278    	; 0x327c <_Z17handleLinkBusMsgsv+0x71e>
				{
					strncpy(g_tempStr,lb_buff->fields[FIELD2],12);
    3166:	4c e0       	ldi	r20, 0x0C	; 12
    3168:	50 e0       	ldi	r21, 0x00	; 0
    316a:	b6 01       	movw	r22, r12
    316c:	69 5e       	subi	r22, 0xE9	; 233
    316e:	7f 4f       	sbci	r23, 0xFF	; 255
    3170:	c5 01       	movw	r24, r10
    3172:	0e 94 32 2a 	call	0x5464	; 0x5464 <strncpy>
					g_tempStr[12] = '\0';               /* truncate to no more than 12 characters */
    3176:	f5 01       	movw	r30, r10
    3178:	14 86       	std	Z+12, r1	; 0x0c
					int len = strlen(g_tempStr);
    317a:	01 90       	ld	r0, Z+
    317c:	00 20       	and	r0, r0
    317e:	e9 f7       	brne	.-6      	; 0x317a <_Z17handleLinkBusMsgsv+0x61c>
    3180:	31 97       	sbiw	r30, 0x01	; 1
    3182:	e2 5d       	subi	r30, 0xD2	; 210
    3184:	f4 40       	sbci	r31, 0x04	; 4

					if(len > 0)
    3186:	1e 16       	cp	r1, r30
    3188:	1f 06       	cpc	r1, r31
    318a:	0c f0       	brlt	.+2      	; 0x318e <_Z17handleLinkBusMsgsv+0x630>
    318c:	47 c0       	rjmp	.+142    	; 0x321c <_Z17handleLinkBusMsgsv+0x6be>
					{
						if((len == 12) && (only_digits(g_tempStr)))
    318e:	3c 97       	sbiw	r30, 0x0c	; 12
    3190:	09 f0       	breq	.+2      	; 0x3194 <_Z17handleLinkBusMsgsv+0x636>
    3192:	3f c0       	rjmp	.+126    	; 0x3212 <_Z17handleLinkBusMsgsv+0x6b4>
    3194:	c5 01       	movw	r24, r10
    3196:	0e 94 b2 13 	call	0x2764	; 0x2764 <_Z11only_digitsPc>
    319a:	88 23       	and	r24, r24
    319c:	d1 f1       	breq	.+116    	; 0x3212 <_Z17handleLinkBusMsgsv+0x6b4>
						{
							time_t t = rv3028_get_epoch(NULL,g_tempStr);    /* String format "YYMMDDhhmmss" */
    319e:	b5 01       	movw	r22, r10
    31a0:	80 e0       	ldi	r24, 0x00	; 0
    31a2:	90 e0       	ldi	r25, 0x00	; 0
    31a4:	0e 94 4a 22 	call	0x4494	; 0x4494 <_Z16rv3028_get_epochPbPc>

							if(t > MINIMUM_EPOCH)
    31a8:	61 30       	cpi	r22, 0x01	; 1
    31aa:	76 46       	sbci	r23, 0x66	; 102
    31ac:	8e 4e       	sbci	r24, 0xEE	; 238
    31ae:	9f 45       	sbci	r25, 0x5F	; 95
    31b0:	58 f1       	brcs	.+86     	; 0x3208 <_Z17handleLinkBusMsgsv+0x6aa>
							{
								rv3028_set_date_time(g_tempStr);            /* String format "YYMMDDhhmmss" */
    31b2:	c5 01       	movw	r24, r10
    31b4:	0e 94 55 23 	call	0x46aa	; 0x46aa <_Z20rv3028_set_date_timePc>
								g_current_epoch = rv3028_get_epoch(NULL,NULL);
    31b8:	60 e0       	ldi	r22, 0x00	; 0
    31ba:	70 e0       	ldi	r23, 0x00	; 0
    31bc:	80 e0       	ldi	r24, 0x00	; 0
    31be:	90 e0       	ldi	r25, 0x00	; 0
    31c0:	0e 94 4a 22 	call	0x4494	; 0x4494 <_Z16rv3028_get_epochPbPc>
    31c4:	60 93 52 05 	sts	0x0552, r22	; 0x800552 <g_current_epoch>
    31c8:	70 93 53 05 	sts	0x0553, r23	; 0x800553 <g_current_epoch+0x1>
    31cc:	80 93 54 05 	sts	0x0554, r24	; 0x800554 <g_current_epoch+0x2>
    31d0:	90 93 55 05 	sts	0x0555, r25	; 0x800555 <g_current_epoch+0x3>
								sprintf(g_tempStr,"Time:%lu\n",g_current_epoch);
    31d4:	80 91 52 05 	lds	r24, 0x0552	; 0x800552 <g_current_epoch>
    31d8:	90 91 53 05 	lds	r25, 0x0553	; 0x800553 <g_current_epoch+0x1>
    31dc:	a0 91 54 05 	lds	r26, 0x0554	; 0x800554 <g_current_epoch+0x2>
    31e0:	b0 91 55 05 	lds	r27, 0x0555	; 0x800555 <g_current_epoch+0x3>
    31e4:	bf 93       	push	r27
    31e6:	af 93       	push	r26
    31e8:	9f 93       	push	r25
    31ea:	8f 93       	push	r24
    31ec:	86 ed       	ldi	r24, 0xD6	; 214
    31ee:	91 e0       	ldi	r25, 0x01	; 1
    31f0:	9f 93       	push	r25
    31f2:	8f 93       	push	r24
    31f4:	bf 92       	push	r11
    31f6:	af 92       	push	r10
    31f8:	0e 94 5e 2a 	call	0x54bc	; 0x54bc <sprintf>
    31fc:	0f b6       	in	r0, 0x3f	; 63
    31fe:	f8 94       	cli
    3200:	de bf       	out	0x3e, r29	; 62
    3202:	0f be       	out	0x3f, r0	; 63
    3204:	cd bf       	out	0x3d, r28	; 61
    3206:	b3 c2       	rjmp	.+1382   	; 0x376e <_Z17handleLinkBusMsgsv+0xc10>
							}
							else
							{
								sendEEPROMString(&ee_textErrTimeInPast[0]);
    3208:	80 e0       	ldi	r24, 0x00	; 0
    320a:	90 e0       	ldi	r25, 0x00	; 0
    320c:	0e 94 82 02 	call	0x504	; 0x504 <_Z16sendEEPROMStringPc>
    3210:	ae c2       	rjmp	.+1372   	; 0x376e <_Z17handleLinkBusMsgsv+0xc10>
							}
						}
						else
						{
							sendEEPROMString(&ee_textErrInvalidTime[0]);
    3212:	84 e1       	ldi	r24, 0x14	; 20
    3214:	90 e0       	ldi	r25, 0x00	; 0
    3216:	0e 94 82 02 	call	0x504	; 0x504 <_Z16sendEEPROMStringPc>
    321a:	a9 c2       	rjmp	.+1362   	; 0x376e <_Z17handleLinkBusMsgsv+0xc10>
						}
					}
					else
					{
						reportTimeTill(g_current_epoch,g_event_start_epoch,"Starts in: ",NULL);
    321c:	20 91 4e 05 	lds	r18, 0x054E	; 0x80054e <g_event_start_epoch>
    3220:	30 91 4f 05 	lds	r19, 0x054F	; 0x80054f <g_event_start_epoch+0x1>
    3224:	40 91 50 05 	lds	r20, 0x0550	; 0x800550 <g_event_start_epoch+0x2>
    3228:	50 91 51 05 	lds	r21, 0x0551	; 0x800551 <g_event_start_epoch+0x3>
    322c:	60 91 52 05 	lds	r22, 0x0552	; 0x800552 <g_current_epoch>
    3230:	70 91 53 05 	lds	r23, 0x0553	; 0x800553 <g_current_epoch+0x1>
    3234:	80 91 54 05 	lds	r24, 0x0554	; 0x800554 <g_current_epoch+0x2>
    3238:	90 91 55 05 	lds	r25, 0x0555	; 0x800555 <g_current_epoch+0x3>
    323c:	e1 2c       	mov	r14, r1
    323e:	f1 2c       	mov	r15, r1
    3240:	09 e9       	ldi	r16, 0x99	; 153
    3242:	11 e0       	ldi	r17, 0x01	; 1
    3244:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <_Z14reportTimeTillmmPKcS0_>
						sprintf(g_tempStr,"UNIX Time:%lu\n",g_current_epoch);
    3248:	80 91 52 05 	lds	r24, 0x0552	; 0x800552 <g_current_epoch>
    324c:	90 91 53 05 	lds	r25, 0x0553	; 0x800553 <g_current_epoch+0x1>
    3250:	a0 91 54 05 	lds	r26, 0x0554	; 0x800554 <g_current_epoch+0x2>
    3254:	b0 91 55 05 	lds	r27, 0x0555	; 0x800555 <g_current_epoch+0x3>
    3258:	bf 93       	push	r27
    325a:	af 93       	push	r26
    325c:	9f 93       	push	r25
    325e:	8f 93       	push	r24
    3260:	81 ed       	ldi	r24, 0xD1	; 209
    3262:	91 e0       	ldi	r25, 0x01	; 1
    3264:	9f 93       	push	r25
    3266:	8f 93       	push	r24
    3268:	bf 92       	push	r11
    326a:	af 92       	push	r10
    326c:	0e 94 5e 2a 	call	0x54bc	; 0x54bc <sprintf>
    3270:	0f b6       	in	r0, 0x3f	; 63
    3272:	f8 94       	cli
    3274:	de bf       	out	0x3e, r29	; 62
    3276:	0f be       	out	0x3f, r0	; 63
    3278:	cd bf       	out	0x3d, r28	; 61
    327a:	79 c2       	rjmp	.+1266   	; 0x376e <_Z17handleLinkBusMsgsv+0xc10>
					}

					doprint = true;
				}
				else if(lb_buff->fields[FIELD1][0] == 'S')  /* Event start time */
    327c:	83 35       	cpi	r24, 0x53	; 83
    327e:	09 f0       	breq	.+2      	; 0x3282 <_Z17handleLinkBusMsgsv+0x724>
    3280:	cf c0       	rjmp	.+414    	; 0x3420 <_Z17handleLinkBusMsgsv+0x8c2>
				{
					strcpy(g_tempStr,lb_buff->fields[FIELD2]);
    3282:	b6 01       	movw	r22, r12
    3284:	69 5e       	subi	r22, 0xE9	; 233
    3286:	7f 4f       	sbci	r23, 0xFF	; 255
    3288:	c5 01       	movw	r24, r10
    328a:	0e 94 2b 2a 	call	0x5456	; 0x5456 <strcpy>
					int len = strlen(g_tempStr);
    328e:	f5 01       	movw	r30, r10
    3290:	01 90       	ld	r0, Z+
    3292:	00 20       	and	r0, r0
    3294:	e9 f7       	brne	.-6      	; 0x3290 <_Z17handleLinkBusMsgsv+0x732>
    3296:	31 97       	sbiw	r30, 0x01	; 1
    3298:	e2 5d       	subi	r30, 0xD2	; 210
    329a:	f4 40       	sbci	r31, 0x04	; 4

					if(len > 0)
    329c:	1e 16       	cp	r1, r30
    329e:	1f 06       	cpc	r1, r31
    32a0:	0c f0       	brlt	.+2      	; 0x32a4 <_Z17handleLinkBusMsgsv+0x746>
    32a2:	a4 c0       	rjmp	.+328    	; 0x33ec <_Z17handleLinkBusMsgsv+0x88e>
					{
						if((len == 12) && (only_digits(g_tempStr)))
    32a4:	3c 97       	sbiw	r30, 0x0c	; 12
    32a6:	09 f0       	breq	.+2      	; 0x32aa <_Z17handleLinkBusMsgsv+0x74c>
    32a8:	9c c0       	rjmp	.+312    	; 0x33e2 <_Z17handleLinkBusMsgsv+0x884>
    32aa:	c5 01       	movw	r24, r10
    32ac:	0e 94 b2 13 	call	0x2764	; 0x2764 <_Z11only_digitsPc>
    32b0:	88 23       	and	r24, r24
    32b2:	09 f4       	brne	.+2      	; 0x32b6 <_Z17handleLinkBusMsgsv+0x758>
    32b4:	96 c0       	rjmp	.+300    	; 0x33e2 <_Z17handleLinkBusMsgsv+0x884>
						{
							time_t s;
							s = rv3028_get_epoch(NULL,g_tempStr);   /* String format "YYMMDDhhmmss" */
    32b6:	b5 01       	movw	r22, r10
    32b8:	80 e0       	ldi	r24, 0x00	; 0
    32ba:	90 e0       	ldi	r25, 0x00	; 0
    32bc:	0e 94 4a 22 	call	0x4494	; 0x4494 <_Z16rv3028_get_epochPbPc>

							if(s > g_current_epoch)
    32c0:	00 91 52 05 	lds	r16, 0x0552	; 0x800552 <g_current_epoch>
    32c4:	10 91 53 05 	lds	r17, 0x0553	; 0x800553 <g_current_epoch+0x1>
    32c8:	20 91 54 05 	lds	r18, 0x0554	; 0x800554 <g_current_epoch+0x2>
    32cc:	30 91 55 05 	lds	r19, 0x0555	; 0x800555 <g_current_epoch+0x3>
    32d0:	06 17       	cp	r16, r22
    32d2:	17 07       	cpc	r17, r23
    32d4:	28 07       	cpc	r18, r24
    32d6:	39 07       	cpc	r19, r25
    32d8:	08 f0       	brcs	.+2      	; 0x32dc <_Z17handleLinkBusMsgsv+0x77e>
    32da:	7e c0       	rjmp	.+252    	; 0x33d8 <_Z17handleLinkBusMsgsv+0x87a>
							{
								g_event_start_epoch = s;
    32dc:	60 93 4e 05 	sts	0x054E, r22	; 0x80054e <g_event_start_epoch>
    32e0:	70 93 4f 05 	sts	0x054F, r23	; 0x80054f <g_event_start_epoch+0x1>
    32e4:	80 93 50 05 	sts	0x0550, r24	; 0x800550 <g_event_start_epoch+0x2>
    32e8:	90 93 51 05 	sts	0x0551, r25	; 0x800551 <g_event_start_epoch+0x3>
								eeprom_update_dword(&ee_event_start_epoch,g_event_start_epoch);
    32ec:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <g_event_start_epoch>
    32f0:	50 91 4f 05 	lds	r21, 0x054F	; 0x80054f <g_event_start_epoch+0x1>
    32f4:	60 91 50 05 	lds	r22, 0x0550	; 0x800550 <g_event_start_epoch+0x2>
    32f8:	70 91 51 05 	lds	r23, 0x0551	; 0x800551 <g_event_start_epoch+0x3>
    32fc:	8c e2       	ldi	r24, 0x2C	; 44
    32fe:	92 e0       	ldi	r25, 0x02	; 2
    3300:	0e 94 37 2d 	call	0x5a6e	; 0x5a6e <eeprom_update_dword>
								g_event_finish_epoch = MAX(g_event_finish_epoch,(g_event_start_epoch + SECONDS_24H));
    3304:	80 91 4a 05 	lds	r24, 0x054A	; 0x80054a <g_event_finish_epoch>
    3308:	90 91 4b 05 	lds	r25, 0x054B	; 0x80054b <g_event_finish_epoch+0x1>
    330c:	a0 91 4c 05 	lds	r26, 0x054C	; 0x80054c <g_event_finish_epoch+0x2>
    3310:	b0 91 4d 05 	lds	r27, 0x054D	; 0x80054d <g_event_finish_epoch+0x3>
    3314:	8d 83       	std	Y+5, r24	; 0x05
    3316:	9e 83       	std	Y+6, r25	; 0x06
    3318:	af 83       	std	Y+7, r26	; 0x07
    331a:	b8 87       	std	Y+8, r27	; 0x08
    331c:	80 91 4e 05 	lds	r24, 0x054E	; 0x80054e <g_event_start_epoch>
    3320:	90 91 4f 05 	lds	r25, 0x054F	; 0x80054f <g_event_start_epoch+0x1>
    3324:	a0 91 50 05 	lds	r26, 0x0550	; 0x800550 <g_event_start_epoch+0x2>
    3328:	b0 91 51 05 	lds	r27, 0x0551	; 0x800551 <g_event_start_epoch+0x3>
    332c:	80 58       	subi	r24, 0x80	; 128
    332e:	9e 4a       	sbci	r25, 0xAE	; 174
    3330:	ae 4f       	sbci	r26, 0xFE	; 254
    3332:	bf 4f       	sbci	r27, 0xFF	; 255
    3334:	89 83       	std	Y+1, r24	; 0x01
    3336:	9a 83       	std	Y+2, r25	; 0x02
    3338:	ab 83       	std	Y+3, r26	; 0x03
    333a:	bc 83       	std	Y+4, r27	; 0x04
    333c:	4d 81       	ldd	r20, Y+5	; 0x05
    333e:	5e 81       	ldd	r21, Y+6	; 0x06
    3340:	6f 81       	ldd	r22, Y+7	; 0x07
    3342:	78 85       	ldd	r23, Y+8	; 0x08
    3344:	48 17       	cp	r20, r24
    3346:	59 07       	cpc	r21, r25
    3348:	6a 07       	cpc	r22, r26
    334a:	7b 07       	cpc	r23, r27
    334c:	28 f4       	brcc	.+10     	; 0x3358 <_Z17handleLinkBusMsgsv+0x7fa>
    334e:	89 81       	ldd	r24, Y+1	; 0x01
    3350:	9a 81       	ldd	r25, Y+2	; 0x02
    3352:	ab 81       	ldd	r26, Y+3	; 0x03
    3354:	bc 81       	ldd	r27, Y+4	; 0x04
    3356:	04 c0       	rjmp	.+8      	; 0x3360 <_Z17handleLinkBusMsgsv+0x802>
    3358:	8d 81       	ldd	r24, Y+5	; 0x05
    335a:	9e 81       	ldd	r25, Y+6	; 0x06
    335c:	af 81       	ldd	r26, Y+7	; 0x07
    335e:	b8 85       	ldd	r27, Y+8	; 0x08
    3360:	80 93 4a 05 	sts	0x054A, r24	; 0x80054a <g_event_finish_epoch>
    3364:	90 93 4b 05 	sts	0x054B, r25	; 0x80054b <g_event_finish_epoch+0x1>
    3368:	a0 93 4c 05 	sts	0x054C, r26	; 0x80054c <g_event_finish_epoch+0x2>
    336c:	b0 93 4d 05 	sts	0x054D, r27	; 0x80054d <g_event_finish_epoch+0x3>
								eeprom_update_dword(&ee_event_finish_epoch,g_event_finish_epoch);
    3370:	40 91 4a 05 	lds	r20, 0x054A	; 0x80054a <g_event_finish_epoch>
    3374:	50 91 4b 05 	lds	r21, 0x054B	; 0x80054b <g_event_finish_epoch+0x1>
    3378:	60 91 4c 05 	lds	r22, 0x054C	; 0x80054c <g_event_finish_epoch+0x2>
    337c:	70 91 4d 05 	lds	r23, 0x054D	; 0x80054d <g_event_finish_epoch+0x3>
    3380:	88 e2       	ldi	r24, 0x28	; 40
    3382:	92 e0       	ldi	r25, 0x02	; 2
    3384:	0e 94 37 2d 	call	0x5a6e	; 0x5a6e <eeprom_update_dword>
								sprintf(g_tempStr,"Start:%lu\n",g_event_start_epoch);
    3388:	80 91 4e 05 	lds	r24, 0x054E	; 0x80054e <g_event_start_epoch>
    338c:	90 91 4f 05 	lds	r25, 0x054F	; 0x80054f <g_event_start_epoch+0x1>
    3390:	a0 91 50 05 	lds	r26, 0x0550	; 0x800550 <g_event_start_epoch+0x2>
    3394:	b0 91 51 05 	lds	r27, 0x0551	; 0x800551 <g_event_start_epoch+0x3>
    3398:	bf 93       	push	r27
    339a:	af 93       	push	r26
    339c:	9f 93       	push	r25
    339e:	8f 93       	push	r24
    33a0:	80 ee       	ldi	r24, 0xE0	; 224
    33a2:	91 e0       	ldi	r25, 0x01	; 1
    33a4:	9f 93       	push	r25
    33a6:	8f 93       	push	r24
    33a8:	bf 92       	push	r11
    33aa:	af 92       	push	r10
    33ac:	0e 94 5e 2a 	call	0x54bc	; 0x54bc <sprintf>
								g_use_rtc_to_start = !clockConfigurationError() && g_transmissions_disabled;
    33b0:	0e 94 cc 09 	call	0x1398	; 0x1398 <_Z23clockConfigurationErrorv>
    33b4:	0f b6       	in	r0, 0x3f	; 63
    33b6:	f8 94       	cli
    33b8:	de bf       	out	0x3e, r29	; 62
    33ba:	0f be       	out	0x3f, r0	; 63
    33bc:	cd bf       	out	0x3d, r28	; 61
    33be:	81 11       	cpse	r24, r1
    33c0:	07 c0       	rjmp	.+14     	; 0x33d0 <_Z17handleLinkBusMsgsv+0x872>
    33c2:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <g_transmissions_disabled>
    33c6:	81 e0       	ldi	r24, 0x01	; 1
    33c8:	91 11       	cpse	r25, r1
    33ca:	03 c0       	rjmp	.+6      	; 0x33d2 <_Z17handleLinkBusMsgsv+0x874>
    33cc:	80 e0       	ldi	r24, 0x00	; 0
    33ce:	01 c0       	rjmp	.+2      	; 0x33d2 <_Z17handleLinkBusMsgsv+0x874>
    33d0:	80 e0       	ldi	r24, 0x00	; 0
    33d2:	80 93 35 05 	sts	0x0535, r24	; 0x800535 <g_use_rtc_to_start>
    33d6:	cb c1       	rjmp	.+918    	; 0x376e <_Z17handleLinkBusMsgsv+0xc10>
							}
							else
							{
								sendEEPROMString(&ee_textErrStartInPast[0]);
    33d8:	88 e2       	ldi	r24, 0x28	; 40
    33da:	90 e0       	ldi	r25, 0x00	; 0
    33dc:	0e 94 82 02 	call	0x504	; 0x504 <_Z16sendEEPROMStringPc>
    33e0:	c6 c1       	rjmp	.+908    	; 0x376e <_Z17handleLinkBusMsgsv+0xc10>
							}
						}
						else
						{
							sendEEPROMString(&ee_textErrInvalidTime[0]);
    33e2:	84 e1       	ldi	r24, 0x14	; 20
    33e4:	90 e0       	ldi	r25, 0x00	; 0
    33e6:	0e 94 82 02 	call	0x504	; 0x504 <_Z16sendEEPROMStringPc>
    33ea:	c1 c1       	rjmp	.+898    	; 0x376e <_Z17handleLinkBusMsgsv+0xc10>
						}
					}
					else
					{
						sprintf(g_tempStr,"Start:%lu\n",g_event_start_epoch);
    33ec:	80 91 4e 05 	lds	r24, 0x054E	; 0x80054e <g_event_start_epoch>
    33f0:	90 91 4f 05 	lds	r25, 0x054F	; 0x80054f <g_event_start_epoch+0x1>
    33f4:	a0 91 50 05 	lds	r26, 0x0550	; 0x800550 <g_event_start_epoch+0x2>
    33f8:	b0 91 51 05 	lds	r27, 0x0551	; 0x800551 <g_event_start_epoch+0x3>
    33fc:	bf 93       	push	r27
    33fe:	af 93       	push	r26
    3400:	9f 93       	push	r25
    3402:	8f 93       	push	r24
    3404:	80 ee       	ldi	r24, 0xE0	; 224
    3406:	91 e0       	ldi	r25, 0x01	; 1
    3408:	9f 93       	push	r25
    340a:	8f 93       	push	r24
    340c:	bf 92       	push	r11
    340e:	af 92       	push	r10
    3410:	0e 94 5e 2a 	call	0x54bc	; 0x54bc <sprintf>
    3414:	0f b6       	in	r0, 0x3f	; 63
    3416:	f8 94       	cli
    3418:	de bf       	out	0x3e, r29	; 62
    341a:	0f be       	out	0x3f, r0	; 63
    341c:	cd bf       	out	0x3d, r28	; 61
    341e:	a7 c1       	rjmp	.+846    	; 0x376e <_Z17handleLinkBusMsgsv+0xc10>
					}

					doprint = true;
				}
				else if(lb_buff->fields[FIELD1][0] == 'F')  /* Event finish time */
    3420:	86 34       	cpi	r24, 0x46	; 70
    3422:	09 f0       	breq	.+2      	; 0x3426 <_Z17handleLinkBusMsgsv+0x8c8>
    3424:	b6 c0       	rjmp	.+364    	; 0x3592 <_Z17handleLinkBusMsgsv+0xa34>
				{
					strcpy(g_tempStr,lb_buff->fields[FIELD2]);
    3426:	b6 01       	movw	r22, r12
    3428:	69 5e       	subi	r22, 0xE9	; 233
    342a:	7f 4f       	sbci	r23, 0xFF	; 255
    342c:	c5 01       	movw	r24, r10
    342e:	0e 94 2b 2a 	call	0x5456	; 0x5456 <strcpy>
					int len = strlen(g_tempStr);
    3432:	f5 01       	movw	r30, r10
    3434:	01 90       	ld	r0, Z+
    3436:	00 20       	and	r0, r0
    3438:	e9 f7       	brne	.-6      	; 0x3434 <_Z17handleLinkBusMsgsv+0x8d6>
    343a:	31 97       	sbiw	r30, 0x01	; 1
    343c:	e2 5d       	subi	r30, 0xD2	; 210
    343e:	f4 40       	sbci	r31, 0x04	; 4

					if(len > 0)
    3440:	1e 16       	cp	r1, r30
    3442:	1f 06       	cpc	r1, r31
    3444:	0c f0       	brlt	.+2      	; 0x3448 <_Z17handleLinkBusMsgsv+0x8ea>
    3446:	8b c0       	rjmp	.+278    	; 0x355e <_Z17handleLinkBusMsgsv+0xa00>
					{
						if((len == 12) && (only_digits(g_tempStr)))
    3448:	3c 97       	sbiw	r30, 0x0c	; 12
    344a:	09 f0       	breq	.+2      	; 0x344e <_Z17handleLinkBusMsgsv+0x8f0>
    344c:	83 c0       	rjmp	.+262    	; 0x3554 <_Z17handleLinkBusMsgsv+0x9f6>
    344e:	c5 01       	movw	r24, r10
    3450:	0e 94 b2 13 	call	0x2764	; 0x2764 <_Z11only_digitsPc>
    3454:	88 23       	and	r24, r24
    3456:	09 f4       	brne	.+2      	; 0x345a <_Z17handleLinkBusMsgsv+0x8fc>
    3458:	7d c0       	rjmp	.+250    	; 0x3554 <_Z17handleLinkBusMsgsv+0x9f6>
						{
							time_t f;
							f = rv3028_get_epoch(NULL,g_tempStr);   /* String format "YYMMDDhhmmss" */
    345a:	b5 01       	movw	r22, r10
    345c:	80 e0       	ldi	r24, 0x00	; 0
    345e:	90 e0       	ldi	r25, 0x00	; 0
    3460:	0e 94 4a 22 	call	0x4494	; 0x4494 <_Z16rv3028_get_epochPbPc>

							if(f > g_current_epoch)
    3464:	00 91 52 05 	lds	r16, 0x0552	; 0x800552 <g_current_epoch>
    3468:	10 91 53 05 	lds	r17, 0x0553	; 0x800553 <g_current_epoch+0x1>
    346c:	20 91 54 05 	lds	r18, 0x0554	; 0x800554 <g_current_epoch+0x2>
    3470:	30 91 55 05 	lds	r19, 0x0555	; 0x800555 <g_current_epoch+0x3>
    3474:	06 17       	cp	r16, r22
    3476:	17 07       	cpc	r17, r23
    3478:	28 07       	cpc	r18, r24
    347a:	39 07       	cpc	r19, r25
    347c:	08 f0       	brcs	.+2      	; 0x3480 <_Z17handleLinkBusMsgsv+0x922>
    347e:	65 c0       	rjmp	.+202    	; 0x354a <_Z17handleLinkBusMsgsv+0x9ec>
							{
								if(f > g_event_start_epoch)
    3480:	00 91 4e 05 	lds	r16, 0x054E	; 0x80054e <g_event_start_epoch>
    3484:	10 91 4f 05 	lds	r17, 0x054F	; 0x80054f <g_event_start_epoch+0x1>
    3488:	20 91 50 05 	lds	r18, 0x0550	; 0x800550 <g_event_start_epoch+0x2>
    348c:	30 91 51 05 	lds	r19, 0x0551	; 0x800551 <g_event_start_epoch+0x3>
    3490:	06 17       	cp	r16, r22
    3492:	17 07       	cpc	r17, r23
    3494:	28 07       	cpc	r18, r24
    3496:	39 07       	cpc	r19, r25
    3498:	08 f0       	brcs	.+2      	; 0x349c <_Z17handleLinkBusMsgsv+0x93e>
    349a:	52 c0       	rjmp	.+164    	; 0x3540 <_Z17handleLinkBusMsgsv+0x9e2>
								{
									g_event_finish_epoch = f;
    349c:	60 93 4a 05 	sts	0x054A, r22	; 0x80054a <g_event_finish_epoch>
    34a0:	70 93 4b 05 	sts	0x054B, r23	; 0x80054b <g_event_finish_epoch+0x1>
    34a4:	80 93 4c 05 	sts	0x054C, r24	; 0x80054c <g_event_finish_epoch+0x2>
    34a8:	90 93 4d 05 	sts	0x054D, r25	; 0x80054d <g_event_finish_epoch+0x3>
									eeprom_update_dword(&ee_event_finish_epoch,g_event_finish_epoch);
    34ac:	40 91 4a 05 	lds	r20, 0x054A	; 0x80054a <g_event_finish_epoch>
    34b0:	50 91 4b 05 	lds	r21, 0x054B	; 0x80054b <g_event_finish_epoch+0x1>
    34b4:	60 91 4c 05 	lds	r22, 0x054C	; 0x80054c <g_event_finish_epoch+0x2>
    34b8:	70 91 4d 05 	lds	r23, 0x054D	; 0x80054d <g_event_finish_epoch+0x3>
    34bc:	88 e2       	ldi	r24, 0x28	; 40
    34be:	92 e0       	ldi	r25, 0x02	; 2
    34c0:	0e 94 37 2d 	call	0x5a6e	; 0x5a6e <eeprom_update_dword>
									reportTimeTill(g_event_start_epoch,g_event_finish_epoch,"Lasts: ",NULL);
    34c4:	20 91 4a 05 	lds	r18, 0x054A	; 0x80054a <g_event_finish_epoch>
    34c8:	30 91 4b 05 	lds	r19, 0x054B	; 0x80054b <g_event_finish_epoch+0x1>
    34cc:	40 91 4c 05 	lds	r20, 0x054C	; 0x80054c <g_event_finish_epoch+0x2>
    34d0:	50 91 4d 05 	lds	r21, 0x054D	; 0x80054d <g_event_finish_epoch+0x3>
    34d4:	60 91 4e 05 	lds	r22, 0x054E	; 0x80054e <g_event_start_epoch>
    34d8:	70 91 4f 05 	lds	r23, 0x054F	; 0x80054f <g_event_start_epoch+0x1>
    34dc:	80 91 50 05 	lds	r24, 0x0550	; 0x800550 <g_event_start_epoch+0x2>
    34e0:	90 91 51 05 	lds	r25, 0x0551	; 0x800551 <g_event_start_epoch+0x3>
    34e4:	e1 2c       	mov	r14, r1
    34e6:	f1 2c       	mov	r15, r1
    34e8:	05 ea       	ldi	r16, 0xA5	; 165
    34ea:	11 e0       	ldi	r17, 0x01	; 1
    34ec:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <_Z14reportTimeTillmmPKcS0_>
									sprintf(g_tempStr,"Finish:%lu\n",g_event_finish_epoch);
    34f0:	80 91 4a 05 	lds	r24, 0x054A	; 0x80054a <g_event_finish_epoch>
    34f4:	90 91 4b 05 	lds	r25, 0x054B	; 0x80054b <g_event_finish_epoch+0x1>
    34f8:	a0 91 4c 05 	lds	r26, 0x054C	; 0x80054c <g_event_finish_epoch+0x2>
    34fc:	b0 91 4d 05 	lds	r27, 0x054D	; 0x80054d <g_event_finish_epoch+0x3>
    3500:	bf 93       	push	r27
    3502:	af 93       	push	r26
    3504:	9f 93       	push	r25
    3506:	8f 93       	push	r24
    3508:	8b ee       	ldi	r24, 0xEB	; 235
    350a:	91 e0       	ldi	r25, 0x01	; 1
    350c:	9f 93       	push	r25
    350e:	8f 93       	push	r24
    3510:	bf 92       	push	r11
    3512:	af 92       	push	r10
    3514:	0e 94 5e 2a 	call	0x54bc	; 0x54bc <sprintf>
									g_use_rtc_to_start = !clockConfigurationError() && g_transmissions_disabled;
    3518:	0e 94 cc 09 	call	0x1398	; 0x1398 <_Z23clockConfigurationErrorv>
    351c:	0f b6       	in	r0, 0x3f	; 63
    351e:	f8 94       	cli
    3520:	de bf       	out	0x3e, r29	; 62
    3522:	0f be       	out	0x3f, r0	; 63
    3524:	cd bf       	out	0x3d, r28	; 61
    3526:	81 11       	cpse	r24, r1
    3528:	07 c0       	rjmp	.+14     	; 0x3538 <_Z17handleLinkBusMsgsv+0x9da>
    352a:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <g_transmissions_disabled>
    352e:	81 e0       	ldi	r24, 0x01	; 1
    3530:	91 11       	cpse	r25, r1
    3532:	03 c0       	rjmp	.+6      	; 0x353a <_Z17handleLinkBusMsgsv+0x9dc>
    3534:	80 e0       	ldi	r24, 0x00	; 0
    3536:	01 c0       	rjmp	.+2      	; 0x353a <_Z17handleLinkBusMsgsv+0x9dc>
    3538:	80 e0       	ldi	r24, 0x00	; 0
    353a:	80 93 35 05 	sts	0x0535, r24	; 0x800535 <g_use_rtc_to_start>
    353e:	17 c1       	rjmp	.+558    	; 0x376e <_Z17handleLinkBusMsgsv+0xc10>
								}
								else
								{
									sendEEPROMString(&ee_textErrFinishB4Start[0]);
    3540:	83 e5       	ldi	r24, 0x53	; 83
    3542:	90 e0       	ldi	r25, 0x00	; 0
    3544:	0e 94 82 02 	call	0x504	; 0x504 <_Z16sendEEPROMStringPc>
    3548:	12 c1       	rjmp	.+548    	; 0x376e <_Z17handleLinkBusMsgsv+0xc10>
								}
							}
							else
							{
								sendEEPROMString(&ee_textErrFinishInPast[0]);
    354a:	8d e3       	ldi	r24, 0x3D	; 61
    354c:	90 e0       	ldi	r25, 0x00	; 0
    354e:	0e 94 82 02 	call	0x504	; 0x504 <_Z16sendEEPROMStringPc>
    3552:	0d c1       	rjmp	.+538    	; 0x376e <_Z17handleLinkBusMsgsv+0xc10>
							}
						}
						else
						{
							sendEEPROMString(&ee_textErrInvalidTime[0]);
    3554:	84 e1       	ldi	r24, 0x14	; 20
    3556:	90 e0       	ldi	r25, 0x00	; 0
    3558:	0e 94 82 02 	call	0x504	; 0x504 <_Z16sendEEPROMStringPc>
    355c:	08 c1       	rjmp	.+528    	; 0x376e <_Z17handleLinkBusMsgsv+0xc10>
						}
					}
					else
					{
						sprintf(g_tempStr,"Finish:%lu\n",g_event_finish_epoch);
    355e:	80 91 4a 05 	lds	r24, 0x054A	; 0x80054a <g_event_finish_epoch>
    3562:	90 91 4b 05 	lds	r25, 0x054B	; 0x80054b <g_event_finish_epoch+0x1>
    3566:	a0 91 4c 05 	lds	r26, 0x054C	; 0x80054c <g_event_finish_epoch+0x2>
    356a:	b0 91 4d 05 	lds	r27, 0x054D	; 0x80054d <g_event_finish_epoch+0x3>
    356e:	bf 93       	push	r27
    3570:	af 93       	push	r26
    3572:	9f 93       	push	r25
    3574:	8f 93       	push	r24
    3576:	8b ee       	ldi	r24, 0xEB	; 235
    3578:	91 e0       	ldi	r25, 0x01	; 1
    357a:	9f 93       	push	r25
    357c:	8f 93       	push	r24
    357e:	bf 92       	push	r11
    3580:	af 92       	push	r10
    3582:	0e 94 5e 2a 	call	0x54bc	; 0x54bc <sprintf>
    3586:	0f b6       	in	r0, 0x3f	; 63
    3588:	f8 94       	cli
    358a:	de bf       	out	0x3e, r29	; 62
    358c:	0f be       	out	0x3f, r0	; 63
    358e:	cd bf       	out	0x3d, r28	; 61
    3590:	ee c0       	rjmp	.+476    	; 0x376e <_Z17handleLinkBusMsgsv+0xc10>
					}

					doprint = true;
				}
				else if(lb_buff->fields[FIELD1][0] == 'C')  /* Test only - Set RTC offset value */
    3592:	83 34       	cpi	r24, 0x43	; 67
    3594:	09 f5       	brne	.+66     	; 0x35d8 <_Z17handleLinkBusMsgsv+0xa7a>
				{
					if(lb_buff->fields[FIELD2][0])
    3596:	f6 01       	movw	r30, r12
    3598:	87 89       	ldd	r24, Z+23	; 0x17
    359a:	88 23       	and	r24, r24
    359c:	51 f0       	breq	.+20     	; 0x35b2 <_Z17handleLinkBusMsgsv+0xa54>
					{
						uint16_t c = (uint16_t)atoi(lb_buff->fields[FIELD2]);
    359e:	c6 01       	movw	r24, r12
    35a0:	47 96       	adiw	r24, 0x17	; 23
    35a2:	0e 94 d3 29 	call	0x53a6	; 0x53a6 <atoi>

						if(c < 512)
    35a6:	81 15       	cp	r24, r1
    35a8:	f2 e0       	ldi	r31, 0x02	; 2
    35aa:	9f 07       	cpc	r25, r31
    35ac:	10 f4       	brcc	.+4      	; 0x35b2 <_Z17handleLinkBusMsgsv+0xa54>
						{
							rv3028_set_offset_RAM(c);
    35ae:	0e 94 c9 23 	call	0x4792	; 0x4792 <_Z21rv3028_set_offset_RAMj>
						}
					}

					int a = rv3028_get_offset_RAM();
    35b2:	0e 94 af 23 	call	0x475e	; 0x475e <_Z21rv3028_get_offset_RAMv>
					sprintf(g_tempStr,"C=%d\n",a);
    35b6:	9f 93       	push	r25
    35b8:	8f 93       	push	r24
    35ba:	87 ef       	ldi	r24, 0xF7	; 247
    35bc:	91 e0       	ldi	r25, 0x01	; 1
    35be:	9f 93       	push	r25
    35c0:	8f 93       	push	r24
    35c2:	bf 92       	push	r11
    35c4:	af 92       	push	r10
    35c6:	0e 94 5e 2a 	call	0x54bc	; 0x54bc <sprintf>
    35ca:	0f 90       	pop	r0
    35cc:	0f 90       	pop	r0
    35ce:	0f 90       	pop	r0
    35d0:	0f 90       	pop	r0
    35d2:	0f 90       	pop	r0
    35d4:	0f 90       	pop	r0
    35d6:	cb c0       	rjmp	.+406    	; 0x376e <_Z17handleLinkBusMsgsv+0xc10>
					doprint = true;
				}
				else if(lb_buff->fields[FIELD1][0] == 'X')  /* Test only - Send 32 kHz square wave out of RTC */
    35d8:	88 35       	cpi	r24, 0x58	; 88
    35da:	21 f4       	brne	.+8      	; 0x35e4 <_Z17handleLinkBusMsgsv+0xa86>
				{
					EIMSK &= ~(1 << INT0);                  /* Disable INT0 interrupts */
    35dc:	e8 98       	cbi	0x1d, 0	; 29
					rv3028_32kHz_sqw();
    35de:	0e 94 ed 24 	call	0x49da	; 0x49da <_Z16rv3028_32kHz_sqwv>
    35e2:	b2 c0       	rjmp	.+356    	; 0x3748 <_Z17handleLinkBusMsgsv+0xbea>
				}
				else
				{
					if(clockConfigurationError())
    35e4:	0e 94 cc 09 	call	0x1398	; 0x1398 <_Z23clockConfigurationErrorv>
    35e8:	88 23       	and	r24, r24
    35ea:	19 f0       	breq	.+6      	; 0x35f2 <_Z17handleLinkBusMsgsv+0xa94>
					{
						reportConfigErrors();
    35ec:	0e 94 03 14 	call	0x2806	; 0x2806 <_Z18reportConfigErrorsv>
    35f0:	ab c0       	rjmp	.+342    	; 0x3748 <_Z17handleLinkBusMsgsv+0xbea>
					}
					else
					{
						reportTimeTill(g_current_epoch,g_event_start_epoch,"Starts in: ","In progress\n");
    35f2:	20 91 4e 05 	lds	r18, 0x054E	; 0x80054e <g_event_start_epoch>
    35f6:	30 91 4f 05 	lds	r19, 0x054F	; 0x80054f <g_event_start_epoch+0x1>
    35fa:	40 91 50 05 	lds	r20, 0x0550	; 0x800550 <g_event_start_epoch+0x2>
    35fe:	50 91 51 05 	lds	r21, 0x0551	; 0x800551 <g_event_start_epoch+0x3>
    3602:	60 91 52 05 	lds	r22, 0x0552	; 0x800552 <g_current_epoch>
    3606:	70 91 53 05 	lds	r23, 0x0553	; 0x800553 <g_current_epoch+0x1>
    360a:	80 91 54 05 	lds	r24, 0x0554	; 0x800554 <g_current_epoch+0x2>
    360e:	90 91 55 05 	lds	r25, 0x0555	; 0x800555 <g_current_epoch+0x3>
    3612:	0f 2e       	mov	r0, r31
    3614:	fc e8       	ldi	r31, 0x8C	; 140
    3616:	ef 2e       	mov	r14, r31
    3618:	f1 e0       	ldi	r31, 0x01	; 1
    361a:	ff 2e       	mov	r15, r31
    361c:	f0 2d       	mov	r31, r0
    361e:	09 e9       	ldi	r16, 0x99	; 153
    3620:	11 e0       	ldi	r17, 0x01	; 1
    3622:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <_Z14reportTimeTillmmPKcS0_>
						reportTimeTill(g_event_start_epoch,g_event_finish_epoch,"Lasts: ",NULL);
    3626:	20 91 4a 05 	lds	r18, 0x054A	; 0x80054a <g_event_finish_epoch>
    362a:	30 91 4b 05 	lds	r19, 0x054B	; 0x80054b <g_event_finish_epoch+0x1>
    362e:	40 91 4c 05 	lds	r20, 0x054C	; 0x80054c <g_event_finish_epoch+0x2>
    3632:	50 91 4d 05 	lds	r21, 0x054D	; 0x80054d <g_event_finish_epoch+0x3>
    3636:	60 91 4e 05 	lds	r22, 0x054E	; 0x80054e <g_event_start_epoch>
    363a:	70 91 4f 05 	lds	r23, 0x054F	; 0x80054f <g_event_start_epoch+0x1>
    363e:	80 91 50 05 	lds	r24, 0x0550	; 0x800550 <g_event_start_epoch+0x2>
    3642:	90 91 51 05 	lds	r25, 0x0551	; 0x800551 <g_event_start_epoch+0x3>
    3646:	e1 2c       	mov	r14, r1
    3648:	f1 2c       	mov	r15, r1
    364a:	05 ea       	ldi	r16, 0xA5	; 165
    364c:	11 e0       	ldi	r17, 0x01	; 1
    364e:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <_Z14reportTimeTillmmPKcS0_>
						if(g_event_start_epoch < g_current_epoch)
    3652:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <g_event_start_epoch>
    3656:	50 91 4f 05 	lds	r21, 0x054F	; 0x80054f <g_event_start_epoch+0x1>
    365a:	60 91 50 05 	lds	r22, 0x0550	; 0x800550 <g_event_start_epoch+0x2>
    365e:	70 91 51 05 	lds	r23, 0x0551	; 0x800551 <g_event_start_epoch+0x3>
    3662:	80 91 52 05 	lds	r24, 0x0552	; 0x800552 <g_current_epoch>
    3666:	90 91 53 05 	lds	r25, 0x0553	; 0x800553 <g_current_epoch+0x1>
    366a:	a0 91 54 05 	lds	r26, 0x0554	; 0x800554 <g_current_epoch+0x2>
    366e:	b0 91 55 05 	lds	r27, 0x0555	; 0x800555 <g_current_epoch+0x3>
    3672:	48 17       	cp	r20, r24
    3674:	59 07       	cpc	r21, r25
    3676:	6a 07       	cpc	r22, r26
    3678:	7b 07       	cpc	r23, r27
    367a:	08 f0       	brcs	.+2      	; 0x367e <_Z17handleLinkBusMsgsv+0xb20>
    367c:	65 c0       	rjmp	.+202    	; 0x3748 <_Z17handleLinkBusMsgsv+0xbea>
						{
							reportTimeTill(g_current_epoch,g_event_finish_epoch,"Time Remaining: ",NULL);
    367e:	20 91 4a 05 	lds	r18, 0x054A	; 0x80054a <g_event_finish_epoch>
    3682:	30 91 4b 05 	lds	r19, 0x054B	; 0x80054b <g_event_finish_epoch+0x1>
    3686:	40 91 4c 05 	lds	r20, 0x054C	; 0x80054c <g_event_finish_epoch+0x2>
    368a:	50 91 4d 05 	lds	r21, 0x054D	; 0x80054d <g_event_finish_epoch+0x3>
    368e:	60 91 52 05 	lds	r22, 0x0552	; 0x800552 <g_current_epoch>
    3692:	70 91 53 05 	lds	r23, 0x0553	; 0x800553 <g_current_epoch+0x1>
    3696:	80 91 54 05 	lds	r24, 0x0554	; 0x800554 <g_current_epoch+0x2>
    369a:	90 91 55 05 	lds	r25, 0x0555	; 0x800555 <g_current_epoch+0x3>
    369e:	0d ea       	ldi	r16, 0xAD	; 173
    36a0:	11 e0       	ldi	r17, 0x01	; 1
    36a2:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <_Z14reportTimeTillmmPKcS0_>
    36a6:	50 c0       	rjmp	.+160    	; 0x3748 <_Z17handleLinkBusMsgsv+0xbea>
			}
			break;

			case MESSAGE_TEMP:
			{
				if(lb_buff->fields[FIELD1][0] == 'C')
    36a8:	f6 01       	movw	r30, r12
    36aa:	83 81       	ldd	r24, Z+3	; 0x03
    36ac:	83 34       	cpi	r24, 0x43	; 67
    36ae:	89 f5       	brne	.+98     	; 0x3712 <_Z17handleLinkBusMsgsv+0xbb4>
				{
					if(lb_buff->fields[FIELD2][0])
    36b0:	87 89       	ldd	r24, Z+23	; 0x17
    36b2:	88 23       	and	r24, r24
    36b4:	b1 f0       	breq	.+44     	; 0x36e2 <_Z17handleLinkBusMsgsv+0xb84>
					{
						int16_t v = atoi(lb_buff->fields[FIELD2]);
    36b6:	c6 01       	movw	r24, r12
    36b8:	47 96       	adiw	r24, 0x17	; 23
    36ba:	0e 94 d3 29 	call	0x53a6	; 0x53a6 <atoi>

						if((v > -2000) && (v < 2000))
    36be:	9c 01       	movw	r18, r24
    36c0:	21 53       	subi	r18, 0x31	; 49
    36c2:	38 4f       	sbci	r19, 0xF8	; 248
    36c4:	2f 39       	cpi	r18, 0x9F	; 159
    36c6:	3f 40       	sbci	r19, 0x0F	; 15
    36c8:	60 f4       	brcc	.+24     	; 0x36e2 <_Z17handleLinkBusMsgsv+0xb84>
						{
							g_atmega_temp_calibration = v;
    36ca:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <_ZL25g_atmega_temp_calibration+0x1>
    36ce:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <_ZL25g_atmega_temp_calibration>
							eeprom_update_word((uint16_t*)&ee_atmega_temp_calibration,(int16_t)g_atmega_temp_calibration);
    36d2:	60 91 15 01 	lds	r22, 0x0115	; 0x800115 <_ZL25g_atmega_temp_calibration>
    36d6:	70 91 16 01 	lds	r23, 0x0116	; 0x800116 <_ZL25g_atmega_temp_calibration+0x1>
    36da:	84 e3       	ldi	r24, 0x34	; 52
    36dc:	92 e0       	ldi	r25, 0x02	; 2
    36de:	0e 94 43 2d 	call	0x5a86	; 0x5a86 <eeprom_update_word>
						}
					}

					sprintf(g_tempStr,"T Cal= %d\n",g_atmega_temp_calibration);
    36e2:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <_ZL25g_atmega_temp_calibration>
    36e6:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <_ZL25g_atmega_temp_calibration+0x1>
    36ea:	9f 93       	push	r25
    36ec:	8f 93       	push	r24
    36ee:	2d ef       	ldi	r18, 0xFD	; 253
    36f0:	31 e0       	ldi	r19, 0x01	; 1
    36f2:	3f 93       	push	r19
    36f4:	2f 93       	push	r18
    36f6:	bf 92       	push	r11
    36f8:	af 92       	push	r10
    36fa:	0e 94 5e 2a 	call	0x54bc	; 0x54bc <sprintf>
					lb_send_string(g_tempStr,FALSE);
    36fe:	60 e0       	ldi	r22, 0x00	; 0
    3700:	c5 01       	movw	r24, r10
    3702:	0e 94 30 07 	call	0xe60	; 0xe60 <_Z14lb_send_stringPch>
    3706:	0f 90       	pop	r0
    3708:	0f 90       	pop	r0
    370a:	0f 90       	pop	r0
    370c:	0f 90       	pop	r0
    370e:	0f 90       	pop	r0
    3710:	0f 90       	pop	r0
				}

				sprintf(g_tempStr,"T=%d\n",g_temperature);
    3712:	80 91 37 05 	lds	r24, 0x0537	; 0x800537 <g_temperature>
    3716:	28 2f       	mov	r18, r24
    3718:	08 2e       	mov	r0, r24
    371a:	00 0c       	add	r0, r0
    371c:	33 0b       	sbc	r19, r19
    371e:	3f 93       	push	r19
    3720:	8f 93       	push	r24
    3722:	9f 92       	push	r9
    3724:	8f 92       	push	r8
    3726:	bf 92       	push	r11
    3728:	af 92       	push	r10
    372a:	0e 94 5e 2a 	call	0x54bc	; 0x54bc <sprintf>
				lb_send_string(g_tempStr,TRUE);
    372e:	61 e0       	ldi	r22, 0x01	; 1
    3730:	c5 01       	movw	r24, r10
    3732:	0e 94 30 07 	call	0xe60	; 0xe60 <_Z14lb_send_stringPch>
			}
			break;
    3736:	0f 90       	pop	r0
    3738:	0f 90       	pop	r0
    373a:	0f 90       	pop	r0
    373c:	0f 90       	pop	r0
    373e:	0f 90       	pop	r0
    3740:	0f 90       	pop	r0
    3742:	02 c0       	rjmp	.+4      	; 0x3748 <_Z17handleLinkBusMsgsv+0xbea>

			default:
			{
				lb_send_Help();
    3744:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <_Z12lb_send_Helpv>
			}
			break;
		}

		lb_buff->id = (LBMessageID)MESSAGE_EMPTY;
    3748:	f6 01       	movw	r30, r12
    374a:	12 82       	std	Z+2, r1	; 0x02
    374c:	11 82       	std	Z+1, r1	; 0x01
		if(send_ack)
		{
			lb_send_NewPrompt();
    374e:	0e 94 1c 07 	call	0xe38	; 0xe38 <_Z17lb_send_NewPromptv>
    3752:	3d ca       	rjmp	.-2950   	; 0x2bce <_Z17handleLinkBusMsgsv+0x70>

				if(c)
				{
					if(c == 'B')
					{
						c = BEACON;
    3754:	80 e0       	ldi	r24, 0x00	; 0
    3756:	90 e0       	ldi	r25, 0x00	; 0
    3758:	05 cb       	rjmp	.-2550   	; 0x2d64 <_Z17handleLinkBusMsgsv+0x206>
					{
						char t = lb_buff->fields[FIELD2][0];

						if(t == 'S')
						{
							c = SPRINT_DEMO;
    375a:	83 e1       	ldi	r24, 0x13	; 19
    375c:	90 e0       	ldi	r25, 0x00	; 0
    375e:	02 cb       	rjmp	.-2556   	; 0x2d64 <_Z17handleLinkBusMsgsv+0x206>
							c = FOX_DEMO;
						}
					}
					else if(c == 'F')
					{
						c = FOXORING;
    3760:	87 e0       	ldi	r24, 0x07	; 7
    3762:	00 cb       	rjmp	.-2560   	; 0x2d64 <_Z17handleLinkBusMsgsv+0x206>
					{
						char t = lb_buff->fields[FIELD2][0];

						if(t == '2')
						{
							c = NO_CODE_START_TONES_2M;
    3764:	84 e1       	ldi	r24, 0x14	; 20
    3766:	fe ca       	rjmp	.-2564   	; 0x2d64 <_Z17handleLinkBusMsgsv+0x206>
						}
						else if(t == '5')
						{
							c = NO_CODE_START_TONES_5M;
    3768:	85 e1       	ldi	r24, 0x15	; 21
    376a:	90 e0       	ldi	r25, 0x00	; 0
    376c:	fb ca       	rjmp	.-2570   	; 0x2d64 <_Z17handleLinkBusMsgsv+0x206>
					}
				}

				if(doprint)
				{
					lb_send_string(g_tempStr,TRUE);
    376e:	61 e0       	ldi	r22, 0x01	; 1
    3770:	c5 01       	movw	r24, r10
    3772:	0e 94 30 07 	call	0xe60	; 0xe60 <_Z14lb_send_stringPch>
    3776:	e8 cf       	rjmp	.-48     	; 0x3748 <_Z17handleLinkBusMsgsv+0xbea>
		if(send_ack)
		{
			lb_send_NewPrompt();
		}
	}
}
    3778:	28 96       	adiw	r28, 0x08	; 8
    377a:	0f b6       	in	r0, 0x3f	; 63
    377c:	f8 94       	cli
    377e:	de bf       	out	0x3e, r29	; 62
    3780:	0f be       	out	0x3f, r0	; 63
    3782:	cd bf       	out	0x3d, r28	; 61
    3784:	df 91       	pop	r29
    3786:	cf 91       	pop	r28
    3788:	1f 91       	pop	r17
    378a:	0f 91       	pop	r16
    378c:	ff 90       	pop	r15
    378e:	ef 90       	pop	r14
    3790:	df 90       	pop	r13
    3792:	cf 90       	pop	r12
    3794:	bf 90       	pop	r11
    3796:	af 90       	pop	r10
    3798:	9f 90       	pop	r9
    379a:	8f 90       	pop	r8
    379c:	7f 90       	pop	r7
    379e:	6f 90       	pop	r6
    37a0:	5f 90       	pop	r5
    37a2:	4f 90       	pop	r4
    37a4:	3f 90       	pop	r3
    37a6:	2f 90       	pop	r2
    37a8:	08 95       	ret

000037aa <_Z4loopv>:

/*
 *  Here is the main loop
 * */
void loop()
{
    37aa:	2f 92       	push	r2
    37ac:	3f 92       	push	r3
    37ae:	4f 92       	push	r4
    37b0:	5f 92       	push	r5
    37b2:	6f 92       	push	r6
    37b4:	7f 92       	push	r7
    37b6:	8f 92       	push	r8
    37b8:	9f 92       	push	r9
    37ba:	af 92       	push	r10
    37bc:	bf 92       	push	r11
    37be:	cf 92       	push	r12
    37c0:	df 92       	push	r13
    37c2:	ef 92       	push	r14
    37c4:	ff 92       	push	r15
    37c6:	0f 93       	push	r16
    37c8:	1f 93       	push	r17
    37ca:	cf 93       	push	r28
    37cc:	df 93       	push	r29
    37ce:	1f 92       	push	r1
    37d0:	cd b7       	in	r28, 0x3d	; 61
    37d2:	de b7       	in	r29, 0x3e	; 62
		static int time_for_id = 99;
		static BOOL id_set = TRUE;
		static BOOL proceed = FALSE;
#endif  /* !INIT_EEPROM_ONLY */

	handleLinkBusMsgs();
    37d4:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <_Z17handleLinkBusMsgsv>

#if !INIT_EEPROM_ONLY
		if(!g_on_the_air || proceed)
    37d8:	80 91 5a 05 	lds	r24, 0x055A	; 0x80055a <g_on_the_air>
    37dc:	90 91 5b 05 	lds	r25, 0x055B	; 0x80055b <g_on_the_air+0x1>
    37e0:	89 2b       	or	r24, r25
    37e2:	29 f0       	breq	.+10     	; 0x37ee <_Z4loopv+0x44>
    37e4:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <_ZZ4loopvE7proceed>
    37e8:	88 23       	and	r24, r24
    37ea:	09 f4       	brne	.+2      	; 0x37ee <_Z4loopv+0x44>
    37ec:	da c0       	rjmp	.+436    	; 0x39a2 <_Z4loopv+0x1f8>
		{
			/* At the appropriate time set the pattern to be sent and start transmissions */
			if(!g_transmissions_disabled)
    37ee:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <g_transmissions_disabled>
    37f2:	81 11       	cpse	r24, r1
    37f4:	2e c1       	rjmp	.+604    	; 0x3a52 <_Z4loopv+0x2a8>
			{
				proceed = FALSE;
    37f6:	10 92 7a 04 	sts	0x047A, r1	; 0x80047a <_ZZ4loopvE7proceed>

				/* Choose the appropriate Morse pattern to be sent */
				if(g_fox == FOX_DEMO)
    37fa:	80 91 5c 05 	lds	r24, 0x055C	; 0x80055c <g_fox>
    37fe:	86 30       	cpi	r24, 0x06	; 6
    3800:	91 f4       	brne	.+36     	; 0x3826 <_Z4loopv+0x7c>
				{
					strcpy(g_messages_text[PATTERN_TEXT],g_morsePatterns[g_fox_counter]);
    3802:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <g_fox_counter>
    3806:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <g_fox_counter+0x1>
    380a:	bc 01       	movw	r22, r24
    380c:	66 0f       	add	r22, r22
    380e:	77 1f       	adc	r23, r23
    3810:	66 0f       	add	r22, r22
    3812:	77 1f       	adc	r23, r23
    3814:	68 0f       	add	r22, r24
    3816:	79 1f       	adc	r23, r25
    3818:	68 57       	subi	r22, 0x78	; 120
    381a:	7d 4f       	sbci	r23, 0xFD	; 253
    381c:	8b e0       	ldi	r24, 0x0B	; 11
    381e:	95 e0       	ldi	r25, 0x05	; 5
    3820:	0e 94 2b 2a 	call	0x5456	; 0x5456 <strcpy>
    3824:	27 c0       	rjmp	.+78     	; 0x3874 <_Z4loopv+0xca>
				}
				else if(g_fox == SPRINT_DEMO)
    3826:	80 91 5c 05 	lds	r24, 0x055C	; 0x80055c <g_fox>
    382a:	83 31       	cpi	r24, 0x13	; 19
    382c:	99 f4       	brne	.+38     	; 0x3854 <_Z4loopv+0xaa>
				{
					strcpy(g_messages_text[PATTERN_TEXT],g_morsePatterns[g_fox_counter + 8]);
    382e:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <g_fox_counter>
    3832:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <g_fox_counter+0x1>
    3836:	08 96       	adiw	r24, 0x08	; 8
    3838:	bc 01       	movw	r22, r24
    383a:	66 0f       	add	r22, r22
    383c:	77 1f       	adc	r23, r23
    383e:	66 0f       	add	r22, r22
    3840:	77 1f       	adc	r23, r23
    3842:	68 0f       	add	r22, r24
    3844:	79 1f       	adc	r23, r25
    3846:	68 57       	subi	r22, 0x78	; 120
    3848:	7d 4f       	sbci	r23, 0xFD	; 253
    384a:	8b e0       	ldi	r24, 0x0B	; 11
    384c:	95 e0       	ldi	r25, 0x05	; 5
    384e:	0e 94 2b 2a 	call	0x5456	; 0x5456 <strcpy>
    3852:	10 c0       	rjmp	.+32     	; 0x3874 <_Z4loopv+0xca>
				}
				else
				{
					strcpy(g_messages_text[PATTERN_TEXT],g_morsePatterns[g_fox]);
    3854:	80 91 5c 05 	lds	r24, 0x055C	; 0x80055c <g_fox>
    3858:	90 e0       	ldi	r25, 0x00	; 0
    385a:	bc 01       	movw	r22, r24
    385c:	66 0f       	add	r22, r22
    385e:	77 1f       	adc	r23, r23
    3860:	66 0f       	add	r22, r22
    3862:	77 1f       	adc	r23, r23
    3864:	68 0f       	add	r22, r24
    3866:	79 1f       	adc	r23, r25
    3868:	68 57       	subi	r22, 0x78	; 120
    386a:	7d 4f       	sbci	r23, 0xFD	; 253
    386c:	8b e0       	ldi	r24, 0x0B	; 11
    386e:	95 e0       	ldi	r25, 0x05	; 5
    3870:	0e 94 2b 2a 	call	0x5456	; 0x5456 <strcpy>
				}

				if((g_fox == FOX_DEMO) || (g_fox == SPRINT_DEMO) || (g_fox == BEACON) || (g_fox == FOXORING) || (g_fox == SPECTATOR) || (g_fox == (g_fox_counter + g_fox_id_offset)))
    3874:	80 91 5c 05 	lds	r24, 0x055C	; 0x80055c <g_fox>
    3878:	86 30       	cpi	r24, 0x06	; 6
    387a:	09 f1       	breq	.+66     	; 0x38be <_Z4loopv+0x114>
    387c:	80 91 5c 05 	lds	r24, 0x055C	; 0x80055c <g_fox>
    3880:	83 31       	cpi	r24, 0x13	; 19
    3882:	e9 f0       	breq	.+58     	; 0x38be <_Z4loopv+0x114>
    3884:	80 91 5c 05 	lds	r24, 0x055C	; 0x80055c <g_fox>
    3888:	88 23       	and	r24, r24
    388a:	c9 f0       	breq	.+50     	; 0x38be <_Z4loopv+0x114>
    388c:	80 91 5c 05 	lds	r24, 0x055C	; 0x80055c <g_fox>
    3890:	87 30       	cpi	r24, 0x07	; 7
    3892:	a9 f0       	breq	.+42     	; 0x38be <_Z4loopv+0x114>
    3894:	80 91 5c 05 	lds	r24, 0x055C	; 0x80055c <g_fox>
    3898:	88 30       	cpi	r24, 0x08	; 8
    389a:	89 f0       	breq	.+34     	; 0x38be <_Z4loopv+0x114>
    389c:	20 91 5c 05 	lds	r18, 0x055C	; 0x80055c <g_fox>
    38a0:	40 91 1e 01 	lds	r20, 0x011E	; 0x80011e <g_fox_counter>
    38a4:	50 91 1f 01 	lds	r21, 0x011F	; 0x80011f <g_fox_counter+0x1>
    38a8:	80 91 41 05 	lds	r24, 0x0541	; 0x800541 <g_fox_id_offset>
    38ac:	90 91 42 05 	lds	r25, 0x0542	; 0x800542 <g_fox_id_offset+0x1>
    38b0:	30 e0       	ldi	r19, 0x00	; 0
    38b2:	84 0f       	add	r24, r20
    38b4:	95 1f       	adc	r25, r21
    38b6:	28 17       	cp	r18, r24
    38b8:	39 07       	cpc	r19, r25
    38ba:	09 f0       	breq	.+2      	; 0x38be <_Z4loopv+0x114>
    38bc:	ca c0       	rjmp	.+404    	; 0x3a52 <_Z4loopv+0x2a8>
				{
					BOOL repeat = TRUE;
    38be:	81 e0       	ldi	r24, 0x01	; 1
    38c0:	89 83       	std	Y+1, r24	; 0x01
					g_code_throttle = THROTTLE_VAL_FROM_WPM(g_pattern_codespeed);
    38c2:	60 91 17 01 	lds	r22, 0x0117	; 0x800117 <_ZL19g_pattern_codespeed>
    38c6:	70 e0       	ldi	r23, 0x00	; 0
    38c8:	82 e8       	ldi	r24, 0x82	; 130
    38ca:	9b e1       	ldi	r25, 0x1B	; 27
    38cc:	0e 94 2e 28 	call	0x505c	; 0x505c <__divmodhi4>
    38d0:	cb 01       	movw	r24, r22
    38d2:	6a e0       	ldi	r22, 0x0A	; 10
    38d4:	70 e0       	ldi	r23, 0x00	; 0
    38d6:	0e 94 2e 28 	call	0x505c	; 0x505c <__divmodhi4>
    38da:	66 0f       	add	r22, r22
    38dc:	77 1f       	adc	r23, r23
    38de:	70 93 59 05 	sts	0x0559, r23	; 0x800559 <g_code_throttle+0x1>
    38e2:	60 93 58 05 	sts	0x0558, r22	; 0x800558 <g_code_throttle>
					makeMorse(g_messages_text[PATTERN_TEXT],&repeat,NULL);
    38e6:	40 e0       	ldi	r20, 0x00	; 0
    38e8:	50 e0       	ldi	r21, 0x00	; 0
    38ea:	be 01       	movw	r22, r28
    38ec:	6f 5f       	subi	r22, 0xFF	; 255
    38ee:	7f 4f       	sbci	r23, 0xFF	; 255
    38f0:	8b e0       	ldi	r24, 0x0B	; 11
    38f2:	95 e0       	ldi	r25, 0x05	; 5
    38f4:	0e 94 00 21 	call	0x4200	; 0x4200 <_Z9makeMorsePcPhS0_>

					if(g_time_to_ID || (g_id_interval <= g_on_air_interval))
    38f8:	80 91 3e 05 	lds	r24, 0x053E	; 0x80053e <g_time_to_ID>
    38fc:	81 11       	cpse	r24, r1
    38fe:	0b c0       	rjmp	.+22     	; 0x3916 <_Z4loopv+0x16c>
    3900:	20 91 3f 05 	lds	r18, 0x053F	; 0x80053f <g_id_interval>
    3904:	30 91 40 05 	lds	r19, 0x0540	; 0x800540 <g_id_interval+0x1>
    3908:	80 91 48 05 	lds	r24, 0x0548	; 0x800548 <g_on_air_interval>
    390c:	90 91 49 05 	lds	r25, 0x0549	; 0x800549 <g_on_air_interval+0x1>
    3910:	82 17       	cp	r24, r18
    3912:	93 07       	cpc	r25, r19
    3914:	3c f1       	brlt	.+78     	; 0x3964 <_Z4loopv+0x1ba>
					{
						time_for_id = g_on_air_interval - (500 + timeRequiredToSendStrAtWPM(g_messages_text[STATION_ID],g_id_codespeed)) / 1000;
    3916:	00 91 48 05 	lds	r16, 0x0548	; 0x800548 <g_on_air_interval>
    391a:	10 91 49 05 	lds	r17, 0x0549	; 0x800549 <g_on_air_interval+0x1>
    391e:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <_ZL14g_id_codespeed>
    3922:	70 e0       	ldi	r23, 0x00	; 0
    3924:	80 e2       	ldi	r24, 0x20	; 32
    3926:	95 e0       	ldi	r25, 0x05	; 5
    3928:	0e 94 fe 21 	call	0x43fc	; 0x43fc <_Z26timeRequiredToSendStrAtWPMPcj>
    392c:	8c 50       	subi	r24, 0x0C	; 12
    392e:	9e 4f       	sbci	r25, 0xFE	; 254
    3930:	9c 01       	movw	r18, r24
    3932:	36 95       	lsr	r19
    3934:	27 95       	ror	r18
    3936:	36 95       	lsr	r19
    3938:	27 95       	ror	r18
    393a:	36 95       	lsr	r19
    393c:	27 95       	ror	r18
    393e:	a5 ec       	ldi	r26, 0xC5	; 197
    3940:	b0 e2       	ldi	r27, 0x20	; 32
    3942:	0e 94 89 28 	call	0x5112	; 0x5112 <__umulhisi3>
    3946:	92 95       	swap	r25
    3948:	82 95       	swap	r24
    394a:	8f 70       	andi	r24, 0x0F	; 15
    394c:	89 27       	eor	r24, r25
    394e:	9f 70       	andi	r25, 0x0F	; 15
    3950:	89 27       	eor	r24, r25
    3952:	08 1b       	sub	r16, r24
    3954:	19 0b       	sbc	r17, r25
    3956:	10 93 0e 01 	sts	0x010E, r17	; 0x80010e <_ZZ4loopvE11time_for_id+0x1>
    395a:	00 93 0d 01 	sts	0x010D, r16	; 0x80010d <_ZZ4loopvE11time_for_id>
						g_time_to_ID = FALSE;
    395e:	10 92 3e 05 	sts	0x053E, r1	; 0x80053e <g_time_to_ID>
    3962:	0a c0       	rjmp	.+20     	; 0x3978 <_Z4loopv+0x1ce>
					}
					else
					{
						time_for_id = g_on_air_interval + 99;   /* prevent sending ID */
    3964:	80 91 48 05 	lds	r24, 0x0548	; 0x800548 <g_on_air_interval>
    3968:	90 91 49 05 	lds	r25, 0x0549	; 0x800549 <g_on_air_interval+0x1>
    396c:	8d 59       	subi	r24, 0x9D	; 157
    396e:	9f 4f       	sbci	r25, 0xFF	; 255
    3970:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <_ZZ4loopvE11time_for_id+0x1>
    3974:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <_ZZ4loopvE11time_for_id>
					}

					id_set = FALSE;
    3978:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <_ZZ4loopvE6id_set>
					g_on_the_air = TRUE;
    397c:	81 e0       	ldi	r24, 0x01	; 1
    397e:	90 e0       	ldi	r25, 0x00	; 0
    3980:	90 93 5b 05 	sts	0x055B, r25	; 0x80055b <g_on_the_air+0x1>
    3984:	80 93 5a 05 	sts	0x055A, r24	; 0x80055a <g_on_the_air>
					g_callsign_sent = FALSE;
    3988:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <g_callsign_sent>
					g_fox_transition = FALSE;
    398c:	10 92 43 05 	sts	0x0543, r1	; 0x800543 <g_fox_transition>
					g_fox_tone_offset = g_fox_counter;
    3990:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <g_fox_counter>
    3994:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <g_fox_counter+0x1>
    3998:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <g_fox_tone_offset+0x1>
    399c:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <g_fox_tone_offset>
    39a0:	58 c0       	rjmp	.+176    	; 0x3a52 <_Z4loopv+0x2a8>
				}
			}
		}
		else
		{
			if(!id_set && (g_fox_seconds_into_interval == time_for_id)) /* Send the call sign at the right time */
    39a2:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <_ZZ4loopvE6id_set>
    39a6:	81 11       	cpse	r24, r1
    39a8:	b1 c1       	rjmp	.+866    	; 0x3d0c <_Z4loopv+0x562>
    39aa:	20 91 46 05 	lds	r18, 0x0546	; 0x800546 <g_fox_seconds_into_interval>
    39ae:	30 91 47 05 	lds	r19, 0x0547	; 0x800547 <g_fox_seconds_into_interval+0x1>
    39b2:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <_ZZ4loopvE11time_for_id>
    39b6:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <_ZZ4loopvE11time_for_id+0x1>
    39ba:	28 17       	cp	r18, r24
    39bc:	39 07       	cpc	r19, r25
    39be:	09 f0       	breq	.+2      	; 0x39c2 <_Z4loopv+0x218>
    39c0:	a5 c1       	rjmp	.+842    	; 0x3d0c <_Z4loopv+0x562>
    39c2:	82 c1       	rjmp	.+772    	; 0x3cc8 <_Z4loopv+0x51e>
				BOOL repeat = FALSE;
				makeMorse(g_messages_text[STATION_ID],&repeat,NULL);
				id_set = TRUE;
				g_callsign_sent = FALSE;
			}
			else if((g_fox >= SPRINT_S1) && (g_fox <= SPRINT_DEMO))
    39c4:	80 91 5c 05 	lds	r24, 0x055C	; 0x80055c <g_fox>
    39c8:	84 31       	cpi	r24, 0x14	; 20
    39ca:	08 f4       	brcc	.+2      	; 0x39ce <_Z4loopv+0x224>
    39cc:	a5 c1       	rjmp	.+842    	; 0x3d18 <_Z4loopv+0x56e>
    39ce:	09 c0       	rjmp	.+18     	; 0x39e2 <_Z4loopv+0x238>
			{
				if(g_fox_transition)
				{
					g_fox_transition = FALSE;
    39d0:	10 92 43 05 	sts	0x0543, r1	; 0x800543 <g_fox_transition>
					g_on_the_air = FALSE;
    39d4:	10 92 5b 05 	sts	0x055B, r1	; 0x80055b <g_on_the_air+0x1>
    39d8:	10 92 5a 05 	sts	0x055A, r1	; 0x80055a <g_on_the_air>
					proceed = TRUE;
    39dc:	81 e0       	ldi	r24, 0x01	; 1
    39de:	80 93 7a 04 	sts	0x047A, r24	; 0x80047a <_ZZ4loopvE7proceed>
				}
			}

			if((g_fox == FOX_DEMO) || (g_fox == SPRINT_DEMO))
    39e2:	80 91 5c 05 	lds	r24, 0x055C	; 0x80055c <g_fox>
    39e6:	86 30       	cpi	r24, 0x06	; 6
    39e8:	21 f0       	breq	.+8      	; 0x39f2 <_Z4loopv+0x248>
    39ea:	80 91 5c 05 	lds	r24, 0x055C	; 0x80055c <g_fox>
    39ee:	83 31       	cpi	r24, 0x13	; 19
    39f0:	49 f4       	brne	.+18     	; 0x3a04 <_Z4loopv+0x25a>
			{
				if((g_callsign_sent) && g_fox_transition)   /* Ensure we've begun the next minute before proceeding */
    39f2:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <g_callsign_sent>
    39f6:	88 23       	and	r24, r24
    39f8:	61 f1       	breq	.+88     	; 0x3a52 <_Z4loopv+0x2a8>
    39fa:	80 91 43 05 	lds	r24, 0x0543	; 0x800543 <g_fox_transition>
    39fe:	81 11       	cpse	r24, r1
    3a00:	90 c1       	rjmp	.+800    	; 0x3d22 <_Z4loopv+0x578>
    3a02:	27 c0       	rjmp	.+78     	; 0x3a52 <_Z4loopv+0x2a8>
				{
					proceed = TRUE;
				}
			}
			else if((g_fox == BEACON) || (g_fox == FOXORING) || (g_fox == SPECTATOR))   /* Proceed as soon as the callsign has been sent */
    3a04:	80 91 5c 05 	lds	r24, 0x055C	; 0x80055c <g_fox>
    3a08:	88 23       	and	r24, r24
    3a0a:	41 f0       	breq	.+16     	; 0x3a1c <_Z4loopv+0x272>
    3a0c:	80 91 5c 05 	lds	r24, 0x055C	; 0x80055c <g_fox>
    3a10:	87 30       	cpi	r24, 0x07	; 7
    3a12:	21 f0       	breq	.+8      	; 0x3a1c <_Z4loopv+0x272>
    3a14:	80 91 5c 05 	lds	r24, 0x055C	; 0x80055c <g_fox>
    3a18:	88 30       	cpi	r24, 0x08	; 8
    3a1a:	41 f4       	brne	.+16     	; 0x3a2c <_Z4loopv+0x282>
			{
				if(g_callsign_sent)
    3a1c:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <g_callsign_sent>
    3a20:	88 23       	and	r24, r24
    3a22:	b9 f0       	breq	.+46     	; 0x3a52 <_Z4loopv+0x2a8>
				{
					proceed = TRUE;
    3a24:	81 e0       	ldi	r24, 0x01	; 1
    3a26:	80 93 7a 04 	sts	0x047A, r24	; 0x80047a <_ZZ4loopvE7proceed>
    3a2a:	13 c0       	rjmp	.+38     	; 0x3a52 <_Z4loopv+0x2a8>
				}
			}
			else if((g_fox >= SPRINT_S1) && (g_fox <= SPRINT_F5) && g_callsign_sent)
    3a2c:	80 91 5c 05 	lds	r24, 0x055C	; 0x80055c <g_fox>
    3a30:	89 30       	cpi	r24, 0x09	; 9
    3a32:	08 f4       	brcc	.+2      	; 0x3a36 <_Z4loopv+0x28c>
    3a34:	7f c1       	rjmp	.+766    	; 0x3d34 <_Z4loopv+0x58a>
    3a36:	80 91 5c 05 	lds	r24, 0x055C	; 0x80055c <g_fox>
    3a3a:	83 31       	cpi	r24, 0x13	; 19
    3a3c:	08 f0       	brcs	.+2      	; 0x3a40 <_Z4loopv+0x296>
    3a3e:	7a c1       	rjmp	.+756    	; 0x3d34 <_Z4loopv+0x58a>
    3a40:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <g_callsign_sent>
    3a44:	81 11       	cpse	r24, r1
    3a46:	71 c1       	rjmp	.+738    	; 0x3d2a <_Z4loopv+0x580>
    3a48:	75 c1       	rjmp	.+746    	; 0x3d34 <_Z4loopv+0x58a>
			{
				g_on_the_air = FALSE;
			}
			else if((g_fox != g_fox_counter) && g_callsign_sent)    /* Turn off transmissions during minutes when this fox should be silent */
    3a4a:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <g_callsign_sent>
    3a4e:	81 11       	cpse	r24, r1
    3a50:	7d c1       	rjmp	.+762    	; 0x3d4c <_Z4loopv+0x5a2>
				g_on_the_air = FALSE;
			}
		}


		if(g_goertzel.SamplesReady())
    3a52:	8a ef       	ldi	r24, 0xFA	; 250
    3a54:	94 e0       	ldi	r25, 0x04	; 4
    3a56:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <_ZN8Goertzel12SamplesReadyEv>
    3a5a:	88 23       	and	r24, r24
    3a5c:	09 f4       	brne	.+2      	; 0x3a60 <_Z4loopv+0x2b6>
    3a5e:	29 c1       	rjmp	.+594    	; 0x3cb2 <_Z4loopv+0x508>
			static char lastKey = '\0';
			static int checkCountet above the threshold to prevent an initial false key detect */
			static int quietCount = 0;
			int x = -1,y = -1;

			if(!g_temperature_check_countdown)
    3a60:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <_ZL29g_temperature_check_countdown>
    3a64:	81 11       	cpse	r24, r1
    3a66:	77 c1       	rjmp	.+750    	; 0x3d56 <_Z4loopv+0x5ac>
			{

				setUpTemp();
    3a68:	0e 94 24 13 	call	0x2648	; 0x2648 <_Z9setUpTempv>
				int8_t temp = (int8_t)getTemp();
    3a6c:	0e 94 34 13 	call	0x2668	; 0x2668 <_Z7getTempv>
    3a70:	0e 94 e9 25 	call	0x4bd2	; 0x4bd2 <__fixsfsi>
				if(temp != g_temperature)
    3a74:	80 91 37 05 	lds	r24, 0x0537	; 0x800537 <g_temperature>
    3a78:	68 17       	cp	r22, r24
    3a7a:	b1 f0       	breq	.+44     	; 0x3aa8 <_Z4loopv+0x2fe>
				{
					g_temperature = temp;
    3a7c:	60 93 37 05 	sts	0x0537, r22	; 0x800537 <g_temperature>
					int8_t delta25 = 25 - temp;
					int8_t adj = eeprom_read_byte((uint8_t*)&ee_temperature_table[delta25]);
    3a80:	89 e1       	ldi	r24, 0x19	; 25
    3a82:	86 1b       	sub	r24, r22
    3a84:	88 0f       	add	r24, r24
    3a86:	99 0b       	sbc	r25, r25
    3a88:	87 5c       	subi	r24, 0xC7	; 199
    3a8a:	9d 4f       	sbci	r25, 0xFD	; 253
    3a8c:	0e 94 11 2d 	call	0x5a22	; 0x5a22 <eeprom_read_byte>
					rv3028_set_offset_RAM(g_rv3028_offset + adj);
    3a90:	20 91 04 05 	lds	r18, 0x0504	; 0x800504 <_ZL15g_rv3028_offset>
    3a94:	30 91 05 05 	lds	r19, 0x0505	; 0x800505 <_ZL15g_rv3028_offset+0x1>
    3a98:	a9 01       	movw	r20, r18
    3a9a:	48 0f       	add	r20, r24
    3a9c:	51 1d       	adc	r21, r1
    3a9e:	87 fd       	sbrc	r24, 7
    3aa0:	5a 95       	dec	r21
    3aa2:	ca 01       	movw	r24, r20
    3aa4:	0e 94 c9 23 	call	0x4792	; 0x4792 <_Z21rv3028_set_offset_RAMj>
				}

				setUpAudioSampling(false);
    3aa8:	80 e0       	ldi	r24, 0x00	; 0
    3aaa:	0e 94 8c 13 	call	0x2718	; 0x2718 <_Z18setUpAudioSamplingh>
				g_temperature_check_countdown = 60;
    3aae:	8c e3       	ldi	r24, 0x3C	; 60
    3ab0:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <_ZL29g_temperature_check_countdown>
    3ab4:	50 c1       	rjmp	.+672    	; 0x3d56 <_Z4loopv+0x5ac>
			}

			for(int i = 0; i < 4; i++)
			{
				g_goertzel.SetTargetFrequency(y_frequencies[i]);    /*initialize library function with the given sampling frequency no of samples and target freq */
    3ab6:	f5 01       	movw	r30, r10
    3ab8:	41 91       	ld	r20, Z+
    3aba:	51 91       	ld	r21, Z+
    3abc:	61 91       	ld	r22, Z+
    3abe:	71 91       	ld	r23, Z+
    3ac0:	5f 01       	movw	r10, r30
    3ac2:	8a ef       	ldi	r24, 0xFA	; 250
    3ac4:	94 e0       	ldi	r25, 0x04	; 4
    3ac6:	0e 94 08 03 	call	0x610	; 0x610 <_ZN8Goertzel18SetTargetFrequencyEf>
				magnitudeY = g_goertzel.Magnitude2();               /*check them for target_freq */
    3aca:	8a ef       	ldi	r24, 0xFA	; 250
    3acc:	94 e0       	ldi	r25, 0x04	; 4
    3ace:	0e 94 ee 03 	call	0x7dc	; 0x7dc <_ZN8Goertzel10Magnitude2Ev>
    3ad2:	e6 2e       	mov	r14, r22
    3ad4:	f7 2e       	mov	r15, r23
    3ad6:	d8 2e       	mov	r13, r24
    3ad8:	c9 2e       	mov	r12, r25

				if(magnitudeY > largestY)                           /*if you're getting false hits or no hits adjust the threshold */
    3ada:	27 2d       	mov	r18, r7
    3adc:	36 2d       	mov	r19, r6
    3ade:	45 2d       	mov	r20, r5
    3ae0:	54 2d       	mov	r21, r4
    3ae2:	0e 94 10 27 	call	0x4e20	; 0x4e20 <__gesf2>
    3ae6:	18 16       	cp	r1, r24
    3ae8:	b4 f4       	brge	.+44     	; 0x3b16 <_Z4loopv+0x36c>
				{
					largestY = magnitudeY;
					if(magnitudeY > threshold)
    3aea:	20 e0       	ldi	r18, 0x00	; 0
    3aec:	34 e2       	ldi	r19, 0x24	; 36
    3aee:	44 e7       	ldi	r20, 0x74	; 116
    3af0:	59 e4       	ldi	r21, 0x49	; 73
    3af2:	6e 2d       	mov	r22, r14
    3af4:	7f 2d       	mov	r23, r15
    3af6:	8d 2d       	mov	r24, r13
    3af8:	9c 2d       	mov	r25, r12
    3afa:	0e 94 10 27 	call	0x4e20	; 0x4e20 <__gesf2>
    3afe:	18 16       	cp	r1, r24
    3b00:	34 f4       	brge	.+12     	; 0x3b0e <_Z4loopv+0x364>
    3b02:	48 01       	movw	r8, r16
				g_goertzel.SetTargetFrequency(y_frequencies[i]);    /*initialize library function with the given sampling frequency no of samples and target freq */
				magnitudeY = g_goertzel.Magnitude2();               /*check them for target_freq */

				if(magnitudeY > largestY)                           /*if you're getting false hits or no hits adjust the threshold */
				{
					largestY = magnitudeY;
    3b04:	7e 2c       	mov	r7, r14
    3b06:	6f 2c       	mov	r6, r15
    3b08:	5d 2c       	mov	r5, r13
    3b0a:	4c 2c       	mov	r4, r12
    3b0c:	04 c0       	rjmp	.+8      	; 0x3b16 <_Z4loopv+0x36c>
    3b0e:	7e 2c       	mov	r7, r14
    3b10:	6f 2c       	mov	r6, r15
    3b12:	5d 2c       	mov	r5, r13
    3b14:	4c 2c       	mov	r4, r12

				setUpAudioSampling(false);
				g_temperature_check_countdown = 60;
			}

			for(int i = 0; i < 4; i++)
    3b16:	0f 5f       	subi	r16, 0xFF	; 255
    3b18:	1f 4f       	sbci	r17, 0xFF	; 255
    3b1a:	04 30       	cpi	r16, 0x04	; 4
    3b1c:	11 05       	cpc	r17, r1
    3b1e:	59 f6       	brne	.-106    	; 0x3ab6 <_Z4loopv+0x30c>
    3b20:	2a c1       	rjmp	.+596    	; 0x3d76 <_Z4loopv+0x5cc>

			if(y >= 0)
			{
				for(int i = 0; i < 4; i++)
				{
					g_goertzel.SetTargetFrequency(x_frequencies[i]);    /*initialize library function with the given sampling frequency no of samples and target freq */
    3b22:	f5 01       	movw	r30, r10
    3b24:	41 91       	ld	r20, Z+
    3b26:	51 91       	ld	r21, Z+
    3b28:	61 91       	ld	r22, Z+
    3b2a:	71 91       	ld	r23, Z+
    3b2c:	5f 01       	movw	r10, r30
    3b2e:	8a ef       	ldi	r24, 0xFA	; 250
    3b30:	94 e0       	ldi	r25, 0x04	; 4
    3b32:	0e 94 08 03 	call	0x610	; 0x610 <_ZN8Goertzel18SetTargetFrequencyEf>
					magnitudeX = g_goertzel.Magnitude2();               /*check them for target_freq */
    3b36:	8a ef       	ldi	r24, 0xFA	; 250
    3b38:	94 e0       	ldi	r25, 0x04	; 4
    3b3a:	0e 94 ee 03 	call	0x7dc	; 0x7dc <_ZN8Goertzel10Magnitude2Ev>
    3b3e:	e6 2e       	mov	r14, r22
    3b40:	f7 2e       	mov	r15, r23
    3b42:	d8 2e       	mov	r13, r24
    3b44:	c9 2e       	mov	r12, r25

					if(magnitudeX > largestX)                           /*if you're getting false hits or no hits adjust the threshold */
    3b46:	25 2d       	mov	r18, r5
    3b48:	34 2d       	mov	r19, r4
    3b4a:	43 2d       	mov	r20, r3
    3b4c:	52 2d       	mov	r21, r2
    3b4e:	0e 94 10 27 	call	0x4e20	; 0x4e20 <__gesf2>
    3b52:	18 16       	cp	r1, r24
    3b54:	b4 f4       	brge	.+44     	; 0x3b82 <_Z4loopv+0x3d8>
					{
						largestX = magnitudeX;
						if(magnitudeX > threshold)
    3b56:	20 e0       	ldi	r18, 0x00	; 0
    3b58:	34 e2       	ldi	r19, 0x24	; 36
    3b5a:	44 e7       	ldi	r20, 0x74	; 116
    3b5c:	59 e4       	ldi	r21, 0x49	; 73
    3b5e:	6e 2d       	mov	r22, r14
    3b60:	7f 2d       	mov	r23, r15
    3b62:	8d 2d       	mov	r24, r13
    3b64:	9c 2d       	mov	r25, r12
    3b66:	0e 94 10 27 	call	0x4e20	; 0x4e20 <__gesf2>
    3b6a:	18 16       	cp	r1, r24
    3b6c:	34 f4       	brge	.+12     	; 0x3b7a <_Z4loopv+0x3d0>
    3b6e:	38 01       	movw	r6, r16
					g_goertzel.SetTargetFrequency(x_frequencies[i]);    /*initialize library function with the given sampling frequency no of samples and target freq */
					magnitudeX = g_goertzel.Magnitude2();               /*check them for target_freq */

					if(magnitudeX > largestX)                           /*if you're getting false hits or no hits adjust the threshold */
					{
						largestX = magnitudeX;
    3b70:	5e 2c       	mov	r5, r14
    3b72:	4f 2c       	mov	r4, r15
    3b74:	3d 2c       	mov	r3, r13
    3b76:	2c 2c       	mov	r2, r12
    3b78:	04 c0       	rjmp	.+8      	; 0x3b82 <_Z4loopv+0x3d8>
    3b7a:	5e 2c       	mov	r5, r14
    3b7c:	4f 2c       	mov	r4, r15
    3b7e:	3d 2c       	mov	r3, r13
    3b80:	2c 2c       	mov	r2, r12
#endif  /* DEBUG_DTMF */
			}

			if(y >= 0)
			{
				for(int i = 0; i < 4; i++)
    3b82:	0f 5f       	subi	r16, 0xFF	; 255
    3b84:	1f 4f       	sbci	r17, 0xFF	; 255
    3b86:	04 30       	cpi	r16, 0x04	; 4
    3b88:	11 05       	cpc	r17, r1
    3b8a:	59 f6       	brne	.-106    	; 0x3b22 <_Z4loopv+0x378>
							lb_send_string(g_tempStr,TRUE);
						}
#endif  /* DEBUG_DTMF */
				}

				if(x >= 0)
    3b8c:	77 20       	and	r7, r7
    3b8e:	0c f4       	brge	.+2      	; 0x3b92 <_Z4loopv+0x3e8>
    3b90:	88 c0       	rjmp	.+272    	; 0x3ca2 <_Z4loopv+0x4f8>
				{
					char newKey = key[4 * y + x];
    3b92:	c4 01       	movw	r24, r8
    3b94:	88 0f       	add	r24, r24
    3b96:	99 1f       	adc	r25, r25
    3b98:	88 0f       	add	r24, r24
    3b9a:	99 1f       	adc	r25, r25
    3b9c:	88 5a       	subi	r24, 0xA8	; 168
    3b9e:	9d 4f       	sbci	r25, 0xFD	; 253
    3ba0:	fc 01       	movw	r30, r24
    3ba2:	e6 0d       	add	r30, r6
    3ba4:	f7 1d       	adc	r31, r7
    3ba6:	10 81       	ld	r17, Z

					if(lastKey == newKey)
    3ba8:	80 91 79 04 	lds	r24, 0x0479	; 0x800479 <_ZZ4loopvE7lastKey>
    3bac:	18 13       	cpse	r17, r24
    3bae:	2e c0       	rjmp	.+92     	; 0x3c0c <_Z4loopv+0x462>
					{
						checkCount++;
    3bb0:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_ZZ4loopvE10checkCount>
    3bb4:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <_ZZ4loopvE10checkCount+0x1>
    3bb8:	01 96       	adiw	r24, 0x01	; 1
    3bba:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <_ZZ4loopvE10checkCount+0x1>
    3bbe:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_ZZ4loopvE10checkCount>

						if(checkCount == 3)
    3bc2:	03 97       	sbiw	r24, 0x03	; 3
    3bc4:	19 f5       	brne	.+70     	; 0x3c0c <_Z4loopv+0x462>
						{
							g_dtmf_detected = TRUE;
    3bc6:	81 e0       	ldi	r24, 0x01	; 1
    3bc8:	80 93 38 05 	sts	0x0538, r24	; 0x800538 <g_dtmf_detected>
							quietCount = 0;
    3bcc:	10 92 78 04 	sts	0x0478, r1	; 0x800478 <_ZZ4loopvE10quietCount+0x1>
    3bd0:	10 92 77 04 	sts	0x0477, r1	; 0x800477 <_ZZ4loopvE10quietCount>
							g_lastKey = newKey;
    3bd4:	10 93 03 05 	sts	0x0503, r17	; 0x800503 <g_lastKey>
							sprintf(g_tempStr,"\"%c\"\n",g_lastKey);
    3bd8:	1f 92       	push	r1
    3bda:	1f 93       	push	r17
    3bdc:	8e e0       	ldi	r24, 0x0E	; 14
    3bde:	92 e0       	ldi	r25, 0x02	; 2
    3be0:	9f 93       	push	r25
    3be2:	8f 93       	push	r24
    3be4:	82 ed       	ldi	r24, 0xD2	; 210
    3be6:	94 e0       	ldi	r25, 0x04	; 4
    3be8:	9f 93       	push	r25
    3bea:	8f 93       	push	r24
    3bec:	0e 94 5e 2a 	call	0x54bc	; 0x54bc <sprintf>
							lb_send_string(g_tempStr,TRUE);
    3bf0:	61 e0       	ldi	r22, 0x01	; 1
    3bf2:	82 ed       	ldi	r24, 0xD2	; 210
    3bf4:	94 e0       	ldi	r25, 0x04	; 4
    3bf6:	0e 94 30 07 	call	0xe60	; 0xe60 <_Z14lb_send_stringPch>

							processKey(newKey);
    3bfa:	81 2f       	mov	r24, r17
    3bfc:	0e 94 b0 11 	call	0x2360	; 0x2360 <_Z10processKeyc>
    3c00:	0f 90       	pop	r0
    3c02:	0f 90       	pop	r0
    3c04:	0f 90       	pop	r0
    3c06:	0f 90       	pop	r0
    3c08:	0f 90       	pop	r0
    3c0a:	0f 90       	pop	r0
								}
#endif  /* DEBUG_DTMF */
						}
					}

					lastKey = newKey;
    3c0c:	10 93 79 04 	sts	0x0479, r17	; 0x800479 <_ZZ4loopvE7lastKey>
    3c10:	48 c0       	rjmp	.+144    	; 0x3ca2 <_Z4loopv+0x4f8>
				}
			}
			else    /* Quiet detected */
			{
				unsigned long delta = g_tick_count - g_last;
    3c12:	c0 90 fb 04 	lds	r12, 0x04FB	; 0x8004fb <g_tick_count>
    3c16:	d0 90 fc 04 	lds	r13, 0x04FC	; 0x8004fc <g_tick_count+0x1>
    3c1a:	e0 90 fd 04 	lds	r14, 0x04FD	; 0x8004fd <g_tick_count+0x2>
    3c1e:	f0 90 fe 04 	lds	r15, 0x04FE	; 0x8004fe <g_tick_count+0x3>
    3c22:	80 90 ff 04 	lds	r8, 0x04FF	; 0x8004ff <g_last>
    3c26:	90 90 00 05 	lds	r9, 0x0500	; 0x800500 <g_last+0x1>
    3c2a:	a0 90 01 05 	lds	r10, 0x0501	; 0x800501 <g_last+0x2>
    3c2e:	b0 90 02 05 	lds	r11, 0x0502	; 0x800502 <g_last+0x3>

				/* Quieting must be detected at least 3 times in less than 5 seconds before another key can be accepted */
				if(quietCount++ > 2)
    3c32:	80 91 77 04 	lds	r24, 0x0477	; 0x800477 <_ZZ4loopvE10quietCount>
    3c36:	90 91 78 04 	lds	r25, 0x0478	; 0x800478 <_ZZ4loopvE10quietCount+0x1>
    3c3a:	9c 01       	movw	r18, r24
    3c3c:	2f 5f       	subi	r18, 0xFF	; 255
    3c3e:	3f 4f       	sbci	r19, 0xFF	; 255
    3c40:	30 93 78 04 	sts	0x0478, r19	; 0x800478 <_ZZ4loopvE10quietCount+0x1>
    3c44:	20 93 77 04 	sts	0x0477, r18	; 0x800477 <_ZZ4loopvE10quietCount>
    3c48:	03 97       	sbiw	r24, 0x03	; 3
    3c4a:	5c f1       	brlt	.+86     	; 0x3ca2 <_Z4loopv+0x4f8>
				{
					g_dtmf_detected = FALSE;
    3c4c:	10 92 38 05 	sts	0x0538, r1	; 0x800538 <g_dtmf_detected>
					digitalWrite(PIN_LED1,OFF);
    3c50:	60 e0       	ldi	r22, 0x00	; 0
    3c52:	8d e0       	ldi	r24, 0x0D	; 13
    3c54:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>

					if(delta < 1500)
    3c58:	c8 18       	sub	r12, r8
    3c5a:	d9 08       	sbc	r13, r9
    3c5c:	ea 08       	sbc	r14, r10
    3c5e:	fb 08       	sbc	r15, r11
    3c60:	fc ed       	ldi	r31, 0xDC	; 220
    3c62:	cf 16       	cp	r12, r31
    3c64:	f5 e0       	ldi	r31, 0x05	; 5
    3c66:	df 06       	cpc	r13, r31
    3c68:	e1 04       	cpc	r14, r1
    3c6a:	f1 04       	cpc	r15, r1
    3c6c:	20 f4       	brcc	.+8      	; 0x3c76 <_Z4loopv+0x4cc>
					{
						checkCount = 0;
    3c6e:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <_ZZ4loopvE10checkCount+0x1>
    3c72:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <_ZZ4loopvE10checkCount>
					}

					quietCount = 0;
    3c76:	10 92 78 04 	sts	0x0478, r1	; 0x800478 <_ZZ4loopvE10quietCount+0x1>
    3c7a:	10 92 77 04 	sts	0x0477, r1	; 0x800477 <_ZZ4loopvE10quietCount>
					g_last = g_tick_count;
    3c7e:	80 91 fb 04 	lds	r24, 0x04FB	; 0x8004fb <g_tick_count>
    3c82:	90 91 fc 04 	lds	r25, 0x04FC	; 0x8004fc <g_tick_count+0x1>
    3c86:	a0 91 fd 04 	lds	r26, 0x04FD	; 0x8004fd <g_tick_count+0x2>
    3c8a:	b0 91 fe 04 	lds	r27, 0x04FE	; 0x8004fe <g_tick_count+0x3>
    3c8e:	80 93 ff 04 	sts	0x04FF, r24	; 0x8004ff <g_last>
    3c92:	90 93 00 05 	sts	0x0500, r25	; 0x800500 <g_last+0x1>
    3c96:	a0 93 01 05 	sts	0x0501, r26	; 0x800501 <g_last+0x2>
    3c9a:	b0 93 02 05 	sts	0x0502, r27	; 0x800502 <g_last+0x3>
					lastKey = '\0';
    3c9e:	10 92 79 04 	sts	0x0479, r1	; 0x800479 <_ZZ4loopvE7lastKey>
				}
			}

			ADCSRA |= (1 << ADIE);  /* enable interrupts when measurement complete */
    3ca2:	ea e7       	ldi	r30, 0x7A	; 122
    3ca4:	f0 e0       	ldi	r31, 0x00	; 0
    3ca6:	80 81       	ld	r24, Z
    3ca8:	88 60       	ori	r24, 0x08	; 8
    3caa:	80 83       	st	Z, r24
			ADCSRA |= (1 << ADSC);  /* start ADC measurements */
    3cac:	80 81       	ld	r24, Z
    3cae:	80 64       	ori	r24, 0x40	; 64
    3cb0:	80 83       	st	Z, r24
		}
#endif  /* !INIT_EEPROM_ONLY */

		BOOL hold_config_err = g_config_error;
    3cb2:	10 91 36 05 	lds	r17, 0x0536	; 0x800536 <g_config_error>
		if(!(g_config_error = clockConfigurationError()) && hold_config_err)
    3cb6:	0e 94 cc 09 	call	0x1398	; 0x1398 <_Z23clockConfigurationErrorv>
    3cba:	80 93 36 05 	sts	0x0536, r24	; 0x800536 <g_config_error>
    3cbe:	81 11       	cpse	r24, r1
    3cc0:	71 c0       	rjmp	.+226    	; 0x3da4 <_Z4loopv+0x5fa>
    3cc2:	11 11       	cpse	r17, r1
    3cc4:	6b c0       	rjmp	.+214    	; 0x3d9c <_Z4loopv+0x5f2>
    3cc6:	6e c0       	rjmp	.+220    	; 0x3da4 <_Z4loopv+0x5fa>
		}
		else
		{
			if(!id_set && (g_fox_seconds_into_interval == time_for_id)) /* Send the call sign at the right time */
			{
				g_code_throttle = THROTTLE_VAL_FROM_WPM(g_id_codespeed);
    3cc8:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <_ZL14g_id_codespeed>
    3ccc:	70 e0       	ldi	r23, 0x00	; 0
    3cce:	82 e8       	ldi	r24, 0x82	; 130
    3cd0:	9b e1       	ldi	r25, 0x1B	; 27
    3cd2:	0e 94 2e 28 	call	0x505c	; 0x505c <__divmodhi4>
    3cd6:	cb 01       	movw	r24, r22
    3cd8:	6a e0       	ldi	r22, 0x0A	; 10
    3cda:	70 e0       	ldi	r23, 0x00	; 0
    3cdc:	0e 94 2e 28 	call	0x505c	; 0x505c <__divmodhi4>
    3ce0:	66 0f       	add	r22, r22
    3ce2:	77 1f       	adc	r23, r23
    3ce4:	70 93 59 05 	sts	0x0559, r23	; 0x800559 <g_code_throttle+0x1>
    3ce8:	60 93 58 05 	sts	0x0558, r22	; 0x800558 <g_code_throttle>
				BOOL repeat = FALSE;
    3cec:	19 82       	std	Y+1, r1	; 0x01
				makeMorse(g_messages_text[STATION_ID],&repeat,NULL);
    3cee:	40 e0       	ldi	r20, 0x00	; 0
    3cf0:	50 e0       	ldi	r21, 0x00	; 0
    3cf2:	be 01       	movw	r22, r28
    3cf4:	6f 5f       	subi	r22, 0xFF	; 255
    3cf6:	7f 4f       	sbci	r23, 0xFF	; 255
    3cf8:	80 e2       	ldi	r24, 0x20	; 32
    3cfa:	95 e0       	ldi	r25, 0x05	; 5
    3cfc:	0e 94 00 21 	call	0x4200	; 0x4200 <_Z9makeMorsePcPhS0_>
				id_set = TRUE;
    3d00:	81 e0       	ldi	r24, 0x01	; 1
    3d02:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <_ZZ4loopvE6id_set>
				g_callsign_sent = FALSE;
    3d06:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <g_callsign_sent>
    3d0a:	6b ce       	rjmp	.-810    	; 0x39e2 <_Z4loopv+0x238>
			}
			else if((g_fox >= SPRINT_S1) && (g_fox <= SPRINT_DEMO))
    3d0c:	80 91 5c 05 	lds	r24, 0x055C	; 0x80055c <g_fox>
    3d10:	89 30       	cpi	r24, 0x09	; 9
    3d12:	08 f0       	brcs	.+2      	; 0x3d16 <_Z4loopv+0x56c>
    3d14:	57 ce       	rjmp	.-850    	; 0x39c4 <_Z4loopv+0x21a>
    3d16:	65 ce       	rjmp	.-822    	; 0x39e2 <_Z4loopv+0x238>
			{
				if(g_fox_transition)
    3d18:	80 91 43 05 	lds	r24, 0x0543	; 0x800543 <g_fox_transition>
    3d1c:	81 11       	cpse	r24, r1
    3d1e:	58 ce       	rjmp	.-848    	; 0x39d0 <_Z4loopv+0x226>
    3d20:	60 ce       	rjmp	.-832    	; 0x39e2 <_Z4loopv+0x238>

			if((g_fox == FOX_DEMO) || (g_fox == SPRINT_DEMO))
			{
				if((g_callsign_sent) && g_fox_transition)   /* Ensure we've begun the next minute before proceeding */
				{
					proceed = TRUE;
    3d22:	81 e0       	ldi	r24, 0x01	; 1
    3d24:	80 93 7a 04 	sts	0x047A, r24	; 0x80047a <_ZZ4loopvE7proceed>
    3d28:	94 ce       	rjmp	.-728    	; 0x3a52 <_Z4loopv+0x2a8>
					proceed = TRUE;
				}
			}
			else if((g_fox >= SPRINT_S1) && (g_fox <= SPRINT_F5) && g_callsign_sent)
			{
				g_on_the_air = FALSE;
    3d2a:	10 92 5b 05 	sts	0x055B, r1	; 0x80055b <g_on_the_air+0x1>
    3d2e:	10 92 5a 05 	sts	0x055A, r1	; 0x80055a <g_on_the_air>
    3d32:	8f ce       	rjmp	.-738    	; 0x3a52 <_Z4loopv+0x2a8>
			}
			else if((g_fox != g_fox_counter) && g_callsign_sent)    /* Turn off transmissions during minutes when this fox should be silent */
    3d34:	80 91 5c 05 	lds	r24, 0x055C	; 0x80055c <g_fox>
    3d38:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <g_fox_counter>
    3d3c:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <g_fox_counter+0x1>
    3d40:	90 e0       	ldi	r25, 0x00	; 0
    3d42:	82 17       	cp	r24, r18
    3d44:	93 07       	cpc	r25, r19
    3d46:	09 f0       	breq	.+2      	; 0x3d4a <_Z4loopv+0x5a0>
    3d48:	80 ce       	rjmp	.-768    	; 0x3a4a <_Z4loopv+0x2a0>
    3d4a:	83 ce       	rjmp	.-762    	; 0x3a52 <_Z4loopv+0x2a8>
			{
				g_on_the_air = FALSE;
    3d4c:	10 92 5b 05 	sts	0x055B, r1	; 0x80055b <g_on_the_air+0x1>
    3d50:	10 92 5a 05 	sts	0x055A, r1	; 0x80055a <g_on_the_air>
    3d54:	7e ce       	rjmp	.-772    	; 0x3a52 <_Z4loopv+0x2a8>
    3d56:	0f 2e       	mov	r0, r31
    3d58:	f8 e6       	ldi	r31, 0x68	; 104
    3d5a:	af 2e       	mov	r10, r31
    3d5c:	f2 e0       	ldi	r31, 0x02	; 2
    3d5e:	bf 2e       	mov	r11, r31
    3d60:	f0 2d       	mov	r31, r0

/*
 *  Here is the main loop
 * */
void loop()
{
    3d62:	00 e0       	ldi	r16, 0x00	; 0
    3d64:	10 e0       	ldi	r17, 0x00	; 0
    3d66:	88 24       	eor	r8, r8
    3d68:	8a 94       	dec	r8
    3d6a:	98 2c       	mov	r9, r8
    3d6c:	71 2c       	mov	r7, r1
    3d6e:	61 2c       	mov	r6, r1
    3d70:	51 2c       	mov	r5, r1
    3d72:	41 2c       	mov	r4, r1
    3d74:	a0 ce       	rjmp	.-704    	; 0x3ab6 <_Z4loopv+0x30c>
						lb_send_string(g_tempStr,TRUE);
					}
#endif  /* DEBUG_DTMF */
			}

			if(y >= 0)
    3d76:	99 20       	and	r9, r9
    3d78:	0c f4       	brge	.+2      	; 0x3d7c <_Z4loopv+0x5d2>
    3d7a:	4b cf       	rjmp	.-362    	; 0x3c12 <_Z4loopv+0x468>
    3d7c:	0f 2e       	mov	r0, r31
    3d7e:	f8 e7       	ldi	r31, 0x78	; 120
    3d80:	af 2e       	mov	r10, r31
    3d82:	f2 e0       	ldi	r31, 0x02	; 2
    3d84:	bf 2e       	mov	r11, r31
    3d86:	f0 2d       	mov	r31, r0
    3d88:	00 e0       	ldi	r16, 0x00	; 0
    3d8a:	10 e0       	ldi	r17, 0x00	; 0
    3d8c:	66 24       	eor	r6, r6
    3d8e:	6a 94       	dec	r6
    3d90:	76 2c       	mov	r7, r6
    3d92:	51 2c       	mov	r5, r1
    3d94:	41 2c       	mov	r4, r1
    3d96:	31 2c       	mov	r3, r1
    3d98:	21 2c       	mov	r2, r1
    3d9a:	c3 ce       	rjmp	.-634    	; 0x3b22 <_Z4loopv+0x378>
#endif  /* !INIT_EEPROM_ONLY */

		BOOL hold_config_err = g_config_error;
		if(!(g_config_error = clockConfigurationError()) && hold_config_err)
		{
			digitalWrite(PIN_LED2,OFF); /* ensure LED is off */
    3d9c:	60 e0       	ldi	r22, 0x00	; 0
    3d9e:	87 e0       	ldi	r24, 0x07	; 7
    3da0:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>
		}
}
    3da4:	0f 90       	pop	r0
    3da6:	df 91       	pop	r29
    3da8:	cf 91       	pop	r28
    3daa:	1f 91       	pop	r17
    3dac:	0f 91       	pop	r16
    3dae:	ff 90       	pop	r15
    3db0:	ef 90       	pop	r14
    3db2:	df 90       	pop	r13
    3db4:	cf 90       	pop	r12
    3db6:	bf 90       	pop	r11
    3db8:	af 90       	pop	r10
    3dba:	9f 90       	pop	r9
    3dbc:	8f 90       	pop	r8
    3dbe:	7f 90       	pop	r7
    3dc0:	6f 90       	pop	r6
    3dc2:	5f 90       	pop	r5
    3dc4:	4f 90       	pop	r4
    3dc6:	3f 90       	pop	r3
    3dc8:	2f 90       	pop	r2
    3dca:	08 95       	ret

00003dcc <main>:
#else
	void setup()
#endif  /* COMPILE_FOR_ATMELSTUDIO7 */
{
	/* set active pins */
	pinMode(PIN_LED1, OUTPUT);                                                                                                                                                                                              /* The amber LED: This led blinks when off cycle and blinks with code when on cycle. */
    3dcc:	61 e0       	ldi	r22, 0x01	; 1
    3dce:	8d e0       	ldi	r24, 0x0D	; 13
    3dd0:	0e 94 41 01 	call	0x282	; 0x282 <_Z7pinModehh>
	digitalWrite(PIN_LED1, OFF);
    3dd4:	60 e0       	ldi	r22, 0x00	; 0
    3dd6:	8d e0       	ldi	r24, 0x0D	; 13
    3dd8:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>

	pinMode(PIN_LED2, OUTPUT);
    3ddc:	61 e0       	ldi	r22, 0x01	; 1
    3dde:	87 e0       	ldi	r24, 0x07	; 7
    3de0:	0e 94 41 01 	call	0x282	; 0x282 <_Z7pinModehh>
	digitalWrite(PIN_LED2, OFF);
    3de4:	60 e0       	ldi	r22, 0x00	; 0
    3de6:	87 e0       	ldi	r24, 0x07	; 7
    3de8:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>

	pinMode(PIN_CW_KEY_LOGIC, OUTPUT);  /* This pin is used to control the KEY line to the transmitter only active on cycle. */
    3dec:	61 e0       	ldi	r22, 0x01	; 1
    3dee:	8a e0       	ldi	r24, 0x0A	; 10
    3df0:	0e 94 41 01 	call	0x282	; 0x282 <_Z7pinModehh>
	digitalWrite(PIN_CW_KEY_LOGIC, OFF);
    3df4:	60 e0       	ldi	r22, 0x00	; 0
    3df6:	8a e0       	ldi	r24, 0x0A	; 10
    3df8:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>

	pinMode(PIN_CW_TONE_LOGIC, OUTPUT);
    3dfc:	61 e0       	ldi	r22, 0x01	; 1
    3dfe:	89 e0       	ldi	r24, 0x09	; 9
    3e00:	0e 94 41 01 	call	0x282	; 0x282 <_Z7pinModehh>
	digitalWrite(PIN_CW_TONE_LOGIC, OFF);
    3e04:	60 e0       	ldi	r22, 0x00	; 0
    3e06:	89 e0       	ldi	r24, 0x09	; 9
    3e08:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>

	pinMode(PIN_PTT_LOGIC, OUTPUT);
    3e0c:	61 e0       	ldi	r22, 0x01	; 1
    3e0e:	88 e0       	ldi	r24, 0x08	; 8
    3e10:	0e 94 41 01 	call	0x282	; 0x282 <_Z7pinModehh>
	digitalWrite(PIN_PTT_LOGIC, OFF);
    3e14:	60 e0       	ldi	r22, 0x00	; 0
    3e16:	88 e0       	ldi	r24, 0x08	; 8
    3e18:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>

	pinMode(PIN_CW_KEY_LOGIC, OUTPUT);
    3e1c:	61 e0       	ldi	r22, 0x01	; 1
    3e1e:	8a e0       	ldi	r24, 0x0A	; 10
    3e20:	0e 94 41 01 	call	0x282	; 0x282 <_Z7pinModehh>
	digitalWrite(PIN_CW_KEY_LOGIC, OFF);
    3e24:	60 e0       	ldi	r22, 0x00	; 0
    3e26:	8a e0       	ldi	r24, 0x0A	; 10
    3e28:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>

	pinMode(PIN_AUDIO_INPUT, INPUT);    /* Receiver Audio sampling */
    3e2c:	60 e0       	ldi	r22, 0x00	; 0
    3e2e:	84 e1       	ldi	r24, 0x14	; 20
    3e30:	0e 94 41 01 	call	0x282	; 0x282 <_Z7pinModehh>
	pinMode(PIN_BATTERY_LEVEL, INPUT);  /* Battery voltage level */
    3e34:	60 e0       	ldi	r22, 0x00	; 0
    3e36:	85 e1       	ldi	r24, 0x15	; 21
    3e38:	0e 94 41 01 	call	0x282	; 0x282 <_Z7pinModehh>

	pinMode(PIN_MISO, INPUT_PULLUP);
    3e3c:	63 e0       	ldi	r22, 0x03	; 3
    3e3e:	8c e0       	ldi	r24, 0x0C	; 12
    3e40:	0e 94 41 01 	call	0x282	; 0x282 <_Z7pinModehh>
	pinMode(PIN_MOSI, OUTPUT);
    3e44:	61 e0       	ldi	r22, 0x01	; 1
    3e46:	8b e0       	ldi	r24, 0x0B	; 11
    3e48:	0e 94 41 01 	call	0x282	; 0x282 <_Z7pinModehh>
	digitalWrite(PIN_MOSI, OFF);
    3e4c:	60 e0       	ldi	r22, 0x00	; 0
    3e4e:	8b e0       	ldi	r24, 0x0B	; 11
    3e50:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12digitalWritehh>

	pinMode(PIN_SYNC, INPUT_PULLUP);
    3e54:	63 e0       	ldi	r22, 0x03	; 3
    3e56:	84 e0       	ldi	r24, 0x04	; 4
    3e58:	0e 94 41 01 	call	0x282	; 0x282 <_Z7pinModehh>

	pinMode(PIN_D0, OUTPUT);    /* Also RXD */
    3e5c:	61 e0       	ldi	r22, 0x01	; 1
    3e5e:	8e e0       	ldi	r24, 0x0E	; 14
    3e60:	0e 94 41 01 	call	0x282	; 0x282 <_Z7pinModehh>
	pinMode(PIN_D1, OUTPUT);    /* Also TXD */
    3e64:	61 e0       	ldi	r22, 0x01	; 1
    3e66:	8f e0       	ldi	r24, 0x0F	; 15
    3e68:	0e 94 41 01 	call	0x282	; 0x282 <_Z7pinModehh>
	pinMode(PIN_D2, OUTPUT);
    3e6c:	61 e0       	ldi	r22, 0x01	; 1
    3e6e:	80 e1       	ldi	r24, 0x10	; 16
    3e70:	0e 94 41 01 	call	0x282	; 0x282 <_Z7pinModehh>
	pinMode(PIN_D3, OUTPUT);
    3e74:	61 e0       	ldi	r22, 0x01	; 1
    3e76:	81 e1       	ldi	r24, 0x11	; 17
    3e78:	0e 94 41 01 	call	0x282	; 0x282 <_Z7pinModehh>
	pinMode(PIN_D5, OUTPUT);
    3e7c:	61 e0       	ldi	r22, 0x01	; 1
    3e7e:	81 e0       	ldi	r24, 0x01	; 1
    3e80:	0e 94 41 01 	call	0x282	; 0x282 <_Z7pinModehh>

	/* Set unused pins as inputs pulled high */
	pinMode(A4, INPUT_PULLUP);
    3e84:	63 e0       	ldi	r22, 0x03	; 3
    3e86:	82 e1       	ldi	r24, 0x12	; 18
    3e88:	0e 94 41 01 	call	0x282	; 0x282 <_Z7pinModehh>
	pinMode(A5, INPUT_PULLUP);
    3e8c:	63 e0       	ldi	r22, 0x03	; 3
    3e8e:	83 e1       	ldi	r24, 0x13	; 19
    3e90:	0e 94 41 01 	call	0x282	; 0x282 <_Z7pinModehh>

#if INIT_EEPROM_ONLY
		initializeEEPROMVars(TRUE);     /* Must happen after pins are configure due to I2C access */
#else
		initializeEEPROMVars(FALSE);    /* Must happen after pins are configure due to I2C access */
    3e94:	80 e0       	ldi	r24, 0x00	; 0
    3e96:	0e 94 17 0c 	call	0x182e	; 0x182e <_Z20initializeEEPROMVarsh>
		setUpAudioSampling(true);
    3e9a:	81 e0       	ldi	r24, 0x01	; 1
    3e9c:	0e 94 8c 13 	call	0x2718	; 0x2718 <_Z18setUpAudioSamplingh>
#endif

	EICRA  |= (1 << ISC01); /* Configure INT0 falling edge for RTC 1-second interrupts */
    3ea0:	e9 e6       	ldi	r30, 0x69	; 105
    3ea2:	f0 e0       	ldi	r31, 0x00	; 0
    3ea4:	80 81       	ld	r24, Z
    3ea6:	82 60       	ori	r24, 0x02	; 2
    3ea8:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0);   /* Enable INT0 interrupts */
    3eaa:	e8 9a       	sbi	0x1d, 0	; 29

	/**
	 * TIMER2 is for periodic interrupts to drive Morse code generation */
	/* Reset control registers */
	TCCR2A = 0;
    3eac:	a0 eb       	ldi	r26, 0xB0	; 176
    3eae:	b0 e0       	ldi	r27, 0x00	; 0
    3eb0:	1c 92       	st	X, r1
	TCCR2B = 0;
    3eb2:	e1 eb       	ldi	r30, 0xB1	; 177
    3eb4:	f0 e0       	ldi	r31, 0x00	; 0
    3eb6:	10 82       	st	Z, r1
	TCCR2A |= (1 << WGM21);                             /* set Clear Timer on Compare Match (CTC) mode with OCR2A setting the top */
    3eb8:	8c 91       	ld	r24, X
    3eba:	82 60       	ori	r24, 0x02	; 2
    3ebc:	8c 93       	st	X, r24
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);  /* 1024 Prescaler */
    3ebe:	80 81       	ld	r24, Z
    3ec0:	87 60       	ori	r24, 0x07	; 7
    3ec2:	80 83       	st	Z, r24

	OCR2A = 0x0C;                                       /* set frequency to ~300 Hz (0x0c) */
    3ec4:	8c e0       	ldi	r24, 0x0C	; 12
    3ec6:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	OCR2B = 0x00;
    3eca:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
	/* Use system clock for Timer/Counter2 */
	ASSR &= ~(1 << AS2);
    3ece:	e6 eb       	ldi	r30, 0xB6	; 182
    3ed0:	f0 e0       	ldi	r31, 0x00	; 0
    3ed2:	80 81       	ld	r24, Z
    3ed4:	8f 7d       	andi	r24, 0xDF	; 223
    3ed6:	80 83       	st	Z, r24
	/* Reset Timer/Counter2 Interrupt Mask Register */
	TIMSK2 = 0;
    3ed8:	e0 e7       	ldi	r30, 0x70	; 112
    3eda:	f0 e0       	ldi	r31, 0x00	; 0
    3edc:	10 82       	st	Z, r1
	TIMSK2 |= (1 << OCIE2B);    /* Output Compare Match B Interrupt Enable */
    3ede:	80 81       	ld	r24, Z
    3ee0:	84 60       	ori	r24, 0x04	; 4
    3ee2:	80 83       	st	Z, r24

	/* Timer 0 is for audio Start tone generation and control
	 * Note: Do not use millis() or DELAY() after TIMER0 has been reconfigured here! */
	TCCR0A = 0x00;
    3ee4:	14 bc       	out	0x24, r1	; 36
	TCCR0A |= (1 << WGM01);     /* Set CTC mode */
    3ee6:	84 b5       	in	r24, 0x24	; 36
    3ee8:	82 60       	ori	r24, 0x02	; 2
    3eea:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0x00;
    3eec:	15 bc       	out	0x25, r1	; 37
	TCCR0B |= (1 << CS02);      /* Prescale 256 */
    3eee:	85 b5       	in	r24, 0x25	; 37
    3ef0:	84 60       	ori	r24, 0x04	; 4
    3ef2:	85 bd       	out	0x25, r24	; 37
	OCR0A = DEFAULT_TONE_FREQUENCY;
    3ef4:	8f e2       	ldi	r24, 0x2F	; 47
    3ef6:	87 bd       	out	0x27, r24	; 39
	TIMSK0 = 0x00;
    3ef8:	ee e6       	ldi	r30, 0x6E	; 110
    3efa:	f0 e0       	ldi	r31, 0x00	; 0
    3efc:	10 82       	st	Z, r1
	TIMSK0 |= (1 << OCIE0A);
    3efe:	80 81       	ld	r24, Z
    3f00:	82 60       	ori	r24, 0x02	; 2
    3f02:	80 83       	st	Z, r24

	/* Sync button pin change interrupt */
	PCMSK2 = 0x00;
    3f04:	ed e6       	ldi	r30, 0x6D	; 109
    3f06:	f0 e0       	ldi	r31, 0x00	; 0
    3f08:	10 82       	st	Z, r1
	PCMSK2 = (1 << PCINT20);    /* Enable PCINT20 */
    3f0a:	80 e1       	ldi	r24, 0x10	; 16
    3f0c:	80 83       	st	Z, r24
	PCICR = 0x00;
    3f0e:	e8 e6       	ldi	r30, 0x68	; 104
    3f10:	f0 e0       	ldi	r31, 0x00	; 0
    3f12:	10 82       	st	Z, r1
	PCICR = (1 << PCIE2);       /* Enable pin change interrupt 2 */
    3f14:	84 e0       	ldi	r24, 0x04	; 4
    3f16:	80 83       	st	Z, r24
	sei();                                                                                  /* Enable interrupts */
    3f18:	78 94       	sei

	linkbus_init(BAUD);                                                                     /* Start the Link Bus serial comms */
    3f1a:	60 e0       	ldi	r22, 0x00	; 0
    3f1c:	71 ee       	ldi	r23, 0xE1	; 225
    3f1e:	80 e0       	ldi	r24, 0x00	; 0
    3f20:	90 e0       	ldi	r25, 0x00	; 0
    3f22:	0e 94 b8 06 	call	0xd70	; 0xd70 <_Z12linkbus_initm>

#if !INIT_EEPROM_ONLY
		uint8_t result = rv3028_1s_sqw();
    3f26:	0e 94 89 24 	call	0x4912	; 0x4912 <_Z13rv3028_1s_sqwv>
    3f2a:	c8 2f       	mov	r28, r24
#else
		rv3028_1s_sqw();
#endif  /* !INIT_EEPROM_ONLY */

	g_current_epoch = rv3028_get_epoch(NULL, NULL);
    3f2c:	60 e0       	ldi	r22, 0x00	; 0
    3f2e:	70 e0       	ldi	r23, 0x00	; 0
    3f30:	80 e0       	ldi	r24, 0x00	; 0
    3f32:	90 e0       	ldi	r25, 0x00	; 0
    3f34:	0e 94 4a 22 	call	0x4494	; 0x4494 <_Z16rv3028_get_epochPbPc>
    3f38:	60 93 52 05 	sts	0x0552, r22	; 0x800552 <g_current_epoch>
    3f3c:	70 93 53 05 	sts	0x0553, r23	; 0x800553 <g_current_epoch+0x1>
    3f40:	80 93 54 05 	sts	0x0554, r24	; 0x800554 <g_current_epoch+0x2>
    3f44:	90 93 55 05 	sts	0x0555, r25	; 0x800555 <g_current_epoch+0x3>

#if !INIT_EEPROM_ONLY
		lb_send_Help();
    3f48:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <_Z12lb_send_Helpv>

		if(result & (1 << RTC_STATUS_I2C_ERROR))
    3f4c:	cc 23       	and	r28, r28
    3f4e:	54 f4       	brge	.+20     	; 0x3f64 <main+0x198>
		{
			sprintf(g_tempStr, "Err 1\n");
    3f50:	87 e0       	ldi	r24, 0x07	; 7
    3f52:	e4 e1       	ldi	r30, 0x14	; 20
    3f54:	f2 e0       	ldi	r31, 0x02	; 2
    3f56:	a2 ed       	ldi	r26, 0xD2	; 210
    3f58:	b4 e0       	ldi	r27, 0x04	; 4
    3f5a:	01 90       	ld	r0, Z+
    3f5c:	0d 92       	st	X+, r0
    3f5e:	8a 95       	dec	r24
    3f60:	e1 f7       	brne	.-8      	; 0x3f5a <main+0x18e>
    3f62:	23 c0       	rjmp	.+70     	; 0x3faa <main+0x1de>
		}
		else if(result & (1 << RTC_STATUS_CLOCK_CORRUPT))   /* Power off occurred with no backup power */
    3f64:	c0 ff       	sbrs	r28, 0
    3f66:	0a c0       	rjmp	.+20     	; 0x3f7c <main+0x1b0>
		{
			sprintf(g_tempStr, "Err 2\n");
    3f68:	87 e0       	ldi	r24, 0x07	; 7
    3f6a:	eb e1       	ldi	r30, 0x1B	; 27
    3f6c:	f2 e0       	ldi	r31, 0x02	; 2
    3f6e:	a2 ed       	ldi	r26, 0xD2	; 210
    3f70:	b4 e0       	ldi	r27, 0x04	; 4
    3f72:	01 90       	ld	r0, Z+
    3f74:	0d 92       	st	X+, r0
    3f76:	8a 95       	dec	r24
    3f78:	e1 f7       	brne	.-8      	; 0x3f72 <main+0x1a6>
    3f7a:	17 c0       	rjmp	.+46     	; 0x3faa <main+0x1de>
		}
		else if(result & (1 << RTC_STATUS_EVF_OCCURRED))
    3f7c:	c1 ff       	sbrs	r28, 1
    3f7e:	0a c0       	rjmp	.+20     	; 0x3f94 <main+0x1c8>
		{
			sprintf(g_tempStr, "Err 3\n");
    3f80:	87 e0       	ldi	r24, 0x07	; 7
    3f82:	e2 e2       	ldi	r30, 0x22	; 34
    3f84:	f2 e0       	ldi	r31, 0x02	; 2
    3f86:	a2 ed       	ldi	r26, 0xD2	; 210
    3f88:	b4 e0       	ldi	r27, 0x04	; 4
    3f8a:	01 90       	ld	r0, Z+
    3f8c:	0d 92       	st	X+, r0
    3f8e:	8a 95       	dec	r24
    3f90:	e1 f7       	brne	.-8      	; 0x3f8a <main+0x1be>
    3f92:	0b c0       	rjmp	.+22     	; 0x3faa <main+0x1de>
		}
		else if(result & (1 << RTC_STATUS_BACKUP_SWITCHOVER_OCCURRED))
    3f94:	c5 ff       	sbrs	r28, 5
    3f96:	09 c0       	rjmp	.+18     	; 0x3faa <main+0x1de>
		{
			sprintf(g_tempStr, "RTC OK\n");
    3f98:	88 e0       	ldi	r24, 0x08	; 8
    3f9a:	e9 e2       	ldi	r30, 0x29	; 41
    3f9c:	f2 e0       	ldi	r31, 0x02	; 2
    3f9e:	a2 ed       	ldi	r26, 0xD2	; 210
    3fa0:	b4 e0       	ldi	r27, 0x04	; 4
    3fa2:	01 90       	ld	r0, Z+
    3fa4:	0d 92       	st	X+, r0
    3fa6:	8a 95       	dec	r24
    3fa8:	e1 f7       	brne	.-8      	; 0x3fa2 <main+0x1d6>
		}

		if(strlen(g_tempStr))
    3faa:	80 91 d2 04 	lds	r24, 0x04D2	; 0x8004d2 <g_tempStr>
    3fae:	88 23       	and	r24, r24
    3fb0:	29 f0       	breq	.+10     	; 0x3fbc <main+0x1f0>
		{
			lb_send_string(g_tempStr, TRUE);
    3fb2:	61 e0       	ldi	r22, 0x01	; 1
    3fb4:	82 ed       	ldi	r24, 0xD2	; 210
    3fb6:	94 e0       	ldi	r25, 0x04	; 4
    3fb8:	0e 94 30 07 	call	0xe60	; 0xe60 <_Z14lb_send_stringPch>
		}

		reportConfigErrors();
    3fbc:	0e 94 03 14 	call	0x2806	; 0x2806 <_Z18reportConfigErrorsv>
		lb_send_NewPrompt();
    3fc0:	0e 94 1c 07 	call	0xe38	; 0xe38 <_Z17lb_send_NewPromptv>

#endif  /* #if INIT_EEPROM_ONLY */

	setupForFox(NULL);
    3fc4:	80 e0       	ldi	r24, 0x00	; 0
    3fc6:	90 e0       	ldi	r25, 0x00	; 0
    3fc8:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <_Z11setupForFoxP5Fox_t>
	g_use_rtc_to_start = !clockConfigurationError() && g_transmissions_disabled;
    3fcc:	0e 94 cc 09 	call	0x1398	; 0x1398 <_Z23clockConfigurationErrorv>
    3fd0:	81 11       	cpse	r24, r1
    3fd2:	07 c0       	rjmp	.+14     	; 0x3fe2 <main+0x216>
    3fd4:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <g_transmissions_disabled>
    3fd8:	81 e0       	ldi	r24, 0x01	; 1
    3fda:	91 11       	cpse	r25, r1
    3fdc:	03 c0       	rjmp	.+6      	; 0x3fe4 <main+0x218>
    3fde:	80 e0       	ldi	r24, 0x00	; 0
    3fe0:	01 c0       	rjmp	.+2      	; 0x3fe4 <main+0x218>
    3fe2:	80 e0       	ldi	r24, 0x00	; 0
    3fe4:	80 93 35 05 	sts	0x0535, r24	; 0x800535 <g_use_rtc_to_start>

#if COMPILE_FOR_ATMELSTUDIO7
		while(1)
		{
			loop();
    3fe8:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <_Z4loopv>
    3fec:	fd cf       	rjmp	.-6      	; 0x3fe8 <main+0x21c>

00003fee <_GLOBAL__sub_I_g_seconds_since_sync>:
		lb_send_NewLine();
		g_tempStr[0] = '\0';
	}

	return( failure);
}
    3fee:	0f 93       	push	r16
    3ff0:	1f 93       	push	r17
char g_lastKey = '\0';
unsigned long g_last = 0;
unsigned long g_tick_count = 0;

#if !INIT_EEPROM_ONLY
Goertzel g_goertzel(N, sampling_freq);
    3ff2:	00 e0       	ldi	r16, 0x00	; 0
    3ff4:	18 e7       	ldi	r17, 0x78	; 120
    3ff6:	26 e9       	ldi	r18, 0x96	; 150
    3ff8:	36 e4       	ldi	r19, 0x46	; 70
    3ffa:	40 e0       	ldi	r20, 0x00	; 0
    3ffc:	50 e0       	ldi	r21, 0x00	; 0
    3ffe:	69 e4       	ldi	r22, 0x49	; 73
    4000:	73 e4       	ldi	r23, 0x43	; 67
    4002:	8a ef       	ldi	r24, 0xFA	; 250
    4004:	94 e0       	ldi	r25, 0x04	; 4
    4006:	0e 94 a0 02 	call	0x540	; 0x540 <_ZN8GoertzelC1Eff>
		lb_send_NewLine();
		g_tempStr[0] = '\0';
	}

	return( failure);
}
    400a:	1f 91       	pop	r17
    400c:	0f 91       	pop	r16
    400e:	08 95       	ret

00004010 <_GLOBAL__sub_D_g_seconds_since_sync>:
char g_lastKey = '\0';
unsigned long g_last = 0;
unsigned long g_tick_count = 0;

#if !INIT_EEPROM_ONLY
Goertzel g_goertzel(N, sampling_freq);
    4010:	8a ef       	ldi	r24, 0xFA	; 250
    4012:	94 e0       	ldi	r25, 0x04	; 4
    4014:	0e 94 ee 02 	call	0x5dc	; 0x5dc <_ZN8GoertzelD1Ev>
    4018:	08 95       	ret

0000401a <_Z12getMorseCharc>:
 */
MorseCharacter getMorseChar(char c)
{
	MorseCharacter morse;

	switch( c )
    401a:	90 e0       	ldi	r25, 0x00	; 0
    401c:	fc 01       	movw	r30, r24
    401e:	b0 97       	sbiw	r30, 0x20	; 32
    4020:	ed 35       	cpi	r30, 0x5D	; 93
    4022:	f1 05       	cpc	r31, r1
    4024:	08 f0       	brcs	.+2      	; 0x4028 <_Z12getMorseCharc+0xe>
    4026:	e4 c0       	rjmp	.+456    	; 0x41f0 <_Z12getMorseCharc+0x1d6>
    4028:	e8 57       	subi	r30, 0x78	; 120
    402a:	ff 4f       	sbci	r31, 0xFF	; 255
    402c:	0c 94 83 28 	jmp	0x5106	; 0x5106 <__tablejump2__>

		case 'B':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
    4030:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'B':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 4;
    4032:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'B':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    4034:	61 e0       	ldi	r22, 0x01	; 1
    4036:	08 95       	ret

		case 'C':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
    4038:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'C':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
			morse.lengthInSymbols = 4;
    403a:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'C':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
    403c:	65 e0       	ldi	r22, 0x05	; 5
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
		}
		break;
    403e:	08 95       	ret

		case 'D':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
    4040:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'D':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 3;
    4042:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'D':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    4044:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
		}
		break;
    4046:	08 95       	ret

		case 'E':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 1;
			morse.lengthInElements = 1;
    4048:	81 e0       	ldi	r24, 0x01	; 1
		break;

		case 'E':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 1;
    404a:	71 e0       	ldi	r23, 0x01	; 1
		}
		break;

		case 'E':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    404c:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 1;
			morse.lengthInElements = 1;
		}
		break;
    404e:	08 95       	ret

		case 'F':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
    4050:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'F':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
			morse.lengthInSymbols = 4;
    4052:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'F':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
    4054:	64 e0       	ldi	r22, 0x04	; 4
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
		}
		break;
    4056:	08 95       	ret

		case 'G':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
    4058:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'G':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 3;
    405a:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'G':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    405c:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
		}
		break;
    405e:	08 95       	ret

		case 'H':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 7;
    4060:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'H':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 4;
    4062:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'H':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    4064:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 7;
		}
		break;
    4066:	08 95       	ret

		case 'I':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 3;
    4068:	83 e0       	ldi	r24, 0x03	; 3
		break;

		case 'I':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 2;
    406a:	72 e0       	ldi	r23, 0x02	; 2
		}
		break;

		case 'I':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    406c:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 3;
		}
		break;
    406e:	08 95       	ret

		case 'J':
		{
			morse.pattern = 0x0e;   /* 0000 1110; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
    4070:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case 'J':
		{
			morse.pattern = 0x0e;   /* 0000 1110; */
			morse.lengthInSymbols = 4;
    4072:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'J':
		{
			morse.pattern = 0x0e;   /* 0000 1110; */
    4074:	6e e0       	ldi	r22, 0x0E	; 14
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
		}
		break;
    4076:	08 95       	ret

		case 'K':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
    4078:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'K':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
			morse.lengthInSymbols = 3;
    407a:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'K':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
    407c:	65 e0       	ldi	r22, 0x05	; 5
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
		}
		break;
    407e:	08 95       	ret

		case 'L':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
    4080:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'L':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 4;
    4082:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'L':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    4084:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
		}
		break;
    4086:	08 95       	ret

		case 'M':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 7;
    4088:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'M':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 2;
    408a:	72 e0       	ldi	r23, 0x02	; 2
		}
		break;

		case 'M':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    408c:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 7;
		}
		break;
    408e:	08 95       	ret

		case 'N':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 5;
    4090:	85 e0       	ldi	r24, 0x05	; 5
		break;

		case 'N':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 2;
    4092:	72 e0       	ldi	r23, 0x02	; 2
		}
		break;

		case 'N':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    4094:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 5;
		}
		break;
    4096:	08 95       	ret

		case 'O':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 11;
    4098:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'O':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 3;
    409a:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'O':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    409c:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 11;
		}
		break;
    409e:	08 95       	ret

		case 'P':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
    40a0:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'P':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
			morse.lengthInSymbols = 4;
    40a2:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'P':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
    40a4:	66 e0       	ldi	r22, 0x06	; 6
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
		}
		break;
    40a6:	08 95       	ret

		case 'Q':
		{
			morse.pattern = 0x0b;   /* 0000 1011; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
    40a8:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case 'Q':
		{
			morse.pattern = 0x0b;   /* 0000 1011; */
			morse.lengthInSymbols = 4;
    40aa:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'Q':
		{
			morse.pattern = 0x0b;   /* 0000 1011; */
    40ac:	6b e0       	ldi	r22, 0x0B	; 11
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
		}
		break;
    40ae:	08 95       	ret

		case 'R':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
    40b0:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'R':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 3;
    40b2:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'R':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    40b4:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
		}
		break;
    40b6:	08 95       	ret

		case 'S':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 5;
    40b8:	85 e0       	ldi	r24, 0x05	; 5
		break;

		case 'S':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 3;
    40ba:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'S':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    40bc:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 5;
		}
		break;
    40be:	08 95       	ret

		case 'T':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 1;
			morse.lengthInElements = 3;
    40c0:	83 e0       	ldi	r24, 0x03	; 3
		break;

		case 'T':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 1;
    40c2:	71 e0       	ldi	r23, 0x01	; 1
		}
		break;

		case 'T':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    40c4:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 1;
			morse.lengthInElements = 3;
		}
		break;
    40c6:	08 95       	ret

		case 'U':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
    40c8:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'U':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
			morse.lengthInSymbols = 3;
    40ca:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'U':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
    40cc:	64 e0       	ldi	r22, 0x04	; 4
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
		}
		break;
    40ce:	08 95       	ret

		case 'V':
		{
			morse.pattern = 0x08;   /* 0000 1000; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
    40d0:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'V':
		{
			morse.pattern = 0x08;   /* 0000 1000; */
			morse.lengthInSymbols = 4;
    40d2:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'V':
		{
			morse.pattern = 0x08;   /* 0000 1000; */
    40d4:	68 e0       	ldi	r22, 0x08	; 8
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
		}
		break;
    40d6:	08 95       	ret

		case 'W':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
    40d8:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'W':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
			morse.lengthInSymbols = 3;
    40da:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'W':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
    40dc:	66 e0       	ldi	r22, 0x06	; 6
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
		}
		break;
    40de:	08 95       	ret

		case 'X':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
    40e0:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'X':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
			morse.lengthInSymbols = 4;
    40e2:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'X':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
    40e4:	69 e0       	ldi	r22, 0x09	; 9
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
		}
		break;
    40e6:	08 95       	ret

		case 'Y':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
    40e8:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case 'Y':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
			morse.lengthInSymbols = 4;
    40ea:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'Y':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
    40ec:	6d e0       	ldi	r22, 0x0D	; 13
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
		}
		break;
    40ee:	08 95       	ret

		case 'Z':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
    40f0:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'Z':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 4;
    40f2:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'Z':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    40f4:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
		}
		break;
    40f6:	08 95       	ret

		case '0':
		{
			morse.pattern = 0x1f;   /* 0001 1111; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 19;
    40f8:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case '0':
		{
			morse.pattern = 0x1f;   /* 0001 1111; */
			morse.lengthInSymbols = 5;
    40fa:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '0':
		{
			morse.pattern = 0x1f;   /* 0001 1111; */
    40fc:	6f e1       	ldi	r22, 0x1F	; 31
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 19;
		}
		break;
    40fe:	08 95       	ret

		case '1':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 17;
    4100:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '1':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
			morse.lengthInSymbols = 5;
    4102:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '1':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
    4104:	6e e1       	ldi	r22, 0x1E	; 30
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 17;
		}
		break;
    4106:	08 95       	ret

		case '2':
		{
			morse.pattern = 0x1c;   /* 0001 1100; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
    4108:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '2':
		{
			morse.pattern = 0x1c;   /* 0001 1100; */
			morse.lengthInSymbols = 5;
    410a:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '2':
		{
			morse.pattern = 0x1c;   /* 0001 1100; */
    410c:	6c e1       	ldi	r22, 0x1C	; 28
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
		}
		break;
    410e:	08 95       	ret

		case '3':
		{
			morse.pattern = 0x18;   /* 0001 1000; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    4110:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '3':
		{
			morse.pattern = 0x18;   /* 0001 1000; */
			morse.lengthInSymbols = 5;
    4112:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '3':
		{
			morse.pattern = 0x18;   /* 0001 1000; */
    4114:	68 e1       	ldi	r22, 0x18	; 24
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    4116:	08 95       	ret

		case '4':
		{
			morse.pattern = 0x10;   /* 0001 0000; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
    4118:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case '4':
		{
			morse.pattern = 0x10;   /* 0001 0000; */
			morse.lengthInSymbols = 5;
    411a:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '4':
		{
			morse.pattern = 0x10;   /* 0001 0000; */
    411c:	60 e1       	ldi	r22, 0x10	; 16
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
		}
		break;
    411e:	08 95       	ret

		case '5':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 9;
    4120:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case '5':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 5;
    4122:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '5':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    4124:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 9;
		}
		break;
    4126:	08 95       	ret

		case '6':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
    4128:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case '6':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 5;
    412a:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '6':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    412c:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
		}
		break;
    412e:	08 95       	ret

		case '7':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    4130:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '7':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 5;
    4132:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '7':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    4134:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    4136:	08 95       	ret

		case '8':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
    4138:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '8':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 5;
    413a:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '8':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    413c:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
		}
		break;
    413e:	08 95       	ret

		case '9':
		{
			morse.pattern = 0x0f;   /* 0000 1111; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 17;
    4140:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '9':
		{
			morse.pattern = 0x0f;   /* 0000 1111; */
			morse.lengthInSymbols = 5;
    4142:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '9':
		{
			morse.pattern = 0x0f;   /* 0000 1111; */
    4144:	6f e0       	ldi	r22, 0x0F	; 15
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 17;
		}
		break;
    4146:	08 95       	ret

		case '.':
		{
			morse.pattern = 0x2a;   /* 0010 1010; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
    4148:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '.':
		{
			morse.pattern = 0x2a;   /* 0010 1010; */
			morse.lengthInSymbols = 6;
    414a:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '.':
		{
			morse.pattern = 0x2a;   /* 0010 1010; */
    414c:	6a e2       	ldi	r22, 0x2A	; 42
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
		}
		break;
    414e:	08 95       	ret

		case ',':
		{
			morse.pattern = 0x33;   /* 0011 0011; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
    4150:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case ',':
		{
			morse.pattern = 0x33;   /* 0011 0011; */
			morse.lengthInSymbols = 6;
    4152:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case ',':
		{
			morse.pattern = 0x33;   /* 0011 0011; */
    4154:	63 e3       	ldi	r22, 0x33	; 51
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
		}
		break;
    4156:	08 95       	ret

		case '?':
		{
			morse.pattern = 0x0c;   /* 0000 1100; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
    4158:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '?':
		{
			morse.pattern = 0x0c;   /* 0000 1100; */
			morse.lengthInSymbols = 6;
    415a:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '?':
		{
			morse.pattern = 0x0c;   /* 0000 1100; */
    415c:	6c e0       	ldi	r22, 0x0C	; 12
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
		}
		break;
    415e:	08 95       	ret

		case '\'':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
    4160:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case '\'':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
			morse.lengthInSymbols = 6;
    4162:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '\'':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
    4164:	6e e1       	ldi	r22, 0x1E	; 30
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
		}
		break;
    4166:	08 95       	ret

		case '!':
		{
			morse.pattern = 0x35;   /* 0011 0101; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
    4168:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case '!':
		{
			morse.pattern = 0x35;   /* 0011 0101; */
			morse.lengthInSymbols = 6;
    416a:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '!':
		{
			morse.pattern = 0x35;   /* 0011 0101; */
    416c:	65 e3       	ldi	r22, 0x35	; 53
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
		}
		break;
    416e:	08 95       	ret

		case '/':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    4170:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '/':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
			morse.lengthInSymbols = 5;
    4172:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '/':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
    4174:	69 e0       	ldi	r22, 0x09	; 9
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    4176:	08 95       	ret

		case '(':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
    4178:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '(':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
			morse.lengthInSymbols = 5;
    417a:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '(':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
    417c:	6d e0       	ldi	r22, 0x0D	; 13
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
		}
		break;
    417e:	08 95       	ret

		case ')':
		{
			morse.pattern = 0x2d;   /* 0010 1101; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
    4180:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case ')':
		{
			morse.pattern = 0x2d;   /* 0010 1101; */
			morse.lengthInSymbols = 6;
    4182:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case ')':
		{
			morse.pattern = 0x2d;   /* 0010 1101; */
    4184:	6d e2       	ldi	r22, 0x2D	; 45
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
		}
		break;
    4186:	08 95       	ret

		case '&':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
    4188:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case '&':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 5;
    418a:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '&':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    418c:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
		}
		break;
    418e:	08 95       	ret

		case ':':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
    4190:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case ':':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 6;
    4192:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case ':':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    4194:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
		}
		break;
    4196:	08 95       	ret

		case ';':
		{
			morse.pattern = 0x15;   /* 0001 0101; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 12;
    4198:	8c e0       	ldi	r24, 0x0C	; 12
		break;

		case ';':
		{
			morse.pattern = 0x15;   /* 0001 0101; */
			morse.lengthInSymbols = 6;
    419a:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case ';':
		{
			morse.pattern = 0x15;   /* 0001 0101; */
    419c:	65 e1       	ldi	r22, 0x15	; 21
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 12;
		}
		break;
    419e:	08 95       	ret

		case '=':
		{
			morse.pattern = 0x11;   /* 0001 0001; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    41a0:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '=':
		{
			morse.pattern = 0x11;   /* 0001 0001; */
			morse.lengthInSymbols = 5;
    41a2:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '=':
		{
			morse.pattern = 0x11;   /* 0001 0001; */
    41a4:	61 e1       	ldi	r22, 0x11	; 17
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    41a6:	08 95       	ret

		case '+':
		{
			morse.pattern = 0x0a;   /* 0000 1010; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    41a8:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '+':
		{
			morse.pattern = 0x0a;   /* 0000 1010; */
			morse.lengthInSymbols = 5;
    41aa:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '+':
		{
			morse.pattern = 0x0a;   /* 0000 1010; */
    41ac:	6a e0       	ldi	r22, 0x0A	; 10
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    41ae:	08 95       	ret

		case '-':
		{
			morse.pattern = 0x21;   /* 0010 0001; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
    41b0:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '-':
		{
			morse.pattern = 0x21;   /* 0010 0001; */
			morse.lengthInSymbols = 6;
    41b2:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '-':
		{
			morse.pattern = 0x21;   /* 0010 0001; */
    41b4:	61 e2       	ldi	r22, 0x21	; 33
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
		}
		break;
    41b6:	08 95       	ret

		case '_':
		{
			morse.pattern = 0x2c;   /* 0010 1100; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
    41b8:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '_':
		{
			morse.pattern = 0x2c;   /* 0010 1100; */
			morse.lengthInSymbols = 6;
    41ba:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '_':
		{
			morse.pattern = 0x2c;   /* 0010 1100; */
    41bc:	6c e2       	ldi	r22, 0x2C	; 44
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
		}
		break;
    41be:	08 95       	ret

		case '"':
		{
			morse.pattern = 0x12;   /* 0001 0010; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
    41c0:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '"':
		{
			morse.pattern = 0x12;   /* 0001 0010; */
			morse.lengthInSymbols = 6;
    41c2:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '"':
		{
			morse.pattern = 0x12;   /* 0001 0010; */
    41c4:	62 e1       	ldi	r22, 0x12	; 18
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
		}
		break;
    41c6:	08 95       	ret

		case '$':
		{
			morse.pattern = 0x48;   /* 0100 1000; */
			morse.lengthInSymbols = 7;
			morse.lengthInElements = 17;
    41c8:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '$':
		{
			morse.pattern = 0x48;   /* 0100 1000; */
			morse.lengthInSymbols = 7;
    41ca:	77 e0       	ldi	r23, 0x07	; 7
		}
		break;

		case '$':
		{
			morse.pattern = 0x48;   /* 0100 1000; */
    41cc:	68 e4       	ldi	r22, 0x48	; 72
			morse.lengthInSymbols = 7;
			morse.lengthInElements = 17;
		}
		break;
    41ce:	08 95       	ret

		case '@':
		{
			morse.pattern = 0x16;   /* 0001 0110; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
    41d0:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '@':
		{
			morse.pattern = 0x16;   /* 0001 0110; */
			morse.lengthInSymbols = 6;
    41d2:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '@':
		{
			morse.pattern = 0x16;   /* 0001 0110; */
    41d4:	66 e1       	ldi	r22, 0x16	; 22
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
		}
		break;
    41d6:	08 95       	ret

		case '|':                       /* inter-word space */
		{ morse.pattern = 0xff;         /* 1000 0000; */
		  morse.lengthInSymbols = 7;
		  morse.lengthInElements = 4;   /* adjusted by -3 to account for inter-character space */
    41d8:	84 e0       	ldi	r24, 0x04	; 4
		}
		break;

		case '|':                       /* inter-word space */
		{ morse.pattern = 0xff;         /* 1000 0000; */
		  morse.lengthInSymbols = 7;
    41da:	77 e0       	ldi	r23, 0x07	; 7
			morse.lengthInElements = 17;
		}
		break;

		case '|':                       /* inter-word space */
		{ morse.pattern = 0xff;         /* 1000 0000; */
    41dc:	6f ef       	ldi	r22, 0xFF	; 255
		  morse.lengthInSymbols = 7;
		  morse.lengthInElements = 4;   /* adjusted by -3 to account for inter-character space */
		}
		break;
    41de:	08 95       	ret

		case ' ':                       /* inter-word space */
		{ morse.pattern = 0xfe;         /* 1000 0000; */
		  morse.lengthInSymbols = 7;
		  morse.lengthInElements = 7;   /* 4 + 3 (character space) = 7 */
    41e0:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;

		case ' ':                       /* inter-word space */
		{ morse.pattern = 0xfe;         /* 1000 0000; */
		  morse.lengthInSymbols = 7;
    41e2:	77 e0       	ldi	r23, 0x07	; 7
		  morse.lengthInElements = 4;   /* adjusted by -3 to account for inter-character space */
		}
		break;

		case ' ':                       /* inter-word space */
		{ morse.pattern = 0xfe;         /* 1000 0000; */
    41e4:	6e ef       	ldi	r22, 0xFE	; 254
		  morse.lengthInSymbols = 7;
		  morse.lengthInElements = 7;   /* 4 + 3 (character space) = 7 */
		}
		break;
    41e6:	08 95       	ret

		case '<':                       /* long keydown */
		{
			morse.pattern = 0x1f;       /* 0001 1111; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 19;
    41e8:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case '<':                       /* long keydown */
		{
			morse.pattern = 0x1f;       /* 0001 1111; */
			morse.lengthInSymbols = 5;
    41ea:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '<':                       /* long keydown */
		{
			morse.pattern = 0x1f;       /* 0001 1111; */
    41ec:	6f e1       	ldi	r22, 0x1F	; 31
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 19;
		}
		break;
    41ee:	08 95       	ret

		default:
		{
			morse.pattern = 0x0000; /* 0000 0000; */
			morse.lengthInSymbols = 0;
			morse.lengthInElements = 0;
    41f0:	80 e0       	ldi	r24, 0x00	; 0
		break;

		default:
		{
			morse.pattern = 0x0000; /* 0000 0000; */
			morse.lengthInSymbols = 0;
    41f2:	70 e0       	ldi	r23, 0x00	; 0
		}
		break;

		default:
		{
			morse.pattern = 0x0000; /* 0000 0000; */
    41f4:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 0;
			morse.lengthInElements = 0;
		}
		break;
    41f6:	08 95       	ret
	{
		case 'A':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 5;
    41f8:	85 e0       	ldi	r24, 0x05	; 5
	switch( c )
	{
		case 'A':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 2;
    41fa:	72 e0       	ldi	r23, 0x02	; 2

	switch( c )
	{
		case 'A':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    41fc:	62 e0       	ldi	r22, 0x02	; 2
		}
		break;
	}

	return( morse);
}
    41fe:	08 95       	ret

00004200 <_Z9makeMorsePcPhS0_>:
 *  Call this function with a NULL argument at intervals of 1 element of time to generate Morse code.
 *  Once loaded with a string each call to this function returns a BOOL indicating whether a CW carrier should be sent
 *  Pass in a pointer to a BOOL in the second and third arguments:
 */
BOOL makeMorse(char* s, BOOL* repeating, BOOL* finished)
{
    4200:	cf 93       	push	r28
    4202:	df 93       	push	r29
    4204:	ea 01       	movw	r28, r20
	static uint8_t addedSpace;      /* adds additional time to make an inter-character space */
	static BOOL completedString = FALSE;
	static BOOL carrierOn = FALSE;
	static BOOL holdKeyDown = FALSE;

	if(s)   /* load a new NULL-terminated string to send */
    4206:	00 97       	sbiw	r24, 0x00	; 0
    4208:	b1 f1       	breq	.+108    	; 0x4276 <_Z9makeMorsePcPhS0_+0x76>
	{
		holdKeyDown = FALSE;
    420a:	10 92 6c 05 	sts	0x056C, r1	; 0x80056c <_ZZ9makeMorsePcPhS0_E11holdKeyDown>

		if(repeating)
    420e:	61 15       	cp	r22, r1
    4210:	71 05       	cpc	r23, r1
    4212:	21 f0       	breq	.+8      	; 0x421c <_Z9makeMorsePcPhS0_+0x1c>
		{
			repeat = *repeating;
    4214:	db 01       	movw	r26, r22
    4216:	2c 91       	ld	r18, X
    4218:	20 93 22 01 	sts	0x0122, r18	; 0x800122 <_ZZ9makeMorsePcPhS0_E6repeat>
		}

		if(*s)
    421c:	fc 01       	movw	r30, r24
    421e:	20 81       	ld	r18, Z
    4220:	22 23       	and	r18, r18
    4222:	d9 f0       	breq	.+54     	; 0x425a <_Z9makeMorsePcPhS0_+0x5a>
		{
			str = s;
    4224:	90 93 6b 05 	sts	0x056B, r25	; 0x80056b <_ZZ9makeMorsePcPhS0_E3str+0x1>
    4228:	80 93 6a 05 	sts	0x056A, r24	; 0x80056a <_ZZ9makeMorsePcPhS0_E3str>
			c = ' ';
    422c:	80 e2       	ldi	r24, 0x20	; 32
    422e:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <_ZZ9makeMorsePcPhS0_E1c>
			morseInProgress = getMorseChar(*str);
    4232:	82 2f       	mov	r24, r18
    4234:	0e 94 0d 20 	call	0x401a	; 0x401a <_Z12getMorseCharc>
    4238:	60 93 67 05 	sts	0x0567, r22	; 0x800567 <_ZZ9makeMorsePcPhS0_E15morseInProgress>
    423c:	70 93 68 05 	sts	0x0568, r23	; 0x800568 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
    4240:	80 93 69 05 	sts	0x0569, r24	; 0x800569 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x2>
			charIndex = 0;
    4244:	10 92 66 05 	sts	0x0566, r1	; 0x800566 <_ZZ9makeMorsePcPhS0_E9charIndex>
			symbolIndex = 0;
    4248:	10 92 65 05 	sts	0x0565, r1	; 0x800565 <_ZZ9makeMorsePcPhS0_E11symbolIndex>
			elementIndex = 0;
    424c:	10 92 64 05 	sts	0x0564, r1	; 0x800564 <_ZZ9makeMorsePcPhS0_E12elementIndex>
			addedSpace = 0;
    4250:	10 92 63 05 	sts	0x0563, r1	; 0x800563 <_ZZ9makeMorsePcPhS0_E10addedSpace>
			completedString = FALSE;
    4254:	10 92 62 05 	sts	0x0562, r1	; 0x800562 <_ZZ9makeMorsePcPhS0_E15completedString>
    4258:	0a c0       	rjmp	.+20     	; 0x426e <_Z9makeMorsePcPhS0_+0x6e>
		}
		else    /* a zero-length string shuts down makeMorse */
		{
			str = NULL;
    425a:	10 92 6b 05 	sts	0x056B, r1	; 0x80056b <_ZZ9makeMorsePcPhS0_E3str+0x1>
    425e:	10 92 6a 05 	sts	0x056A, r1	; 0x80056a <_ZZ9makeMorsePcPhS0_E3str>
			completedString = TRUE;
    4262:	81 e0       	ldi	r24, 0x01	; 1
    4264:	80 93 62 05 	sts	0x0562, r24	; 0x800562 <_ZZ9makeMorsePcPhS0_E15completedString>
			if(finished)
    4268:	20 97       	sbiw	r28, 0x00	; 0
    426a:	09 f0       	breq	.+2      	; 0x426e <_Z9makeMorsePcPhS0_+0x6e>
			{
				*finished = TRUE;
    426c:	88 83       	st	Y, r24
			}
		}

		carrierOn = OFF;
    426e:	10 92 61 05 	sts	0x0561, r1	; 0x800561 <_ZZ9makeMorsePcPhS0_E9carrierOn>
		return( OFF);
    4272:	80 e0       	ldi	r24, 0x00	; 0
    4274:	c0 c0       	rjmp	.+384    	; 0x43f6 <_Z9makeMorsePcPhS0_+0x1f6>
	}
	else if(str)
    4276:	e0 91 6a 05 	lds	r30, 0x056A	; 0x80056a <_ZZ9makeMorsePcPhS0_E3str>
    427a:	f0 91 6b 05 	lds	r31, 0x056B	; 0x80056b <_ZZ9makeMorsePcPhS0_E3str+0x1>
    427e:	30 97       	sbiw	r30, 0x00	; 0
    4280:	09 f4       	brne	.+2      	; 0x4284 <_Z9makeMorsePcPhS0_+0x84>
    4282:	aa c0       	rjmp	.+340    	; 0x43d8 <_Z9makeMorsePcPhS0_+0x1d8>
	{
		if(repeating)
    4284:	61 15       	cp	r22, r1
    4286:	71 05       	cpc	r23, r1
    4288:	21 f0       	breq	.+8      	; 0x4292 <_Z9makeMorsePcPhS0_+0x92>
		{
			*repeating = repeat;
    428a:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <_ZZ9makeMorsePcPhS0_E6repeat>
    428e:	db 01       	movw	r26, r22
    4290:	8c 93       	st	X, r24
		}

		if(completedString)
    4292:	80 91 62 05 	lds	r24, 0x0562	; 0x800562 <_ZZ9makeMorsePcPhS0_E15completedString>
    4296:	88 23       	and	r24, r24
    4298:	49 f0       	breq	.+18     	; 0x42ac <_Z9makeMorsePcPhS0_+0xac>
		{
			if(finished)
    429a:	20 97       	sbiw	r28, 0x00	; 0
    429c:	09 f4       	brne	.+2      	; 0x42a0 <_Z9makeMorsePcPhS0_+0xa0>
    429e:	a8 c0       	rjmp	.+336    	; 0x43f0 <_Z9makeMorsePcPhS0_+0x1f0>
			{
				*finished = TRUE;
    42a0:	81 e0       	ldi	r24, 0x01	; 1
    42a2:	88 83       	st	Y, r24
				holdKeyDown = FALSE;
    42a4:	10 92 6c 05 	sts	0x056C, r1	; 0x80056c <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
			}
			return( OFF);
    42a8:	80 e0       	ldi	r24, 0x00	; 0
    42aa:	a5 c0       	rjmp	.+330    	; 0x43f6 <_Z9makeMorsePcPhS0_+0x1f6>
		}

		if(elementIndex)
    42ac:	80 91 64 05 	lds	r24, 0x0564	; 0x800564 <_ZZ9makeMorsePcPhS0_E12elementIndex>
    42b0:	88 23       	and	r24, r24
    42b2:	21 f0       	breq	.+8      	; 0x42bc <_Z9makeMorsePcPhS0_+0xbc>
		{
			elementIndex--;
    42b4:	81 50       	subi	r24, 0x01	; 1
    42b6:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <_ZZ9makeMorsePcPhS0_E12elementIndex>
    42ba:	7f c0       	rjmp	.+254    	; 0x43ba <_Z9makeMorsePcPhS0_+0x1ba>
		}
		else if(carrierOn && !holdKeyDown)  /* carrier is on, so turn it off and wait appropriate amount of space */
    42bc:	80 91 61 05 	lds	r24, 0x0561	; 0x800561 <_ZZ9makeMorsePcPhS0_E9carrierOn>
    42c0:	88 23       	and	r24, r24
    42c2:	81 f0       	breq	.+32     	; 0x42e4 <_Z9makeMorsePcPhS0_+0xe4>
    42c4:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
    42c8:	81 11       	cpse	r24, r1
    42ca:	0c c0       	rjmp	.+24     	; 0x42e4 <_Z9makeMorsePcPhS0_+0xe4>
		{
			carrierOn = FALSE;
    42cc:	10 92 61 05 	sts	0x0561, r1	; 0x800561 <_ZZ9makeMorsePcPhS0_E9carrierOn>
			/* wait one element = inter-symbol space */
			if(addedSpace)
    42d0:	80 91 63 05 	lds	r24, 0x0563	; 0x800563 <_ZZ9makeMorsePcPhS0_E10addedSpace>
    42d4:	88 23       	and	r24, r24
    42d6:	09 f4       	brne	.+2      	; 0x42da <_Z9makeMorsePcPhS0_+0xda>
    42d8:	70 c0       	rjmp	.+224    	; 0x43ba <_Z9makeMorsePcPhS0_+0x1ba>
			{
				elementIndex = addedSpace;
    42da:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <_ZZ9makeMorsePcPhS0_E12elementIndex>
				addedSpace = 0;
    42de:	10 92 63 05 	sts	0x0563, r1	; 0x800563 <_ZZ9makeMorsePcPhS0_E10addedSpace>
    42e2:	6b c0       	rjmp	.+214    	; 0x43ba <_Z9makeMorsePcPhS0_+0x1ba>
			}
			/* wait inter-character space */
		}
		else    /* carrier is off, so turn it on and get next symbol */
		{
			if(symbolIndex >= morseInProgress.lengthInSymbols)
    42e4:	90 91 68 05 	lds	r25, 0x0568	; 0x800568 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
    42e8:	80 91 65 05 	lds	r24, 0x0565	; 0x800565 <_ZZ9makeMorsePcPhS0_E11symbolIndex>
    42ec:	89 17       	cp	r24, r25
    42ee:	90 f1       	brcs	.+100    	; 0x4354 <_Z9makeMorsePcPhS0_+0x154>
			{
				c = (*(str + ++charIndex));
    42f0:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <_ZZ9makeMorsePcPhS0_E9charIndex>
    42f4:	8f 5f       	subi	r24, 0xFF	; 255
    42f6:	80 93 66 05 	sts	0x0566, r24	; 0x800566 <_ZZ9makeMorsePcPhS0_E9charIndex>
    42fa:	df 01       	movw	r26, r30
    42fc:	a8 0f       	add	r26, r24
    42fe:	b1 1d       	adc	r27, r1
    4300:	8c 91       	ld	r24, X
    4302:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <_ZZ9makeMorsePcPhS0_E1c>

				if(!c)  /* wrap to beginning of text */
    4306:	81 11       	cpse	r24, r1
    4308:	19 c0       	rjmp	.+50     	; 0x433c <_Z9makeMorsePcPhS0_+0x13c>
				{
					if(repeat)
    430a:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <_ZZ9makeMorsePcPhS0_E6repeat>
    430e:	88 23       	and	r24, r24
    4310:	31 f0       	breq	.+12     	; 0x431e <_Z9makeMorsePcPhS0_+0x11e>
					{
						c = *str;
    4312:	80 81       	ld	r24, Z
    4314:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <_ZZ9makeMorsePcPhS0_E1c>
						charIndex = 0;
    4318:	10 92 66 05 	sts	0x0566, r1	; 0x800566 <_ZZ9makeMorsePcPhS0_E9charIndex>
    431c:	0f c0       	rjmp	.+30     	; 0x433c <_Z9makeMorsePcPhS0_+0x13c>
					}
					else
					{
						str = NULL;
    431e:	10 92 6b 05 	sts	0x056B, r1	; 0x80056b <_ZZ9makeMorsePcPhS0_E3str+0x1>
    4322:	10 92 6a 05 	sts	0x056A, r1	; 0x80056a <_ZZ9makeMorsePcPhS0_E3str>
						carrierOn = OFF;
    4326:	10 92 61 05 	sts	0x0561, r1	; 0x800561 <_ZZ9makeMorsePcPhS0_E9carrierOn>
						completedString = TRUE;
    432a:	91 e0       	ldi	r25, 0x01	; 1
    432c:	90 93 62 05 	sts	0x0562, r25	; 0x800562 <_ZZ9makeMorsePcPhS0_E15completedString>
						if(finished)
    4330:	20 97       	sbiw	r28, 0x00	; 0
    4332:	09 f0       	breq	.+2      	; 0x4336 <_Z9makeMorsePcPhS0_+0x136>
						{
							*finished = TRUE;
    4334:	98 83       	st	Y, r25
						}
						holdKeyDown = FALSE;
    4336:	10 92 6c 05 	sts	0x056C, r1	; 0x80056c <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
						return( OFF );
    433a:	5d c0       	rjmp	.+186    	; 0x43f6 <_Z9makeMorsePcPhS0_+0x1f6>
					}
				}

				morseInProgress = getMorseChar(c);
    433c:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <_ZZ9makeMorsePcPhS0_E1c>
    4340:	0e 94 0d 20 	call	0x401a	; 0x401a <_Z12getMorseCharc>
    4344:	60 93 67 05 	sts	0x0567, r22	; 0x800567 <_ZZ9makeMorsePcPhS0_E15morseInProgress>
    4348:	70 93 68 05 	sts	0x0568, r23	; 0x800568 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
    434c:	80 93 69 05 	sts	0x0569, r24	; 0x800569 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x2>
				symbolIndex = 0;
    4350:	10 92 65 05 	sts	0x0565, r1	; 0x800565 <_ZZ9makeMorsePcPhS0_E11symbolIndex>
			}

			if(morseInProgress.pattern < INTER_WORD_SPACE)
    4354:	20 91 67 05 	lds	r18, 0x0567	; 0x800567 <_ZZ9makeMorsePcPhS0_E15morseInProgress>
    4358:	2d 3f       	cpi	r18, 0xFD	; 253
    435a:	00 f5       	brcc	.+64     	; 0x439c <_Z9makeMorsePcPhS0_+0x19c>
			{
				BOOL isDah = morseInProgress.pattern & (1 << symbolIndex++);
    435c:	40 91 65 05 	lds	r20, 0x0565	; 0x800565 <_ZZ9makeMorsePcPhS0_E11symbolIndex>
    4360:	31 e0       	ldi	r19, 0x01	; 1
    4362:	34 0f       	add	r19, r20
    4364:	30 93 65 05 	sts	0x0565, r19	; 0x800565 <_ZZ9makeMorsePcPhS0_E11symbolIndex>

				if(isDah)
    4368:	81 e0       	ldi	r24, 0x01	; 1
    436a:	90 e0       	ldi	r25, 0x00	; 0
    436c:	02 c0       	rjmp	.+4      	; 0x4372 <_Z9makeMorsePcPhS0_+0x172>
    436e:	88 0f       	add	r24, r24
    4370:	99 1f       	adc	r25, r25
    4372:	4a 95       	dec	r20
    4374:	e2 f7       	brpl	.-8      	; 0x436e <_Z9makeMorsePcPhS0_+0x16e>
    4376:	82 23       	and	r24, r18
    4378:	21 f0       	breq	.+8      	; 0x4382 <_Z9makeMorsePcPhS0_+0x182>
				{
					elementIndex = 2;
    437a:	82 e0       	ldi	r24, 0x02	; 2
    437c:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <_ZZ9makeMorsePcPhS0_E12elementIndex>
    4380:	02 c0       	rjmp	.+4      	; 0x4386 <_Z9makeMorsePcPhS0_+0x186>
				}
				else
				{
					elementIndex = 0;
    4382:	10 92 64 05 	sts	0x0564, r1	; 0x800564 <_ZZ9makeMorsePcPhS0_E12elementIndex>
				}

				carrierOn = TRUE;
    4386:	81 e0       	ldi	r24, 0x01	; 1
    4388:	80 93 61 05 	sts	0x0561, r24	; 0x800561 <_ZZ9makeMorsePcPhS0_E9carrierOn>

				if(symbolIndex >= morseInProgress.lengthInSymbols)
    438c:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
    4390:	38 17       	cp	r19, r24
    4392:	98 f0       	brcs	.+38     	; 0x43ba <_Z9makeMorsePcPhS0_+0x1ba>
				{
					addedSpace = 2;
    4394:	82 e0       	ldi	r24, 0x02	; 2
    4396:	80 93 63 05 	sts	0x0563, r24	; 0x800563 <_ZZ9makeMorsePcPhS0_E10addedSpace>
    439a:	0f c0       	rjmp	.+30     	; 0x43ba <_Z9makeMorsePcPhS0_+0x1ba>
				}
			}
			else
			{
				uint8_t sym = morseInProgress.lengthInSymbols;
    439c:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
				symbolIndex = 255;  /* ensure the next character gets read */
    43a0:	9f ef       	ldi	r25, 0xFF	; 255
    43a2:	90 93 65 05 	sts	0x0565, r25	; 0x800565 <_ZZ9makeMorsePcPhS0_E11symbolIndex>
				carrierOn = FALSE;
    43a6:	10 92 61 05 	sts	0x0561, r1	; 0x800561 <_ZZ9makeMorsePcPhS0_E9carrierOn>
				if(sym >= 4 )
    43aa:	84 30       	cpi	r24, 0x04	; 4
    43ac:	20 f0       	brcs	.+8      	; 0x43b6 <_Z9makeMorsePcPhS0_+0x1b6>
				{
					elementIndex = morseInProgress.lengthInSymbols - 4;
    43ae:	84 50       	subi	r24, 0x04	; 4
    43b0:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <_ZZ9makeMorsePcPhS0_E12elementIndex>
    43b4:	02 c0       	rjmp	.+4      	; 0x43ba <_Z9makeMorsePcPhS0_+0x1ba>
				}
				else
				{
					elementIndex = 0;
    43b6:	10 92 64 05 	sts	0x0564, r1	; 0x800564 <_ZZ9makeMorsePcPhS0_E12elementIndex>
				}
			}
		}

		/* Overrides for key on and key off special characters */
		if(c == '<')    /* constant tone */
    43ba:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <_ZZ9makeMorsePcPhS0_E1c>
    43be:	8c 33       	cpi	r24, 0x3C	; 60
    43c0:	31 f4       	brne	.+12     	; 0x43ce <_Z9makeMorsePcPhS0_+0x1ce>
		{
			holdKeyDown = TRUE;
    43c2:	81 e0       	ldi	r24, 0x01	; 1
    43c4:	80 93 6c 05 	sts	0x056C, r24	; 0x80056c <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
		{
			holdKeyDown = FALSE;
		}
	}

	if(finished)
    43c8:	20 97       	sbiw	r28, 0x00	; 0
    43ca:	41 f4       	brne	.+16     	; 0x43dc <_Z9makeMorsePcPhS0_+0x1dc>
    43cc:	14 c0       	rjmp	.+40     	; 0x43f6 <_Z9makeMorsePcPhS0_+0x1f6>
		{
			holdKeyDown = TRUE;
		}
		else
		{
			holdKeyDown = FALSE;
    43ce:	10 92 6c 05 	sts	0x056C, r1	; 0x80056c <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
		}
	}

	if(finished)
    43d2:	20 97       	sbiw	r28, 0x00	; 0
    43d4:	19 f4       	brne	.+6      	; 0x43dc <_Z9makeMorsePcPhS0_+0x1dc>
    43d6:	09 c0       	rjmp	.+18     	; 0x43ea <_Z9makeMorsePcPhS0_+0x1ea>
    43d8:	20 97       	sbiw	r28, 0x00	; 0
    43da:	19 f0       	breq	.+6      	; 0x43e2 <_Z9makeMorsePcPhS0_+0x1e2>
	{
		*finished = completedString;
    43dc:	80 91 62 05 	lds	r24, 0x0562	; 0x800562 <_ZZ9makeMorsePcPhS0_E15completedString>
    43e0:	88 83       	st	Y, r24
	}

	if(holdKeyDown)
    43e2:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
    43e6:	81 11       	cpse	r24, r1
    43e8:	05 c0       	rjmp	.+10     	; 0x43f4 <_Z9makeMorsePcPhS0_+0x1f4>
	{
		return(TRUE);
	}
	else
	{
		return( carrierOn);
    43ea:	80 91 61 05 	lds	r24, 0x0561	; 0x800561 <_ZZ9makeMorsePcPhS0_E9carrierOn>
    43ee:	03 c0       	rjmp	.+6      	; 0x43f6 <_Z9makeMorsePcPhS0_+0x1f6>
			if(finished)
			{
				*finished = TRUE;
				holdKeyDown = FALSE;
			}
			return( OFF);
    43f0:	80 e0       	ldi	r24, 0x00	; 0
    43f2:	01 c0       	rjmp	.+2      	; 0x43f6 <_Z9makeMorsePcPhS0_+0x1f6>
		*finished = completedString;
	}

	if(holdKeyDown)
	{
		return(TRUE);
    43f4:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
	{
		return( carrierOn);
	}
}
    43f6:	df 91       	pop	r29
    43f8:	cf 91       	pop	r28
    43fa:	08 95       	ret

000043fc <_Z26timeRequiredToSendStrAtWPMPcj>:
/**
 *  Returns the number of milliseconds required to send the string pointed to by the first argument at the WPM code speed
 *  passed in the second argument.
 */
uint16_t timeRequiredToSendStrAtWPM(char* str, uint16_t spd)
{
    43fc:	cf 92       	push	r12
    43fe:	df 92       	push	r13
    4400:	ef 92       	push	r14
    4402:	ff 92       	push	r15
    4404:	0f 93       	push	r16
    4406:	1f 93       	push	r17
    4408:	cf 93       	push	r28
    440a:	fc 01       	movw	r30, r24
    440c:	6b 01       	movw	r12, r22
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
	{
		c = str[i];
    440e:	80 81       	ld	r24, Z
		if(!c)
    4410:	88 23       	and	r24, r24
    4412:	c1 f0       	breq	.+48     	; 0x4444 <_Z26timeRequiredToSendStrAtWPMPcj+0x48>
    4414:	8f 01       	movw	r16, r30
    4416:	0f 5f       	subi	r16, 0xFF	; 255
    4418:	1f 4f       	sbci	r17, 0xFF	; 255
    441a:	7f 01       	movw	r14, r30
    441c:	94 e1       	ldi	r25, 0x14	; 20
    441e:	e9 0e       	add	r14, r25
    4420:	f1 1c       	adc	r15, r1
    4422:	c0 e0       	ldi	r28, 0x00	; 0
    4424:	05 c0       	rjmp	.+10     	; 0x4430 <_Z26timeRequiredToSendStrAtWPMPcj+0x34>
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
	{
		c = str[i];
    4426:	f8 01       	movw	r30, r16
    4428:	81 91       	ld	r24, Z+
    442a:	8f 01       	movw	r16, r30
		if(!c)
    442c:	88 23       	and	r24, r24
    442e:	59 f0       	breq	.+22     	; 0x4446 <_Z26timeRequiredToSendStrAtWPMPcj+0x4a>
		{
			break;
		}
		m = getMorseChar(c);
    4430:	0e 94 0d 20 	call	0x401a	; 0x401a <_Z12getMorseCharc>
		if(m.pattern < INTER_WORD_SPACE)
    4434:	6d 3f       	cpi	r22, 0xFD	; 253
    4436:	08 f4       	brcc	.+2      	; 0x443a <_Z26timeRequiredToSendStrAtWPMPcj+0x3e>
		{
			elements += 3;
    4438:	cd 5f       	subi	r28, 0xFD	; 253
		}
		elements += m.lengthInElements;
    443a:	c8 0f       	add	r28, r24
{
	uint8_t elements = 0;
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
    443c:	0e 15       	cp	r16, r14
    443e:	1f 05       	cpc	r17, r15
    4440:	91 f7       	brne	.-28     	; 0x4426 <_Z26timeRequiredToSendStrAtWPMPcj+0x2a>
    4442:	01 c0       	rjmp	.+2      	; 0x4446 <_Z26timeRequiredToSendStrAtWPMPcj+0x4a>
 *  Returns the number of milliseconds required to send the string pointed to by the first argument at the WPM code speed
 *  passed in the second argument.
 */
uint16_t timeRequiredToSendStrAtWPM(char* str, uint16_t spd)
{
	uint8_t elements = 0;
    4444:	c0 e0       	ldi	r28, 0x00	; 0
			elements += 3;
		}
		elements += m.lengthInElements;
	}

	return(elements * WPM_TO_MS_PER_DOT(spd));
    4446:	80 eb       	ldi	r24, 0xB0	; 176
    4448:	94 e0       	ldi	r25, 0x04	; 4
    444a:	b6 01       	movw	r22, r12
    444c:	0e 94 1a 28 	call	0x5034	; 0x5034 <__udivmodhi4>
}
    4450:	c6 9f       	mul	r28, r22
    4452:	c0 01       	movw	r24, r0
    4454:	c7 9f       	mul	r28, r23
    4456:	90 0d       	add	r25, r0
    4458:	11 24       	eor	r1, r1
    445a:	cf 91       	pop	r28
    445c:	1f 91       	pop	r17
    445e:	0f 91       	pop	r16
    4460:	ff 90       	pop	r15
    4462:	ef 90       	pop	r14
    4464:	df 90       	pop	r13
    4466:	cf 90       	pop	r12
    4468:	08 95       	ret

0000446a <_Z7bcd2dech>:

		/* Read the value from RAM */
		i2c_device_read(RV3028_I2C_SLAVE_ADDR, rtc_ee_addr, val, 1);

		return(0);
	}
    446a:	98 2f       	mov	r25, r24
    446c:	96 95       	lsr	r25
    446e:	96 95       	lsr	r25
    4470:	96 95       	lsr	r25
    4472:	9e 71       	andi	r25, 0x1E	; 30
    4474:	29 2f       	mov	r18, r25
    4476:	22 0f       	add	r18, r18
    4478:	22 0f       	add	r18, r18
    447a:	92 0f       	add	r25, r18
    447c:	8f 70       	andi	r24, 0x0F	; 15
    447e:	89 0f       	add	r24, r25
    4480:	08 95       	ret

00004482 <_Z8char2bcdPc>:
    4482:	fc 01       	movw	r30, r24
    4484:	20 81       	ld	r18, Z
    4486:	81 81       	ldd	r24, Z+1	; 0x01
    4488:	80 53       	subi	r24, 0x30	; 48
    448a:	f0 e1       	ldi	r31, 0x10	; 16
    448c:	2f 9f       	mul	r18, r31
    448e:	80 0d       	add	r24, r0
    4490:	11 24       	eor	r1, r1
    4492:	08 95       	ret

00004494 <_Z16rv3028_get_epochPbPc>:
    4494:	4f 92       	push	r4
    4496:	5f 92       	push	r5
    4498:	6f 92       	push	r6
    449a:	7f 92       	push	r7
    449c:	8f 92       	push	r8
    449e:	9f 92       	push	r9
    44a0:	af 92       	push	r10
    44a2:	bf 92       	push	r11
    44a4:	cf 92       	push	r12
    44a6:	df 92       	push	r13
    44a8:	ef 92       	push	r14
    44aa:	ff 92       	push	r15
    44ac:	0f 93       	push	r16
    44ae:	1f 93       	push	r17
    44b0:	cf 93       	push	r28
    44b2:	df 93       	push	r29
    44b4:	cd b7       	in	r28, 0x3d	; 61
    44b6:	de b7       	in	r29, 0x3e	; 62
    44b8:	27 97       	sbiw	r28, 0x07	; 7
    44ba:	0f b6       	in	r0, 0x3f	; 63
    44bc:	f8 94       	cli
    44be:	de bf       	out	0x3e, r29	; 62
    44c0:	0f be       	out	0x3f, r0	; 63
    44c2:	cd bf       	out	0x3d, r28	; 61
    44c4:	6c 01       	movw	r12, r24
    44c6:	7b 01       	movw	r14, r22
    44c8:	fe 01       	movw	r30, r28
    44ca:	31 96       	adiw	r30, 0x01	; 1
    44cc:	87 e0       	ldi	r24, 0x07	; 7
    44ce:	df 01       	movw	r26, r30
    44d0:	1d 92       	st	X+, r1
    44d2:	8a 95       	dec	r24
    44d4:	e9 f7       	brne	.-6      	; 0x44d0 <_Z16rv3028_get_epochPbPc+0x3c>
    44d6:	61 15       	cp	r22, r1
    44d8:	71 05       	cpc	r23, r1
    44da:	f1 f0       	breq	.+60     	; 0x4518 <_Z16rv3028_get_epochPbPc+0x84>
    44dc:	cb 01       	movw	r24, r22
    44de:	0a 96       	adiw	r24, 0x0a	; 10
    44e0:	0e 94 41 22 	call	0x4482	; 0x4482 <_Z8char2bcdPc>
    44e4:	89 83       	std	Y+1, r24	; 0x01
    44e6:	c7 01       	movw	r24, r14
    44e8:	08 96       	adiw	r24, 0x08	; 8
    44ea:	0e 94 41 22 	call	0x4482	; 0x4482 <_Z8char2bcdPc>
    44ee:	8a 83       	std	Y+2, r24	; 0x02
    44f0:	c7 01       	movw	r24, r14
    44f2:	06 96       	adiw	r24, 0x06	; 6
    44f4:	0e 94 41 22 	call	0x4482	; 0x4482 <_Z8char2bcdPc>
    44f8:	8b 83       	std	Y+3, r24	; 0x03
    44fa:	c7 01       	movw	r24, r14
    44fc:	04 96       	adiw	r24, 0x04	; 4
    44fe:	0e 94 41 22 	call	0x4482	; 0x4482 <_Z8char2bcdPc>
    4502:	8d 83       	std	Y+5, r24	; 0x05
    4504:	c7 01       	movw	r24, r14
    4506:	02 96       	adiw	r24, 0x02	; 2
    4508:	0e 94 41 22 	call	0x4482	; 0x4482 <_Z8char2bcdPc>
    450c:	8e 83       	std	Y+6, r24	; 0x06
    450e:	c7 01       	movw	r24, r14
    4510:	0e 94 41 22 	call	0x4482	; 0x4482 <_Z8char2bcdPc>
    4514:	8f 83       	std	Y+7, r24	; 0x07
    4516:	0b c0       	rjmp	.+22     	; 0x452e <_Z16rv3028_get_epochPbPc+0x9a>
    4518:	27 e0       	ldi	r18, 0x07	; 7
    451a:	ae 01       	movw	r20, r28
    451c:	4f 5f       	subi	r20, 0xFF	; 255
    451e:	5f 4f       	sbci	r21, 0xFF	; 255
    4520:	60 e0       	ldi	r22, 0x00	; 0
    4522:	84 ea       	ldi	r24, 0xA4	; 164
    4524:	0e 94 4e 05 	call	0xa9c	; 0xa9c <_Z15i2c_device_readhhPhh>
    4528:	38 2f       	mov	r19, r24
    452a:	81 11       	cpse	r24, r1
    452c:	9b c0       	rjmp	.+310    	; 0x4664 <_Z16rv3028_get_epochPbPc+0x1d0>
    452e:	8f 81       	ldd	r24, Y+7	; 0x07
    4530:	0e 94 35 22 	call	0x446a	; 0x446a <_Z7bcd2dech>
    4534:	a8 2e       	mov	r10, r24
    4536:	b1 2c       	mov	r11, r1
    4538:	45 01       	movw	r8, r10
    453a:	b0 e3       	ldi	r27, 0x30	; 48
    453c:	8b 1a       	sub	r8, r27
    453e:	b8 ef       	ldi	r27, 0xF8	; 248
    4540:	9b 0a       	sbc	r9, r27
    4542:	8e 81       	ldd	r24, Y+6	; 0x06
    4544:	0e 94 35 22 	call	0x446a	; 0x446a <_Z7bcd2dech>
    4548:	08 2f       	mov	r16, r24
    454a:	8d 81       	ldd	r24, Y+5	; 0x05
    454c:	0e 94 35 22 	call	0x446a	; 0x446a <_Z7bcd2dech>
    4550:	78 2e       	mov	r7, r24
    4552:	02 30       	cpi	r16, 0x02	; 2
    4554:	68 f0       	brcs	.+26     	; 0x4570 <_Z16rv3028_get_epochPbPc+0xdc>
    4556:	e1 2c       	mov	r14, r1
    4558:	f1 2c       	mov	r15, r1
    455a:	11 e0       	ldi	r17, 0x01	; 1
    455c:	61 2f       	mov	r22, r17
    455e:	c4 01       	movw	r24, r8
    4560:	0e 94 20 01 	call	0x240	; 0x240 <month_length>
    4564:	e8 0e       	add	r14, r24
    4566:	f1 1c       	adc	r15, r1
    4568:	1f 5f       	subi	r17, 0xFF	; 255
    456a:	01 13       	cpse	r16, r17
    456c:	f7 cf       	rjmp	.-18     	; 0x455c <_Z16rv3028_get_epochPbPc+0xc8>
    456e:	02 c0       	rjmp	.+4      	; 0x4574 <_Z16rv3028_get_epochPbPc+0xe0>
    4570:	e1 2c       	mov	r14, r1
    4572:	f1 2c       	mov	r15, r1
    4574:	87 2d       	mov	r24, r7
    4576:	77 0c       	add	r7, r7
    4578:	99 0b       	sbc	r25, r25
    457a:	01 97       	sbiw	r24, 0x01	; 1
    457c:	e8 0e       	add	r14, r24
    457e:	f9 1e       	adc	r15, r25
    4580:	89 81       	ldd	r24, Y+1	; 0x01
    4582:	0e 94 35 22 	call	0x446a	; 0x446a <_Z7bcd2dech>
    4586:	48 2e       	mov	r4, r24
    4588:	8a 81       	ldd	r24, Y+2	; 0x02
    458a:	0e 94 35 22 	call	0x446a	; 0x446a <_Z7bcd2dech>
    458e:	18 2f       	mov	r17, r24
    4590:	8b 81       	ldd	r24, Y+3	; 0x03
    4592:	0e 94 35 22 	call	0x446a	; 0x446a <_Z7bcd2dech>
    4596:	04 2c       	mov	r0, r4
    4598:	00 0c       	add	r0, r0
    459a:	55 08       	sbc	r5, r5
    459c:	ec e3       	ldi	r30, 0x3C	; 60
    459e:	1e 02       	muls	r17, r30
    45a0:	40 0c       	add	r4, r0
    45a2:	51 1c       	adc	r5, r1
    45a4:	11 24       	eor	r1, r1
    45a6:	05 2c       	mov	r0, r5
    45a8:	00 0c       	add	r0, r0
    45aa:	66 08       	sbc	r6, r6
    45ac:	77 08       	sbc	r7, r7
    45ae:	a8 2f       	mov	r26, r24
    45b0:	88 0f       	add	r24, r24
    45b2:	bb 0b       	sbc	r27, r27
    45b4:	20 e1       	ldi	r18, 0x10	; 16
    45b6:	3e e0       	ldi	r19, 0x0E	; 14
    45b8:	0e 94 98 28 	call	0x5130	; 0x5130 <__usmulhisi3>
    45bc:	46 0e       	add	r4, r22
    45be:	57 1e       	adc	r5, r23
    45c0:	68 1e       	adc	r6, r24
    45c2:	79 1e       	adc	r7, r25
    45c4:	d7 01       	movw	r26, r14
    45c6:	20 e8       	ldi	r18, 0x80	; 128
    45c8:	31 e5       	ldi	r19, 0x51	; 81
    45ca:	41 e0       	ldi	r20, 0x01	; 1
    45cc:	50 e0       	ldi	r21, 0x00	; 0
    45ce:	0e 94 aa 28 	call	0x5154	; 0x5154 <__mulshisi3>
    45d2:	46 0e       	add	r4, r22
    45d4:	57 1e       	adc	r5, r23
    45d6:	68 1e       	adc	r6, r24
    45d8:	79 1e       	adc	r7, r25
    45da:	d5 01       	movw	r26, r10
    45dc:	5e 96       	adiw	r26, 0x1e	; 30
    45de:	20 e8       	ldi	r18, 0x80	; 128
    45e0:	33 e3       	ldi	r19, 0x33	; 51
    45e2:	41 ee       	ldi	r20, 0xE1	; 225
    45e4:	51 e0       	ldi	r21, 0x01	; 1
    45e6:	0e 94 aa 28 	call	0x5154	; 0x5154 <__mulshisi3>
    45ea:	46 0e       	add	r4, r22
    45ec:	57 1e       	adc	r5, r23
    45ee:	68 1e       	adc	r6, r24
    45f0:	79 1e       	adc	r7, r25
    45f2:	c5 01       	movw	r24, r10
    45f4:	4f 96       	adiw	r24, 0x1f	; 31
    45f6:	dc 01       	movw	r26, r24
    45f8:	0a f4       	brpl	.+2      	; 0x45fc <_Z16rv3028_get_epochPbPc+0x168>
    45fa:	13 96       	adiw	r26, 0x03	; 3
    45fc:	b5 95       	asr	r27
    45fe:	a7 95       	ror	r26
    4600:	b5 95       	asr	r27
    4602:	a7 95       	ror	r26
    4604:	20 e8       	ldi	r18, 0x80	; 128
    4606:	31 e5       	ldi	r19, 0x51	; 81
    4608:	41 e0       	ldi	r20, 0x01	; 1
    460a:	50 e0       	ldi	r21, 0x00	; 0
    460c:	0e 94 aa 28 	call	0x5154	; 0x5154 <__mulshisi3>
    4610:	46 0e       	add	r4, r22
    4612:	57 1e       	adc	r5, r23
    4614:	68 1e       	adc	r6, r24
    4616:	79 1e       	adc	r7, r25
    4618:	c5 01       	movw	r24, r10
    461a:	8d 59       	subi	r24, 0x9D	; 157
    461c:	9f 4f       	sbci	r25, 0xFF	; 255
    461e:	64 e6       	ldi	r22, 0x64	; 100
    4620:	70 e0       	ldi	r23, 0x00	; 0
    4622:	0e 94 2e 28 	call	0x505c	; 0x505c <__divmodhi4>
    4626:	db 01       	movw	r26, r22
    4628:	20 e8       	ldi	r18, 0x80	; 128
    462a:	3e ea       	ldi	r19, 0xAE	; 174
    462c:	4e ef       	ldi	r20, 0xFE	; 254
    462e:	5f ef       	ldi	r21, 0xFF	; 255
    4630:	0e 94 aa 28 	call	0x5154	; 0x5154 <__mulshisi3>
    4634:	46 0e       	add	r4, r22
    4636:	57 1e       	adc	r5, r23
    4638:	68 1e       	adc	r6, r24
    463a:	79 1e       	adc	r7, r25
    463c:	c5 01       	movw	r24, r10
    463e:	81 57       	subi	r24, 0x71	; 113
    4640:	9e 4f       	sbci	r25, 0xFE	; 254
    4642:	60 e9       	ldi	r22, 0x90	; 144
    4644:	71 e0       	ldi	r23, 0x01	; 1
    4646:	0e 94 2e 28 	call	0x505c	; 0x505c <__divmodhi4>
    464a:	db 01       	movw	r26, r22
    464c:	20 e8       	ldi	r18, 0x80	; 128
    464e:	31 e5       	ldi	r19, 0x51	; 81
    4650:	41 e0       	ldi	r20, 0x01	; 1
    4652:	50 e0       	ldi	r21, 0x00	; 0
    4654:	0e 94 aa 28 	call	0x5154	; 0x5154 <__mulshisi3>
    4658:	64 0d       	add	r22, r4
    465a:	75 1d       	adc	r23, r5
    465c:	86 1d       	adc	r24, r6
    465e:	97 1d       	adc	r25, r7
    4660:	30 e0       	ldi	r19, 0x00	; 0
    4662:	03 c0       	rjmp	.+6      	; 0x466a <_Z16rv3028_get_epochPbPc+0x1d6>
    4664:	60 e0       	ldi	r22, 0x00	; 0
    4666:	70 e0       	ldi	r23, 0x00	; 0
    4668:	cb 01       	movw	r24, r22
    466a:	c1 14       	cp	r12, r1
    466c:	d1 04       	cpc	r13, r1
    466e:	31 f0       	breq	.+12     	; 0x467c <_Z16rv3028_get_epochPbPc+0x1e8>
    4670:	21 e0       	ldi	r18, 0x01	; 1
    4672:	31 11       	cpse	r19, r1
    4674:	01 c0       	rjmp	.+2      	; 0x4678 <_Z16rv3028_get_epochPbPc+0x1e4>
    4676:	20 e0       	ldi	r18, 0x00	; 0
    4678:	d6 01       	movw	r26, r12
    467a:	2c 93       	st	X, r18
    467c:	27 96       	adiw	r28, 0x07	; 7
    467e:	0f b6       	in	r0, 0x3f	; 63
    4680:	f8 94       	cli
    4682:	de bf       	out	0x3e, r29	; 62
    4684:	0f be       	out	0x3f, r0	; 63
    4686:	cd bf       	out	0x3d, r28	; 61
    4688:	df 91       	pop	r29
    468a:	cf 91       	pop	r28
    468c:	1f 91       	pop	r17
    468e:	0f 91       	pop	r16
    4690:	ff 90       	pop	r15
    4692:	ef 90       	pop	r14
    4694:	df 90       	pop	r13
    4696:	cf 90       	pop	r12
    4698:	bf 90       	pop	r11
    469a:	af 90       	pop	r10
    469c:	9f 90       	pop	r9
    469e:	8f 90       	pop	r8
    46a0:	7f 90       	pop	r7
    46a2:	6f 90       	pop	r6
    46a4:	5f 90       	pop	r5
    46a6:	4f 90       	pop	r4
    46a8:	08 95       	ret

000046aa <_Z20rv3028_set_date_timePc>:
    46aa:	cf 93       	push	r28
    46ac:	df 93       	push	r29
    46ae:	cd b7       	in	r28, 0x3d	; 61
    46b0:	de b7       	in	r29, 0x3e	; 62
    46b2:	27 97       	sbiw	r28, 0x07	; 7
    46b4:	0f b6       	in	r0, 0x3f	; 63
    46b6:	f8 94       	cli
    46b8:	de bf       	out	0x3e, r29	; 62
    46ba:	0f be       	out	0x3f, r0	; 63
    46bc:	cd bf       	out	0x3d, r28	; 61
    46be:	21 e0       	ldi	r18, 0x01	; 1
    46c0:	2c 83       	std	Y+4, r18	; 0x04
    46c2:	dc 01       	movw	r26, r24
    46c4:	0d 90       	ld	r0, X+
    46c6:	00 20       	and	r0, r0
    46c8:	e9 f7       	brne	.-6      	; 0x46c4 <_Z20rv3028_set_date_timePc+0x1a>
    46ca:	11 97       	sbiw	r26, 0x01	; 1
    46cc:	a8 1b       	sub	r26, r24
    46ce:	b9 0b       	sbc	r27, r25
    46d0:	1c 97       	sbiw	r26, 0x0c	; 12
    46d2:	0c f4       	brge	.+2      	; 0x46d6 <_Z20rv3028_set_date_timePc+0x2c>
    46d4:	3a c0       	rjmp	.+116    	; 0x474a <_Z20rv3028_set_date_timePc+0xa0>
    46d6:	fc 01       	movw	r30, r24
    46d8:	92 85       	ldd	r25, Z+10	; 0x0a
    46da:	83 85       	ldd	r24, Z+11	; 0x0b
    46dc:	80 53       	subi	r24, 0x30	; 48
    46de:	20 e1       	ldi	r18, 0x10	; 16
    46e0:	92 9f       	mul	r25, r18
    46e2:	80 0d       	add	r24, r0
    46e4:	11 24       	eor	r1, r1
    46e6:	89 83       	std	Y+1, r24	; 0x01
    46e8:	90 85       	ldd	r25, Z+8	; 0x08
    46ea:	81 85       	ldd	r24, Z+9	; 0x09
    46ec:	80 53       	subi	r24, 0x30	; 48
    46ee:	20 e1       	ldi	r18, 0x10	; 16
    46f0:	92 9f       	mul	r25, r18
    46f2:	80 0d       	add	r24, r0
    46f4:	11 24       	eor	r1, r1
    46f6:	8a 83       	std	Y+2, r24	; 0x02
    46f8:	96 81       	ldd	r25, Z+6	; 0x06
    46fa:	87 81       	ldd	r24, Z+7	; 0x07
    46fc:	80 53       	subi	r24, 0x30	; 48
    46fe:	20 e1       	ldi	r18, 0x10	; 16
    4700:	92 9f       	mul	r25, r18
    4702:	80 0d       	add	r24, r0
    4704:	11 24       	eor	r1, r1
    4706:	8b 83       	std	Y+3, r24	; 0x03
    4708:	94 81       	ldd	r25, Z+4	; 0x04
    470a:	85 81       	ldd	r24, Z+5	; 0x05
    470c:	80 53       	subi	r24, 0x30	; 48
    470e:	20 e1       	ldi	r18, 0x10	; 16
    4710:	92 9f       	mul	r25, r18
    4712:	80 0d       	add	r24, r0
    4714:	11 24       	eor	r1, r1
    4716:	8d 83       	std	Y+5, r24	; 0x05
    4718:	92 81       	ldd	r25, Z+2	; 0x02
    471a:	83 81       	ldd	r24, Z+3	; 0x03
    471c:	80 53       	subi	r24, 0x30	; 48
    471e:	20 e1       	ldi	r18, 0x10	; 16
    4720:	92 9f       	mul	r25, r18
    4722:	80 0d       	add	r24, r0
    4724:	11 24       	eor	r1, r1
    4726:	8e 83       	std	Y+6, r24	; 0x06
    4728:	90 81       	ld	r25, Z
    472a:	81 81       	ldd	r24, Z+1	; 0x01
    472c:	80 53       	subi	r24, 0x30	; 48
    472e:	20 e1       	ldi	r18, 0x10	; 16
    4730:	92 9f       	mul	r25, r18
    4732:	80 0d       	add	r24, r0
    4734:	11 24       	eor	r1, r1
    4736:	8f 83       	std	Y+7, r24	; 0x07
    4738:	27 e0       	ldi	r18, 0x07	; 7
    473a:	ae 01       	movw	r20, r28
    473c:	4f 5f       	subi	r20, 0xFF	; 255
    473e:	5f 4f       	sbci	r21, 0xFF	; 255
    4740:	60 e0       	ldi	r22, 0x00	; 0
    4742:	84 ea       	ldi	r24, 0xA4	; 164
    4744:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <_Z16i2c_device_writehhPhh>
    4748:	01 c0       	rjmp	.+2      	; 0x474c <_Z20rv3028_set_date_timePc+0xa2>
    474a:	81 e0       	ldi	r24, 0x01	; 1
    474c:	27 96       	adiw	r28, 0x07	; 7
    474e:	0f b6       	in	r0, 0x3f	; 63
    4750:	f8 94       	cli
    4752:	de bf       	out	0x3e, r29	; 62
    4754:	0f be       	out	0x3f, r0	; 63
    4756:	cd bf       	out	0x3d, r28	; 61
    4758:	df 91       	pop	r29
    475a:	cf 91       	pop	r28
    475c:	08 95       	ret

0000475e <_Z21rv3028_get_offset_RAMv>:
    475e:	cf 93       	push	r28
    4760:	df 93       	push	r29
    4762:	00 d0       	rcall	.+0      	; 0x4764 <_Z21rv3028_get_offset_RAMv+0x6>
    4764:	cd b7       	in	r28, 0x3d	; 61
    4766:	de b7       	in	r29, 0x3e	; 62
    4768:	22 e0       	ldi	r18, 0x02	; 2
    476a:	ae 01       	movw	r20, r28
    476c:	4f 5f       	subi	r20, 0xFF	; 255
    476e:	5f 4f       	sbci	r21, 0xFF	; 255
    4770:	66 e3       	ldi	r22, 0x36	; 54
    4772:	84 ea       	ldi	r24, 0xA4	; 164
    4774:	0e 94 4e 05 	call	0xa9c	; 0xa9c <_Z15i2c_device_readhhPhh>
    4778:	89 81       	ldd	r24, Y+1	; 0x01
    477a:	90 e0       	ldi	r25, 0x00	; 0
    477c:	88 0f       	add	r24, r24
    477e:	99 1f       	adc	r25, r25
    4780:	2a 81       	ldd	r18, Y+2	; 0x02
    4782:	22 23       	and	r18, r18
    4784:	0c f4       	brge	.+2      	; 0x4788 <_Z21rv3028_get_offset_RAMv+0x2a>
    4786:	01 96       	adiw	r24, 0x01	; 1
    4788:	0f 90       	pop	r0
    478a:	0f 90       	pop	r0
    478c:	df 91       	pop	r29
    478e:	cf 91       	pop	r28
    4790:	08 95       	ret

00004792 <_Z21rv3028_set_offset_RAMj>:
    4792:	cf 93       	push	r28
    4794:	df 93       	push	r29
    4796:	00 d0       	rcall	.+0      	; 0x4798 <_Z21rv3028_set_offset_RAMj+0x6>
    4798:	cd b7       	in	r28, 0x3d	; 61
    479a:	de b7       	in	r29, 0x3e	; 62
    479c:	20 e1       	ldi	r18, 0x10	; 16
    479e:	2a 83       	std	Y+2, r18	; 0x02
    47a0:	9c 01       	movw	r18, r24
    47a2:	36 95       	lsr	r19
    47a4:	27 95       	ror	r18
    47a6:	29 83       	std	Y+1, r18	; 0x01
    47a8:	80 ff       	sbrs	r24, 0
    47aa:	02 c0       	rjmp	.+4      	; 0x47b0 <_Z21rv3028_set_offset_RAMj+0x1e>
    47ac:	80 e9       	ldi	r24, 0x90	; 144
    47ae:	8a 83       	std	Y+2, r24	; 0x02
    47b0:	22 e0       	ldi	r18, 0x02	; 2
    47b2:	ae 01       	movw	r20, r28
    47b4:	4f 5f       	subi	r20, 0xFF	; 255
    47b6:	5f 4f       	sbci	r21, 0xFF	; 255
    47b8:	66 e3       	ldi	r22, 0x36	; 54
    47ba:	84 ea       	ldi	r24, 0xA4	; 164
    47bc:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <_Z16i2c_device_writehhPhh>
    47c0:	0f 90       	pop	r0
    47c2:	0f 90       	pop	r0
    47c4:	df 91       	pop	r29
    47c6:	cf 91       	pop	r28
    47c8:	08 95       	ret

000047ca <_Z18waitForEEPROMReadyv>:
    47ca:	cf 93       	push	r28
    47cc:	df 93       	push	r29
    47ce:	1f 92       	push	r1
    47d0:	cd b7       	in	r28, 0x3d	; 61
    47d2:	de b7       	in	r29, 0x3e	; 62
    47d4:	81 e0       	ldi	r24, 0x01	; 1
    47d6:	89 83       	std	Y+1, r24	; 0x01
    47d8:	21 e0       	ldi	r18, 0x01	; 1
    47da:	ae 01       	movw	r20, r28
    47dc:	4f 5f       	subi	r20, 0xFF	; 255
    47de:	5f 4f       	sbci	r21, 0xFF	; 255
    47e0:	6e e0       	ldi	r22, 0x0E	; 14
    47e2:	84 ea       	ldi	r24, 0xA4	; 164
    47e4:	0e 94 4e 05 	call	0xa9c	; 0xa9c <_Z15i2c_device_readhhPhh>
    47e8:	81 11       	cpse	r24, r1
    47ea:	07 c0       	rjmp	.+14     	; 0x47fa <_Z18waitForEEPROMReadyv+0x30>
    47ec:	89 81       	ldd	r24, Y+1	; 0x01
    47ee:	80 78       	andi	r24, 0x80	; 128
    47f0:	89 83       	std	Y+1, r24	; 0x01
    47f2:	81 11       	cpse	r24, r1
    47f4:	f1 cf       	rjmp	.-30     	; 0x47d8 <_Z18waitForEEPROMReadyv+0xe>
    47f6:	80 e0       	ldi	r24, 0x00	; 0
    47f8:	03 c0       	rjmp	.+6      	; 0x4800 <_Z18waitForEEPROMReadyv+0x36>
    47fa:	89 81       	ldd	r24, Y+1	; 0x01
    47fc:	88 23       	and	r24, r24
    47fe:	d9 f3       	breq	.-10     	; 0x47f6 <_Z18waitForEEPROMReadyv+0x2c>
    4800:	0f 90       	pop	r0
    4802:	df 91       	pop	r29
    4804:	cf 91       	pop	r28
    4806:	08 95       	ret

00004808 <_Z18writeOneEEPROMBytehhh>:
    4808:	1f 93       	push	r17
    480a:	cf 93       	push	r28
    480c:	df 93       	push	r29
    480e:	00 d0       	rcall	.+0      	; 0x4810 <_Z18writeOneEEPROMBytehhh+0x8>
    4810:	00 d0       	rcall	.+0      	; 0x4812 <_Z18writeOneEEPROMBytehhh+0xa>
    4812:	cd b7       	in	r28, 0x3d	; 61
    4814:	de b7       	in	r29, 0x3e	; 62
    4816:	8b 83       	std	Y+3, r24	; 0x03
    4818:	16 2f       	mov	r17, r22
    481a:	4c 83       	std	Y+4, r20	; 0x04
    481c:	19 82       	std	Y+1, r1	; 0x01
    481e:	0e 94 e5 23 	call	0x47ca	; 0x47ca <_Z18waitForEEPROMReadyv>
    4822:	81 11       	cpse	r24, r1
    4824:	5e c0       	rjmp	.+188    	; 0x48e2 <_Z18writeOneEEPROMBytehhh+0xda>
    4826:	88 e0       	ldi	r24, 0x08	; 8
    4828:	89 83       	std	Y+1, r24	; 0x01
    482a:	21 e0       	ldi	r18, 0x01	; 1
    482c:	ae 01       	movw	r20, r28
    482e:	4f 5f       	subi	r20, 0xFF	; 255
    4830:	5f 4f       	sbci	r21, 0xFF	; 255
    4832:	6f e0       	ldi	r22, 0x0F	; 15
    4834:	84 ea       	ldi	r24, 0xA4	; 164
    4836:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <_Z16i2c_device_writehhPhh>
    483a:	81 11       	cpse	r24, r1
    483c:	54 c0       	rjmp	.+168    	; 0x48e6 <_Z18writeOneEEPROMBytehhh+0xde>
    483e:	21 e0       	ldi	r18, 0x01	; 1
    4840:	ae 01       	movw	r20, r28
    4842:	4e 5f       	subi	r20, 0xFE	; 254
    4844:	5f 4f       	sbci	r21, 0xFF	; 255
    4846:	6b 81       	ldd	r22, Y+3	; 0x03
    4848:	84 ea       	ldi	r24, 0xA4	; 164
    484a:	0e 94 4e 05 	call	0xa9c	; 0xa9c <_Z15i2c_device_readhhPhh>
    484e:	91 2f       	mov	r25, r17
    4850:	90 95       	com	r25
    4852:	8a 81       	ldd	r24, Y+2	; 0x02
    4854:	89 23       	and	r24, r25
    4856:	8a 83       	std	Y+2, r24	; 0x02
    4858:	9c 81       	ldd	r25, Y+4	; 0x04
    485a:	19 23       	and	r17, r25
    485c:	81 2b       	or	r24, r17
    485e:	8c 83       	std	Y+4, r24	; 0x04
    4860:	21 e0       	ldi	r18, 0x01	; 1
    4862:	ae 01       	movw	r20, r28
    4864:	4d 5f       	subi	r20, 0xFD	; 253
    4866:	5f 4f       	sbci	r21, 0xFF	; 255
    4868:	65 e2       	ldi	r22, 0x25	; 37
    486a:	84 ea       	ldi	r24, 0xA4	; 164
    486c:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <_Z16i2c_device_writehhPhh>
    4870:	81 11       	cpse	r24, r1
    4872:	3b c0       	rjmp	.+118    	; 0x48ea <_Z18writeOneEEPROMBytehhh+0xe2>
    4874:	21 e0       	ldi	r18, 0x01	; 1
    4876:	ae 01       	movw	r20, r28
    4878:	4c 5f       	subi	r20, 0xFC	; 252
    487a:	5f 4f       	sbci	r21, 0xFF	; 255
    487c:	66 e2       	ldi	r22, 0x26	; 38
    487e:	84 ea       	ldi	r24, 0xA4	; 164
    4880:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <_Z16i2c_device_writehhPhh>
    4884:	81 11       	cpse	r24, r1
    4886:	33 c0       	rjmp	.+102    	; 0x48ee <_Z18writeOneEEPROMBytehhh+0xe6>
    4888:	19 82       	std	Y+1, r1	; 0x01
    488a:	21 e0       	ldi	r18, 0x01	; 1
    488c:	ae 01       	movw	r20, r28
    488e:	4f 5f       	subi	r20, 0xFF	; 255
    4890:	5f 4f       	sbci	r21, 0xFF	; 255
    4892:	67 e2       	ldi	r22, 0x27	; 39
    4894:	84 ea       	ldi	r24, 0xA4	; 164
    4896:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <_Z16i2c_device_writehhPhh>
    489a:	81 11       	cpse	r24, r1
    489c:	2a c0       	rjmp	.+84     	; 0x48f2 <_Z18writeOneEEPROMBytehhh+0xea>
    489e:	0e 94 e5 23 	call	0x47ca	; 0x47ca <_Z18waitForEEPROMReadyv>
    48a2:	81 11       	cpse	r24, r1
    48a4:	28 c0       	rjmp	.+80     	; 0x48f6 <_Z18writeOneEEPROMBytehhh+0xee>
    48a6:	81 e2       	ldi	r24, 0x21	; 33
    48a8:	89 83       	std	Y+1, r24	; 0x01
    48aa:	21 e0       	ldi	r18, 0x01	; 1
    48ac:	ae 01       	movw	r20, r28
    48ae:	4f 5f       	subi	r20, 0xFF	; 255
    48b0:	5f 4f       	sbci	r21, 0xFF	; 255
    48b2:	67 e2       	ldi	r22, 0x27	; 39
    48b4:	84 ea       	ldi	r24, 0xA4	; 164
    48b6:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <_Z16i2c_device_writehhPhh>
    48ba:	81 11       	cpse	r24, r1
    48bc:	1e c0       	rjmp	.+60     	; 0x48fa <_Z18writeOneEEPROMBytehhh+0xf2>
    48be:	0e 94 e5 23 	call	0x47ca	; 0x47ca <_Z18waitForEEPROMReadyv>
    48c2:	81 11       	cpse	r24, r1
    48c4:	1c c0       	rjmp	.+56     	; 0x48fe <_Z18writeOneEEPROMBytehhh+0xf6>
    48c6:	19 82       	std	Y+1, r1	; 0x01
    48c8:	21 e0       	ldi	r18, 0x01	; 1
    48ca:	ae 01       	movw	r20, r28
    48cc:	4f 5f       	subi	r20, 0xFF	; 255
    48ce:	5f 4f       	sbci	r21, 0xFF	; 255
    48d0:	6f e0       	ldi	r22, 0x0F	; 15
    48d2:	84 ea       	ldi	r24, 0xA4	; 164
    48d4:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <_Z16i2c_device_writehhPhh>
    48d8:	91 e0       	ldi	r25, 0x01	; 1
    48da:	81 11       	cpse	r24, r1
    48dc:	11 c0       	rjmp	.+34     	; 0x4900 <_Z18writeOneEEPROMBytehhh+0xf8>
    48de:	90 e0       	ldi	r25, 0x00	; 0
    48e0:	0f c0       	rjmp	.+30     	; 0x4900 <_Z18writeOneEEPROMBytehhh+0xf8>
    48e2:	91 e0       	ldi	r25, 0x01	; 1
    48e4:	0d c0       	rjmp	.+26     	; 0x4900 <_Z18writeOneEEPROMBytehhh+0xf8>
    48e6:	91 e0       	ldi	r25, 0x01	; 1
    48e8:	0b c0       	rjmp	.+22     	; 0x4900 <_Z18writeOneEEPROMBytehhh+0xf8>
    48ea:	91 e0       	ldi	r25, 0x01	; 1
    48ec:	09 c0       	rjmp	.+18     	; 0x4900 <_Z18writeOneEEPROMBytehhh+0xf8>
    48ee:	91 e0       	ldi	r25, 0x01	; 1
    48f0:	07 c0       	rjmp	.+14     	; 0x4900 <_Z18writeOneEEPROMBytehhh+0xf8>
    48f2:	91 e0       	ldi	r25, 0x01	; 1
    48f4:	05 c0       	rjmp	.+10     	; 0x4900 <_Z18writeOneEEPROMBytehhh+0xf8>
    48f6:	91 e0       	ldi	r25, 0x01	; 1
    48f8:	03 c0       	rjmp	.+6      	; 0x4900 <_Z18writeOneEEPROMBytehhh+0xf8>
    48fa:	91 e0       	ldi	r25, 0x01	; 1
    48fc:	01 c0       	rjmp	.+2      	; 0x4900 <_Z18writeOneEEPROMBytehhh+0xf8>
    48fe:	91 e0       	ldi	r25, 0x01	; 1
    4900:	89 2f       	mov	r24, r25
    4902:	0f 90       	pop	r0
    4904:	0f 90       	pop	r0
    4906:	0f 90       	pop	r0
    4908:	0f 90       	pop	r0
    490a:	df 91       	pop	r29
    490c:	cf 91       	pop	r28
    490e:	1f 91       	pop	r17
    4910:	08 95       	ret

00004912 <_Z13rv3028_1s_sqwv>:
 #define RTC_EE_DATA                     0x26
 #define RTC_EE_COMMAND                  0x27
 #define RTC_STATUS                      0x0E
 */
		uint8_t rv3028_1s_sqw(void)
		{
    4912:	cf 93       	push	r28
    4914:	df 93       	push	r29
    4916:	00 d0       	rcall	.+0      	; 0x4918 <_Z13rv3028_1s_sqwv+0x6>
    4918:	cd b7       	in	r28, 0x3d	; 61
    491a:	de b7       	in	r29, 0x3e	; 62
			uint8_t status = FALSE;
    491c:	19 82       	std	Y+1, r1	; 0x01
			uint8_t temp = 0, mask;
    491e:	1a 82       	std	Y+2, r1	; 0x02
			status |= i2c_device_write(RV3028_I2C_SLAVE_ADDR, RTC_EE_COMMAND, &temp, 1);
			waitForEEPROMReady();
			
			if(1)
#else
			if(g_allow_rv3028_eeprom_changes)
    4920:	80 91 6d 05 	lds	r24, 0x056D	; 0x80056d <g_allow_rv3028_eeprom_changes>
    4924:	88 23       	and	r24, r24
    4926:	c9 f0       	breq	.+50     	; 0x495a <_Z13rv3028_1s_sqwv+0x48>
#endif
			{
				if(waitForEEPROMReady())
    4928:	0e 94 e5 23 	call	0x47ca	; 0x47ca <_Z18waitForEEPROMReadyv>
    492c:	81 11       	cpse	r24, r1
    492e:	4b c0       	rjmp	.+150    	; 0x49c6 <_Z13rv3028_1s_sqwv+0xb4>
				{
					return( 1);
				}

				temp = 0xC5;    /* Enable 1Hz Output */
    4930:	85 ec       	ldi	r24, 0xC5	; 197
    4932:	8a 83       	std	Y+2, r24	; 0x02
				mask = 0xFF;    /* 11111111 */
				if(writeOneEEPROMByte(RTC_EEPROM_CLKOUT, mask, temp))
    4934:	45 ec       	ldi	r20, 0xC5	; 197
    4936:	6f ef       	ldi	r22, 0xFF	; 255
    4938:	85 e3       	ldi	r24, 0x35	; 53
    493a:	0e 94 04 24 	call	0x4808	; 0x4808 <_Z18writeOneEEPROMBytehhh>
    493e:	81 11       	cpse	r24, r1
    4940:	44 c0       	rjmp	.+136    	; 0x49ca <_Z13rv3028_1s_sqwv+0xb8>
				{
					return( 1);
				}

				temp = 0x04;    /* Enable direct switching mode */
    4942:	84 e0       	ldi	r24, 0x04	; 4
    4944:	8a 83       	std	Y+2, r24	; 0x02
				mask = 0x06;    /* 00001100 */
				if(writeOneEEPROMByte(RTC_EEPROM_BACKUP, mask, temp))
    4946:	44 e0       	ldi	r20, 0x04	; 4
    4948:	66 e0       	ldi	r22, 0x06	; 6
    494a:	87 e3       	ldi	r24, 0x37	; 55
    494c:	0e 94 04 24 	call	0x4808	; 0x4808 <_Z18writeOneEEPROMBytehhh>
    4950:	81 11       	cpse	r24, r1
    4952:	3d c0       	rjmp	.+122    	; 0x49ce <_Z13rv3028_1s_sqwv+0xbc>
 *				if(writeOneEEPROMByte(RTC_EEPROM_BACKUP, mask, temp))
 *				{
 *					return( 1);
 *				} */

				g_allow_rv3028_eeprom_changes = FALSE;
    4954:	10 92 6d 05 	sts	0x056D, r1	; 0x80056d <g_allow_rv3028_eeprom_changes>
    4958:	1a c0       	rjmp	.+52     	; 0x498e <_Z13rv3028_1s_sqwv+0x7c>
			}
			else    /* Read values from EEPROM - happens automatically for POR but not debugger reset */
			{
				temp = 0x00;
				status = i2c_device_write(RV3028_I2C_SLAVE_ADDR, RTC_EE_COMMAND, &temp, 1);
    495a:	21 e0       	ldi	r18, 0x01	; 1
    495c:	ae 01       	movw	r20, r28
    495e:	4e 5f       	subi	r20, 0xFE	; 254
    4960:	5f 4f       	sbci	r21, 0xFF	; 255
    4962:	67 e2       	ldi	r22, 0x27	; 39
    4964:	84 ea       	ldi	r24, 0xA4	; 164
    4966:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <_Z16i2c_device_writehhPhh>
    496a:	89 83       	std	Y+1, r24	; 0x01
				waitForEEPROMReady();
    496c:	0e 94 e5 23 	call	0x47ca	; 0x47ca <_Z18waitForEEPROMReadyv>
				temp = 0x12;    /* Refresh RAM from EEPROM */
    4970:	82 e1       	ldi	r24, 0x12	; 18
    4972:	8a 83       	std	Y+2, r24	; 0x02
				status |= i2c_device_write(RV3028_I2C_SLAVE_ADDR, RTC_EE_COMMAND, &temp, 1);
    4974:	21 e0       	ldi	r18, 0x01	; 1
    4976:	ae 01       	movw	r20, r28
    4978:	4e 5f       	subi	r20, 0xFE	; 254
    497a:	5f 4f       	sbci	r21, 0xFF	; 255
    497c:	67 e2       	ldi	r22, 0x27	; 39
    497e:	84 ea       	ldi	r24, 0xA4	; 164
    4980:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <_Z16i2c_device_writehhPhh>
    4984:	99 81       	ldd	r25, Y+1	; 0x01
    4986:	89 2b       	or	r24, r25
    4988:	89 83       	std	Y+1, r24	; 0x01
				waitForEEPROMReady();
    498a:	0e 94 e5 23 	call	0x47ca	; 0x47ca <_Z18waitForEEPROMReadyv>
			
			g_tempStr[0] = '\0';
#endif // INIT_EEPROM_ONLY
/* End debugging */

			if(!status)
    498e:	89 81       	ldd	r24, Y+1	; 0x01
    4990:	81 11       	cpse	r24, r1
    4992:	0c c0       	rjmp	.+24     	; 0x49ac <_Z13rv3028_1s_sqwv+0x9a>
			{
				temp = i2c_device_read(RV3028_I2C_SLAVE_ADDR, RTC_STATUS, &status, 1);
    4994:	21 e0       	ldi	r18, 0x01	; 1
    4996:	ae 01       	movw	r20, r28
    4998:	4f 5f       	subi	r20, 0xFF	; 255
    499a:	5f 4f       	sbci	r21, 0xFF	; 255
    499c:	6e e0       	ldi	r22, 0x0E	; 14
    499e:	84 ea       	ldi	r24, 0xA4	; 164
    49a0:	0e 94 4e 05 	call	0xa9c	; 0xa9c <_Z15i2c_device_readhhPhh>
				status &= 0x6F; /* Mask off relevant flags: 01101111 */
    49a4:	89 81       	ldd	r24, Y+1	; 0x01
    49a6:	8f 76       	andi	r24, 0x6F	; 111
    49a8:	89 83       	std	Y+1, r24	; 0x01
    49aa:	02 c0       	rjmp	.+4      	; 0x49b0 <_Z13rv3028_1s_sqwv+0x9e>
			}
			else
			{
				status = 1 << RTC_STATUS_I2C_ERROR;
    49ac:	80 e8       	ldi	r24, 0x80	; 128
    49ae:	89 83       	std	Y+1, r24	; 0x01
			}

			temp = 0x00;    /* Clear status flags */
    49b0:	1a 82       	std	Y+2, r1	; 0x02
			i2c_device_write(RV3028_I2C_SLAVE_ADDR, RTC_STATUS, &temp, 1);
    49b2:	21 e0       	ldi	r18, 0x01	; 1
    49b4:	ae 01       	movw	r20, r28
    49b6:	4e 5f       	subi	r20, 0xFE	; 254
    49b8:	5f 4f       	sbci	r21, 0xFF	; 255
    49ba:	6e e0       	ldi	r22, 0x0E	; 14
    49bc:	84 ea       	ldi	r24, 0xA4	; 164
    49be:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <_Z16i2c_device_writehhPhh>

			return(status);
    49c2:	89 81       	ldd	r24, Y+1	; 0x01
    49c4:	05 c0       	rjmp	.+10     	; 0x49d0 <_Z13rv3028_1s_sqwv+0xbe>
			if(g_allow_rv3028_eeprom_changes)
#endif
			{
				if(waitForEEPROMReady())
				{
					return( 1);
    49c6:	81 e0       	ldi	r24, 0x01	; 1
    49c8:	03 c0       	rjmp	.+6      	; 0x49d0 <_Z13rv3028_1s_sqwv+0xbe>

				temp = 0xC5;    /* Enable 1Hz Output */
				mask = 0xFF;    /* 11111111 */
				if(writeOneEEPROMByte(RTC_EEPROM_CLKOUT, mask, temp))
				{
					return( 1);
    49ca:	81 e0       	ldi	r24, 0x01	; 1
    49cc:	01 c0       	rjmp	.+2      	; 0x49d0 <_Z13rv3028_1s_sqwv+0xbe>

				temp = 0x04;    /* Enable direct switching mode */
				mask = 0x06;    /* 00001100 */
				if(writeOneEEPROMByte(RTC_EEPROM_BACKUP, mask, temp))
				{
					return( 1);
    49ce:	81 e0       	ldi	r24, 0x01	; 1

			temp = 0x00;    /* Clear status flags */
			i2c_device_write(RV3028_I2C_SLAVE_ADDR, RTC_STATUS, &temp, 1);

			return(status);
		}
    49d0:	0f 90       	pop	r0
    49d2:	0f 90       	pop	r0
    49d4:	df 91       	pop	r29
    49d6:	cf 91       	pop	r28
    49d8:	08 95       	ret

000049da <_Z16rv3028_32kHz_sqwv>:


#endif  /* INIT_EEPROM_ONLY */

	void rv3028_32kHz_sqw(void)
	{
    49da:	cf 93       	push	r28
    49dc:	df 93       	push	r29
    49de:	1f 92       	push	r1
    49e0:	cd b7       	in	r28, 0x3d	; 61
    49e2:	de b7       	in	r29, 0x3e	; 62
		/* Just set RAM value */
		uint8_t byte = 0xC0;    /* FD = 32.768 kHz */
    49e4:	80 ec       	ldi	r24, 0xC0	; 192
    49e6:	89 83       	std	Y+1, r24	; 0x01

		i2c_device_write(RV3028_I2C_SLAVE_ADDR, RTC_EEPROM_CLKOUT, &byte, 1);
    49e8:	21 e0       	ldi	r18, 0x01	; 1
    49ea:	ae 01       	movw	r20, r28
    49ec:	4f 5f       	subi	r20, 0xFF	; 255
    49ee:	5f 4f       	sbci	r21, 0xFF	; 255
    49f0:	65 e3       	ldi	r22, 0x35	; 53
    49f2:	84 ea       	ldi	r24, 0xA4	; 164
    49f4:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <_Z16i2c_device_writehhPhh>
	}
    49f8:	0f 90       	pop	r0
    49fa:	df 91       	pop	r29
    49fc:	cf 91       	pop	r28
    49fe:	08 95       	ret

00004a00 <__subsf3>:
    4a00:	50 58       	subi	r21, 0x80	; 128

00004a02 <__addsf3>:
    4a02:	bb 27       	eor	r27, r27
    4a04:	aa 27       	eor	r26, r26
    4a06:	0e 94 18 25 	call	0x4a30	; 0x4a30 <__addsf3x>
    4a0a:	0c 94 c2 26 	jmp	0x4d84	; 0x4d84 <__fp_round>
    4a0e:	0e 94 89 26 	call	0x4d12	; 0x4d12 <__fp_pscA>
    4a12:	38 f0       	brcs	.+14     	; 0x4a22 <__addsf3+0x20>
    4a14:	0e 94 90 26 	call	0x4d20	; 0x4d20 <__fp_pscB>
    4a18:	20 f0       	brcs	.+8      	; 0x4a22 <__addsf3+0x20>
    4a1a:	39 f4       	brne	.+14     	; 0x4a2a <__addsf3+0x28>
    4a1c:	9f 3f       	cpi	r25, 0xFF	; 255
    4a1e:	19 f4       	brne	.+6      	; 0x4a26 <__addsf3+0x24>
    4a20:	26 f4       	brtc	.+8      	; 0x4a2a <__addsf3+0x28>
    4a22:	0c 94 86 26 	jmp	0x4d0c	; 0x4d0c <__fp_nan>
    4a26:	0e f4       	brtc	.+2      	; 0x4a2a <__addsf3+0x28>
    4a28:	e0 95       	com	r30
    4a2a:	e7 fb       	bst	r30, 7
    4a2c:	0c 94 80 26 	jmp	0x4d00	; 0x4d00 <__fp_inf>

00004a30 <__addsf3x>:
    4a30:	e9 2f       	mov	r30, r25
    4a32:	0e 94 e7 26 	call	0x4dce	; 0x4dce <__fp_split3>
    4a36:	58 f3       	brcs	.-42     	; 0x4a0e <__addsf3+0xc>
    4a38:	ba 17       	cp	r27, r26
    4a3a:	62 07       	cpc	r22, r18
    4a3c:	73 07       	cpc	r23, r19
    4a3e:	84 07       	cpc	r24, r20
    4a40:	95 07       	cpc	r25, r21
    4a42:	20 f0       	brcs	.+8      	; 0x4a4c <__addsf3x+0x1c>
    4a44:	79 f4       	brne	.+30     	; 0x4a64 <__addsf3x+0x34>
    4a46:	a6 f5       	brtc	.+104    	; 0x4ab0 <__addsf3x+0x80>
    4a48:	0c 94 09 27 	jmp	0x4e12	; 0x4e12 <__fp_zero>
    4a4c:	0e f4       	brtc	.+2      	; 0x4a50 <__addsf3x+0x20>
    4a4e:	e0 95       	com	r30
    4a50:	0b 2e       	mov	r0, r27
    4a52:	ba 2f       	mov	r27, r26
    4a54:	a0 2d       	mov	r26, r0
    4a56:	0b 01       	movw	r0, r22
    4a58:	b9 01       	movw	r22, r18
    4a5a:	90 01       	movw	r18, r0
    4a5c:	0c 01       	movw	r0, r24
    4a5e:	ca 01       	movw	r24, r20
    4a60:	a0 01       	movw	r20, r0
    4a62:	11 24       	eor	r1, r1
    4a64:	ff 27       	eor	r31, r31
    4a66:	59 1b       	sub	r21, r25
    4a68:	99 f0       	breq	.+38     	; 0x4a90 <__addsf3x+0x60>
    4a6a:	59 3f       	cpi	r21, 0xF9	; 249
    4a6c:	50 f4       	brcc	.+20     	; 0x4a82 <__addsf3x+0x52>
    4a6e:	50 3e       	cpi	r21, 0xE0	; 224
    4a70:	68 f1       	brcs	.+90     	; 0x4acc <__addsf3x+0x9c>
    4a72:	1a 16       	cp	r1, r26
    4a74:	f0 40       	sbci	r31, 0x00	; 0
    4a76:	a2 2f       	mov	r26, r18
    4a78:	23 2f       	mov	r18, r19
    4a7a:	34 2f       	mov	r19, r20
    4a7c:	44 27       	eor	r20, r20
    4a7e:	58 5f       	subi	r21, 0xF8	; 248
    4a80:	f3 cf       	rjmp	.-26     	; 0x4a68 <__addsf3x+0x38>
    4a82:	46 95       	lsr	r20
    4a84:	37 95       	ror	r19
    4a86:	27 95       	ror	r18
    4a88:	a7 95       	ror	r26
    4a8a:	f0 40       	sbci	r31, 0x00	; 0
    4a8c:	53 95       	inc	r21
    4a8e:	c9 f7       	brne	.-14     	; 0x4a82 <__addsf3x+0x52>
    4a90:	7e f4       	brtc	.+30     	; 0x4ab0 <__addsf3x+0x80>
    4a92:	1f 16       	cp	r1, r31
    4a94:	ba 0b       	sbc	r27, r26
    4a96:	62 0b       	sbc	r22, r18
    4a98:	73 0b       	sbc	r23, r19
    4a9a:	84 0b       	sbc	r24, r20
    4a9c:	ba f0       	brmi	.+46     	; 0x4acc <__addsf3x+0x9c>
    4a9e:	91 50       	subi	r25, 0x01	; 1
    4aa0:	a1 f0       	breq	.+40     	; 0x4aca <__addsf3x+0x9a>
    4aa2:	ff 0f       	add	r31, r31
    4aa4:	bb 1f       	adc	r27, r27
    4aa6:	66 1f       	adc	r22, r22
    4aa8:	77 1f       	adc	r23, r23
    4aaa:	88 1f       	adc	r24, r24
    4aac:	c2 f7       	brpl	.-16     	; 0x4a9e <__addsf3x+0x6e>
    4aae:	0e c0       	rjmp	.+28     	; 0x4acc <__addsf3x+0x9c>
    4ab0:	ba 0f       	add	r27, r26
    4ab2:	62 1f       	adc	r22, r18
    4ab4:	73 1f       	adc	r23, r19
    4ab6:	84 1f       	adc	r24, r20
    4ab8:	48 f4       	brcc	.+18     	; 0x4acc <__addsf3x+0x9c>
    4aba:	87 95       	ror	r24
    4abc:	77 95       	ror	r23
    4abe:	67 95       	ror	r22
    4ac0:	b7 95       	ror	r27
    4ac2:	f7 95       	ror	r31
    4ac4:	9e 3f       	cpi	r25, 0xFE	; 254
    4ac6:	08 f0       	brcs	.+2      	; 0x4aca <__addsf3x+0x9a>
    4ac8:	b0 cf       	rjmp	.-160    	; 0x4a2a <__addsf3+0x28>
    4aca:	93 95       	inc	r25
    4acc:	88 0f       	add	r24, r24
    4ace:	08 f0       	brcs	.+2      	; 0x4ad2 <__addsf3x+0xa2>
    4ad0:	99 27       	eor	r25, r25
    4ad2:	ee 0f       	add	r30, r30
    4ad4:	97 95       	ror	r25
    4ad6:	87 95       	ror	r24
    4ad8:	08 95       	ret

00004ada <__cmpsf2>:
    4ada:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <__fp_cmp>
    4ade:	08 f4       	brcc	.+2      	; 0x4ae2 <__cmpsf2+0x8>
    4ae0:	81 e0       	ldi	r24, 0x01	; 1
    4ae2:	08 95       	ret

00004ae4 <cos>:
    4ae4:	0e 94 99 26 	call	0x4d32	; 0x4d32 <__fp_rempio2>
    4ae8:	e3 95       	inc	r30
    4aea:	0c 94 d3 26 	jmp	0x4da6	; 0x4da6 <__fp_sinus>

00004aee <__divsf3>:
    4aee:	0e 94 8b 25 	call	0x4b16	; 0x4b16 <__divsf3x>
    4af2:	0c 94 c2 26 	jmp	0x4d84	; 0x4d84 <__fp_round>
    4af6:	0e 94 90 26 	call	0x4d20	; 0x4d20 <__fp_pscB>
    4afa:	58 f0       	brcs	.+22     	; 0x4b12 <__divsf3+0x24>
    4afc:	0e 94 89 26 	call	0x4d12	; 0x4d12 <__fp_pscA>
    4b00:	40 f0       	brcs	.+16     	; 0x4b12 <__divsf3+0x24>
    4b02:	29 f4       	brne	.+10     	; 0x4b0e <__divsf3+0x20>
    4b04:	5f 3f       	cpi	r21, 0xFF	; 255
    4b06:	29 f0       	breq	.+10     	; 0x4b12 <__divsf3+0x24>
    4b08:	0c 94 80 26 	jmp	0x4d00	; 0x4d00 <__fp_inf>
    4b0c:	51 11       	cpse	r21, r1
    4b0e:	0c 94 0a 27 	jmp	0x4e14	; 0x4e14 <__fp_szero>
    4b12:	0c 94 86 26 	jmp	0x4d0c	; 0x4d0c <__fp_nan>

00004b16 <__divsf3x>:
    4b16:	0e 94 e7 26 	call	0x4dce	; 0x4dce <__fp_split3>
    4b1a:	68 f3       	brcs	.-38     	; 0x4af6 <__divsf3+0x8>

00004b1c <__divsf3_pse>:
    4b1c:	99 23       	and	r25, r25
    4b1e:	b1 f3       	breq	.-20     	; 0x4b0c <__divsf3+0x1e>
    4b20:	55 23       	and	r21, r21
    4b22:	91 f3       	breq	.-28     	; 0x4b08 <__divsf3+0x1a>
    4b24:	95 1b       	sub	r25, r21
    4b26:	55 0b       	sbc	r21, r21
    4b28:	bb 27       	eor	r27, r27
    4b2a:	aa 27       	eor	r26, r26
    4b2c:	62 17       	cp	r22, r18
    4b2e:	73 07       	cpc	r23, r19
    4b30:	84 07       	cpc	r24, r20
    4b32:	38 f0       	brcs	.+14     	; 0x4b42 <__divsf3_pse+0x26>
    4b34:	9f 5f       	subi	r25, 0xFF	; 255
    4b36:	5f 4f       	sbci	r21, 0xFF	; 255
    4b38:	22 0f       	add	r18, r18
    4b3a:	33 1f       	adc	r19, r19
    4b3c:	44 1f       	adc	r20, r20
    4b3e:	aa 1f       	adc	r26, r26
    4b40:	a9 f3       	breq	.-22     	; 0x4b2c <__divsf3_pse+0x10>
    4b42:	35 d0       	rcall	.+106    	; 0x4bae <__divsf3_pse+0x92>
    4b44:	0e 2e       	mov	r0, r30
    4b46:	3a f0       	brmi	.+14     	; 0x4b56 <__divsf3_pse+0x3a>
    4b48:	e0 e8       	ldi	r30, 0x80	; 128
    4b4a:	32 d0       	rcall	.+100    	; 0x4bb0 <__divsf3_pse+0x94>
    4b4c:	91 50       	subi	r25, 0x01	; 1
    4b4e:	50 40       	sbci	r21, 0x00	; 0
    4b50:	e6 95       	lsr	r30
    4b52:	00 1c       	adc	r0, r0
    4b54:	ca f7       	brpl	.-14     	; 0x4b48 <__divsf3_pse+0x2c>
    4b56:	2b d0       	rcall	.+86     	; 0x4bae <__divsf3_pse+0x92>
    4b58:	fe 2f       	mov	r31, r30
    4b5a:	29 d0       	rcall	.+82     	; 0x4bae <__divsf3_pse+0x92>
    4b5c:	66 0f       	add	r22, r22
    4b5e:	77 1f       	adc	r23, r23
    4b60:	88 1f       	adc	r24, r24
    4b62:	bb 1f       	adc	r27, r27
    4b64:	26 17       	cp	r18, r22
    4b66:	37 07       	cpc	r19, r23
    4b68:	48 07       	cpc	r20, r24
    4b6a:	ab 07       	cpc	r26, r27
    4b6c:	b0 e8       	ldi	r27, 0x80	; 128
    4b6e:	09 f0       	breq	.+2      	; 0x4b72 <__divsf3_pse+0x56>
    4b70:	bb 0b       	sbc	r27, r27
    4b72:	80 2d       	mov	r24, r0
    4b74:	bf 01       	movw	r22, r30
    4b76:	ff 27       	eor	r31, r31
    4b78:	93 58       	subi	r25, 0x83	; 131
    4b7a:	5f 4f       	sbci	r21, 0xFF	; 255
    4b7c:	3a f0       	brmi	.+14     	; 0x4b8c <__divsf3_pse+0x70>
    4b7e:	9e 3f       	cpi	r25, 0xFE	; 254
    4b80:	51 05       	cpc	r21, r1
    4b82:	78 f0       	brcs	.+30     	; 0x4ba2 <__divsf3_pse+0x86>
    4b84:	0c 94 80 26 	jmp	0x4d00	; 0x4d00 <__fp_inf>
    4b88:	0c 94 0a 27 	jmp	0x4e14	; 0x4e14 <__fp_szero>
    4b8c:	5f 3f       	cpi	r21, 0xFF	; 255
    4b8e:	e4 f3       	brlt	.-8      	; 0x4b88 <__divsf3_pse+0x6c>
    4b90:	98 3e       	cpi	r25, 0xE8	; 232
    4b92:	d4 f3       	brlt	.-12     	; 0x4b88 <__divsf3_pse+0x6c>
    4b94:	86 95       	lsr	r24
    4b96:	77 95       	ror	r23
    4b98:	67 95       	ror	r22
    4b9a:	b7 95       	ror	r27
    4b9c:	f7 95       	ror	r31
    4b9e:	9f 5f       	subi	r25, 0xFF	; 255
    4ba0:	c9 f7       	brne	.-14     	; 0x4b94 <__divsf3_pse+0x78>
    4ba2:	88 0f       	add	r24, r24
    4ba4:	91 1d       	adc	r25, r1
    4ba6:	96 95       	lsr	r25
    4ba8:	87 95       	ror	r24
    4baa:	97 f9       	bld	r25, 7
    4bac:	08 95       	ret
    4bae:	e1 e0       	ldi	r30, 0x01	; 1
    4bb0:	66 0f       	add	r22, r22
    4bb2:	77 1f       	adc	r23, r23
    4bb4:	88 1f       	adc	r24, r24
    4bb6:	bb 1f       	adc	r27, r27
    4bb8:	62 17       	cp	r22, r18
    4bba:	73 07       	cpc	r23, r19
    4bbc:	84 07       	cpc	r24, r20
    4bbe:	ba 07       	cpc	r27, r26
    4bc0:	20 f0       	brcs	.+8      	; 0x4bca <__divsf3_pse+0xae>
    4bc2:	62 1b       	sub	r22, r18
    4bc4:	73 0b       	sbc	r23, r19
    4bc6:	84 0b       	sbc	r24, r20
    4bc8:	ba 0b       	sbc	r27, r26
    4bca:	ee 1f       	adc	r30, r30
    4bcc:	88 f7       	brcc	.-30     	; 0x4bb0 <__divsf3_pse+0x94>
    4bce:	e0 95       	com	r30
    4bd0:	08 95       	ret

00004bd2 <__fixsfsi>:
    4bd2:	0e 94 f0 25 	call	0x4be0	; 0x4be0 <__fixunssfsi>
    4bd6:	68 94       	set
    4bd8:	b1 11       	cpse	r27, r1
    4bda:	0c 94 0a 27 	jmp	0x4e14	; 0x4e14 <__fp_szero>
    4bde:	08 95       	ret

00004be0 <__fixunssfsi>:
    4be0:	0e 94 ef 26 	call	0x4dde	; 0x4dde <__fp_splitA>
    4be4:	88 f0       	brcs	.+34     	; 0x4c08 <__fixunssfsi+0x28>
    4be6:	9f 57       	subi	r25, 0x7F	; 127
    4be8:	98 f0       	brcs	.+38     	; 0x4c10 <__fixunssfsi+0x30>
    4bea:	b9 2f       	mov	r27, r25
    4bec:	99 27       	eor	r25, r25
    4bee:	b7 51       	subi	r27, 0x17	; 23
    4bf0:	b0 f0       	brcs	.+44     	; 0x4c1e <__fixunssfsi+0x3e>
    4bf2:	e1 f0       	breq	.+56     	; 0x4c2c <__fixunssfsi+0x4c>
    4bf4:	66 0f       	add	r22, r22
    4bf6:	77 1f       	adc	r23, r23
    4bf8:	88 1f       	adc	r24, r24
    4bfa:	99 1f       	adc	r25, r25
    4bfc:	1a f0       	brmi	.+6      	; 0x4c04 <__fixunssfsi+0x24>
    4bfe:	ba 95       	dec	r27
    4c00:	c9 f7       	brne	.-14     	; 0x4bf4 <__fixunssfsi+0x14>
    4c02:	14 c0       	rjmp	.+40     	; 0x4c2c <__fixunssfsi+0x4c>
    4c04:	b1 30       	cpi	r27, 0x01	; 1
    4c06:	91 f0       	breq	.+36     	; 0x4c2c <__fixunssfsi+0x4c>
    4c08:	0e 94 09 27 	call	0x4e12	; 0x4e12 <__fp_zero>
    4c0c:	b1 e0       	ldi	r27, 0x01	; 1
    4c0e:	08 95       	ret
    4c10:	0c 94 09 27 	jmp	0x4e12	; 0x4e12 <__fp_zero>
    4c14:	67 2f       	mov	r22, r23
    4c16:	78 2f       	mov	r23, r24
    4c18:	88 27       	eor	r24, r24
    4c1a:	b8 5f       	subi	r27, 0xF8	; 248
    4c1c:	39 f0       	breq	.+14     	; 0x4c2c <__fixunssfsi+0x4c>
    4c1e:	b9 3f       	cpi	r27, 0xF9	; 249
    4c20:	cc f3       	brlt	.-14     	; 0x4c14 <__fixunssfsi+0x34>
    4c22:	86 95       	lsr	r24
    4c24:	77 95       	ror	r23
    4c26:	67 95       	ror	r22
    4c28:	b3 95       	inc	r27
    4c2a:	d9 f7       	brne	.-10     	; 0x4c22 <__fixunssfsi+0x42>
    4c2c:	3e f4       	brtc	.+14     	; 0x4c3c <__fixunssfsi+0x5c>
    4c2e:	90 95       	com	r25
    4c30:	80 95       	com	r24
    4c32:	70 95       	com	r23
    4c34:	61 95       	neg	r22
    4c36:	7f 4f       	sbci	r23, 0xFF	; 255
    4c38:	8f 4f       	sbci	r24, 0xFF	; 255
    4c3a:	9f 4f       	sbci	r25, 0xFF	; 255
    4c3c:	08 95       	ret

00004c3e <__floatunsisf>:
    4c3e:	e8 94       	clt
    4c40:	09 c0       	rjmp	.+18     	; 0x4c54 <__floatsisf+0x12>

00004c42 <__floatsisf>:
    4c42:	97 fb       	bst	r25, 7
    4c44:	3e f4       	brtc	.+14     	; 0x4c54 <__floatsisf+0x12>
    4c46:	90 95       	com	r25
    4c48:	80 95       	com	r24
    4c4a:	70 95       	com	r23
    4c4c:	61 95       	neg	r22
    4c4e:	7f 4f       	sbci	r23, 0xFF	; 255
    4c50:	8f 4f       	sbci	r24, 0xFF	; 255
    4c52:	9f 4f       	sbci	r25, 0xFF	; 255
    4c54:	99 23       	and	r25, r25
    4c56:	a9 f0       	breq	.+42     	; 0x4c82 <__floatsisf+0x40>
    4c58:	f9 2f       	mov	r31, r25
    4c5a:	96 e9       	ldi	r25, 0x96	; 150
    4c5c:	bb 27       	eor	r27, r27
    4c5e:	93 95       	inc	r25
    4c60:	f6 95       	lsr	r31
    4c62:	87 95       	ror	r24
    4c64:	77 95       	ror	r23
    4c66:	67 95       	ror	r22
    4c68:	b7 95       	ror	r27
    4c6a:	f1 11       	cpse	r31, r1
    4c6c:	f8 cf       	rjmp	.-16     	; 0x4c5e <__floatsisf+0x1c>
    4c6e:	fa f4       	brpl	.+62     	; 0x4cae <__floatsisf+0x6c>
    4c70:	bb 0f       	add	r27, r27
    4c72:	11 f4       	brne	.+4      	; 0x4c78 <__floatsisf+0x36>
    4c74:	60 ff       	sbrs	r22, 0
    4c76:	1b c0       	rjmp	.+54     	; 0x4cae <__floatsisf+0x6c>
    4c78:	6f 5f       	subi	r22, 0xFF	; 255
    4c7a:	7f 4f       	sbci	r23, 0xFF	; 255
    4c7c:	8f 4f       	sbci	r24, 0xFF	; 255
    4c7e:	9f 4f       	sbci	r25, 0xFF	; 255
    4c80:	16 c0       	rjmp	.+44     	; 0x4cae <__floatsisf+0x6c>
    4c82:	88 23       	and	r24, r24
    4c84:	11 f0       	breq	.+4      	; 0x4c8a <__floatsisf+0x48>
    4c86:	96 e9       	ldi	r25, 0x96	; 150
    4c88:	11 c0       	rjmp	.+34     	; 0x4cac <__floatsisf+0x6a>
    4c8a:	77 23       	and	r23, r23
    4c8c:	21 f0       	breq	.+8      	; 0x4c96 <__floatsisf+0x54>
    4c8e:	9e e8       	ldi	r25, 0x8E	; 142
    4c90:	87 2f       	mov	r24, r23
    4c92:	76 2f       	mov	r23, r22
    4c94:	05 c0       	rjmp	.+10     	; 0x4ca0 <__floatsisf+0x5e>
    4c96:	66 23       	and	r22, r22
    4c98:	71 f0       	breq	.+28     	; 0x4cb6 <__floatsisf+0x74>
    4c9a:	96 e8       	ldi	r25, 0x86	; 134
    4c9c:	86 2f       	mov	r24, r22
    4c9e:	70 e0       	ldi	r23, 0x00	; 0
    4ca0:	60 e0       	ldi	r22, 0x00	; 0
    4ca2:	2a f0       	brmi	.+10     	; 0x4cae <__floatsisf+0x6c>
    4ca4:	9a 95       	dec	r25
    4ca6:	66 0f       	add	r22, r22
    4ca8:	77 1f       	adc	r23, r23
    4caa:	88 1f       	adc	r24, r24
    4cac:	da f7       	brpl	.-10     	; 0x4ca4 <__floatsisf+0x62>
    4cae:	88 0f       	add	r24, r24
    4cb0:	96 95       	lsr	r25
    4cb2:	87 95       	ror	r24
    4cb4:	97 f9       	bld	r25, 7
    4cb6:	08 95       	ret

00004cb8 <__fp_cmp>:
    4cb8:	99 0f       	add	r25, r25
    4cba:	00 08       	sbc	r0, r0
    4cbc:	55 0f       	add	r21, r21
    4cbe:	aa 0b       	sbc	r26, r26
    4cc0:	e0 e8       	ldi	r30, 0x80	; 128
    4cc2:	fe ef       	ldi	r31, 0xFE	; 254
    4cc4:	16 16       	cp	r1, r22
    4cc6:	17 06       	cpc	r1, r23
    4cc8:	e8 07       	cpc	r30, r24
    4cca:	f9 07       	cpc	r31, r25
    4ccc:	c0 f0       	brcs	.+48     	; 0x4cfe <__fp_cmp+0x46>
    4cce:	12 16       	cp	r1, r18
    4cd0:	13 06       	cpc	r1, r19
    4cd2:	e4 07       	cpc	r30, r20
    4cd4:	f5 07       	cpc	r31, r21
    4cd6:	98 f0       	brcs	.+38     	; 0x4cfe <__fp_cmp+0x46>
    4cd8:	62 1b       	sub	r22, r18
    4cda:	73 0b       	sbc	r23, r19
    4cdc:	84 0b       	sbc	r24, r20
    4cde:	95 0b       	sbc	r25, r21
    4ce0:	39 f4       	brne	.+14     	; 0x4cf0 <__fp_cmp+0x38>
    4ce2:	0a 26       	eor	r0, r26
    4ce4:	61 f0       	breq	.+24     	; 0x4cfe <__fp_cmp+0x46>
    4ce6:	23 2b       	or	r18, r19
    4ce8:	24 2b       	or	r18, r20
    4cea:	25 2b       	or	r18, r21
    4cec:	21 f4       	brne	.+8      	; 0x4cf6 <__fp_cmp+0x3e>
    4cee:	08 95       	ret
    4cf0:	0a 26       	eor	r0, r26
    4cf2:	09 f4       	brne	.+2      	; 0x4cf6 <__fp_cmp+0x3e>
    4cf4:	a1 40       	sbci	r26, 0x01	; 1
    4cf6:	a6 95       	lsr	r26
    4cf8:	8f ef       	ldi	r24, 0xFF	; 255
    4cfa:	81 1d       	adc	r24, r1
    4cfc:	81 1d       	adc	r24, r1
    4cfe:	08 95       	ret

00004d00 <__fp_inf>:
    4d00:	97 f9       	bld	r25, 7
    4d02:	9f 67       	ori	r25, 0x7F	; 127
    4d04:	80 e8       	ldi	r24, 0x80	; 128
    4d06:	70 e0       	ldi	r23, 0x00	; 0
    4d08:	60 e0       	ldi	r22, 0x00	; 0
    4d0a:	08 95       	ret

00004d0c <__fp_nan>:
    4d0c:	9f ef       	ldi	r25, 0xFF	; 255
    4d0e:	80 ec       	ldi	r24, 0xC0	; 192
    4d10:	08 95       	ret

00004d12 <__fp_pscA>:
    4d12:	00 24       	eor	r0, r0
    4d14:	0a 94       	dec	r0
    4d16:	16 16       	cp	r1, r22
    4d18:	17 06       	cpc	r1, r23
    4d1a:	18 06       	cpc	r1, r24
    4d1c:	09 06       	cpc	r0, r25
    4d1e:	08 95       	ret

00004d20 <__fp_pscB>:
    4d20:	00 24       	eor	r0, r0
    4d22:	0a 94       	dec	r0
    4d24:	12 16       	cp	r1, r18
    4d26:	13 06       	cpc	r1, r19
    4d28:	14 06       	cpc	r1, r20
    4d2a:	05 06       	cpc	r0, r21
    4d2c:	08 95       	ret
    4d2e:	0c 94 86 26 	jmp	0x4d0c	; 0x4d0c <__fp_nan>

00004d32 <__fp_rempio2>:
    4d32:	0e 94 ef 26 	call	0x4dde	; 0x4dde <__fp_splitA>
    4d36:	d8 f3       	brcs	.-10     	; 0x4d2e <__fp_pscB+0xe>
    4d38:	e8 94       	clt
    4d3a:	e0 e0       	ldi	r30, 0x00	; 0
    4d3c:	bb 27       	eor	r27, r27
    4d3e:	9f 57       	subi	r25, 0x7F	; 127
    4d40:	f0 f0       	brcs	.+60     	; 0x4d7e <__fp_rempio2+0x4c>
    4d42:	2a ed       	ldi	r18, 0xDA	; 218
    4d44:	3f e0       	ldi	r19, 0x0F	; 15
    4d46:	49 ec       	ldi	r20, 0xC9	; 201
    4d48:	06 c0       	rjmp	.+12     	; 0x4d56 <__fp_rempio2+0x24>
    4d4a:	ee 0f       	add	r30, r30
    4d4c:	bb 0f       	add	r27, r27
    4d4e:	66 1f       	adc	r22, r22
    4d50:	77 1f       	adc	r23, r23
    4d52:	88 1f       	adc	r24, r24
    4d54:	28 f0       	brcs	.+10     	; 0x4d60 <__fp_rempio2+0x2e>
    4d56:	b2 3a       	cpi	r27, 0xA2	; 162
    4d58:	62 07       	cpc	r22, r18
    4d5a:	73 07       	cpc	r23, r19
    4d5c:	84 07       	cpc	r24, r20
    4d5e:	28 f0       	brcs	.+10     	; 0x4d6a <__fp_rempio2+0x38>
    4d60:	b2 5a       	subi	r27, 0xA2	; 162
    4d62:	62 0b       	sbc	r22, r18
    4d64:	73 0b       	sbc	r23, r19
    4d66:	84 0b       	sbc	r24, r20
    4d68:	e3 95       	inc	r30
    4d6a:	9a 95       	dec	r25
    4d6c:	72 f7       	brpl	.-36     	; 0x4d4a <__fp_rempio2+0x18>
    4d6e:	80 38       	cpi	r24, 0x80	; 128
    4d70:	30 f4       	brcc	.+12     	; 0x4d7e <__fp_rempio2+0x4c>
    4d72:	9a 95       	dec	r25
    4d74:	bb 0f       	add	r27, r27
    4d76:	66 1f       	adc	r22, r22
    4d78:	77 1f       	adc	r23, r23
    4d7a:	88 1f       	adc	r24, r24
    4d7c:	d2 f7       	brpl	.-12     	; 0x4d72 <__fp_rempio2+0x40>
    4d7e:	90 48       	sbci	r25, 0x80	; 128
    4d80:	0c 94 c3 27 	jmp	0x4f86	; 0x4f86 <__fp_mpack_finite>

00004d84 <__fp_round>:
    4d84:	09 2e       	mov	r0, r25
    4d86:	03 94       	inc	r0
    4d88:	00 0c       	add	r0, r0
    4d8a:	11 f4       	brne	.+4      	; 0x4d90 <__fp_round+0xc>
    4d8c:	88 23       	and	r24, r24
    4d8e:	52 f0       	brmi	.+20     	; 0x4da4 <__fp_round+0x20>
    4d90:	bb 0f       	add	r27, r27
    4d92:	40 f4       	brcc	.+16     	; 0x4da4 <__fp_round+0x20>
    4d94:	bf 2b       	or	r27, r31
    4d96:	11 f4       	brne	.+4      	; 0x4d9c <__fp_round+0x18>
    4d98:	60 ff       	sbrs	r22, 0
    4d9a:	04 c0       	rjmp	.+8      	; 0x4da4 <__fp_round+0x20>
    4d9c:	6f 5f       	subi	r22, 0xFF	; 255
    4d9e:	7f 4f       	sbci	r23, 0xFF	; 255
    4da0:	8f 4f       	sbci	r24, 0xFF	; 255
    4da2:	9f 4f       	sbci	r25, 0xFF	; 255
    4da4:	08 95       	ret

00004da6 <__fp_sinus>:
    4da6:	ef 93       	push	r30
    4da8:	e0 ff       	sbrs	r30, 0
    4daa:	07 c0       	rjmp	.+14     	; 0x4dba <__fp_sinus+0x14>
    4dac:	a2 ea       	ldi	r26, 0xA2	; 162
    4dae:	2a ed       	ldi	r18, 0xDA	; 218
    4db0:	3f e0       	ldi	r19, 0x0F	; 15
    4db2:	49 ec       	ldi	r20, 0xC9	; 201
    4db4:	5f eb       	ldi	r21, 0xBF	; 191
    4db6:	0e 94 18 25 	call	0x4a30	; 0x4a30 <__addsf3x>
    4dba:	0e 94 c2 26 	call	0x4d84	; 0x4d84 <__fp_round>
    4dbe:	0f 90       	pop	r0
    4dc0:	03 94       	inc	r0
    4dc2:	01 fc       	sbrc	r0, 1
    4dc4:	90 58       	subi	r25, 0x80	; 128
    4dc6:	ea ec       	ldi	r30, 0xCA	; 202
    4dc8:	f1 e0       	ldi	r31, 0x01	; 1
    4dca:	0c 94 cf 27 	jmp	0x4f9e	; 0x4f9e <__fp_powsodd>

00004dce <__fp_split3>:
    4dce:	57 fd       	sbrc	r21, 7
    4dd0:	90 58       	subi	r25, 0x80	; 128
    4dd2:	44 0f       	add	r20, r20
    4dd4:	55 1f       	adc	r21, r21
    4dd6:	59 f0       	breq	.+22     	; 0x4dee <__fp_splitA+0x10>
    4dd8:	5f 3f       	cpi	r21, 0xFF	; 255
    4dda:	71 f0       	breq	.+28     	; 0x4df8 <__fp_splitA+0x1a>
    4ddc:	47 95       	ror	r20

00004dde <__fp_splitA>:
    4dde:	88 0f       	add	r24, r24
    4de0:	97 fb       	bst	r25, 7
    4de2:	99 1f       	adc	r25, r25
    4de4:	61 f0       	breq	.+24     	; 0x4dfe <__fp_splitA+0x20>
    4de6:	9f 3f       	cpi	r25, 0xFF	; 255
    4de8:	79 f0       	breq	.+30     	; 0x4e08 <__fp_splitA+0x2a>
    4dea:	87 95       	ror	r24
    4dec:	08 95       	ret
    4dee:	12 16       	cp	r1, r18
    4df0:	13 06       	cpc	r1, r19
    4df2:	14 06       	cpc	r1, r20
    4df4:	55 1f       	adc	r21, r21
    4df6:	f2 cf       	rjmp	.-28     	; 0x4ddc <__fp_split3+0xe>
    4df8:	46 95       	lsr	r20
    4dfa:	f1 df       	rcall	.-30     	; 0x4dde <__fp_splitA>
    4dfc:	08 c0       	rjmp	.+16     	; 0x4e0e <__fp_splitA+0x30>
    4dfe:	16 16       	cp	r1, r22
    4e00:	17 06       	cpc	r1, r23
    4e02:	18 06       	cpc	r1, r24
    4e04:	99 1f       	adc	r25, r25
    4e06:	f1 cf       	rjmp	.-30     	; 0x4dea <__fp_splitA+0xc>
    4e08:	86 95       	lsr	r24
    4e0a:	71 05       	cpc	r23, r1
    4e0c:	61 05       	cpc	r22, r1
    4e0e:	08 94       	sec
    4e10:	08 95       	ret

00004e12 <__fp_zero>:
    4e12:	e8 94       	clt

00004e14 <__fp_szero>:
    4e14:	bb 27       	eor	r27, r27
    4e16:	66 27       	eor	r22, r22
    4e18:	77 27       	eor	r23, r23
    4e1a:	cb 01       	movw	r24, r22
    4e1c:	97 f9       	bld	r25, 7
    4e1e:	08 95       	ret

00004e20 <__gesf2>:
    4e20:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <__fp_cmp>
    4e24:	08 f4       	brcc	.+2      	; 0x4e28 <__gesf2+0x8>
    4e26:	8f ef       	ldi	r24, 0xFF	; 255
    4e28:	08 95       	ret

00004e2a <__mulsf3>:
    4e2a:	0e 94 28 27 	call	0x4e50	; 0x4e50 <__mulsf3x>
    4e2e:	0c 94 c2 26 	jmp	0x4d84	; 0x4d84 <__fp_round>
    4e32:	0e 94 89 26 	call	0x4d12	; 0x4d12 <__fp_pscA>
    4e36:	38 f0       	brcs	.+14     	; 0x4e46 <__mulsf3+0x1c>
    4e38:	0e 94 90 26 	call	0x4d20	; 0x4d20 <__fp_pscB>
    4e3c:	20 f0       	brcs	.+8      	; 0x4e46 <__mulsf3+0x1c>
    4e3e:	95 23       	and	r25, r21
    4e40:	11 f0       	breq	.+4      	; 0x4e46 <__mulsf3+0x1c>
    4e42:	0c 94 80 26 	jmp	0x4d00	; 0x4d00 <__fp_inf>
    4e46:	0c 94 86 26 	jmp	0x4d0c	; 0x4d0c <__fp_nan>
    4e4a:	11 24       	eor	r1, r1
    4e4c:	0c 94 0a 27 	jmp	0x4e14	; 0x4e14 <__fp_szero>

00004e50 <__mulsf3x>:
    4e50:	0e 94 e7 26 	call	0x4dce	; 0x4dce <__fp_split3>
    4e54:	70 f3       	brcs	.-36     	; 0x4e32 <__mulsf3+0x8>

00004e56 <__mulsf3_pse>:
    4e56:	95 9f       	mul	r25, r21
    4e58:	c1 f3       	breq	.-16     	; 0x4e4a <__mulsf3+0x20>
    4e5a:	95 0f       	add	r25, r21
    4e5c:	50 e0       	ldi	r21, 0x00	; 0
    4e5e:	55 1f       	adc	r21, r21
    4e60:	62 9f       	mul	r22, r18
    4e62:	f0 01       	movw	r30, r0
    4e64:	72 9f       	mul	r23, r18
    4e66:	bb 27       	eor	r27, r27
    4e68:	f0 0d       	add	r31, r0
    4e6a:	b1 1d       	adc	r27, r1
    4e6c:	63 9f       	mul	r22, r19
    4e6e:	aa 27       	eor	r26, r26
    4e70:	f0 0d       	add	r31, r0
    4e72:	b1 1d       	adc	r27, r1
    4e74:	aa 1f       	adc	r26, r26
    4e76:	64 9f       	mul	r22, r20
    4e78:	66 27       	eor	r22, r22
    4e7a:	b0 0d       	add	r27, r0
    4e7c:	a1 1d       	adc	r26, r1
    4e7e:	66 1f       	adc	r22, r22
    4e80:	82 9f       	mul	r24, r18
    4e82:	22 27       	eor	r18, r18
    4e84:	b0 0d       	add	r27, r0
    4e86:	a1 1d       	adc	r26, r1
    4e88:	62 1f       	adc	r22, r18
    4e8a:	73 9f       	mul	r23, r19
    4e8c:	b0 0d       	add	r27, r0
    4e8e:	a1 1d       	adc	r26, r1
    4e90:	62 1f       	adc	r22, r18
    4e92:	83 9f       	mul	r24, r19
    4e94:	a0 0d       	add	r26, r0
    4e96:	61 1d       	adc	r22, r1
    4e98:	22 1f       	adc	r18, r18
    4e9a:	74 9f       	mul	r23, r20
    4e9c:	33 27       	eor	r19, r19
    4e9e:	a0 0d       	add	r26, r0
    4ea0:	61 1d       	adc	r22, r1
    4ea2:	23 1f       	adc	r18, r19
    4ea4:	84 9f       	mul	r24, r20
    4ea6:	60 0d       	add	r22, r0
    4ea8:	21 1d       	adc	r18, r1
    4eaa:	82 2f       	mov	r24, r18
    4eac:	76 2f       	mov	r23, r22
    4eae:	6a 2f       	mov	r22, r26
    4eb0:	11 24       	eor	r1, r1
    4eb2:	9f 57       	subi	r25, 0x7F	; 127
    4eb4:	50 40       	sbci	r21, 0x00	; 0
    4eb6:	9a f0       	brmi	.+38     	; 0x4ede <__mulsf3_pse+0x88>
    4eb8:	f1 f0       	breq	.+60     	; 0x4ef6 <__mulsf3_pse+0xa0>
    4eba:	88 23       	and	r24, r24
    4ebc:	4a f0       	brmi	.+18     	; 0x4ed0 <__mulsf3_pse+0x7a>
    4ebe:	ee 0f       	add	r30, r30
    4ec0:	ff 1f       	adc	r31, r31
    4ec2:	bb 1f       	adc	r27, r27
    4ec4:	66 1f       	adc	r22, r22
    4ec6:	77 1f       	adc	r23, r23
    4ec8:	88 1f       	adc	r24, r24
    4eca:	91 50       	subi	r25, 0x01	; 1
    4ecc:	50 40       	sbci	r21, 0x00	; 0
    4ece:	a9 f7       	brne	.-22     	; 0x4eba <__mulsf3_pse+0x64>
    4ed0:	9e 3f       	cpi	r25, 0xFE	; 254
    4ed2:	51 05       	cpc	r21, r1
    4ed4:	80 f0       	brcs	.+32     	; 0x4ef6 <__mulsf3_pse+0xa0>
    4ed6:	0c 94 80 26 	jmp	0x4d00	; 0x4d00 <__fp_inf>
    4eda:	0c 94 0a 27 	jmp	0x4e14	; 0x4e14 <__fp_szero>
    4ede:	5f 3f       	cpi	r21, 0xFF	; 255
    4ee0:	e4 f3       	brlt	.-8      	; 0x4eda <__mulsf3_pse+0x84>
    4ee2:	98 3e       	cpi	r25, 0xE8	; 232
    4ee4:	d4 f3       	brlt	.-12     	; 0x4eda <__mulsf3_pse+0x84>
    4ee6:	86 95       	lsr	r24
    4ee8:	77 95       	ror	r23
    4eea:	67 95       	ror	r22
    4eec:	b7 95       	ror	r27
    4eee:	f7 95       	ror	r31
    4ef0:	e7 95       	ror	r30
    4ef2:	9f 5f       	subi	r25, 0xFF	; 255
    4ef4:	c1 f7       	brne	.-16     	; 0x4ee6 <__mulsf3_pse+0x90>
    4ef6:	fe 2b       	or	r31, r30
    4ef8:	88 0f       	add	r24, r24
    4efa:	91 1d       	adc	r25, r1
    4efc:	96 95       	lsr	r25
    4efe:	87 95       	ror	r24
    4f00:	97 f9       	bld	r25, 7
    4f02:	08 95       	ret

00004f04 <round>:
    4f04:	0e 94 ef 26 	call	0x4dde	; 0x4dde <__fp_splitA>
    4f08:	e8 f0       	brcs	.+58     	; 0x4f44 <round+0x40>
    4f0a:	9e 37       	cpi	r25, 0x7E	; 126
    4f0c:	e8 f0       	brcs	.+58     	; 0x4f48 <round+0x44>
    4f0e:	96 39       	cpi	r25, 0x96	; 150
    4f10:	b8 f4       	brcc	.+46     	; 0x4f40 <round+0x3c>
    4f12:	9e 38       	cpi	r25, 0x8E	; 142
    4f14:	48 f4       	brcc	.+18     	; 0x4f28 <round+0x24>
    4f16:	67 2f       	mov	r22, r23
    4f18:	78 2f       	mov	r23, r24
    4f1a:	88 27       	eor	r24, r24
    4f1c:	98 5f       	subi	r25, 0xF8	; 248
    4f1e:	f9 cf       	rjmp	.-14     	; 0x4f12 <round+0xe>
    4f20:	86 95       	lsr	r24
    4f22:	77 95       	ror	r23
    4f24:	67 95       	ror	r22
    4f26:	93 95       	inc	r25
    4f28:	95 39       	cpi	r25, 0x95	; 149
    4f2a:	d0 f3       	brcs	.-12     	; 0x4f20 <round+0x1c>
    4f2c:	b6 2f       	mov	r27, r22
    4f2e:	b1 70       	andi	r27, 0x01	; 1
    4f30:	6b 0f       	add	r22, r27
    4f32:	71 1d       	adc	r23, r1
    4f34:	81 1d       	adc	r24, r1
    4f36:	20 f4       	brcc	.+8      	; 0x4f40 <round+0x3c>
    4f38:	87 95       	ror	r24
    4f3a:	77 95       	ror	r23
    4f3c:	67 95       	ror	r22
    4f3e:	93 95       	inc	r25
    4f40:	0c 94 a6 27 	jmp	0x4f4c	; 0x4f4c <__fp_mintl>
    4f44:	0c 94 c1 27 	jmp	0x4f82	; 0x4f82 <__fp_mpack>
    4f48:	0c 94 0a 27 	jmp	0x4e14	; 0x4e14 <__fp_szero>

00004f4c <__fp_mintl>:
    4f4c:	88 23       	and	r24, r24
    4f4e:	71 f4       	brne	.+28     	; 0x4f6c <__fp_mintl+0x20>
    4f50:	77 23       	and	r23, r23
    4f52:	21 f0       	breq	.+8      	; 0x4f5c <__fp_mintl+0x10>
    4f54:	98 50       	subi	r25, 0x08	; 8
    4f56:	87 2b       	or	r24, r23
    4f58:	76 2f       	mov	r23, r22
    4f5a:	07 c0       	rjmp	.+14     	; 0x4f6a <__fp_mintl+0x1e>
    4f5c:	66 23       	and	r22, r22
    4f5e:	11 f4       	brne	.+4      	; 0x4f64 <__fp_mintl+0x18>
    4f60:	99 27       	eor	r25, r25
    4f62:	0d c0       	rjmp	.+26     	; 0x4f7e <__fp_mintl+0x32>
    4f64:	90 51       	subi	r25, 0x10	; 16
    4f66:	86 2b       	or	r24, r22
    4f68:	70 e0       	ldi	r23, 0x00	; 0
    4f6a:	60 e0       	ldi	r22, 0x00	; 0
    4f6c:	2a f0       	brmi	.+10     	; 0x4f78 <__fp_mintl+0x2c>
    4f6e:	9a 95       	dec	r25
    4f70:	66 0f       	add	r22, r22
    4f72:	77 1f       	adc	r23, r23
    4f74:	88 1f       	adc	r24, r24
    4f76:	da f7       	brpl	.-10     	; 0x4f6e <__fp_mintl+0x22>
    4f78:	88 0f       	add	r24, r24
    4f7a:	96 95       	lsr	r25
    4f7c:	87 95       	ror	r24
    4f7e:	97 f9       	bld	r25, 7
    4f80:	08 95       	ret

00004f82 <__fp_mpack>:
    4f82:	9f 3f       	cpi	r25, 0xFF	; 255
    4f84:	31 f0       	breq	.+12     	; 0x4f92 <__fp_mpack_finite+0xc>

00004f86 <__fp_mpack_finite>:
    4f86:	91 50       	subi	r25, 0x01	; 1
    4f88:	20 f4       	brcc	.+8      	; 0x4f92 <__fp_mpack_finite+0xc>
    4f8a:	87 95       	ror	r24
    4f8c:	77 95       	ror	r23
    4f8e:	67 95       	ror	r22
    4f90:	b7 95       	ror	r27
    4f92:	88 0f       	add	r24, r24
    4f94:	91 1d       	adc	r25, r1
    4f96:	96 95       	lsr	r25
    4f98:	87 95       	ror	r24
    4f9a:	97 f9       	bld	r25, 7
    4f9c:	08 95       	ret

00004f9e <__fp_powsodd>:
    4f9e:	9f 93       	push	r25
    4fa0:	8f 93       	push	r24
    4fa2:	7f 93       	push	r23
    4fa4:	6f 93       	push	r22
    4fa6:	ff 93       	push	r31
    4fa8:	ef 93       	push	r30
    4faa:	9b 01       	movw	r18, r22
    4fac:	ac 01       	movw	r20, r24
    4fae:	0e 94 15 27 	call	0x4e2a	; 0x4e2a <__mulsf3>
    4fb2:	ef 91       	pop	r30
    4fb4:	ff 91       	pop	r31
    4fb6:	0e 94 e3 27 	call	0x4fc6	; 0x4fc6 <__fp_powser>
    4fba:	2f 91       	pop	r18
    4fbc:	3f 91       	pop	r19
    4fbe:	4f 91       	pop	r20
    4fc0:	5f 91       	pop	r21
    4fc2:	0c 94 15 27 	jmp	0x4e2a	; 0x4e2a <__mulsf3>

00004fc6 <__fp_powser>:
    4fc6:	df 93       	push	r29
    4fc8:	cf 93       	push	r28
    4fca:	1f 93       	push	r17
    4fcc:	0f 93       	push	r16
    4fce:	ff 92       	push	r15
    4fd0:	ef 92       	push	r14
    4fd2:	df 92       	push	r13
    4fd4:	7b 01       	movw	r14, r22
    4fd6:	8c 01       	movw	r16, r24
    4fd8:	68 94       	set
    4fda:	06 c0       	rjmp	.+12     	; 0x4fe8 <__fp_powser+0x22>
    4fdc:	da 2e       	mov	r13, r26
    4fde:	ef 01       	movw	r28, r30
    4fe0:	0e 94 28 27 	call	0x4e50	; 0x4e50 <__mulsf3x>
    4fe4:	fe 01       	movw	r30, r28
    4fe6:	e8 94       	clt
    4fe8:	a5 91       	lpm	r26, Z+
    4fea:	25 91       	lpm	r18, Z+
    4fec:	35 91       	lpm	r19, Z+
    4fee:	45 91       	lpm	r20, Z+
    4ff0:	55 91       	lpm	r21, Z+
    4ff2:	a6 f3       	brts	.-24     	; 0x4fdc <__fp_powser+0x16>
    4ff4:	ef 01       	movw	r28, r30
    4ff6:	0e 94 18 25 	call	0x4a30	; 0x4a30 <__addsf3x>
    4ffa:	fe 01       	movw	r30, r28
    4ffc:	97 01       	movw	r18, r14
    4ffe:	a8 01       	movw	r20, r16
    5000:	da 94       	dec	r13
    5002:	69 f7       	brne	.-38     	; 0x4fde <__fp_powser+0x18>
    5004:	df 90       	pop	r13
    5006:	ef 90       	pop	r14
    5008:	ff 90       	pop	r15
    500a:	0f 91       	pop	r16
    500c:	1f 91       	pop	r17
    500e:	cf 91       	pop	r28
    5010:	df 91       	pop	r29
    5012:	08 95       	ret

00005014 <__mulsi3>:
    5014:	db 01       	movw	r26, r22
    5016:	8f 93       	push	r24
    5018:	9f 93       	push	r25
    501a:	0e 94 9f 28 	call	0x513e	; 0x513e <__muluhisi3>
    501e:	bf 91       	pop	r27
    5020:	af 91       	pop	r26
    5022:	a2 9f       	mul	r26, r18
    5024:	80 0d       	add	r24, r0
    5026:	91 1d       	adc	r25, r1
    5028:	a3 9f       	mul	r26, r19
    502a:	90 0d       	add	r25, r0
    502c:	b2 9f       	mul	r27, r18
    502e:	90 0d       	add	r25, r0
    5030:	11 24       	eor	r1, r1
    5032:	08 95       	ret

00005034 <__udivmodhi4>:
    5034:	aa 1b       	sub	r26, r26
    5036:	bb 1b       	sub	r27, r27
    5038:	51 e1       	ldi	r21, 0x11	; 17
    503a:	07 c0       	rjmp	.+14     	; 0x504a <__udivmodhi4_ep>

0000503c <__udivmodhi4_loop>:
    503c:	aa 1f       	adc	r26, r26
    503e:	bb 1f       	adc	r27, r27
    5040:	a6 17       	cp	r26, r22
    5042:	b7 07       	cpc	r27, r23
    5044:	10 f0       	brcs	.+4      	; 0x504a <__udivmodhi4_ep>
    5046:	a6 1b       	sub	r26, r22
    5048:	b7 0b       	sbc	r27, r23

0000504a <__udivmodhi4_ep>:
    504a:	88 1f       	adc	r24, r24
    504c:	99 1f       	adc	r25, r25
    504e:	5a 95       	dec	r21
    5050:	a9 f7       	brne	.-22     	; 0x503c <__udivmodhi4_loop>
    5052:	80 95       	com	r24
    5054:	90 95       	com	r25
    5056:	bc 01       	movw	r22, r24
    5058:	cd 01       	movw	r24, r26
    505a:	08 95       	ret

0000505c <__divmodhi4>:
    505c:	97 fb       	bst	r25, 7
    505e:	07 2e       	mov	r0, r23
    5060:	16 f4       	brtc	.+4      	; 0x5066 <__divmodhi4+0xa>
    5062:	00 94       	com	r0
    5064:	07 d0       	rcall	.+14     	; 0x5074 <__divmodhi4_neg1>
    5066:	77 fd       	sbrc	r23, 7
    5068:	09 d0       	rcall	.+18     	; 0x507c <__divmodhi4_neg2>
    506a:	0e 94 1a 28 	call	0x5034	; 0x5034 <__udivmodhi4>
    506e:	07 fc       	sbrc	r0, 7
    5070:	05 d0       	rcall	.+10     	; 0x507c <__divmodhi4_neg2>
    5072:	3e f4       	brtc	.+14     	; 0x5082 <__divmodhi4_exit>

00005074 <__divmodhi4_neg1>:
    5074:	90 95       	com	r25
    5076:	81 95       	neg	r24
    5078:	9f 4f       	sbci	r25, 0xFF	; 255
    507a:	08 95       	ret

0000507c <__divmodhi4_neg2>:
    507c:	70 95       	com	r23
    507e:	61 95       	neg	r22
    5080:	7f 4f       	sbci	r23, 0xFF	; 255

00005082 <__divmodhi4_exit>:
    5082:	08 95       	ret

00005084 <__udivmodsi4>:
    5084:	a1 e2       	ldi	r26, 0x21	; 33
    5086:	1a 2e       	mov	r1, r26
    5088:	aa 1b       	sub	r26, r26
    508a:	bb 1b       	sub	r27, r27
    508c:	fd 01       	movw	r30, r26
    508e:	0d c0       	rjmp	.+26     	; 0x50aa <__udivmodsi4_ep>

00005090 <__udivmodsi4_loop>:
    5090:	aa 1f       	adc	r26, r26
    5092:	bb 1f       	adc	r27, r27
    5094:	ee 1f       	adc	r30, r30
    5096:	ff 1f       	adc	r31, r31
    5098:	a2 17       	cp	r26, r18
    509a:	b3 07       	cpc	r27, r19
    509c:	e4 07       	cpc	r30, r20
    509e:	f5 07       	cpc	r31, r21
    50a0:	20 f0       	brcs	.+8      	; 0x50aa <__udivmodsi4_ep>
    50a2:	a2 1b       	sub	r26, r18
    50a4:	b3 0b       	sbc	r27, r19
    50a6:	e4 0b       	sbc	r30, r20
    50a8:	f5 0b       	sbc	r31, r21

000050aa <__udivmodsi4_ep>:
    50aa:	66 1f       	adc	r22, r22
    50ac:	77 1f       	adc	r23, r23
    50ae:	88 1f       	adc	r24, r24
    50b0:	99 1f       	adc	r25, r25
    50b2:	1a 94       	dec	r1
    50b4:	69 f7       	brne	.-38     	; 0x5090 <__udivmodsi4_loop>
    50b6:	60 95       	com	r22
    50b8:	70 95       	com	r23
    50ba:	80 95       	com	r24
    50bc:	90 95       	com	r25
    50be:	9b 01       	movw	r18, r22
    50c0:	ac 01       	movw	r20, r24
    50c2:	bd 01       	movw	r22, r26
    50c4:	cf 01       	movw	r24, r30
    50c6:	08 95       	ret

000050c8 <__divmodsi4>:
    50c8:	05 2e       	mov	r0, r21
    50ca:	97 fb       	bst	r25, 7
    50cc:	1e f4       	brtc	.+6      	; 0x50d4 <__divmodsi4+0xc>
    50ce:	00 94       	com	r0
    50d0:	0e 94 7b 28 	call	0x50f6	; 0x50f6 <__negsi2>
    50d4:	57 fd       	sbrc	r21, 7
    50d6:	07 d0       	rcall	.+14     	; 0x50e6 <__divmodsi4_neg2>
    50d8:	0e 94 42 28 	call	0x5084	; 0x5084 <__udivmodsi4>
    50dc:	07 fc       	sbrc	r0, 7
    50de:	03 d0       	rcall	.+6      	; 0x50e6 <__divmodsi4_neg2>
    50e0:	4e f4       	brtc	.+18     	; 0x50f4 <__divmodsi4_exit>
    50e2:	0c 94 7b 28 	jmp	0x50f6	; 0x50f6 <__negsi2>

000050e6 <__divmodsi4_neg2>:
    50e6:	50 95       	com	r21
    50e8:	40 95       	com	r20
    50ea:	30 95       	com	r19
    50ec:	21 95       	neg	r18
    50ee:	3f 4f       	sbci	r19, 0xFF	; 255
    50f0:	4f 4f       	sbci	r20, 0xFF	; 255
    50f2:	5f 4f       	sbci	r21, 0xFF	; 255

000050f4 <__divmodsi4_exit>:
    50f4:	08 95       	ret

000050f6 <__negsi2>:
    50f6:	90 95       	com	r25
    50f8:	80 95       	com	r24
    50fa:	70 95       	com	r23
    50fc:	61 95       	neg	r22
    50fe:	7f 4f       	sbci	r23, 0xFF	; 255
    5100:	8f 4f       	sbci	r24, 0xFF	; 255
    5102:	9f 4f       	sbci	r25, 0xFF	; 255
    5104:	08 95       	ret

00005106 <__tablejump2__>:
    5106:	ee 0f       	add	r30, r30
    5108:	ff 1f       	adc	r31, r31
    510a:	05 90       	lpm	r0, Z+
    510c:	f4 91       	lpm	r31, Z
    510e:	e0 2d       	mov	r30, r0
    5110:	09 94       	ijmp

00005112 <__umulhisi3>:
    5112:	a2 9f       	mul	r26, r18
    5114:	b0 01       	movw	r22, r0
    5116:	b3 9f       	mul	r27, r19
    5118:	c0 01       	movw	r24, r0
    511a:	a3 9f       	mul	r26, r19
    511c:	70 0d       	add	r23, r0
    511e:	81 1d       	adc	r24, r1
    5120:	11 24       	eor	r1, r1
    5122:	91 1d       	adc	r25, r1
    5124:	b2 9f       	mul	r27, r18
    5126:	70 0d       	add	r23, r0
    5128:	81 1d       	adc	r24, r1
    512a:	11 24       	eor	r1, r1
    512c:	91 1d       	adc	r25, r1
    512e:	08 95       	ret

00005130 <__usmulhisi3>:
    5130:	0e 94 89 28 	call	0x5112	; 0x5112 <__umulhisi3>

00005134 <__usmulhisi3_tail>:
    5134:	b7 ff       	sbrs	r27, 7
    5136:	08 95       	ret
    5138:	82 1b       	sub	r24, r18
    513a:	93 0b       	sbc	r25, r19
    513c:	08 95       	ret

0000513e <__muluhisi3>:
    513e:	0e 94 89 28 	call	0x5112	; 0x5112 <__umulhisi3>
    5142:	a5 9f       	mul	r26, r21
    5144:	90 0d       	add	r25, r0
    5146:	b4 9f       	mul	r27, r20
    5148:	90 0d       	add	r25, r0
    514a:	a4 9f       	mul	r26, r20
    514c:	80 0d       	add	r24, r0
    514e:	91 1d       	adc	r25, r1
    5150:	11 24       	eor	r1, r1
    5152:	08 95       	ret

00005154 <__mulshisi3>:
    5154:	b7 ff       	sbrs	r27, 7
    5156:	0c 94 9f 28 	jmp	0x513e	; 0x513e <__muluhisi3>

0000515a <__mulohisi3>:
    515a:	0e 94 9f 28 	call	0x513e	; 0x513e <__muluhisi3>
    515e:	82 1b       	sub	r24, r18
    5160:	93 0b       	sbc	r25, r19
    5162:	08 95       	ret

00005164 <malloc>:
    5164:	0f 93       	push	r16
    5166:	1f 93       	push	r17
    5168:	cf 93       	push	r28
    516a:	df 93       	push	r29
    516c:	82 30       	cpi	r24, 0x02	; 2
    516e:	91 05       	cpc	r25, r1
    5170:	10 f4       	brcc	.+4      	; 0x5176 <malloc+0x12>
    5172:	82 e0       	ldi	r24, 0x02	; 2
    5174:	90 e0       	ldi	r25, 0x00	; 0
    5176:	e0 91 70 05 	lds	r30, 0x0570	; 0x800570 <__flp>
    517a:	f0 91 71 05 	lds	r31, 0x0571	; 0x800571 <__flp+0x1>
    517e:	20 e0       	ldi	r18, 0x00	; 0
    5180:	30 e0       	ldi	r19, 0x00	; 0
    5182:	a0 e0       	ldi	r26, 0x00	; 0
    5184:	b0 e0       	ldi	r27, 0x00	; 0
    5186:	30 97       	sbiw	r30, 0x00	; 0
    5188:	19 f1       	breq	.+70     	; 0x51d0 <malloc+0x6c>
    518a:	40 81       	ld	r20, Z
    518c:	51 81       	ldd	r21, Z+1	; 0x01
    518e:	02 81       	ldd	r16, Z+2	; 0x02
    5190:	13 81       	ldd	r17, Z+3	; 0x03
    5192:	48 17       	cp	r20, r24
    5194:	59 07       	cpc	r21, r25
    5196:	c8 f0       	brcs	.+50     	; 0x51ca <malloc+0x66>
    5198:	84 17       	cp	r24, r20
    519a:	95 07       	cpc	r25, r21
    519c:	69 f4       	brne	.+26     	; 0x51b8 <malloc+0x54>
    519e:	10 97       	sbiw	r26, 0x00	; 0
    51a0:	31 f0       	breq	.+12     	; 0x51ae <malloc+0x4a>
    51a2:	12 96       	adiw	r26, 0x02	; 2
    51a4:	0c 93       	st	X, r16
    51a6:	12 97       	sbiw	r26, 0x02	; 2
    51a8:	13 96       	adiw	r26, 0x03	; 3
    51aa:	1c 93       	st	X, r17
    51ac:	27 c0       	rjmp	.+78     	; 0x51fc <malloc+0x98>
    51ae:	00 93 70 05 	sts	0x0570, r16	; 0x800570 <__flp>
    51b2:	10 93 71 05 	sts	0x0571, r17	; 0x800571 <__flp+0x1>
    51b6:	22 c0       	rjmp	.+68     	; 0x51fc <malloc+0x98>
    51b8:	21 15       	cp	r18, r1
    51ba:	31 05       	cpc	r19, r1
    51bc:	19 f0       	breq	.+6      	; 0x51c4 <malloc+0x60>
    51be:	42 17       	cp	r20, r18
    51c0:	53 07       	cpc	r21, r19
    51c2:	18 f4       	brcc	.+6      	; 0x51ca <malloc+0x66>
    51c4:	9a 01       	movw	r18, r20
    51c6:	bd 01       	movw	r22, r26
    51c8:	ef 01       	movw	r28, r30
    51ca:	df 01       	movw	r26, r30
    51cc:	f8 01       	movw	r30, r16
    51ce:	db cf       	rjmp	.-74     	; 0x5186 <malloc+0x22>
    51d0:	21 15       	cp	r18, r1
    51d2:	31 05       	cpc	r19, r1
    51d4:	f9 f0       	breq	.+62     	; 0x5214 <malloc+0xb0>
    51d6:	28 1b       	sub	r18, r24
    51d8:	39 0b       	sbc	r19, r25
    51da:	24 30       	cpi	r18, 0x04	; 4
    51dc:	31 05       	cpc	r19, r1
    51de:	80 f4       	brcc	.+32     	; 0x5200 <malloc+0x9c>
    51e0:	8a 81       	ldd	r24, Y+2	; 0x02
    51e2:	9b 81       	ldd	r25, Y+3	; 0x03
    51e4:	61 15       	cp	r22, r1
    51e6:	71 05       	cpc	r23, r1
    51e8:	21 f0       	breq	.+8      	; 0x51f2 <malloc+0x8e>
    51ea:	fb 01       	movw	r30, r22
    51ec:	93 83       	std	Z+3, r25	; 0x03
    51ee:	82 83       	std	Z+2, r24	; 0x02
    51f0:	04 c0       	rjmp	.+8      	; 0x51fa <malloc+0x96>
    51f2:	90 93 71 05 	sts	0x0571, r25	; 0x800571 <__flp+0x1>
    51f6:	80 93 70 05 	sts	0x0570, r24	; 0x800570 <__flp>
    51fa:	fe 01       	movw	r30, r28
    51fc:	32 96       	adiw	r30, 0x02	; 2
    51fe:	44 c0       	rjmp	.+136    	; 0x5288 <malloc+0x124>
    5200:	fe 01       	movw	r30, r28
    5202:	e2 0f       	add	r30, r18
    5204:	f3 1f       	adc	r31, r19
    5206:	81 93       	st	Z+, r24
    5208:	91 93       	st	Z+, r25
    520a:	22 50       	subi	r18, 0x02	; 2
    520c:	31 09       	sbc	r19, r1
    520e:	39 83       	std	Y+1, r19	; 0x01
    5210:	28 83       	st	Y, r18
    5212:	3a c0       	rjmp	.+116    	; 0x5288 <malloc+0x124>
    5214:	20 91 6e 05 	lds	r18, 0x056E	; 0x80056e <__brkval>
    5218:	30 91 6f 05 	lds	r19, 0x056F	; 0x80056f <__brkval+0x1>
    521c:	23 2b       	or	r18, r19
    521e:	41 f4       	brne	.+16     	; 0x5230 <malloc+0xcc>
    5220:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    5224:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    5228:	30 93 6f 05 	sts	0x056F, r19	; 0x80056f <__brkval+0x1>
    522c:	20 93 6e 05 	sts	0x056E, r18	; 0x80056e <__brkval>
    5230:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    5234:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    5238:	21 15       	cp	r18, r1
    523a:	31 05       	cpc	r19, r1
    523c:	41 f4       	brne	.+16     	; 0x524e <malloc+0xea>
    523e:	2d b7       	in	r18, 0x3d	; 61
    5240:	3e b7       	in	r19, 0x3e	; 62
    5242:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    5246:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    524a:	24 1b       	sub	r18, r20
    524c:	35 0b       	sbc	r19, r21
    524e:	e0 91 6e 05 	lds	r30, 0x056E	; 0x80056e <__brkval>
    5252:	f0 91 6f 05 	lds	r31, 0x056F	; 0x80056f <__brkval+0x1>
    5256:	e2 17       	cp	r30, r18
    5258:	f3 07       	cpc	r31, r19
    525a:	a0 f4       	brcc	.+40     	; 0x5284 <malloc+0x120>
    525c:	2e 1b       	sub	r18, r30
    525e:	3f 0b       	sbc	r19, r31
    5260:	28 17       	cp	r18, r24
    5262:	39 07       	cpc	r19, r25
    5264:	78 f0       	brcs	.+30     	; 0x5284 <malloc+0x120>
    5266:	ac 01       	movw	r20, r24
    5268:	4e 5f       	subi	r20, 0xFE	; 254
    526a:	5f 4f       	sbci	r21, 0xFF	; 255
    526c:	24 17       	cp	r18, r20
    526e:	35 07       	cpc	r19, r21
    5270:	48 f0       	brcs	.+18     	; 0x5284 <malloc+0x120>
    5272:	4e 0f       	add	r20, r30
    5274:	5f 1f       	adc	r21, r31
    5276:	50 93 6f 05 	sts	0x056F, r21	; 0x80056f <__brkval+0x1>
    527a:	40 93 6e 05 	sts	0x056E, r20	; 0x80056e <__brkval>
    527e:	81 93       	st	Z+, r24
    5280:	91 93       	st	Z+, r25
    5282:	02 c0       	rjmp	.+4      	; 0x5288 <malloc+0x124>
    5284:	e0 e0       	ldi	r30, 0x00	; 0
    5286:	f0 e0       	ldi	r31, 0x00	; 0
    5288:	cf 01       	movw	r24, r30
    528a:	df 91       	pop	r29
    528c:	cf 91       	pop	r28
    528e:	1f 91       	pop	r17
    5290:	0f 91       	pop	r16
    5292:	08 95       	ret

00005294 <free>:
    5294:	cf 93       	push	r28
    5296:	df 93       	push	r29
    5298:	00 97       	sbiw	r24, 0x00	; 0
    529a:	09 f4       	brne	.+2      	; 0x529e <free+0xa>
    529c:	81 c0       	rjmp	.+258    	; 0x53a0 <free+0x10c>
    529e:	fc 01       	movw	r30, r24
    52a0:	32 97       	sbiw	r30, 0x02	; 2
    52a2:	13 82       	std	Z+3, r1	; 0x03
    52a4:	12 82       	std	Z+2, r1	; 0x02
    52a6:	a0 91 70 05 	lds	r26, 0x0570	; 0x800570 <__flp>
    52aa:	b0 91 71 05 	lds	r27, 0x0571	; 0x800571 <__flp+0x1>
    52ae:	10 97       	sbiw	r26, 0x00	; 0
    52b0:	81 f4       	brne	.+32     	; 0x52d2 <free+0x3e>
    52b2:	20 81       	ld	r18, Z
    52b4:	31 81       	ldd	r19, Z+1	; 0x01
    52b6:	82 0f       	add	r24, r18
    52b8:	93 1f       	adc	r25, r19
    52ba:	20 91 6e 05 	lds	r18, 0x056E	; 0x80056e <__brkval>
    52be:	30 91 6f 05 	lds	r19, 0x056F	; 0x80056f <__brkval+0x1>
    52c2:	28 17       	cp	r18, r24
    52c4:	39 07       	cpc	r19, r25
    52c6:	51 f5       	brne	.+84     	; 0x531c <free+0x88>
    52c8:	f0 93 6f 05 	sts	0x056F, r31	; 0x80056f <__brkval+0x1>
    52cc:	e0 93 6e 05 	sts	0x056E, r30	; 0x80056e <__brkval>
    52d0:	67 c0       	rjmp	.+206    	; 0x53a0 <free+0x10c>
    52d2:	ed 01       	movw	r28, r26
    52d4:	20 e0       	ldi	r18, 0x00	; 0
    52d6:	30 e0       	ldi	r19, 0x00	; 0
    52d8:	ce 17       	cp	r28, r30
    52da:	df 07       	cpc	r29, r31
    52dc:	40 f4       	brcc	.+16     	; 0x52ee <free+0x5a>
    52de:	4a 81       	ldd	r20, Y+2	; 0x02
    52e0:	5b 81       	ldd	r21, Y+3	; 0x03
    52e2:	9e 01       	movw	r18, r28
    52e4:	41 15       	cp	r20, r1
    52e6:	51 05       	cpc	r21, r1
    52e8:	f1 f0       	breq	.+60     	; 0x5326 <free+0x92>
    52ea:	ea 01       	movw	r28, r20
    52ec:	f5 cf       	rjmp	.-22     	; 0x52d8 <free+0x44>
    52ee:	d3 83       	std	Z+3, r29	; 0x03
    52f0:	c2 83       	std	Z+2, r28	; 0x02
    52f2:	40 81       	ld	r20, Z
    52f4:	51 81       	ldd	r21, Z+1	; 0x01
    52f6:	84 0f       	add	r24, r20
    52f8:	95 1f       	adc	r25, r21
    52fa:	c8 17       	cp	r28, r24
    52fc:	d9 07       	cpc	r29, r25
    52fe:	59 f4       	brne	.+22     	; 0x5316 <free+0x82>
    5300:	88 81       	ld	r24, Y
    5302:	99 81       	ldd	r25, Y+1	; 0x01
    5304:	84 0f       	add	r24, r20
    5306:	95 1f       	adc	r25, r21
    5308:	02 96       	adiw	r24, 0x02	; 2
    530a:	91 83       	std	Z+1, r25	; 0x01
    530c:	80 83       	st	Z, r24
    530e:	8a 81       	ldd	r24, Y+2	; 0x02
    5310:	9b 81       	ldd	r25, Y+3	; 0x03
    5312:	93 83       	std	Z+3, r25	; 0x03
    5314:	82 83       	std	Z+2, r24	; 0x02
    5316:	21 15       	cp	r18, r1
    5318:	31 05       	cpc	r19, r1
    531a:	29 f4       	brne	.+10     	; 0x5326 <free+0x92>
    531c:	f0 93 71 05 	sts	0x0571, r31	; 0x800571 <__flp+0x1>
    5320:	e0 93 70 05 	sts	0x0570, r30	; 0x800570 <__flp>
    5324:	3d c0       	rjmp	.+122    	; 0x53a0 <free+0x10c>
    5326:	e9 01       	movw	r28, r18
    5328:	fb 83       	std	Y+3, r31	; 0x03
    532a:	ea 83       	std	Y+2, r30	; 0x02
    532c:	49 91       	ld	r20, Y+
    532e:	59 91       	ld	r21, Y+
    5330:	c4 0f       	add	r28, r20
    5332:	d5 1f       	adc	r29, r21
    5334:	ec 17       	cp	r30, r28
    5336:	fd 07       	cpc	r31, r29
    5338:	61 f4       	brne	.+24     	; 0x5352 <free+0xbe>
    533a:	80 81       	ld	r24, Z
    533c:	91 81       	ldd	r25, Z+1	; 0x01
    533e:	84 0f       	add	r24, r20
    5340:	95 1f       	adc	r25, r21
    5342:	02 96       	adiw	r24, 0x02	; 2
    5344:	e9 01       	movw	r28, r18
    5346:	99 83       	std	Y+1, r25	; 0x01
    5348:	88 83       	st	Y, r24
    534a:	82 81       	ldd	r24, Z+2	; 0x02
    534c:	93 81       	ldd	r25, Z+3	; 0x03
    534e:	9b 83       	std	Y+3, r25	; 0x03
    5350:	8a 83       	std	Y+2, r24	; 0x02
    5352:	e0 e0       	ldi	r30, 0x00	; 0
    5354:	f0 e0       	ldi	r31, 0x00	; 0
    5356:	12 96       	adiw	r26, 0x02	; 2
    5358:	8d 91       	ld	r24, X+
    535a:	9c 91       	ld	r25, X
    535c:	13 97       	sbiw	r26, 0x03	; 3
    535e:	00 97       	sbiw	r24, 0x00	; 0
    5360:	19 f0       	breq	.+6      	; 0x5368 <free+0xd4>
    5362:	fd 01       	movw	r30, r26
    5364:	dc 01       	movw	r26, r24
    5366:	f7 cf       	rjmp	.-18     	; 0x5356 <free+0xc2>
    5368:	8d 91       	ld	r24, X+
    536a:	9c 91       	ld	r25, X
    536c:	11 97       	sbiw	r26, 0x01	; 1
    536e:	9d 01       	movw	r18, r26
    5370:	2e 5f       	subi	r18, 0xFE	; 254
    5372:	3f 4f       	sbci	r19, 0xFF	; 255
    5374:	82 0f       	add	r24, r18
    5376:	93 1f       	adc	r25, r19
    5378:	20 91 6e 05 	lds	r18, 0x056E	; 0x80056e <__brkval>
    537c:	30 91 6f 05 	lds	r19, 0x056F	; 0x80056f <__brkval+0x1>
    5380:	28 17       	cp	r18, r24
    5382:	39 07       	cpc	r19, r25
    5384:	69 f4       	brne	.+26     	; 0x53a0 <free+0x10c>
    5386:	30 97       	sbiw	r30, 0x00	; 0
    5388:	29 f4       	brne	.+10     	; 0x5394 <free+0x100>
    538a:	10 92 71 05 	sts	0x0571, r1	; 0x800571 <__flp+0x1>
    538e:	10 92 70 05 	sts	0x0570, r1	; 0x800570 <__flp>
    5392:	02 c0       	rjmp	.+4      	; 0x5398 <free+0x104>
    5394:	13 82       	std	Z+3, r1	; 0x03
    5396:	12 82       	std	Z+2, r1	; 0x02
    5398:	b0 93 6f 05 	sts	0x056F, r27	; 0x80056f <__brkval+0x1>
    539c:	a0 93 6e 05 	sts	0x056E, r26	; 0x80056e <__brkval>
    53a0:	df 91       	pop	r29
    53a2:	cf 91       	pop	r28
    53a4:	08 95       	ret

000053a6 <atoi>:
    53a6:	fc 01       	movw	r30, r24
    53a8:	88 27       	eor	r24, r24
    53aa:	99 27       	eor	r25, r25
    53ac:	e8 94       	clt
    53ae:	21 91       	ld	r18, Z+
    53b0:	20 32       	cpi	r18, 0x20	; 32
    53b2:	e9 f3       	breq	.-6      	; 0x53ae <atoi+0x8>
    53b4:	29 30       	cpi	r18, 0x09	; 9
    53b6:	10 f0       	brcs	.+4      	; 0x53bc <atoi+0x16>
    53b8:	2e 30       	cpi	r18, 0x0E	; 14
    53ba:	c8 f3       	brcs	.-14     	; 0x53ae <atoi+0x8>
    53bc:	2b 32       	cpi	r18, 0x2B	; 43
    53be:	41 f0       	breq	.+16     	; 0x53d0 <atoi+0x2a>
    53c0:	2d 32       	cpi	r18, 0x2D	; 45
    53c2:	39 f4       	brne	.+14     	; 0x53d2 <atoi+0x2c>
    53c4:	68 94       	set
    53c6:	04 c0       	rjmp	.+8      	; 0x53d0 <atoi+0x2a>
    53c8:	0e 94 56 2a 	call	0x54ac	; 0x54ac <__mulhi_const_10>
    53cc:	82 0f       	add	r24, r18
    53ce:	91 1d       	adc	r25, r1
    53d0:	21 91       	ld	r18, Z+
    53d2:	20 53       	subi	r18, 0x30	; 48
    53d4:	2a 30       	cpi	r18, 0x0A	; 10
    53d6:	c0 f3       	brcs	.-16     	; 0x53c8 <atoi+0x22>
    53d8:	1e f4       	brtc	.+6      	; 0x53e0 <atoi+0x3a>
    53da:	90 95       	com	r25
    53dc:	81 95       	neg	r24
    53de:	9f 4f       	sbci	r25, 0xFF	; 255
    53e0:	08 95       	ret

000053e2 <atol>:
    53e2:	1f 93       	push	r17
    53e4:	fc 01       	movw	r30, r24
    53e6:	99 27       	eor	r25, r25
    53e8:	88 27       	eor	r24, r24
    53ea:	bc 01       	movw	r22, r24
    53ec:	e8 94       	clt
    53ee:	11 91       	ld	r17, Z+
    53f0:	10 32       	cpi	r17, 0x20	; 32
    53f2:	e9 f3       	breq	.-6      	; 0x53ee <atol+0xc>
    53f4:	19 30       	cpi	r17, 0x09	; 9
    53f6:	10 f0       	brcs	.+4      	; 0x53fc <atol+0x1a>
    53f8:	1e 30       	cpi	r17, 0x0E	; 14
    53fa:	c8 f3       	brcs	.-14     	; 0x53ee <atol+0xc>
    53fc:	1b 32       	cpi	r17, 0x2B	; 43
    53fe:	51 f0       	breq	.+20     	; 0x5414 <atol+0x32>
    5400:	1d 32       	cpi	r17, 0x2D	; 45
    5402:	49 f4       	brne	.+18     	; 0x5416 <atol+0x34>
    5404:	68 94       	set
    5406:	06 c0       	rjmp	.+12     	; 0x5414 <atol+0x32>
    5408:	0e 94 41 2a 	call	0x5482	; 0x5482 <__mulsi_const_10>
    540c:	61 0f       	add	r22, r17
    540e:	71 1d       	adc	r23, r1
    5410:	81 1d       	adc	r24, r1
    5412:	91 1d       	adc	r25, r1
    5414:	11 91       	ld	r17, Z+
    5416:	10 53       	subi	r17, 0x30	; 48
    5418:	1a 30       	cpi	r17, 0x0A	; 10
    541a:	b0 f3       	brcs	.-20     	; 0x5408 <atol+0x26>
    541c:	3e f4       	brtc	.+14     	; 0x542c <atol+0x4a>
    541e:	90 95       	com	r25
    5420:	80 95       	com	r24
    5422:	70 95       	com	r23
    5424:	61 95       	neg	r22
    5426:	7f 4f       	sbci	r23, 0xFF	; 255
    5428:	8f 4f       	sbci	r24, 0xFF	; 255
    542a:	9f 4f       	sbci	r25, 0xFF	; 255
    542c:	1f 91       	pop	r17
    542e:	08 95       	ret

00005430 <toupper>:
    5430:	91 11       	cpse	r25, r1
    5432:	08 95       	ret
    5434:	81 56       	subi	r24, 0x61	; 97
    5436:	8a 51       	subi	r24, 0x1A	; 26
    5438:	08 f4       	brcc	.+2      	; 0x543c <toupper+0xc>
    543a:	80 52       	subi	r24, 0x20	; 32
    543c:	85 58       	subi	r24, 0x85	; 133
    543e:	08 95       	ret

00005440 <strcat>:
    5440:	fb 01       	movw	r30, r22
    5442:	dc 01       	movw	r26, r24
    5444:	0d 90       	ld	r0, X+
    5446:	00 20       	and	r0, r0
    5448:	e9 f7       	brne	.-6      	; 0x5444 <strcat+0x4>
    544a:	11 97       	sbiw	r26, 0x01	; 1
    544c:	01 90       	ld	r0, Z+
    544e:	0d 92       	st	X+, r0
    5450:	00 20       	and	r0, r0
    5452:	e1 f7       	brne	.-8      	; 0x544c <strcat+0xc>
    5454:	08 95       	ret

00005456 <strcpy>:
    5456:	fb 01       	movw	r30, r22
    5458:	dc 01       	movw	r26, r24
    545a:	01 90       	ld	r0, Z+
    545c:	0d 92       	st	X+, r0
    545e:	00 20       	and	r0, r0
    5460:	e1 f7       	brne	.-8      	; 0x545a <strcpy+0x4>
    5462:	08 95       	ret

00005464 <strncpy>:
    5464:	fb 01       	movw	r30, r22
    5466:	dc 01       	movw	r26, r24
    5468:	41 50       	subi	r20, 0x01	; 1
    546a:	50 40       	sbci	r21, 0x00	; 0
    546c:	48 f0       	brcs	.+18     	; 0x5480 <strncpy+0x1c>
    546e:	01 90       	ld	r0, Z+
    5470:	0d 92       	st	X+, r0
    5472:	00 20       	and	r0, r0
    5474:	c9 f7       	brne	.-14     	; 0x5468 <strncpy+0x4>
    5476:	01 c0       	rjmp	.+2      	; 0x547a <strncpy+0x16>
    5478:	1d 92       	st	X+, r1
    547a:	41 50       	subi	r20, 0x01	; 1
    547c:	50 40       	sbci	r21, 0x00	; 0
    547e:	e0 f7       	brcc	.-8      	; 0x5478 <strncpy+0x14>
    5480:	08 95       	ret

00005482 <__mulsi_const_10>:
    5482:	59 2f       	mov	r21, r25
    5484:	48 2f       	mov	r20, r24
    5486:	37 2f       	mov	r19, r23
    5488:	26 2f       	mov	r18, r22
    548a:	66 0f       	add	r22, r22
    548c:	77 1f       	adc	r23, r23
    548e:	88 1f       	adc	r24, r24
    5490:	99 1f       	adc	r25, r25
    5492:	66 0f       	add	r22, r22
    5494:	77 1f       	adc	r23, r23
    5496:	88 1f       	adc	r24, r24
    5498:	99 1f       	adc	r25, r25
    549a:	62 0f       	add	r22, r18
    549c:	73 1f       	adc	r23, r19
    549e:	84 1f       	adc	r24, r20
    54a0:	95 1f       	adc	r25, r21
    54a2:	66 0f       	add	r22, r22
    54a4:	77 1f       	adc	r23, r23
    54a6:	88 1f       	adc	r24, r24
    54a8:	99 1f       	adc	r25, r25
    54aa:	08 95       	ret

000054ac <__mulhi_const_10>:
    54ac:	7a e0       	ldi	r23, 0x0A	; 10
    54ae:	97 9f       	mul	r25, r23
    54b0:	90 2d       	mov	r25, r0
    54b2:	87 9f       	mul	r24, r23
    54b4:	80 2d       	mov	r24, r0
    54b6:	91 0d       	add	r25, r1
    54b8:	11 24       	eor	r1, r1
    54ba:	08 95       	ret

000054bc <sprintf>:
    54bc:	ae e0       	ldi	r26, 0x0E	; 14
    54be:	b0 e0       	ldi	r27, 0x00	; 0
    54c0:	e4 e6       	ldi	r30, 0x64	; 100
    54c2:	fa e2       	ldi	r31, 0x2A	; 42
    54c4:	0c 94 67 2d 	jmp	0x5ace	; 0x5ace <__prologue_saves__+0x1c>
    54c8:	0d 89       	ldd	r16, Y+21	; 0x15
    54ca:	1e 89       	ldd	r17, Y+22	; 0x16
    54cc:	86 e0       	ldi	r24, 0x06	; 6
    54ce:	8c 83       	std	Y+4, r24	; 0x04
    54d0:	1a 83       	std	Y+2, r17	; 0x02
    54d2:	09 83       	std	Y+1, r16	; 0x01
    54d4:	8f ef       	ldi	r24, 0xFF	; 255
    54d6:	9f e7       	ldi	r25, 0x7F	; 127
    54d8:	9e 83       	std	Y+6, r25	; 0x06
    54da:	8d 83       	std	Y+5, r24	; 0x05
    54dc:	ae 01       	movw	r20, r28
    54de:	47 5e       	subi	r20, 0xE7	; 231
    54e0:	5f 4f       	sbci	r21, 0xFF	; 255
    54e2:	6f 89       	ldd	r22, Y+23	; 0x17
    54e4:	78 8d       	ldd	r23, Y+24	; 0x18
    54e6:	ce 01       	movw	r24, r28
    54e8:	01 96       	adiw	r24, 0x01	; 1
    54ea:	0e 94 80 2a 	call	0x5500	; 0x5500 <vfprintf>
    54ee:	ef 81       	ldd	r30, Y+7	; 0x07
    54f0:	f8 85       	ldd	r31, Y+8	; 0x08
    54f2:	e0 0f       	add	r30, r16
    54f4:	f1 1f       	adc	r31, r17
    54f6:	10 82       	st	Z, r1
    54f8:	2e 96       	adiw	r28, 0x0e	; 14
    54fa:	e4 e0       	ldi	r30, 0x04	; 4
    54fc:	0c 94 83 2d 	jmp	0x5b06	; 0x5b06 <__epilogue_restores__+0x1c>

00005500 <vfprintf>:
    5500:	ab e0       	ldi	r26, 0x0B	; 11
    5502:	b0 e0       	ldi	r27, 0x00	; 0
    5504:	e6 e8       	ldi	r30, 0x86	; 134
    5506:	fa e2       	ldi	r31, 0x2A	; 42
    5508:	0c 94 59 2d 	jmp	0x5ab2	; 0x5ab2 <__prologue_saves__>
    550c:	6c 01       	movw	r12, r24
    550e:	7b 01       	movw	r14, r22
    5510:	8a 01       	movw	r16, r20
    5512:	fc 01       	movw	r30, r24
    5514:	17 82       	std	Z+7, r1	; 0x07
    5516:	16 82       	std	Z+6, r1	; 0x06
    5518:	83 81       	ldd	r24, Z+3	; 0x03
    551a:	81 ff       	sbrs	r24, 1
    551c:	cc c1       	rjmp	.+920    	; 0x58b6 <vfprintf+0x3b6>
    551e:	ce 01       	movw	r24, r28
    5520:	01 96       	adiw	r24, 0x01	; 1
    5522:	3c 01       	movw	r6, r24
    5524:	f6 01       	movw	r30, r12
    5526:	93 81       	ldd	r25, Z+3	; 0x03
    5528:	f7 01       	movw	r30, r14
    552a:	93 fd       	sbrc	r25, 3
    552c:	85 91       	lpm	r24, Z+
    552e:	93 ff       	sbrs	r25, 3
    5530:	81 91       	ld	r24, Z+
    5532:	7f 01       	movw	r14, r30
    5534:	88 23       	and	r24, r24
    5536:	09 f4       	brne	.+2      	; 0x553a <vfprintf+0x3a>
    5538:	ba c1       	rjmp	.+884    	; 0x58ae <vfprintf+0x3ae>
    553a:	85 32       	cpi	r24, 0x25	; 37
    553c:	39 f4       	brne	.+14     	; 0x554c <vfprintf+0x4c>
    553e:	93 fd       	sbrc	r25, 3
    5540:	85 91       	lpm	r24, Z+
    5542:	93 ff       	sbrs	r25, 3
    5544:	81 91       	ld	r24, Z+
    5546:	7f 01       	movw	r14, r30
    5548:	85 32       	cpi	r24, 0x25	; 37
    554a:	29 f4       	brne	.+10     	; 0x5556 <vfprintf+0x56>
    554c:	b6 01       	movw	r22, r12
    554e:	90 e0       	ldi	r25, 0x00	; 0
    5550:	0e 94 77 2c 	call	0x58ee	; 0x58ee <fputc>
    5554:	e7 cf       	rjmp	.-50     	; 0x5524 <vfprintf+0x24>
    5556:	91 2c       	mov	r9, r1
    5558:	21 2c       	mov	r2, r1
    555a:	31 2c       	mov	r3, r1
    555c:	ff e1       	ldi	r31, 0x1F	; 31
    555e:	f3 15       	cp	r31, r3
    5560:	d8 f0       	brcs	.+54     	; 0x5598 <vfprintf+0x98>
    5562:	8b 32       	cpi	r24, 0x2B	; 43
    5564:	79 f0       	breq	.+30     	; 0x5584 <vfprintf+0x84>
    5566:	38 f4       	brcc	.+14     	; 0x5576 <vfprintf+0x76>
    5568:	80 32       	cpi	r24, 0x20	; 32
    556a:	79 f0       	breq	.+30     	; 0x558a <vfprintf+0x8a>
    556c:	83 32       	cpi	r24, 0x23	; 35
    556e:	a1 f4       	brne	.+40     	; 0x5598 <vfprintf+0x98>
    5570:	23 2d       	mov	r18, r3
    5572:	20 61       	ori	r18, 0x10	; 16
    5574:	1d c0       	rjmp	.+58     	; 0x55b0 <vfprintf+0xb0>
    5576:	8d 32       	cpi	r24, 0x2D	; 45
    5578:	61 f0       	breq	.+24     	; 0x5592 <vfprintf+0x92>
    557a:	80 33       	cpi	r24, 0x30	; 48
    557c:	69 f4       	brne	.+26     	; 0x5598 <vfprintf+0x98>
    557e:	23 2d       	mov	r18, r3
    5580:	21 60       	ori	r18, 0x01	; 1
    5582:	16 c0       	rjmp	.+44     	; 0x55b0 <vfprintf+0xb0>
    5584:	83 2d       	mov	r24, r3
    5586:	82 60       	ori	r24, 0x02	; 2
    5588:	38 2e       	mov	r3, r24
    558a:	e3 2d       	mov	r30, r3
    558c:	e4 60       	ori	r30, 0x04	; 4
    558e:	3e 2e       	mov	r3, r30
    5590:	2a c0       	rjmp	.+84     	; 0x55e6 <vfprintf+0xe6>
    5592:	f3 2d       	mov	r31, r3
    5594:	f8 60       	ori	r31, 0x08	; 8
    5596:	1d c0       	rjmp	.+58     	; 0x55d2 <vfprintf+0xd2>
    5598:	37 fc       	sbrc	r3, 7
    559a:	2d c0       	rjmp	.+90     	; 0x55f6 <vfprintf+0xf6>
    559c:	20 ed       	ldi	r18, 0xD0	; 208
    559e:	28 0f       	add	r18, r24
    55a0:	2a 30       	cpi	r18, 0x0A	; 10
    55a2:	40 f0       	brcs	.+16     	; 0x55b4 <vfprintf+0xb4>
    55a4:	8e 32       	cpi	r24, 0x2E	; 46
    55a6:	b9 f4       	brne	.+46     	; 0x55d6 <vfprintf+0xd6>
    55a8:	36 fc       	sbrc	r3, 6
    55aa:	81 c1       	rjmp	.+770    	; 0x58ae <vfprintf+0x3ae>
    55ac:	23 2d       	mov	r18, r3
    55ae:	20 64       	ori	r18, 0x40	; 64
    55b0:	32 2e       	mov	r3, r18
    55b2:	19 c0       	rjmp	.+50     	; 0x55e6 <vfprintf+0xe6>
    55b4:	36 fe       	sbrs	r3, 6
    55b6:	06 c0       	rjmp	.+12     	; 0x55c4 <vfprintf+0xc4>
    55b8:	8a e0       	ldi	r24, 0x0A	; 10
    55ba:	98 9e       	mul	r9, r24
    55bc:	20 0d       	add	r18, r0
    55be:	11 24       	eor	r1, r1
    55c0:	92 2e       	mov	r9, r18
    55c2:	11 c0       	rjmp	.+34     	; 0x55e6 <vfprintf+0xe6>
    55c4:	ea e0       	ldi	r30, 0x0A	; 10
    55c6:	2e 9e       	mul	r2, r30
    55c8:	20 0d       	add	r18, r0
    55ca:	11 24       	eor	r1, r1
    55cc:	22 2e       	mov	r2, r18
    55ce:	f3 2d       	mov	r31, r3
    55d0:	f0 62       	ori	r31, 0x20	; 32
    55d2:	3f 2e       	mov	r3, r31
    55d4:	08 c0       	rjmp	.+16     	; 0x55e6 <vfprintf+0xe6>
    55d6:	8c 36       	cpi	r24, 0x6C	; 108
    55d8:	21 f4       	brne	.+8      	; 0x55e2 <vfprintf+0xe2>
    55da:	83 2d       	mov	r24, r3
    55dc:	80 68       	ori	r24, 0x80	; 128
    55de:	38 2e       	mov	r3, r24
    55e0:	02 c0       	rjmp	.+4      	; 0x55e6 <vfprintf+0xe6>
    55e2:	88 36       	cpi	r24, 0x68	; 104
    55e4:	41 f4       	brne	.+16     	; 0x55f6 <vfprintf+0xf6>
    55e6:	f7 01       	movw	r30, r14
    55e8:	93 fd       	sbrc	r25, 3
    55ea:	85 91       	lpm	r24, Z+
    55ec:	93 ff       	sbrs	r25, 3
    55ee:	81 91       	ld	r24, Z+
    55f0:	7f 01       	movw	r14, r30
    55f2:	81 11       	cpse	r24, r1
    55f4:	b3 cf       	rjmp	.-154    	; 0x555c <vfprintf+0x5c>
    55f6:	98 2f       	mov	r25, r24
    55f8:	9f 7d       	andi	r25, 0xDF	; 223
    55fa:	95 54       	subi	r25, 0x45	; 69
    55fc:	93 30       	cpi	r25, 0x03	; 3
    55fe:	28 f4       	brcc	.+10     	; 0x560a <vfprintf+0x10a>
    5600:	0c 5f       	subi	r16, 0xFC	; 252
    5602:	1f 4f       	sbci	r17, 0xFF	; 255
    5604:	9f e3       	ldi	r25, 0x3F	; 63
    5606:	99 83       	std	Y+1, r25	; 0x01
    5608:	0d c0       	rjmp	.+26     	; 0x5624 <vfprintf+0x124>
    560a:	83 36       	cpi	r24, 0x63	; 99
    560c:	31 f0       	breq	.+12     	; 0x561a <vfprintf+0x11a>
    560e:	83 37       	cpi	r24, 0x73	; 115
    5610:	71 f0       	breq	.+28     	; 0x562e <vfprintf+0x12e>
    5612:	83 35       	cpi	r24, 0x53	; 83
    5614:	09 f0       	breq	.+2      	; 0x5618 <vfprintf+0x118>
    5616:	59 c0       	rjmp	.+178    	; 0x56ca <vfprintf+0x1ca>
    5618:	21 c0       	rjmp	.+66     	; 0x565c <vfprintf+0x15c>
    561a:	f8 01       	movw	r30, r16
    561c:	80 81       	ld	r24, Z
    561e:	89 83       	std	Y+1, r24	; 0x01
    5620:	0e 5f       	subi	r16, 0xFE	; 254
    5622:	1f 4f       	sbci	r17, 0xFF	; 255
    5624:	88 24       	eor	r8, r8
    5626:	83 94       	inc	r8
    5628:	91 2c       	mov	r9, r1
    562a:	53 01       	movw	r10, r6
    562c:	13 c0       	rjmp	.+38     	; 0x5654 <vfprintf+0x154>
    562e:	28 01       	movw	r4, r16
    5630:	f2 e0       	ldi	r31, 0x02	; 2
    5632:	4f 0e       	add	r4, r31
    5634:	51 1c       	adc	r5, r1
    5636:	f8 01       	movw	r30, r16
    5638:	a0 80       	ld	r10, Z
    563a:	b1 80       	ldd	r11, Z+1	; 0x01
    563c:	36 fe       	sbrs	r3, 6
    563e:	03 c0       	rjmp	.+6      	; 0x5646 <vfprintf+0x146>
    5640:	69 2d       	mov	r22, r9
    5642:	70 e0       	ldi	r23, 0x00	; 0
    5644:	02 c0       	rjmp	.+4      	; 0x564a <vfprintf+0x14a>
    5646:	6f ef       	ldi	r22, 0xFF	; 255
    5648:	7f ef       	ldi	r23, 0xFF	; 255
    564a:	c5 01       	movw	r24, r10
    564c:	0e 94 6c 2c 	call	0x58d8	; 0x58d8 <strnlen>
    5650:	4c 01       	movw	r8, r24
    5652:	82 01       	movw	r16, r4
    5654:	f3 2d       	mov	r31, r3
    5656:	ff 77       	andi	r31, 0x7F	; 127
    5658:	3f 2e       	mov	r3, r31
    565a:	16 c0       	rjmp	.+44     	; 0x5688 <vfprintf+0x188>
    565c:	28 01       	movw	r4, r16
    565e:	22 e0       	ldi	r18, 0x02	; 2
    5660:	42 0e       	add	r4, r18
    5662:	51 1c       	adc	r5, r1
    5664:	f8 01       	movw	r30, r16
    5666:	a0 80       	ld	r10, Z
    5668:	b1 80       	ldd	r11, Z+1	; 0x01
    566a:	36 fe       	sbrs	r3, 6
    566c:	03 c0       	rjmp	.+6      	; 0x5674 <vfprintf+0x174>
    566e:	69 2d       	mov	r22, r9
    5670:	70 e0       	ldi	r23, 0x00	; 0
    5672:	02 c0       	rjmp	.+4      	; 0x5678 <vfprintf+0x178>
    5674:	6f ef       	ldi	r22, 0xFF	; 255
    5676:	7f ef       	ldi	r23, 0xFF	; 255
    5678:	c5 01       	movw	r24, r10
    567a:	0e 94 61 2c 	call	0x58c2	; 0x58c2 <strnlen_P>
    567e:	4c 01       	movw	r8, r24
    5680:	f3 2d       	mov	r31, r3
    5682:	f0 68       	ori	r31, 0x80	; 128
    5684:	3f 2e       	mov	r3, r31
    5686:	82 01       	movw	r16, r4
    5688:	33 fc       	sbrc	r3, 3
    568a:	1b c0       	rjmp	.+54     	; 0x56c2 <vfprintf+0x1c2>
    568c:	82 2d       	mov	r24, r2
    568e:	90 e0       	ldi	r25, 0x00	; 0
    5690:	88 16       	cp	r8, r24
    5692:	99 06       	cpc	r9, r25
    5694:	b0 f4       	brcc	.+44     	; 0x56c2 <vfprintf+0x1c2>
    5696:	b6 01       	movw	r22, r12
    5698:	80 e2       	ldi	r24, 0x20	; 32
    569a:	90 e0       	ldi	r25, 0x00	; 0
    569c:	0e 94 77 2c 	call	0x58ee	; 0x58ee <fputc>
    56a0:	2a 94       	dec	r2
    56a2:	f4 cf       	rjmp	.-24     	; 0x568c <vfprintf+0x18c>
    56a4:	f5 01       	movw	r30, r10
    56a6:	37 fc       	sbrc	r3, 7
    56a8:	85 91       	lpm	r24, Z+
    56aa:	37 fe       	sbrs	r3, 7
    56ac:	81 91       	ld	r24, Z+
    56ae:	5f 01       	movw	r10, r30
    56b0:	b6 01       	movw	r22, r12
    56b2:	90 e0       	ldi	r25, 0x00	; 0
    56b4:	0e 94 77 2c 	call	0x58ee	; 0x58ee <fputc>
    56b8:	21 10       	cpse	r2, r1
    56ba:	2a 94       	dec	r2
    56bc:	21 e0       	ldi	r18, 0x01	; 1
    56be:	82 1a       	sub	r8, r18
    56c0:	91 08       	sbc	r9, r1
    56c2:	81 14       	cp	r8, r1
    56c4:	91 04       	cpc	r9, r1
    56c6:	71 f7       	brne	.-36     	; 0x56a4 <vfprintf+0x1a4>
    56c8:	e8 c0       	rjmp	.+464    	; 0x589a <vfprintf+0x39a>
    56ca:	84 36       	cpi	r24, 0x64	; 100
    56cc:	11 f0       	breq	.+4      	; 0x56d2 <vfprintf+0x1d2>
    56ce:	89 36       	cpi	r24, 0x69	; 105
    56d0:	41 f5       	brne	.+80     	; 0x5722 <vfprintf+0x222>
    56d2:	f8 01       	movw	r30, r16
    56d4:	37 fe       	sbrs	r3, 7
    56d6:	07 c0       	rjmp	.+14     	; 0x56e6 <vfprintf+0x1e6>
    56d8:	60 81       	ld	r22, Z
    56da:	71 81       	ldd	r23, Z+1	; 0x01
    56dc:	82 81       	ldd	r24, Z+2	; 0x02
    56de:	93 81       	ldd	r25, Z+3	; 0x03
    56e0:	0c 5f       	subi	r16, 0xFC	; 252
    56e2:	1f 4f       	sbci	r17, 0xFF	; 255
    56e4:	08 c0       	rjmp	.+16     	; 0x56f6 <vfprintf+0x1f6>
    56e6:	60 81       	ld	r22, Z
    56e8:	71 81       	ldd	r23, Z+1	; 0x01
    56ea:	07 2e       	mov	r0, r23
    56ec:	00 0c       	add	r0, r0
    56ee:	88 0b       	sbc	r24, r24
    56f0:	99 0b       	sbc	r25, r25
    56f2:	0e 5f       	subi	r16, 0xFE	; 254
    56f4:	1f 4f       	sbci	r17, 0xFF	; 255
    56f6:	f3 2d       	mov	r31, r3
    56f8:	ff 76       	andi	r31, 0x6F	; 111
    56fa:	3f 2e       	mov	r3, r31
    56fc:	97 ff       	sbrs	r25, 7
    56fe:	09 c0       	rjmp	.+18     	; 0x5712 <vfprintf+0x212>
    5700:	90 95       	com	r25
    5702:	80 95       	com	r24
    5704:	70 95       	com	r23
    5706:	61 95       	neg	r22
    5708:	7f 4f       	sbci	r23, 0xFF	; 255
    570a:	8f 4f       	sbci	r24, 0xFF	; 255
    570c:	9f 4f       	sbci	r25, 0xFF	; 255
    570e:	f0 68       	ori	r31, 0x80	; 128
    5710:	3f 2e       	mov	r3, r31
    5712:	2a e0       	ldi	r18, 0x0A	; 10
    5714:	30 e0       	ldi	r19, 0x00	; 0
    5716:	a3 01       	movw	r20, r6
    5718:	0e 94 b3 2c 	call	0x5966	; 0x5966 <__ultoa_invert>
    571c:	88 2e       	mov	r8, r24
    571e:	86 18       	sub	r8, r6
    5720:	45 c0       	rjmp	.+138    	; 0x57ac <vfprintf+0x2ac>
    5722:	85 37       	cpi	r24, 0x75	; 117
    5724:	31 f4       	brne	.+12     	; 0x5732 <vfprintf+0x232>
    5726:	23 2d       	mov	r18, r3
    5728:	2f 7e       	andi	r18, 0xEF	; 239
    572a:	b2 2e       	mov	r11, r18
    572c:	2a e0       	ldi	r18, 0x0A	; 10
    572e:	30 e0       	ldi	r19, 0x00	; 0
    5730:	25 c0       	rjmp	.+74     	; 0x577c <vfprintf+0x27c>
    5732:	93 2d       	mov	r25, r3
    5734:	99 7f       	andi	r25, 0xF9	; 249
    5736:	b9 2e       	mov	r11, r25
    5738:	8f 36       	cpi	r24, 0x6F	; 111
    573a:	c1 f0       	breq	.+48     	; 0x576c <vfprintf+0x26c>
    573c:	18 f4       	brcc	.+6      	; 0x5744 <vfprintf+0x244>
    573e:	88 35       	cpi	r24, 0x58	; 88
    5740:	79 f0       	breq	.+30     	; 0x5760 <vfprintf+0x260>
    5742:	b5 c0       	rjmp	.+362    	; 0x58ae <vfprintf+0x3ae>
    5744:	80 37       	cpi	r24, 0x70	; 112
    5746:	19 f0       	breq	.+6      	; 0x574e <vfprintf+0x24e>
    5748:	88 37       	cpi	r24, 0x78	; 120
    574a:	21 f0       	breq	.+8      	; 0x5754 <vfprintf+0x254>
    574c:	b0 c0       	rjmp	.+352    	; 0x58ae <vfprintf+0x3ae>
    574e:	e9 2f       	mov	r30, r25
    5750:	e0 61       	ori	r30, 0x10	; 16
    5752:	be 2e       	mov	r11, r30
    5754:	b4 fe       	sbrs	r11, 4
    5756:	0d c0       	rjmp	.+26     	; 0x5772 <vfprintf+0x272>
    5758:	fb 2d       	mov	r31, r11
    575a:	f4 60       	ori	r31, 0x04	; 4
    575c:	bf 2e       	mov	r11, r31
    575e:	09 c0       	rjmp	.+18     	; 0x5772 <vfprintf+0x272>
    5760:	34 fe       	sbrs	r3, 4
    5762:	0a c0       	rjmp	.+20     	; 0x5778 <vfprintf+0x278>
    5764:	29 2f       	mov	r18, r25
    5766:	26 60       	ori	r18, 0x06	; 6
    5768:	b2 2e       	mov	r11, r18
    576a:	06 c0       	rjmp	.+12     	; 0x5778 <vfprintf+0x278>
    576c:	28 e0       	ldi	r18, 0x08	; 8
    576e:	30 e0       	ldi	r19, 0x00	; 0
    5770:	05 c0       	rjmp	.+10     	; 0x577c <vfprintf+0x27c>
    5772:	20 e1       	ldi	r18, 0x10	; 16
    5774:	30 e0       	ldi	r19, 0x00	; 0
    5776:	02 c0       	rjmp	.+4      	; 0x577c <vfprintf+0x27c>
    5778:	20 e1       	ldi	r18, 0x10	; 16
    577a:	32 e0       	ldi	r19, 0x02	; 2
    577c:	f8 01       	movw	r30, r16
    577e:	b7 fe       	sbrs	r11, 7
    5780:	07 c0       	rjmp	.+14     	; 0x5790 <vfprintf+0x290>
    5782:	60 81       	ld	r22, Z
    5784:	71 81       	ldd	r23, Z+1	; 0x01
    5786:	82 81       	ldd	r24, Z+2	; 0x02
    5788:	93 81       	ldd	r25, Z+3	; 0x03
    578a:	0c 5f       	subi	r16, 0xFC	; 252
    578c:	1f 4f       	sbci	r17, 0xFF	; 255
    578e:	06 c0       	rjmp	.+12     	; 0x579c <vfprintf+0x29c>
    5790:	60 81       	ld	r22, Z
    5792:	71 81       	ldd	r23, Z+1	; 0x01
    5794:	80 e0       	ldi	r24, 0x00	; 0
    5796:	90 e0       	ldi	r25, 0x00	; 0
    5798:	0e 5f       	subi	r16, 0xFE	; 254
    579a:	1f 4f       	sbci	r17, 0xFF	; 255
    579c:	a3 01       	movw	r20, r6
    579e:	0e 94 b3 2c 	call	0x5966	; 0x5966 <__ultoa_invert>
    57a2:	88 2e       	mov	r8, r24
    57a4:	86 18       	sub	r8, r6
    57a6:	fb 2d       	mov	r31, r11
    57a8:	ff 77       	andi	r31, 0x7F	; 127
    57aa:	3f 2e       	mov	r3, r31
    57ac:	36 fe       	sbrs	r3, 6
    57ae:	0d c0       	rjmp	.+26     	; 0x57ca <vfprintf+0x2ca>
    57b0:	23 2d       	mov	r18, r3
    57b2:	2e 7f       	andi	r18, 0xFE	; 254
    57b4:	a2 2e       	mov	r10, r18
    57b6:	89 14       	cp	r8, r9
    57b8:	58 f4       	brcc	.+22     	; 0x57d0 <vfprintf+0x2d0>
    57ba:	34 fe       	sbrs	r3, 4
    57bc:	0b c0       	rjmp	.+22     	; 0x57d4 <vfprintf+0x2d4>
    57be:	32 fc       	sbrc	r3, 2
    57c0:	09 c0       	rjmp	.+18     	; 0x57d4 <vfprintf+0x2d4>
    57c2:	83 2d       	mov	r24, r3
    57c4:	8e 7e       	andi	r24, 0xEE	; 238
    57c6:	a8 2e       	mov	r10, r24
    57c8:	05 c0       	rjmp	.+10     	; 0x57d4 <vfprintf+0x2d4>
    57ca:	b8 2c       	mov	r11, r8
    57cc:	a3 2c       	mov	r10, r3
    57ce:	03 c0       	rjmp	.+6      	; 0x57d6 <vfprintf+0x2d6>
    57d0:	b8 2c       	mov	r11, r8
    57d2:	01 c0       	rjmp	.+2      	; 0x57d6 <vfprintf+0x2d6>
    57d4:	b9 2c       	mov	r11, r9
    57d6:	a4 fe       	sbrs	r10, 4
    57d8:	0f c0       	rjmp	.+30     	; 0x57f8 <vfprintf+0x2f8>
    57da:	fe 01       	movw	r30, r28
    57dc:	e8 0d       	add	r30, r8
    57de:	f1 1d       	adc	r31, r1
    57e0:	80 81       	ld	r24, Z
    57e2:	80 33       	cpi	r24, 0x30	; 48
    57e4:	21 f4       	brne	.+8      	; 0x57ee <vfprintf+0x2ee>
    57e6:	9a 2d       	mov	r25, r10
    57e8:	99 7e       	andi	r25, 0xE9	; 233
    57ea:	a9 2e       	mov	r10, r25
    57ec:	09 c0       	rjmp	.+18     	; 0x5800 <vfprintf+0x300>
    57ee:	a2 fe       	sbrs	r10, 2
    57f0:	06 c0       	rjmp	.+12     	; 0x57fe <vfprintf+0x2fe>
    57f2:	b3 94       	inc	r11
    57f4:	b3 94       	inc	r11
    57f6:	04 c0       	rjmp	.+8      	; 0x5800 <vfprintf+0x300>
    57f8:	8a 2d       	mov	r24, r10
    57fa:	86 78       	andi	r24, 0x86	; 134
    57fc:	09 f0       	breq	.+2      	; 0x5800 <vfprintf+0x300>
    57fe:	b3 94       	inc	r11
    5800:	a3 fc       	sbrc	r10, 3
    5802:	11 c0       	rjmp	.+34     	; 0x5826 <vfprintf+0x326>
    5804:	a0 fe       	sbrs	r10, 0
    5806:	06 c0       	rjmp	.+12     	; 0x5814 <vfprintf+0x314>
    5808:	b2 14       	cp	r11, r2
    580a:	88 f4       	brcc	.+34     	; 0x582e <vfprintf+0x32e>
    580c:	28 0c       	add	r2, r8
    580e:	92 2c       	mov	r9, r2
    5810:	9b 18       	sub	r9, r11
    5812:	0e c0       	rjmp	.+28     	; 0x5830 <vfprintf+0x330>
    5814:	b2 14       	cp	r11, r2
    5816:	60 f4       	brcc	.+24     	; 0x5830 <vfprintf+0x330>
    5818:	b6 01       	movw	r22, r12
    581a:	80 e2       	ldi	r24, 0x20	; 32
    581c:	90 e0       	ldi	r25, 0x00	; 0
    581e:	0e 94 77 2c 	call	0x58ee	; 0x58ee <fputc>
    5822:	b3 94       	inc	r11
    5824:	f7 cf       	rjmp	.-18     	; 0x5814 <vfprintf+0x314>
    5826:	b2 14       	cp	r11, r2
    5828:	18 f4       	brcc	.+6      	; 0x5830 <vfprintf+0x330>
    582a:	2b 18       	sub	r2, r11
    582c:	02 c0       	rjmp	.+4      	; 0x5832 <vfprintf+0x332>
    582e:	98 2c       	mov	r9, r8
    5830:	21 2c       	mov	r2, r1
    5832:	a4 fe       	sbrs	r10, 4
    5834:	10 c0       	rjmp	.+32     	; 0x5856 <vfprintf+0x356>
    5836:	b6 01       	movw	r22, r12
    5838:	80 e3       	ldi	r24, 0x30	; 48
    583a:	90 e0       	ldi	r25, 0x00	; 0
    583c:	0e 94 77 2c 	call	0x58ee	; 0x58ee <fputc>
    5840:	a2 fe       	sbrs	r10, 2
    5842:	17 c0       	rjmp	.+46     	; 0x5872 <vfprintf+0x372>
    5844:	a1 fc       	sbrc	r10, 1
    5846:	03 c0       	rjmp	.+6      	; 0x584e <vfprintf+0x34e>
    5848:	88 e7       	ldi	r24, 0x78	; 120
    584a:	90 e0       	ldi	r25, 0x00	; 0
    584c:	02 c0       	rjmp	.+4      	; 0x5852 <vfprintf+0x352>
    584e:	88 e5       	ldi	r24, 0x58	; 88
    5850:	90 e0       	ldi	r25, 0x00	; 0
    5852:	b6 01       	movw	r22, r12
    5854:	0c c0       	rjmp	.+24     	; 0x586e <vfprintf+0x36e>
    5856:	8a 2d       	mov	r24, r10
    5858:	86 78       	andi	r24, 0x86	; 134
    585a:	59 f0       	breq	.+22     	; 0x5872 <vfprintf+0x372>
    585c:	a1 fe       	sbrs	r10, 1
    585e:	02 c0       	rjmp	.+4      	; 0x5864 <vfprintf+0x364>
    5860:	8b e2       	ldi	r24, 0x2B	; 43
    5862:	01 c0       	rjmp	.+2      	; 0x5866 <vfprintf+0x366>
    5864:	80 e2       	ldi	r24, 0x20	; 32
    5866:	a7 fc       	sbrc	r10, 7
    5868:	8d e2       	ldi	r24, 0x2D	; 45
    586a:	b6 01       	movw	r22, r12
    586c:	90 e0       	ldi	r25, 0x00	; 0
    586e:	0e 94 77 2c 	call	0x58ee	; 0x58ee <fputc>
    5872:	89 14       	cp	r8, r9
    5874:	38 f4       	brcc	.+14     	; 0x5884 <vfprintf+0x384>
    5876:	b6 01       	movw	r22, r12
    5878:	80 e3       	ldi	r24, 0x30	; 48
    587a:	90 e0       	ldi	r25, 0x00	; 0
    587c:	0e 94 77 2c 	call	0x58ee	; 0x58ee <fputc>
    5880:	9a 94       	dec	r9
    5882:	f7 cf       	rjmp	.-18     	; 0x5872 <vfprintf+0x372>
    5884:	8a 94       	dec	r8
    5886:	f3 01       	movw	r30, r6
    5888:	e8 0d       	add	r30, r8
    588a:	f1 1d       	adc	r31, r1
    588c:	80 81       	ld	r24, Z
    588e:	b6 01       	movw	r22, r12
    5890:	90 e0       	ldi	r25, 0x00	; 0
    5892:	0e 94 77 2c 	call	0x58ee	; 0x58ee <fputc>
    5896:	81 10       	cpse	r8, r1
    5898:	f5 cf       	rjmp	.-22     	; 0x5884 <vfprintf+0x384>
    589a:	22 20       	and	r2, r2
    589c:	09 f4       	brne	.+2      	; 0x58a0 <vfprintf+0x3a0>
    589e:	42 ce       	rjmp	.-892    	; 0x5524 <vfprintf+0x24>
    58a0:	b6 01       	movw	r22, r12
    58a2:	80 e2       	ldi	r24, 0x20	; 32
    58a4:	90 e0       	ldi	r25, 0x00	; 0
    58a6:	0e 94 77 2c 	call	0x58ee	; 0x58ee <fputc>
    58aa:	2a 94       	dec	r2
    58ac:	f6 cf       	rjmp	.-20     	; 0x589a <vfprintf+0x39a>
    58ae:	f6 01       	movw	r30, r12
    58b0:	86 81       	ldd	r24, Z+6	; 0x06
    58b2:	97 81       	ldd	r25, Z+7	; 0x07
    58b4:	02 c0       	rjmp	.+4      	; 0x58ba <vfprintf+0x3ba>
    58b6:	8f ef       	ldi	r24, 0xFF	; 255
    58b8:	9f ef       	ldi	r25, 0xFF	; 255
    58ba:	2b 96       	adiw	r28, 0x0b	; 11
    58bc:	e2 e1       	ldi	r30, 0x12	; 18
    58be:	0c 94 75 2d 	jmp	0x5aea	; 0x5aea <__epilogue_restores__>

000058c2 <strnlen_P>:
    58c2:	fc 01       	movw	r30, r24
    58c4:	05 90       	lpm	r0, Z+
    58c6:	61 50       	subi	r22, 0x01	; 1
    58c8:	70 40       	sbci	r23, 0x00	; 0
    58ca:	01 10       	cpse	r0, r1
    58cc:	d8 f7       	brcc	.-10     	; 0x58c4 <strnlen_P+0x2>
    58ce:	80 95       	com	r24
    58d0:	90 95       	com	r25
    58d2:	8e 0f       	add	r24, r30
    58d4:	9f 1f       	adc	r25, r31
    58d6:	08 95       	ret

000058d8 <strnlen>:
    58d8:	fc 01       	movw	r30, r24
    58da:	61 50       	subi	r22, 0x01	; 1
    58dc:	70 40       	sbci	r23, 0x00	; 0
    58de:	01 90       	ld	r0, Z+
    58e0:	01 10       	cpse	r0, r1
    58e2:	d8 f7       	brcc	.-10     	; 0x58da <strnlen+0x2>
    58e4:	80 95       	com	r24
    58e6:	90 95       	com	r25
    58e8:	8e 0f       	add	r24, r30
    58ea:	9f 1f       	adc	r25, r31
    58ec:	08 95       	ret

000058ee <fputc>:
    58ee:	0f 93       	push	r16
    58f0:	1f 93       	push	r17
    58f2:	cf 93       	push	r28
    58f4:	df 93       	push	r29
    58f6:	fb 01       	movw	r30, r22
    58f8:	23 81       	ldd	r18, Z+3	; 0x03
    58fa:	21 fd       	sbrc	r18, 1
    58fc:	03 c0       	rjmp	.+6      	; 0x5904 <fputc+0x16>
    58fe:	8f ef       	ldi	r24, 0xFF	; 255
    5900:	9f ef       	ldi	r25, 0xFF	; 255
    5902:	2c c0       	rjmp	.+88     	; 0x595c <fputc+0x6e>
    5904:	22 ff       	sbrs	r18, 2
    5906:	16 c0       	rjmp	.+44     	; 0x5934 <fputc+0x46>
    5908:	46 81       	ldd	r20, Z+6	; 0x06
    590a:	57 81       	ldd	r21, Z+7	; 0x07
    590c:	24 81       	ldd	r18, Z+4	; 0x04
    590e:	35 81       	ldd	r19, Z+5	; 0x05
    5910:	42 17       	cp	r20, r18
    5912:	53 07       	cpc	r21, r19
    5914:	44 f4       	brge	.+16     	; 0x5926 <fputc+0x38>
    5916:	a0 81       	ld	r26, Z
    5918:	b1 81       	ldd	r27, Z+1	; 0x01
    591a:	9d 01       	movw	r18, r26
    591c:	2f 5f       	subi	r18, 0xFF	; 255
    591e:	3f 4f       	sbci	r19, 0xFF	; 255
    5920:	31 83       	std	Z+1, r19	; 0x01
    5922:	20 83       	st	Z, r18
    5924:	8c 93       	st	X, r24
    5926:	26 81       	ldd	r18, Z+6	; 0x06
    5928:	37 81       	ldd	r19, Z+7	; 0x07
    592a:	2f 5f       	subi	r18, 0xFF	; 255
    592c:	3f 4f       	sbci	r19, 0xFF	; 255
    592e:	37 83       	std	Z+7, r19	; 0x07
    5930:	26 83       	std	Z+6, r18	; 0x06
    5932:	14 c0       	rjmp	.+40     	; 0x595c <fputc+0x6e>
    5934:	8b 01       	movw	r16, r22
    5936:	ec 01       	movw	r28, r24
    5938:	fb 01       	movw	r30, r22
    593a:	00 84       	ldd	r0, Z+8	; 0x08
    593c:	f1 85       	ldd	r31, Z+9	; 0x09
    593e:	e0 2d       	mov	r30, r0
    5940:	09 95       	icall
    5942:	89 2b       	or	r24, r25
    5944:	e1 f6       	brne	.-72     	; 0x58fe <fputc+0x10>
    5946:	d8 01       	movw	r26, r16
    5948:	16 96       	adiw	r26, 0x06	; 6
    594a:	8d 91       	ld	r24, X+
    594c:	9c 91       	ld	r25, X
    594e:	17 97       	sbiw	r26, 0x07	; 7
    5950:	01 96       	adiw	r24, 0x01	; 1
    5952:	17 96       	adiw	r26, 0x07	; 7
    5954:	9c 93       	st	X, r25
    5956:	8e 93       	st	-X, r24
    5958:	16 97       	sbiw	r26, 0x06	; 6
    595a:	ce 01       	movw	r24, r28
    595c:	df 91       	pop	r29
    595e:	cf 91       	pop	r28
    5960:	1f 91       	pop	r17
    5962:	0f 91       	pop	r16
    5964:	08 95       	ret

00005966 <__ultoa_invert>:
    5966:	fa 01       	movw	r30, r20
    5968:	aa 27       	eor	r26, r26
    596a:	28 30       	cpi	r18, 0x08	; 8
    596c:	51 f1       	breq	.+84     	; 0x59c2 <__ultoa_invert+0x5c>
    596e:	20 31       	cpi	r18, 0x10	; 16
    5970:	81 f1       	breq	.+96     	; 0x59d2 <__ultoa_invert+0x6c>
    5972:	e8 94       	clt
    5974:	6f 93       	push	r22
    5976:	6e 7f       	andi	r22, 0xFE	; 254
    5978:	6e 5f       	subi	r22, 0xFE	; 254
    597a:	7f 4f       	sbci	r23, 0xFF	; 255
    597c:	8f 4f       	sbci	r24, 0xFF	; 255
    597e:	9f 4f       	sbci	r25, 0xFF	; 255
    5980:	af 4f       	sbci	r26, 0xFF	; 255
    5982:	b1 e0       	ldi	r27, 0x01	; 1
    5984:	3e d0       	rcall	.+124    	; 0x5a02 <__ultoa_invert+0x9c>
    5986:	b4 e0       	ldi	r27, 0x04	; 4
    5988:	3c d0       	rcall	.+120    	; 0x5a02 <__ultoa_invert+0x9c>
    598a:	67 0f       	add	r22, r23
    598c:	78 1f       	adc	r23, r24
    598e:	89 1f       	adc	r24, r25
    5990:	9a 1f       	adc	r25, r26
    5992:	a1 1d       	adc	r26, r1
    5994:	68 0f       	add	r22, r24
    5996:	79 1f       	adc	r23, r25
    5998:	8a 1f       	adc	r24, r26
    599a:	91 1d       	adc	r25, r1
    599c:	a1 1d       	adc	r26, r1
    599e:	6a 0f       	add	r22, r26
    59a0:	71 1d       	adc	r23, r1
    59a2:	81 1d       	adc	r24, r1
    59a4:	91 1d       	adc	r25, r1
    59a6:	a1 1d       	adc	r26, r1
    59a8:	20 d0       	rcall	.+64     	; 0x59ea <__ultoa_invert+0x84>
    59aa:	09 f4       	brne	.+2      	; 0x59ae <__ultoa_invert+0x48>
    59ac:	68 94       	set
    59ae:	3f 91       	pop	r19
    59b0:	2a e0       	ldi	r18, 0x0A	; 10
    59b2:	26 9f       	mul	r18, r22
    59b4:	11 24       	eor	r1, r1
    59b6:	30 19       	sub	r19, r0
    59b8:	30 5d       	subi	r19, 0xD0	; 208
    59ba:	31 93       	st	Z+, r19
    59bc:	de f6       	brtc	.-74     	; 0x5974 <__ultoa_invert+0xe>
    59be:	cf 01       	movw	r24, r30
    59c0:	08 95       	ret
    59c2:	46 2f       	mov	r20, r22
    59c4:	47 70       	andi	r20, 0x07	; 7
    59c6:	40 5d       	subi	r20, 0xD0	; 208
    59c8:	41 93       	st	Z+, r20
    59ca:	b3 e0       	ldi	r27, 0x03	; 3
    59cc:	0f d0       	rcall	.+30     	; 0x59ec <__ultoa_invert+0x86>
    59ce:	c9 f7       	brne	.-14     	; 0x59c2 <__ultoa_invert+0x5c>
    59d0:	f6 cf       	rjmp	.-20     	; 0x59be <__ultoa_invert+0x58>
    59d2:	46 2f       	mov	r20, r22
    59d4:	4f 70       	andi	r20, 0x0F	; 15
    59d6:	40 5d       	subi	r20, 0xD0	; 208
    59d8:	4a 33       	cpi	r20, 0x3A	; 58
    59da:	18 f0       	brcs	.+6      	; 0x59e2 <__ultoa_invert+0x7c>
    59dc:	49 5d       	subi	r20, 0xD9	; 217
    59de:	31 fd       	sbrc	r19, 1
    59e0:	40 52       	subi	r20, 0x20	; 32
    59e2:	41 93       	st	Z+, r20
    59e4:	02 d0       	rcall	.+4      	; 0x59ea <__ultoa_invert+0x84>
    59e6:	a9 f7       	brne	.-22     	; 0x59d2 <__ultoa_invert+0x6c>
    59e8:	ea cf       	rjmp	.-44     	; 0x59be <__ultoa_invert+0x58>
    59ea:	b4 e0       	ldi	r27, 0x04	; 4
    59ec:	a6 95       	lsr	r26
    59ee:	97 95       	ror	r25
    59f0:	87 95       	ror	r24
    59f2:	77 95       	ror	r23
    59f4:	67 95       	ror	r22
    59f6:	ba 95       	dec	r27
    59f8:	c9 f7       	brne	.-14     	; 0x59ec <__ultoa_invert+0x86>
    59fa:	00 97       	sbiw	r24, 0x00	; 0
    59fc:	61 05       	cpc	r22, r1
    59fe:	71 05       	cpc	r23, r1
    5a00:	08 95       	ret
    5a02:	9b 01       	movw	r18, r22
    5a04:	ac 01       	movw	r20, r24
    5a06:	0a 2e       	mov	r0, r26
    5a08:	06 94       	lsr	r0
    5a0a:	57 95       	ror	r21
    5a0c:	47 95       	ror	r20
    5a0e:	37 95       	ror	r19
    5a10:	27 95       	ror	r18
    5a12:	ba 95       	dec	r27
    5a14:	c9 f7       	brne	.-14     	; 0x5a08 <__ultoa_invert+0xa2>
    5a16:	62 0f       	add	r22, r18
    5a18:	73 1f       	adc	r23, r19
    5a1a:	84 1f       	adc	r24, r20
    5a1c:	95 1f       	adc	r25, r21
    5a1e:	a0 1d       	adc	r26, r0
    5a20:	08 95       	ret

00005a22 <eeprom_read_byte>:
    5a22:	f9 99       	sbic	0x1f, 1	; 31
    5a24:	fe cf       	rjmp	.-4      	; 0x5a22 <eeprom_read_byte>
    5a26:	92 bd       	out	0x22, r25	; 34
    5a28:	81 bd       	out	0x21, r24	; 33
    5a2a:	f8 9a       	sbi	0x1f, 0	; 31
    5a2c:	99 27       	eor	r25, r25
    5a2e:	80 b5       	in	r24, 0x20	; 32
    5a30:	08 95       	ret

00005a32 <eeprom_read_dword>:
    5a32:	a6 e1       	ldi	r26, 0x16	; 22
    5a34:	b0 e0       	ldi	r27, 0x00	; 0
    5a36:	44 e0       	ldi	r20, 0x04	; 4
    5a38:	50 e0       	ldi	r21, 0x00	; 0
    5a3a:	0c 94 4b 2d 	jmp	0x5a96	; 0x5a96 <eeprom_read_blraw>

00005a3e <eeprom_read_word>:
    5a3e:	a8 e1       	ldi	r26, 0x18	; 24
    5a40:	b0 e0       	ldi	r27, 0x00	; 0
    5a42:	42 e0       	ldi	r20, 0x02	; 2
    5a44:	50 e0       	ldi	r21, 0x00	; 0
    5a46:	0c 94 4b 2d 	jmp	0x5a96	; 0x5a96 <eeprom_read_blraw>

00005a4a <eeprom_update_byte>:
    5a4a:	26 2f       	mov	r18, r22

00005a4c <eeprom_update_r18>:
    5a4c:	f9 99       	sbic	0x1f, 1	; 31
    5a4e:	fe cf       	rjmp	.-4      	; 0x5a4c <eeprom_update_r18>
    5a50:	92 bd       	out	0x22, r25	; 34
    5a52:	81 bd       	out	0x21, r24	; 33
    5a54:	f8 9a       	sbi	0x1f, 0	; 31
    5a56:	01 97       	sbiw	r24, 0x01	; 1
    5a58:	00 b4       	in	r0, 0x20	; 32
    5a5a:	02 16       	cp	r0, r18
    5a5c:	39 f0       	breq	.+14     	; 0x5a6c <eeprom_update_r18+0x20>
    5a5e:	1f ba       	out	0x1f, r1	; 31
    5a60:	20 bd       	out	0x20, r18	; 32
    5a62:	0f b6       	in	r0, 0x3f	; 63
    5a64:	f8 94       	cli
    5a66:	fa 9a       	sbi	0x1f, 2	; 31
    5a68:	f9 9a       	sbi	0x1f, 1	; 31
    5a6a:	0f be       	out	0x3f, r0	; 63
    5a6c:	08 95       	ret

00005a6e <eeprom_update_dword>:
    5a6e:	03 96       	adiw	r24, 0x03	; 3
    5a70:	27 2f       	mov	r18, r23
    5a72:	0e 94 26 2d 	call	0x5a4c	; 0x5a4c <eeprom_update_r18>
    5a76:	0e 94 25 2d 	call	0x5a4a	; 0x5a4a <eeprom_update_byte>
    5a7a:	25 2f       	mov	r18, r21
    5a7c:	0e 94 26 2d 	call	0x5a4c	; 0x5a4c <eeprom_update_r18>
    5a80:	24 2f       	mov	r18, r20
    5a82:	0c 94 26 2d 	jmp	0x5a4c	; 0x5a4c <eeprom_update_r18>

00005a86 <eeprom_update_word>:
    5a86:	01 96       	adiw	r24, 0x01	; 1
    5a88:	27 2f       	mov	r18, r23
    5a8a:	0e 94 26 2d 	call	0x5a4c	; 0x5a4c <eeprom_update_r18>
    5a8e:	0c 94 25 2d 	jmp	0x5a4a	; 0x5a4a <eeprom_update_byte>

00005a92 <eeprom_read_block>:
    5a92:	dc 01       	movw	r26, r24
    5a94:	cb 01       	movw	r24, r22

00005a96 <eeprom_read_blraw>:
    5a96:	fc 01       	movw	r30, r24
    5a98:	f9 99       	sbic	0x1f, 1	; 31
    5a9a:	fe cf       	rjmp	.-4      	; 0x5a98 <eeprom_read_blraw+0x2>
    5a9c:	06 c0       	rjmp	.+12     	; 0x5aaa <eeprom_read_blraw+0x14>
    5a9e:	f2 bd       	out	0x22, r31	; 34
    5aa0:	e1 bd       	out	0x21, r30	; 33
    5aa2:	f8 9a       	sbi	0x1f, 0	; 31
    5aa4:	31 96       	adiw	r30, 0x01	; 1
    5aa6:	00 b4       	in	r0, 0x20	; 32
    5aa8:	0d 92       	st	X+, r0
    5aaa:	41 50       	subi	r20, 0x01	; 1
    5aac:	50 40       	sbci	r21, 0x00	; 0
    5aae:	b8 f7       	brcc	.-18     	; 0x5a9e <eeprom_read_blraw+0x8>
    5ab0:	08 95       	ret

00005ab2 <__prologue_saves__>:
    5ab2:	2f 92       	push	r2
    5ab4:	3f 92       	push	r3
    5ab6:	4f 92       	push	r4
    5ab8:	5f 92       	push	r5
    5aba:	6f 92       	push	r6
    5abc:	7f 92       	push	r7
    5abe:	8f 92       	push	r8
    5ac0:	9f 92       	push	r9
    5ac2:	af 92       	push	r10
    5ac4:	bf 92       	push	r11
    5ac6:	cf 92       	push	r12
    5ac8:	df 92       	push	r13
    5aca:	ef 92       	push	r14
    5acc:	ff 92       	push	r15
    5ace:	0f 93       	push	r16
    5ad0:	1f 93       	push	r17
    5ad2:	cf 93       	push	r28
    5ad4:	df 93       	push	r29
    5ad6:	cd b7       	in	r28, 0x3d	; 61
    5ad8:	de b7       	in	r29, 0x3e	; 62
    5ada:	ca 1b       	sub	r28, r26
    5adc:	db 0b       	sbc	r29, r27
    5ade:	0f b6       	in	r0, 0x3f	; 63
    5ae0:	f8 94       	cli
    5ae2:	de bf       	out	0x3e, r29	; 62
    5ae4:	0f be       	out	0x3f, r0	; 63
    5ae6:	cd bf       	out	0x3d, r28	; 61
    5ae8:	09 94       	ijmp

00005aea <__epilogue_restores__>:
    5aea:	2a 88       	ldd	r2, Y+18	; 0x12
    5aec:	39 88       	ldd	r3, Y+17	; 0x11
    5aee:	48 88       	ldd	r4, Y+16	; 0x10
    5af0:	5f 84       	ldd	r5, Y+15	; 0x0f
    5af2:	6e 84       	ldd	r6, Y+14	; 0x0e
    5af4:	7d 84       	ldd	r7, Y+13	; 0x0d
    5af6:	8c 84       	ldd	r8, Y+12	; 0x0c
    5af8:	9b 84       	ldd	r9, Y+11	; 0x0b
    5afa:	aa 84       	ldd	r10, Y+10	; 0x0a
    5afc:	b9 84       	ldd	r11, Y+9	; 0x09
    5afe:	c8 84       	ldd	r12, Y+8	; 0x08
    5b00:	df 80       	ldd	r13, Y+7	; 0x07
    5b02:	ee 80       	ldd	r14, Y+6	; 0x06
    5b04:	fd 80       	ldd	r15, Y+5	; 0x05
    5b06:	0c 81       	ldd	r16, Y+4	; 0x04
    5b08:	1b 81       	ldd	r17, Y+3	; 0x03
    5b0a:	aa 81       	ldd	r26, Y+2	; 0x02
    5b0c:	b9 81       	ldd	r27, Y+1	; 0x01
    5b0e:	ce 0f       	add	r28, r30
    5b10:	d1 1d       	adc	r29, r1
    5b12:	0f b6       	in	r0, 0x3f	; 63
    5b14:	f8 94       	cli
    5b16:	de bf       	out	0x3e, r29	; 62
    5b18:	0f be       	out	0x3f, r0	; 63
    5b1a:	cd bf       	out	0x3d, r28	; 61
    5b1c:	ed 01       	movw	r28, r26
    5b1e:	08 95       	ret

00005b20 <__do_global_dtors>:
    5b20:	10 e0       	ldi	r17, 0x00	; 0
    5b22:	c5 ef       	ldi	r28, 0xF5	; 245
    5b24:	d0 e0       	ldi	r29, 0x00	; 0
    5b26:	04 c0       	rjmp	.+8      	; 0x5b30 <__do_global_dtors+0x10>
    5b28:	fe 01       	movw	r30, r28
    5b2a:	0e 94 83 28 	call	0x5106	; 0x5106 <__tablejump2__>
    5b2e:	21 96       	adiw	r28, 0x01	; 1
    5b30:	c6 3f       	cpi	r28, 0xF6	; 246
    5b32:	d1 07       	cpc	r29, r17
    5b34:	c9 f7       	brne	.-14     	; 0x5b28 <__do_global_dtors+0x8>
    5b36:	f8 94       	cli

00005b38 <__stop_program>:
    5b38:	ff cf       	rjmp	.-2      	; 0x5b38 <__stop_program>
