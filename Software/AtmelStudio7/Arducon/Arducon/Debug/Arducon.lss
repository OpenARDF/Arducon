
Arducon.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000020a  00800100  0000630a  000063be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000630a  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002bc  0080030a  0080030a  000065c8  2**0
                  ALLOC
  3 .eeprom       000002f6  00810000  00810000  000065c8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .comment      0000005c  00000000  00000000  000068be  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000691c  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000004a0  00000000  00000000  00006960  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00007554  00000000  00000000  00006e00  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001951  00000000  00000000  0000e354  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000045dd  00000000  00000000  0000fca5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000d90  00000000  00000000  00014284  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000248c  00000000  00000000  00015014  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00005971  00000000  00000000  000174a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000460  00000000  00000000  0001ce11  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 14 01 	jmp	0x228	; 0x228 <__dtors_end>
       4:	0c 94 ed 10 	jmp	0x21da	; 0x21da <__vector_1>
       8:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
       c:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      10:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      14:	0c 94 3f 13 	jmp	0x267e	; 0x267e <__vector_5>
      18:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      1c:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      20:	0c 94 34 0d 	jmp	0x1a68	; 0x1a68 <__vector_8>
      24:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      28:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      2c:	0c 94 5b 0c 	jmp	0x18b6	; 0x18b6 <__vector_11>
      30:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      34:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      38:	0c 94 1e 0c 	jmp	0x183c	; 0x183c <__vector_14>
      3c:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      40:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      44:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      48:	0c 94 35 0a 	jmp	0x146a	; 0x146a <__vector_18>
      4c:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <__vector_19>
      50:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      54:	0c 94 fd 09 	jmp	0x13fa	; 0x13fa <__vector_21>
      58:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      5c:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      60:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      64:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      68:	6a 01       	movw	r12, r20
      6a:	75 01       	movw	r14, r10
      6c:	80 01       	movw	r16, r0
      6e:	8b 01       	movw	r16, r22
      70:	96 01       	movw	r18, r12
      72:	a1 01       	movw	r20, r2
      74:	ac 01       	movw	r20, r24
      76:	b7 01       	movw	r22, r14
      78:	c2 01       	movw	r24, r4
      7a:	23 02       	muls	r18, r19
      7c:	23 02       	muls	r18, r19
      7e:	cd 01       	movw	r24, r26
      80:	d8 01       	movw	r26, r16
      82:	e5 01       	movw	r28, r10
      84:	f2 01       	movw	r30, r4
      86:	ff 01       	movw	r30, r30
      88:	0c 02       	muls	r16, r28
      8a:	19 02       	muls	r17, r25
      8c:	2e 02       	muls	r18, r30
      8e:	32 02       	muls	r19, r18
      90:	36 02       	muls	r19, r22
      92:	3a 02       	muls	r19, r26
      94:	3e 02       	muls	r19, r30
      96:	42 02       	muls	r20, r18
      98:	46 02       	muls	r20, r22
      9a:	4b 02       	muls	r20, r27
      9c:	4f 02       	muls	r20, r31
      9e:	68 02       	muls	r22, r24
      a0:	68 02       	muls	r22, r24
      a2:	53 02       	muls	r21, r19
      a4:	57 02       	muls	r21, r23
      a6:	5c 02       	muls	r21, r28
      a8:	60 02       	muls	r22, r16
      aa:	64 02       	muls	r22, r20
      ac:	7a 02       	muls	r23, r26
      ae:	80 02       	muls	r24, r16
      b0:	86 02       	muls	r24, r22
      b2:	8c 02       	muls	r24, r28
      b4:	92 02       	muls	r25, r18
      b6:	98 02       	muls	r25, r24
      b8:	9e 02       	muls	r25, r30
      ba:	a4 02       	muls	r26, r20
      bc:	aa 02       	muls	r26, r26
      be:	cd 02       	muls	r28, r29
      c0:	cd 02       	muls	r28, r29
      c2:	b0 02       	muls	r27, r16
      c4:	b6 02       	muls	r27, r22
      c6:	bc 02       	muls	r27, r28
      c8:	c2 02       	muls	r28, r18
      ca:	c8 02       	muls	r28, r24
      cc:	ee 02       	muls	r30, r30
      ce:	53 03       	mulsu	r21, r19
      d0:	53 03       	mulsu	r21, r19
      d2:	0b 03       	fmul	r16, r19
      d4:	41 03       	mulsu	r20, r17
      d6:	eb 02       	muls	r30, r27
      d8:	44 03       	mulsu	r20, r20
      da:	2c 03       	fmul	r18, r20
      dc:	4a 03       	fmul	r20, r18
      de:	e8 02       	muls	r30, r24
      e0:	2f 03       	fmul	r18, r23
      e2:	32 03       	mulsu	r19, r18
      e4:	38 03       	fmul	r19, r16
      e6:	e5 02       	muls	r30, r21
      e8:	35 03       	mulsu	r19, r21
      ea:	4d 03       	fmul	r20, r21
      ec:	9c 03       	fmulsu	r17, r20
      ee:	6e 03       	fmul	r22, r22
      f0:	9f 03       	fmulsu	r17, r23
      f2:	71 03       	mulsu	r23, r17
      f4:	74 03       	mulsu	r23, r20
      f6:	77 03       	mulsu	r23, r23
      f8:	7a 03       	fmul	r23, r18
      fa:	7d 03       	fmul	r23, r21
      fc:	80 03       	fmuls	r16, r16
      fe:	83 03       	fmuls	r16, r19
     100:	86 03       	fmuls	r16, r22
     102:	8a 0f       	add	r24, r26
     104:	8a 0f       	add	r24, r26
     106:	8a 0f       	add	r24, r26
     108:	8a 0f       	add	r24, r26
     10a:	8a 0f       	add	r24, r26
     10c:	8a 0f       	add	r24, r26
     10e:	dd 0f       	add	r29, r29
     110:	dd 0f       	add	r29, r29
     112:	a8 0f       	add	r26, r24
     114:	dd 0f       	add	r29, r29
     116:	dd 0f       	add	r29, r29
     118:	dd 0f       	add	r29, r29
     11a:	dd 0f       	add	r29, r29
     11c:	dd 0f       	add	r29, r29
     11e:	dd 0f       	add	r29, r29
     120:	dd 0f       	add	r29, r29
     122:	dd 0f       	add	r29, r29
     124:	a8 0f       	add	r26, r24
     126:	a8 0f       	add	r26, r24
     128:	76 0f       	add	r23, r22
     12a:	80 0f       	add	r24, r16
     12c:	21 1d       	adc	r18, r1
     12e:	56 1d       	adc	r21, r6
     130:	85 1d       	adc	r24, r5
     132:	8f 1d       	adc	r24, r15
     134:	99 1d       	adc	r25, r9
     136:	a3 1d       	adc	r26, r3
     138:	24 1e       	adc	r2, r20
     13a:	95 1e       	adc	r9, r21
     13c:	10 1f       	adc	r17, r16
     13e:	5d 1f       	adc	r21, r29
     140:	aa 1f       	adc	r26, r26
     142:	d4 1e       	adc	r13, r20
     144:	f1 1f       	adc	r31, r17
     146:	ed 1d       	adc	r30, r13
     148:	15 20       	and	r1, r5
     14a:	41 20       	and	r4, r1
     14c:	b5 25       	eor	r27, r5
     14e:	79 25       	eor	r23, r9
     150:	a5 25       	eor	r26, r5
     152:	bd 25       	eor	r27, r13
     154:	a9 25       	eor	r26, r9
     156:	bd 25       	eor	r27, r13
     158:	89 25       	eor	r24, r9
     15a:	75 25       	eor	r23, r5
     15c:	81 25       	eor	r24, r1
     15e:	85 25       	eor	r24, r5
     160:	bd 25       	eor	r27, r13
     162:	99 25       	eor	r25, r9
     164:	6d 25       	eor	r22, r13
     166:	9d 25       	eor	r25, r13
     168:	69 25       	eor	r22, r9
     16a:	7d 25       	eor	r23, r13
     16c:	41 25       	eor	r20, r1
     16e:	45 25       	eor	r20, r5
     170:	49 25       	eor	r20, r9
     172:	4d 25       	eor	r20, r13
     174:	51 25       	eor	r21, r1
     176:	55 25       	eor	r21, r5
     178:	59 25       	eor	r21, r9
     17a:	5d 25       	eor	r21, r13
     17c:	61 25       	eor	r22, r1
     17e:	65 25       	eor	r22, r5
     180:	8d 25       	eor	r24, r13
     182:	91 25       	eor	r25, r1
     184:	b9 25       	eor	r27, r9
     186:	95 25       	eor	r25, r5
     188:	bd 25       	eor	r27, r13
     18a:	71 25       	eor	r23, r1
     18c:	ad 25       	eor	r26, r13
     18e:	c1 25       	eor	r28, r1
     190:	dd 24       	eor	r13, r13
     192:	e1 24       	eor	r14, r1
     194:	e5 24       	eor	r14, r5
     196:	e9 24       	eor	r14, r9
     198:	ed 24       	eor	r14, r13
     19a:	f1 24       	eor	r15, r1
     19c:	f5 24       	eor	r15, r5
     19e:	f9 24       	eor	r15, r9
     1a0:	fd 24       	eor	r15, r13
     1a2:	01 25       	eor	r16, r1
     1a4:	05 25       	eor	r16, r5
     1a6:	09 25       	eor	r16, r9
     1a8:	0d 25       	eor	r16, r13
     1aa:	11 25       	eor	r17, r1
     1ac:	15 25       	eor	r17, r5
     1ae:	19 25       	eor	r17, r9
     1b0:	1d 25       	eor	r17, r13
     1b2:	21 25       	eor	r18, r1
     1b4:	25 25       	eor	r18, r5
     1b6:	29 25       	eor	r18, r9
     1b8:	2d 25       	eor	r18, r13
     1ba:	31 25       	eor	r19, r1
     1bc:	35 25       	eor	r19, r5
     1be:	39 25       	eor	r19, r9
     1c0:	3d 25       	eor	r19, r13
     1c2:	bd 25       	eor	r27, r13
     1c4:	bd 25       	eor	r27, r13
     1c6:	bd 25       	eor	r27, r13
     1c8:	bd 25       	eor	r27, r13
     1ca:	a1 25       	eor	r26, r1
     1cc:	bd 25       	eor	r27, r13
     1ce:	bd 25       	eor	r27, r13
     1d0:	bd 25       	eor	r27, r13
     1d2:	bd 25       	eor	r27, r13
     1d4:	bd 25       	eor	r27, r13
     1d6:	bd 25       	eor	r27, r13
     1d8:	bd 25       	eor	r27, r13
     1da:	bd 25       	eor	r27, r13
     1dc:	bd 25       	eor	r27, r13
     1de:	bd 25       	eor	r27, r13
     1e0:	bd 25       	eor	r27, r13
     1e2:	bd 25       	eor	r27, r13
     1e4:	bd 25       	eor	r27, r13
     1e6:	bd 25       	eor	r27, r13
     1e8:	bd 25       	eor	r27, r13
     1ea:	bd 25       	eor	r27, r13
     1ec:	bd 25       	eor	r27, r13
     1ee:	bd 25       	eor	r27, r13
     1f0:	bd 25       	eor	r27, r13
     1f2:	bd 25       	eor	r27, r13
     1f4:	bd 25       	eor	r27, r13
     1f6:	bd 25       	eor	r27, r13
     1f8:	bd 25       	eor	r27, r13
     1fa:	bd 25       	eor	r27, r13
     1fc:	bd 25       	eor	r27, r13
     1fe:	bd 25       	eor	r27, r13
     200:	bd 25       	eor	r27, r13
     202:	bd 25       	eor	r27, r13
     204:	b1 25       	eor	r27, r1
     206:	05 a8       	ldd	r0, Z+53	; 0x35
     208:	4c cd       	rjmp	.-1384   	; 0xfffffca2 <__eeprom_end+0xff7ef9ac>
     20a:	b2 d4       	rcall	.+2404   	; 0xb70 <_ZN8Goertzel18SetTargetFrequencyEf+0x7a>
     20c:	4e b9       	out	0x0e, r20	; 14
     20e:	38 36       	cpi	r19, 0x68	; 104
     210:	a9 02       	muls	r26, r25
     212:	0c 50       	subi	r16, 0x0C	; 12
     214:	b9 91       	ld	r27, Y+
     216:	86 88       	ldd	r8, Z+22	; 0x16
     218:	08 3c       	cpi	r16, 0xC8	; 200
     21a:	a6 aa       	std	Z+54, r10	; 0x36
     21c:	aa 2a       	or	r10, r26
     21e:	be 00       	.word	0x00be	; ????
     220:	00 00       	nop
     222:	80 3f       	cpi	r24, 0xF0	; 240

00000224 <__ctors_start>:
     224:	b4 24       	eor	r11, r4

00000226 <__ctors_end>:
     226:	c9 24       	eor	r12, r9

00000228 <__dtors_end>:
     228:	11 24       	eor	r1, r1
     22a:	1f be       	out	0x3f, r1	; 63
     22c:	cf ef       	ldi	r28, 0xFF	; 255
     22e:	d8 e0       	ldi	r29, 0x08	; 8
     230:	de bf       	out	0x3e, r29	; 62
     232:	cd bf       	out	0x3d, r28	; 61

00000234 <__do_copy_data>:
     234:	13 e0       	ldi	r17, 0x03	; 3
     236:	a0 e0       	ldi	r26, 0x00	; 0
     238:	b1 e0       	ldi	r27, 0x01	; 1
     23a:	ea e0       	ldi	r30, 0x0A	; 10
     23c:	f3 e6       	ldi	r31, 0x63	; 99
     23e:	02 c0       	rjmp	.+4      	; 0x244 <__do_copy_data+0x10>
     240:	05 90       	lpm	r0, Z+
     242:	0d 92       	st	X+, r0
     244:	aa 30       	cpi	r26, 0x0A	; 10
     246:	b1 07       	cpc	r27, r17
     248:	d9 f7       	brne	.-10     	; 0x240 <__do_copy_data+0xc>

0000024a <__do_clear_bss>:
     24a:	25 e0       	ldi	r18, 0x05	; 5
     24c:	aa e0       	ldi	r26, 0x0A	; 10
     24e:	b3 e0       	ldi	r27, 0x03	; 3
     250:	01 c0       	rjmp	.+2      	; 0x254 <.do_clear_bss_start>

00000252 <.do_clear_bss_loop>:
     252:	1d 92       	st	X+, r1

00000254 <.do_clear_bss_start>:
     254:	a6 3c       	cpi	r26, 0xC6	; 198
     256:	b2 07       	cpc	r27, r18
     258:	e1 f7       	brne	.-8      	; 0x252 <.do_clear_bss_loop>

0000025a <__do_global_ctors>:
     25a:	11 e0       	ldi	r17, 0x01	; 1
     25c:	c3 e1       	ldi	r28, 0x13	; 19
     25e:	d1 e0       	ldi	r29, 0x01	; 1
     260:	04 c0       	rjmp	.+8      	; 0x26a <__do_global_ctors+0x10>
     262:	21 97       	sbiw	r28, 0x01	; 1
     264:	fe 01       	movw	r30, r28
     266:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <__tablejump2__>
     26a:	c2 31       	cpi	r28, 0x12	; 18
     26c:	d1 07       	cpc	r29, r17
     26e:	c9 f7       	brne	.-14     	; 0x262 <__do_global_ctors+0x8>
     270:	0e 94 7e 23 	call	0x46fc	; 0x46fc <main>
     274:	0c 94 78 31 	jmp	0x62f0	; 0x62f0 <__do_global_dtors>

00000278 <__bad_interrupt>:
     278:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000027c <month_length>:
     27c:	62 30       	cpi	r22, 0x02	; 2
     27e:	21 f4       	brne	.+8      	; 0x288 <month_length+0xc>
     280:	0e 94 4b 01 	call	0x296	; 0x296 <is_leap_year>
     284:	84 5e       	subi	r24, 0xE4	; 228
     286:	08 95       	ret
     288:	68 30       	cpi	r22, 0x08	; 8
     28a:	08 f0       	brcs	.+2      	; 0x28e <month_length+0x12>
     28c:	6f 5f       	subi	r22, 0xFF	; 255
     28e:	61 70       	andi	r22, 0x01	; 1
     290:	8e e1       	ldi	r24, 0x1E	; 30
     292:	86 0f       	add	r24, r22
     294:	08 95       	ret

00000296 <is_leap_year>:
     296:	9c 01       	movw	r18, r24
     298:	23 70       	andi	r18, 0x03	; 3
     29a:	33 27       	eor	r19, r19
     29c:	23 2b       	or	r18, r19
     29e:	59 f4       	brne	.+22     	; 0x2b6 <is_leap_year+0x20>
     2a0:	64 e6       	ldi	r22, 0x64	; 100
     2a2:	70 e0       	ldi	r23, 0x00	; 0
     2a4:	0e 94 16 2c 	call	0x582c	; 0x582c <__divmodhi4>
     2a8:	89 2b       	or	r24, r25
     2aa:	39 f4       	brne	.+14     	; 0x2ba <is_leap_year+0x24>
     2ac:	63 70       	andi	r22, 0x03	; 3
     2ae:	77 27       	eor	r23, r23
     2b0:	81 e0       	ldi	r24, 0x01	; 1
     2b2:	67 2b       	or	r22, r23
     2b4:	19 f0       	breq	.+6      	; 0x2bc <is_leap_year+0x26>
     2b6:	80 e0       	ldi	r24, 0x00	; 0
     2b8:	08 95       	ret
     2ba:	81 e0       	ldi	r24, 0x01	; 1
     2bc:	08 95       	ret

000002be <_Z7pinModehh>:
#include "ardooweeno.h"
#include <util/delay.h>

void pinMode(uint8_t pin, uint8_t mode)
{
	switch(pin)
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	fc 01       	movw	r30, r24
     2c2:	32 97       	sbiw	r30, 0x02	; 2
     2c4:	e2 31       	cpi	r30, 0x12	; 18
     2c6:	f1 05       	cpc	r31, r1
     2c8:	08 f0       	brcs	.+2      	; 0x2cc <_Z7pinModehh+0xe>
     2ca:	bd c0       	rjmp	.+378    	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
     2cc:	ec 5c       	subi	r30, 0xCC	; 204
     2ce:	ff 4f       	sbci	r31, 0xFF	; 255
     2d0:	0c 94 6b 2c 	jmp	0x58d6	; 0x58d6 <__tablejump2__>
	{
		case D2:
		{
			if(mode == OUTPUT)
     2d4:	61 30       	cpi	r22, 0x01	; 1
     2d6:	11 f4       	brne	.+4      	; 0x2dc <_Z7pinModehh+0x1e>
			{
				DDRD  |= (1 << PORTD2);
     2d8:	52 9a       	sbi	0x0a, 2	; 10
     2da:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD2);
     2dc:	52 98       	cbi	0x0a, 2	; 10

				if(mode == INPUT_PULLUP)
     2de:	63 30       	cpi	r22, 0x03	; 3
     2e0:	11 f4       	brne	.+4      	; 0x2e6 <_Z7pinModehh+0x28>
				{
					PORTD  |= (1 << PORTD2);
     2e2:	5a 9a       	sbi	0x0b, 2	; 11
     2e4:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD2);
     2e6:	5a 98       	cbi	0x0b, 2	; 11
     2e8:	08 95       	ret
		}
		break;

		case D3:
		{
			if(mode == OUTPUT)
     2ea:	61 30       	cpi	r22, 0x01	; 1
     2ec:	11 f4       	brne	.+4      	; 0x2f2 <_Z7pinModehh+0x34>
			{
				DDRD  |= (1 << PORTD3);
     2ee:	53 9a       	sbi	0x0a, 3	; 10
     2f0:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD3);
     2f2:	53 98       	cbi	0x0a, 3	; 10

				if(mode == INPUT_PULLUP)
     2f4:	63 30       	cpi	r22, 0x03	; 3
     2f6:	11 f4       	brne	.+4      	; 0x2fc <_Z7pinModehh+0x3e>
				{
					PORTD  |= (1 << PORTD3);
     2f8:	5b 9a       	sbi	0x0b, 3	; 11
     2fa:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD3);
     2fc:	5b 98       	cbi	0x0b, 3	; 11
     2fe:	08 95       	ret
		}
		break;

		case D4:
		{
			if(mode == OUTPUT)
     300:	61 30       	cpi	r22, 0x01	; 1
     302:	11 f4       	brne	.+4      	; 0x308 <_Z7pinModehh+0x4a>
			{
				DDRD  |= (1 << PORTD4);
     304:	54 9a       	sbi	0x0a, 4	; 10
     306:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD4);
     308:	54 98       	cbi	0x0a, 4	; 10

				if(mode == INPUT_PULLUP)
     30a:	63 30       	cpi	r22, 0x03	; 3
     30c:	11 f4       	brne	.+4      	; 0x312 <_Z7pinModehh+0x54>
				{
					PORTD  |= (1 << PORTD4);
     30e:	5c 9a       	sbi	0x0b, 4	; 11
     310:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD4);
     312:	5c 98       	cbi	0x0b, 4	; 11
     314:	08 95       	ret
		}
		break;

		case D5:
		{
			if(mode == OUTPUT)
     316:	61 30       	cpi	r22, 0x01	; 1
     318:	11 f4       	brne	.+4      	; 0x31e <_Z7pinModehh+0x60>
			{
				DDRD  |= (1 << PORTD5);
     31a:	55 9a       	sbi	0x0a, 5	; 10
     31c:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD5);
     31e:	55 98       	cbi	0x0a, 5	; 10

				if(mode == INPUT_PULLUP)
     320:	63 30       	cpi	r22, 0x03	; 3
     322:	11 f4       	brne	.+4      	; 0x328 <_Z7pinModehh+0x6a>
				{
					PORTD  |= (1 << PORTD5);
     324:	5d 9a       	sbi	0x0b, 5	; 11
     326:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD5);
     328:	5d 98       	cbi	0x0b, 5	; 11
     32a:	08 95       	ret
		}
		break;

		case D6:
		{
			if(mode == OUTPUT)
     32c:	61 30       	cpi	r22, 0x01	; 1
     32e:	11 f4       	brne	.+4      	; 0x334 <_Z7pinModehh+0x76>
			{
				DDRD  |= (1 << PORTD6);
     330:	56 9a       	sbi	0x0a, 6	; 10
     332:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD6);
     334:	56 98       	cbi	0x0a, 6	; 10

				if(mode == INPUT_PULLUP)
     336:	63 30       	cpi	r22, 0x03	; 3
     338:	11 f4       	brne	.+4      	; 0x33e <_Z7pinModehh+0x80>
				{
					PORTD  |= (1 << PORTD6);
     33a:	5e 9a       	sbi	0x0b, 6	; 11
     33c:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD6);
     33e:	5e 98       	cbi	0x0b, 6	; 11
     340:	08 95       	ret
		}
		break;

		case D7:
		{
			if(mode == OUTPUT)
     342:	61 30       	cpi	r22, 0x01	; 1
     344:	11 f4       	brne	.+4      	; 0x34a <_Z7pinModehh+0x8c>
			{
				DDRD  |= (1 << PORTD7);
     346:	57 9a       	sbi	0x0a, 7	; 10
     348:	08 95       	ret
			}
			else
			{
				DDRD  &= ~(1 << PORTD7);
     34a:	57 98       	cbi	0x0a, 7	; 10

				if(mode == INPUT_PULLUP)
     34c:	63 30       	cpi	r22, 0x03	; 3
     34e:	11 f4       	brne	.+4      	; 0x354 <_Z7pinModehh+0x96>
				{
					PORTD  |= (1 << PORTD7);
     350:	5f 9a       	sbi	0x0b, 7	; 11
     352:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTD7);
     354:	5f 98       	cbi	0x0b, 7	; 11
     356:	08 95       	ret
		}
		break;

		case D8:
		{
			if(mode == OUTPUT)
     358:	61 30       	cpi	r22, 0x01	; 1
     35a:	11 f4       	brne	.+4      	; 0x360 <_Z7pinModehh+0xa2>
			{
				DDRB  |= (1 << PORTB0);
     35c:	20 9a       	sbi	0x04, 0	; 4
     35e:	08 95       	ret
			}
			else
			{
				DDRB  &= ~(1 << PORTB0);
     360:	20 98       	cbi	0x04, 0	; 4

				if(mode == INPUT_PULLUP)
     362:	63 30       	cpi	r22, 0x03	; 3
     364:	11 f4       	brne	.+4      	; 0x36a <_Z7pinModehh+0xac>
				{
					PORTB  |= (1 << PORTB0);
     366:	28 9a       	sbi	0x05, 0	; 5
     368:	08 95       	ret
				}
				else
				{
					PORTB &= ~(1 << PORTB0);
     36a:	28 98       	cbi	0x05, 0	; 5
     36c:	08 95       	ret
		}
		break;

		case D9:
		{
			if(mode == OUTPUT)
     36e:	61 30       	cpi	r22, 0x01	; 1
     370:	11 f4       	brne	.+4      	; 0x376 <_Z7pinModehh+0xb8>
			{
				DDRB  |= (1 << PORTB1);
     372:	21 9a       	sbi	0x04, 1	; 4
     374:	08 95       	ret
			}
			else
			{
				DDRB  &= ~(1 << PORTB1);
     376:	21 98       	cbi	0x04, 1	; 4

				if(mode == INPUT_PULLUP)
     378:	63 30       	cpi	r22, 0x03	; 3
     37a:	11 f4       	brne	.+4      	; 0x380 <_Z7pinModehh+0xc2>
				{
					PORTB  |= (1 << PORTB1);
     37c:	29 9a       	sbi	0x05, 1	; 5
     37e:	08 95       	ret
				}
				else
				{
					PORTB &= ~(1 << PORTB1);
     380:	29 98       	cbi	0x05, 1	; 5
     382:	08 95       	ret
		}
		break;

		case D10:
		{
			if(mode == OUTPUT)
     384:	61 30       	cpi	r22, 0x01	; 1
     386:	11 f4       	brne	.+4      	; 0x38c <_Z7pinModehh+0xce>
			{
				DDRB  |= (1 << PORTB2);
     388:	22 9a       	sbi	0x04, 2	; 4
     38a:	08 95       	ret
			}
			else
			{
				DDRB  &= ~(1 << PORTB2);
     38c:	22 98       	cbi	0x04, 2	; 4

				if(mode == INPUT_PULLUP)
     38e:	63 30       	cpi	r22, 0x03	; 3
     390:	11 f4       	brne	.+4      	; 0x396 <_Z7pinModehh+0xd8>
				{
					PORTB  |= (1 << PORTB2);
     392:	2a 9a       	sbi	0x05, 2	; 5
     394:	08 95       	ret
				}
				else
				{
					PORTB &= ~(1 << PORTB2);
     396:	2a 98       	cbi	0x05, 2	; 5
     398:	08 95       	ret
		}
		break;

		case D13:
		{
			if(mode == OUTPUT)
     39a:	61 30       	cpi	r22, 0x01	; 1
     39c:	11 f4       	brne	.+4      	; 0x3a2 <_Z7pinModehh+0xe4>
			{
				DDRB  |= (1 << PORTB5);
     39e:	25 9a       	sbi	0x04, 5	; 4
     3a0:	08 95       	ret
			}
			else
			{
				DDRB  &= ~(1 << PORTB5);
     3a2:	25 98       	cbi	0x04, 5	; 4

				if(mode == INPUT_PULLUP)
     3a4:	63 30       	cpi	r22, 0x03	; 3
     3a6:	11 f4       	brne	.+4      	; 0x3ac <_Z7pinModehh+0xee>
				{
					PORTD  |= (1 << PORTB5);
     3a8:	5d 9a       	sbi	0x0b, 5	; 11
     3aa:	08 95       	ret
				}
				else
				{
					PORTD &= ~(1 << PORTB5);
     3ac:	5d 98       	cbi	0x0b, 5	; 11
     3ae:	08 95       	ret
		}
		break;

		case A0:
		{
			if(mode == OUTPUT)
     3b0:	61 30       	cpi	r22, 0x01	; 1
     3b2:	11 f4       	brne	.+4      	; 0x3b8 <_Z7pinModehh+0xfa>
			{
				DDRC  |= (1 << PORTC0);
     3b4:	38 9a       	sbi	0x07, 0	; 7
     3b6:	0b c0       	rjmp	.+22     	; 0x3ce <_Z7pinModehh+0x110>
			}
			else
			{
				DDRC  &= ~(1 << PORTC0);
     3b8:	38 98       	cbi	0x07, 0	; 7

				if(mode == INPUT_PULLUP)
     3ba:	63 30       	cpi	r22, 0x03	; 3
     3bc:	19 f4       	brne	.+6      	; 0x3c4 <_Z7pinModehh+0x106>
				{
					PORTC  |= (1 << PORTC0);
     3be:	40 9a       	sbi	0x08, 0	; 8
			{
				DDRC  |= (1 << PORTC1);
			}
			else
			{
				DDRC  &= ~(1 << PORTC1);
     3c0:	39 98       	cbi	0x07, 1	; 7
     3c2:	0a c0       	rjmp	.+20     	; 0x3d8 <_Z7pinModehh+0x11a>
				{
					PORTC  |= (1 << PORTC0);
				}
				else
				{
					PORTC &= ~(1 << PORTC0);
     3c4:	40 98       	cbi	0x08, 0	; 8
			{
				DDRC  |= (1 << PORTC1);
			}
			else
			{
				DDRC  &= ~(1 << PORTC1);
     3c6:	39 98       	cbi	0x07, 1	; 7
     3c8:	0a c0       	rjmp	.+20     	; 0x3de <_Z7pinModehh+0x120>
			}
		}

		case A1:
		{
			if(mode == OUTPUT)
     3ca:	61 30       	cpi	r22, 0x01	; 1
     3cc:	11 f4       	brne	.+4      	; 0x3d2 <_Z7pinModehh+0x114>
			{
				DDRC  |= (1 << PORTC1);
     3ce:	39 9a       	sbi	0x07, 1	; 7
     3d0:	0b c0       	rjmp	.+22     	; 0x3e8 <_Z7pinModehh+0x12a>
			}
			else
			{
				DDRC  &= ~(1 << PORTC1);
     3d2:	39 98       	cbi	0x07, 1	; 7

				if(mode == INPUT_PULLUP)
     3d4:	63 30       	cpi	r22, 0x03	; 3
     3d6:	19 f4       	brne	.+6      	; 0x3de <_Z7pinModehh+0x120>
				{
					PORTC  |= (1 << PORTC1);
     3d8:	41 9a       	sbi	0x08, 1	; 8
			{
				DDRC  |= (1 << PORTC2);
			}
			else
			{
				DDRC  &= ~(1 << PORTC2);
     3da:	3a 98       	cbi	0x07, 2	; 7
     3dc:	0a c0       	rjmp	.+20     	; 0x3f2 <_Z7pinModehh+0x134>
				{
					PORTC  |= (1 << PORTC1);
				}
				else
				{
					PORTC &= ~(1 << PORTC1);
     3de:	41 98       	cbi	0x08, 1	; 8
			{
				DDRC  |= (1 << PORTC2);
			}
			else
			{
				DDRC  &= ~(1 << PORTC2);
     3e0:	3a 98       	cbi	0x07, 2	; 7
     3e2:	0a c0       	rjmp	.+20     	; 0x3f8 <_Z7pinModehh+0x13a>
			}
		}

		case A2:
		{
			if(mode == OUTPUT)
     3e4:	61 30       	cpi	r22, 0x01	; 1
     3e6:	11 f4       	brne	.+4      	; 0x3ec <_Z7pinModehh+0x12e>
			{
				DDRC  |= (1 << PORTC2);
     3e8:	3a 9a       	sbi	0x07, 2	; 7
     3ea:	0b c0       	rjmp	.+22     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
			}
			else
			{
				DDRC  &= ~(1 << PORTC2);
     3ec:	3a 98       	cbi	0x07, 2	; 7

				if(mode == INPUT_PULLUP)
     3ee:	63 30       	cpi	r22, 0x03	; 3
     3f0:	19 f4       	brne	.+6      	; 0x3f8 <_Z7pinModehh+0x13a>
				{
					PORTC  |= (1 << PORTC2);
     3f2:	42 9a       	sbi	0x08, 2	; 8
			{
				DDRC  |= (1 << PORTC3);
			}
			else
			{
				DDRC  &= ~(1 << PORTC3);
     3f4:	3b 98       	cbi	0x07, 3	; 7
     3f6:	0a c0       	rjmp	.+20     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
				{
					PORTC  |= (1 << PORTC2);
				}
				else
				{
					PORTC &= ~(1 << PORTC2);
     3f8:	42 98       	cbi	0x08, 2	; 8
			{
				DDRC  |= (1 << PORTC3);
			}
			else
			{
				DDRC  &= ~(1 << PORTC3);
     3fa:	3b 98       	cbi	0x07, 3	; 7
     3fc:	0a c0       	rjmp	.+20     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
			}
		}

		case A3:
		{
			if(mode == OUTPUT)
     3fe:	61 30       	cpi	r22, 0x01	; 1
     400:	11 f4       	brne	.+4      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
			{
				DDRC  |= (1 << PORTC3);
     402:	3b 9a       	sbi	0x07, 3	; 7
     404:	0b c0       	rjmp	.+22     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
			}
			else
			{
				DDRC  &= ~(1 << PORTC3);
     406:	3b 98       	cbi	0x07, 3	; 7

				if(mode == INPUT_PULLUP)
     408:	63 30       	cpi	r22, 0x03	; 3
     40a:	19 f4       	brne	.+6      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
				{
					PORTC  |= (1 << PORTC3);
     40c:	43 9a       	sbi	0x08, 3	; 8
			{
				DDRC  |= (1 << PORTC4);
			}
			else
			{
				DDRC  &= ~(1 << PORTC4);
     40e:	3c 98       	cbi	0x07, 4	; 7
     410:	0a c0       	rjmp	.+20     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
				{
					PORTC  |= (1 << PORTC3);
				}
				else
				{
					PORTC &= ~(1 << PORTC3);
     412:	43 98       	cbi	0x08, 3	; 8
			{
				DDRC  |= (1 << PORTC4);
			}
			else
			{
				DDRC  &= ~(1 << PORTC4);
     414:	3c 98       	cbi	0x07, 4	; 7
     416:	0a c0       	rjmp	.+20     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
			}
		}

		case A4:
		{
			if(mode == OUTPUT)
     418:	61 30       	cpi	r22, 0x01	; 1
     41a:	11 f4       	brne	.+4      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
			{
				DDRC  |= (1 << PORTC4);
     41c:	3c 9a       	sbi	0x07, 4	; 7
     41e:	0b c0       	rjmp	.+22     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
			}
			else
			{
				DDRC  &= ~(1 << PORTC4);
     420:	3c 98       	cbi	0x07, 4	; 7

				if(mode == INPUT_PULLUP)
     422:	63 30       	cpi	r22, 0x03	; 3
     424:	19 f4       	brne	.+6      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
				{
					PORTC  |= (1 << PORTC4);
     426:	44 9a       	sbi	0x08, 4	; 8
			{
				DDRC  |= (1 << PORTC5);
			}
			else
			{
				DDRC  &= ~(1 << PORTC5);
     428:	3d 98       	cbi	0x07, 5	; 7
     42a:	0a c0       	rjmp	.+20     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
				{
					PORTC  |= (1 << PORTC4);
				}
				else
				{
					PORTC &= ~(1 << PORTC4);
     42c:	44 98       	cbi	0x08, 4	; 8
			{
				DDRC  |= (1 << PORTC5);
			}
			else
			{
				DDRC  &= ~(1 << PORTC5);
     42e:	3d 98       	cbi	0x07, 5	; 7
     430:	09 c0       	rjmp	.+18     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
			}
		}

		case A5:
		{
			if(mode == OUTPUT)
     432:	61 30       	cpi	r22, 0x01	; 1
     434:	11 f4       	brne	.+4      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
			{
				DDRC  |= (1 << PORTC5);
     436:	3d 9a       	sbi	0x07, 5	; 7
     438:	08 95       	ret
			}
			else
			{
				DDRC  &= ~(1 << PORTC5);
     43a:	3d 98       	cbi	0x07, 5	; 7

				if(mode == INPUT_PULLUP)
     43c:	63 30       	cpi	r22, 0x03	; 3
     43e:	11 f4       	brne	.+4      	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
				{
					PORTC  |= (1 << PORTC5);
     440:	45 9a       	sbi	0x08, 5	; 8
     442:	08 95       	ret
				}
				else
				{
					PORTC &= ~(1 << PORTC5);
     444:	45 98       	cbi	0x08, 5	; 8
     446:	08 95       	ret

00000448 <_Z11digitalReadh>:

BOOL digitalRead(uint8_t pin)
{
	int result = 0;

	switch(pin)
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	fc 01       	movw	r30, r24
     44c:	32 97       	sbiw	r30, 0x02	; 2
     44e:	e0 31       	cpi	r30, 0x10	; 16
     450:	f1 05       	cpc	r31, r1
     452:	f0 f5       	brcc	.+124    	; 0x4d0 <_Z11digitalReadh+0x88>
     454:	ea 5b       	subi	r30, 0xBA	; 186
     456:	ff 4f       	sbci	r31, 0xFF	; 255
     458:	0c 94 6b 2c 	jmp	0x58d6	; 0x58d6 <__tablejump2__>
	{
		case D2:
		{
			result = PIND & (1 << PORTD2);
     45c:	29 b1       	in	r18, 0x09	; 9
     45e:	24 70       	andi	r18, 0x04	; 4
     460:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     462:	38 c0       	rjmp	.+112    	; 0x4d4 <_Z11digitalReadh+0x8c>

		case D3:
		{
			result = PIND & (1 << PORTD3);
     464:	29 b1       	in	r18, 0x09	; 9
     466:	28 70       	andi	r18, 0x08	; 8
     468:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     46a:	34 c0       	rjmp	.+104    	; 0x4d4 <_Z11digitalReadh+0x8c>

		case D4:
		{
			result = PIND & (1 << PORTD4);
     46c:	29 b1       	in	r18, 0x09	; 9
     46e:	20 71       	andi	r18, 0x10	; 16
     470:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     472:	30 c0       	rjmp	.+96     	; 0x4d4 <_Z11digitalReadh+0x8c>

		case D5:
		{
			result = PIND & (1 << PORTD5);
     474:	29 b1       	in	r18, 0x09	; 9
     476:	20 72       	andi	r18, 0x20	; 32
     478:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     47a:	2c c0       	rjmp	.+88     	; 0x4d4 <_Z11digitalReadh+0x8c>

		case D6:
		{
			result = PIND & (1 << PORTD6);
     47c:	29 b1       	in	r18, 0x09	; 9
     47e:	20 74       	andi	r18, 0x40	; 64
     480:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     482:	28 c0       	rjmp	.+80     	; 0x4d4 <_Z11digitalReadh+0x8c>

		case D7:
		{
			result = PIND & (1 << PORTD7);
     484:	29 b1       	in	r18, 0x09	; 9
     486:	20 78       	andi	r18, 0x80	; 128
     488:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     48a:	24 c0       	rjmp	.+72     	; 0x4d4 <_Z11digitalReadh+0x8c>

		case D8:
		{
			result = PINB & (1 << PORTB0);
     48c:	83 b1       	in	r24, 0x03	; 3
     48e:	28 2f       	mov	r18, r24
     490:	21 70       	andi	r18, 0x01	; 1
     492:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     494:	1f c0       	rjmp	.+62     	; 0x4d4 <_Z11digitalReadh+0x8c>

		case D9:
		{
			result = PINB & (1 << PORTB1);
     496:	23 b1       	in	r18, 0x03	; 3
     498:	22 70       	andi	r18, 0x02	; 2
     49a:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     49c:	1b c0       	rjmp	.+54     	; 0x4d4 <_Z11digitalReadh+0x8c>

		case D10:
		{
			result = PINB & (1 << PORTB2);
     49e:	23 b1       	in	r18, 0x03	; 3
     4a0:	24 70       	andi	r18, 0x04	; 4
     4a2:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4a4:	17 c0       	rjmp	.+46     	; 0x4d4 <_Z11digitalReadh+0x8c>

		case D13:
		{
			result = PINB & (1 << PORTB5);
     4a6:	23 b1       	in	r18, 0x03	; 3
     4a8:	20 72       	andi	r18, 0x20	; 32
     4aa:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4ac:	13 c0       	rjmp	.+38     	; 0x4d4 <_Z11digitalReadh+0x8c>

		case A0:
		{
			result = PINC & (1 << PORTC0);
     4ae:	86 b1       	in	r24, 0x06	; 6
     4b0:	28 2f       	mov	r18, r24
     4b2:	21 70       	andi	r18, 0x01	; 1
     4b4:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4b6:	0e c0       	rjmp	.+28     	; 0x4d4 <_Z11digitalReadh+0x8c>

		case A1:
		{
			result = PINC & (1 << PORTC1);
     4b8:	26 b1       	in	r18, 0x06	; 6
     4ba:	22 70       	andi	r18, 0x02	; 2
     4bc:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4be:	0a c0       	rjmp	.+20     	; 0x4d4 <_Z11digitalReadh+0x8c>

		case A2:
		{
			result = PINC & (1 << PORTC2);
     4c0:	26 b1       	in	r18, 0x06	; 6
     4c2:	24 70       	andi	r18, 0x04	; 4
     4c4:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4c6:	06 c0       	rjmp	.+12     	; 0x4d4 <_Z11digitalReadh+0x8c>

		case A3:
		{
			result = PINC & (1 << PORTC3);
     4c8:	26 b1       	in	r18, 0x06	; 6
     4ca:	28 70       	andi	r18, 0x08	; 8
     4cc:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
     4ce:	02 c0       	rjmp	.+4      	; 0x4d4 <_Z11digitalReadh+0x8c>
	}
}

BOOL digitalRead(uint8_t pin)
{
	int result = 0;
     4d0:	20 e0       	ldi	r18, 0x00	; 0
     4d2:	30 e0       	ldi	r19, 0x00	; 0
		{
		}
		break;
	}

	return(result != 0);
     4d4:	81 e0       	ldi	r24, 0x01	; 1
     4d6:	23 2b       	or	r18, r19
     4d8:	09 f4       	brne	.+2      	; 0x4dc <_Z11digitalReadh+0x94>
     4da:	80 e0       	ldi	r24, 0x00	; 0
}
     4dc:	08 95       	ret

000004de <_Z12digitalWritehh>:

void digitalWrite(uint8_t pin, uint8_t value)
{
	switch(pin)
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	fc 01       	movw	r30, r24
     4e2:	32 97       	sbiw	r30, 0x02	; 2
     4e4:	e0 31       	cpi	r30, 0x10	; 16
     4e6:	f1 05       	cpc	r31, r1
     4e8:	08 f0       	brcs	.+2      	; 0x4ec <_Z12digitalWritehh+0xe>
     4ea:	57 c0       	rjmp	.+174    	; 0x59a <_Z12digitalWritehh+0xbc>
     4ec:	ea 5a       	subi	r30, 0xAA	; 170
     4ee:	ff 4f       	sbci	r31, 0xFF	; 255
     4f0:	0c 94 6b 2c 	jmp	0x58d6	; 0x58d6 <__tablejump2__>
	{
		case D2:
		{
			if(value)
     4f4:	66 23       	and	r22, r22
     4f6:	11 f0       	breq	.+4      	; 0x4fc <_Z12digitalWritehh+0x1e>
			{
				PORTD  |= (1 << PORTD2);
     4f8:	5a 9a       	sbi	0x0b, 2	; 11
     4fa:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD2);
     4fc:	5a 98       	cbi	0x0b, 2	; 11
     4fe:	08 95       	ret
		}
		break;

		case D3:
		{
			if(value)
     500:	66 23       	and	r22, r22
     502:	11 f0       	breq	.+4      	; 0x508 <_Z12digitalWritehh+0x2a>
			{
				PORTD  |= (1 << PORTD3);
     504:	5b 9a       	sbi	0x0b, 3	; 11
     506:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD3);
     508:	5b 98       	cbi	0x0b, 3	; 11
     50a:	08 95       	ret
		}
		break;

		case D4:
		{
			if(value)
     50c:	66 23       	and	r22, r22
     50e:	11 f0       	breq	.+4      	; 0x514 <_Z12digitalWritehh+0x36>
			{
				PORTD  |= (1 << PORTD4);
     510:	5c 9a       	sbi	0x0b, 4	; 11
     512:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD4);
     514:	5c 98       	cbi	0x0b, 4	; 11
     516:	08 95       	ret
		}
		break;

		case D5:
		{
			if(value)
     518:	66 23       	and	r22, r22
     51a:	11 f0       	breq	.+4      	; 0x520 <_Z12digitalWritehh+0x42>
			{
				PORTD  |= (1 << PORTD5);
     51c:	5d 9a       	sbi	0x0b, 5	; 11
     51e:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD5);
     520:	5d 98       	cbi	0x0b, 5	; 11
     522:	08 95       	ret
		}
		break;

		case D6:
		{
			if(value)
     524:	66 23       	and	r22, r22
     526:	11 f0       	breq	.+4      	; 0x52c <_Z12digitalWritehh+0x4e>
			{
				PORTD  |= (1 << PORTD6);
     528:	5e 9a       	sbi	0x0b, 6	; 11
     52a:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD6);
     52c:	5e 98       	cbi	0x0b, 6	; 11
     52e:	08 95       	ret
		}
		break;

		case D7:
		{
			if(value)
     530:	66 23       	and	r22, r22
     532:	11 f0       	breq	.+4      	; 0x538 <_Z12digitalWritehh+0x5a>
			{
				PORTD  |= (1 << PORTD7);
     534:	5f 9a       	sbi	0x0b, 7	; 11
     536:	08 95       	ret
			}
			else
			{
				PORTD  &= ~(1 << PORTD7);
     538:	5f 98       	cbi	0x0b, 7	; 11
     53a:	08 95       	ret
		}
		break;

		case D8:
		{
			if(value)
     53c:	66 23       	and	r22, r22
     53e:	11 f0       	breq	.+4      	; 0x544 <_Z12digitalWritehh+0x66>
			{
				PORTB  |= (1 << PORTB0);
     540:	28 9a       	sbi	0x05, 0	; 5
     542:	08 95       	ret
			}
			else
			{
				PORTB  &= ~(1 << PORTB0);
     544:	28 98       	cbi	0x05, 0	; 5
     546:	08 95       	ret
		}
		break;

		case D9:
		{
			if(value)
     548:	66 23       	and	r22, r22
     54a:	11 f0       	breq	.+4      	; 0x550 <_Z12digitalWritehh+0x72>
			{
				PORTB  |= (1 << PORTB1);
     54c:	29 9a       	sbi	0x05, 1	; 5
     54e:	08 95       	ret
			}
			else
			{
				PORTB  &= ~(1 << PORTB1);
     550:	29 98       	cbi	0x05, 1	; 5
     552:	08 95       	ret
		}
		break;

		case D10:
		{
			if(value)
     554:	66 23       	and	r22, r22
     556:	11 f0       	breq	.+4      	; 0x55c <_Z12digitalWritehh+0x7e>
			{
				PORTB  |= (1 << PORTB2);
     558:	2a 9a       	sbi	0x05, 2	; 5
     55a:	08 95       	ret
			}
			else
			{
				PORTB  &= ~(1 << PORTB2);
     55c:	2a 98       	cbi	0x05, 2	; 5
     55e:	08 95       	ret
		}
		break;

		case D13:
		{
			if(value)
     560:	66 23       	and	r22, r22
     562:	11 f0       	breq	.+4      	; 0x568 <_Z12digitalWritehh+0x8a>
			{
				PORTB  |= (1 << PORTB5);
     564:	2d 9a       	sbi	0x05, 5	; 5
     566:	08 95       	ret
			}
			else
			{
				PORTB  &= ~(1 << PORTB5);
     568:	2d 98       	cbi	0x05, 5	; 5
     56a:	08 95       	ret
		}
		break;

		case A0:
		{
			if(value)
     56c:	66 23       	and	r22, r22
     56e:	11 f0       	breq	.+4      	; 0x574 <_Z12digitalWritehh+0x96>
			{
				PORTC  |= (1 << PORTC0);
     570:	40 9a       	sbi	0x08, 0	; 8
     572:	08 95       	ret
			}
			else
			{
				PORTC  &= ~(1 << PORTC0);
     574:	40 98       	cbi	0x08, 0	; 8
     576:	08 95       	ret
		}
		break;

		case A1:
		{
			if(value)
     578:	66 23       	and	r22, r22
     57a:	11 f0       	breq	.+4      	; 0x580 <_Z12digitalWritehh+0xa2>
			{
				PORTC  |= (1 << PORTC1);
     57c:	41 9a       	sbi	0x08, 1	; 8
     57e:	08 95       	ret
			}
			else
			{
				PORTC  &= ~(1 << PORTC1);
     580:	41 98       	cbi	0x08, 1	; 8
     582:	08 95       	ret
		}
		break;

		case A2:
		{
			if(value)
     584:	66 23       	and	r22, r22
     586:	11 f0       	breq	.+4      	; 0x58c <_Z12digitalWritehh+0xae>
			{
				PORTC  |= (1 << PORTC2);
     588:	42 9a       	sbi	0x08, 2	; 8
     58a:	08 95       	ret
			}
			else
			{
				PORTC  &= ~(1 << PORTC2);
     58c:	42 98       	cbi	0x08, 2	; 8
     58e:	08 95       	ret
		}
		break;

		case A3:
		{
			if(value)
     590:	66 23       	and	r22, r22
     592:	11 f0       	breq	.+4      	; 0x598 <_Z12digitalWritehh+0xba>
			{
				PORTC  |= (1 << PORTC3);
     594:	43 9a       	sbi	0x08, 3	; 8
     596:	08 95       	ret
			}
			else
			{
				PORTC  &= ~(1 << PORTC3);
     598:	43 98       	cbi	0x08, 3	; 8
     59a:	08 95       	ret

0000059c <_ZN13EepromManagerC1Ev>:
extern uint8_t g_unlockCode[];

extern char g_tempStr[];

/* default constructor */
EepromManager::EepromManager()
     59c:	08 95       	ret

0000059e <_ZN13EepromManagerD1Ev>:
{
}   /*EepromManager */

/* default destructor */
EepromManager::~EepromManager()
     59e:	08 95       	ret

000005a0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>:
{
}   /*~EepromManager */

void EepromManager::updateEEPROMVar(EE_var_t v, void* val)
{
     5a0:	0f 93       	push	r16
     5a2:	1f 93       	push	r17
     5a4:	cf 93       	push	r28
     5a6:	df 93       	push	r29
	uint8_t* ee_byte_addr = NULL;
	uint16_t* ee_word_addr = NULL;
	uint32_t* ee_dword_addr = NULL;

	if(!val)
     5a8:	41 15       	cp	r20, r1
     5aa:	51 05       	cpc	r21, r1
     5ac:	09 f4       	brne	.+2      	; 0x5b0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x10>
     5ae:	7b c0       	rjmp	.+246    	; 0x6a6 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x106>
	{
		return;
	}

	switch(v)
     5b0:	86 2f       	mov	r24, r22
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	fc 01       	movw	r30, r24
     5b6:	3b 97       	sbiw	r30, 0x0b	; 11
     5b8:	e0 31       	cpi	r30, 0x10	; 16
     5ba:	f1 05       	cpc	r31, r1
     5bc:	08 f0       	brcs	.+2      	; 0x5c0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x20>
     5be:	73 c0       	rjmp	.+230    	; 0x6a6 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x106>
     5c0:	da 01       	movw	r26, r20
     5c2:	ea 59       	subi	r30, 0x9A	; 154
     5c4:	ff 4f       	sbci	r31, 0xFF	; 255
     5c6:	0c 94 6b 2c 	jmp	0x58d6	; 0x58d6 <__tablejump2__>
		}
		break;

		case Event_finish_epoch:
		{
			ee_dword_addr = (uint32_t*)&(EepromManager::ee_vars.event_finish_epoch);
     5ca:	8f ee       	ldi	r24, 0xEF	; 239
     5cc:	92 e0       	ldi	r25, 0x02	; 2
     5ce:	52 c0       	rjmp	.+164    	; 0x674 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xd4>
		}
		break;

		case Rv3028_offset:
		{
			ee_word_addr = (uint16_t*)&(EepromManager::ee_vars.rv3028_offset);
     5d0:	87 ee       	ldi	r24, 0xE7	; 231
     5d2:	92 e0       	ldi	r25, 0x02	; 2
     5d4:	64 c0       	rjmp	.+200    	; 0x69e <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xfe>
		}
		break;

		case Fox_setting:
		{
			ee_byte_addr = (uint8_t*)&(EepromManager::ee_vars.fox_setting);
     5d6:	82 ee       	ldi	r24, 0xE2	; 226
     5d8:	92 e0       	ldi	r25, 0x02	; 2
     5da:	58 c0       	rjmp	.+176    	; 0x68c <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xec>
	switch(v)
	{
		case StationID_text:
		{
			char* char_addr = (char*)val;
			char c = *char_addr++;
     5dc:	8a 01       	movw	r16, r20
     5de:	0f 5f       	subi	r16, 0xFF	; 255
     5e0:	1f 4f       	sbci	r17, 0xFF	; 255
     5e2:	6c 91       	ld	r22, X
			int i = 0;

			while(c)
     5e4:	66 23       	and	r22, r22
     5e6:	71 f0       	breq	.+28     	; 0x604 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x64>
     5e8:	c0 e0       	ldi	r28, 0x00	; 0
     5ea:	d0 e0       	ldi	r29, 0x00	; 0
			{
				eeprom_update_byte((uint8_t*)&(EepromManager::ee_vars.stationID_text[i++]), (uint8_t)c);
     5ec:	21 96       	adiw	r28, 0x01	; 1
     5ee:	ce 01       	movw	r24, r28
     5f0:	86 5d       	subi	r24, 0xD6	; 214
     5f2:	9d 4f       	sbci	r25, 0xFD	; 253
     5f4:	0e 94 0d 31 	call	0x621a	; 0x621a <eeprom_update_byte>
				c = *char_addr++;
     5f8:	f8 01       	movw	r30, r16
     5fa:	61 91       	ld	r22, Z+
     5fc:	8f 01       	movw	r16, r30
		{
			char* char_addr = (char*)val;
			char c = *char_addr++;
			int i = 0;

			while(c)
     5fe:	61 11       	cpse	r22, r1
     600:	f5 cf       	rjmp	.-22     	; 0x5ec <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x4c>
     602:	02 c0       	rjmp	.+4      	; 0x608 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x68>
	{
		case StationID_text:
		{
			char* char_addr = (char*)val;
			char c = *char_addr++;
			int i = 0;
     604:	c0 e0       	ldi	r28, 0x00	; 0
     606:	d0 e0       	ldi	r29, 0x00	; 0
			{
				eeprom_update_byte((uint8_t*)&(EepromManager::ee_vars.stationID_text[i++]), (uint8_t)c);
				c = *char_addr++;
			}

			eeprom_update_byte((uint8_t*)&(EepromManager::ee_vars.stationID_text[i]), 0);
     608:	60 e0       	ldi	r22, 0x00	; 0
     60a:	ce 01       	movw	r24, r28
     60c:	85 5d       	subi	r24, 0xD5	; 213
     60e:	9d 4f       	sbci	r25, 0xFD	; 253
     610:	0e 94 0d 31 	call	0x621a	; 0x621a <eeprom_update_byte>
		}
		break;
     614:	48 c0       	rjmp	.+144    	; 0x6a6 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x106>

		case UnlockCode:
		{
			uint8_t* uint8_addr = (uint8_t*)val;
			uint8_t c = *uint8_addr++;
     616:	8a 01       	movw	r16, r20
     618:	0f 5f       	subi	r16, 0xFF	; 255
     61a:	1f 4f       	sbci	r17, 0xFF	; 255
     61c:	6c 91       	ld	r22, X
			int i = 0;

			while(c && (i < MAX_UNLOCK_CODE_LENGTH))
     61e:	66 23       	and	r22, r22
     620:	91 f0       	breq	.+36     	; 0x646 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xa6>
     622:	c0 e0       	ldi	r28, 0x00	; 0
     624:	d0 e0       	ldi	r29, 0x00	; 0
     626:	03 c0       	rjmp	.+6      	; 0x62e <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x8e>
     628:	c8 30       	cpi	r28, 0x08	; 8
     62a:	d1 05       	cpc	r29, r1
     62c:	71 f0       	breq	.+28     	; 0x64a <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xaa>
			{
				eeprom_update_byte((uint8_t*)&(EepromManager::ee_vars.unlockCode[i++]), c);
     62e:	21 96       	adiw	r28, 0x01	; 1
     630:	ce 01       	movw	r24, r28
     632:	89 52       	subi	r24, 0x29	; 41
     634:	9d 4f       	sbci	r25, 0xFD	; 253
     636:	0e 94 0d 31 	call	0x621a	; 0x621a <eeprom_update_byte>
				c = *uint8_addr++;
     63a:	f8 01       	movw	r30, r16
     63c:	61 91       	ld	r22, Z+
     63e:	8f 01       	movw	r16, r30
		{
			uint8_t* uint8_addr = (uint8_t*)val;
			uint8_t c = *uint8_addr++;
			int i = 0;

			while(c && (i < MAX_UNLOCK_CODE_LENGTH))
     640:	61 11       	cpse	r22, r1
     642:	f2 cf       	rjmp	.-28     	; 0x628 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x88>
     644:	02 c0       	rjmp	.+4      	; 0x64a <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xaa>

		case UnlockCode:
		{
			uint8_t* uint8_addr = (uint8_t*)val;
			uint8_t c = *uint8_addr++;
			int i = 0;
     646:	c0 e0       	ldi	r28, 0x00	; 0
     648:	d0 e0       	ldi	r29, 0x00	; 0
			{
				eeprom_update_byte((uint8_t*)&(EepromManager::ee_vars.unlockCode[i++]), c);
				c = *uint8_addr++;
			}

			eeprom_update_byte((uint8_t*)&(EepromManager::ee_vars.unlockCode[i]), 0);
     64a:	60 e0       	ldi	r22, 0x00	; 0
     64c:	ce 01       	movw	r24, r28
     64e:	88 52       	subi	r24, 0x28	; 40
     650:	9d 4f       	sbci	r25, 0xFD	; 253
     652:	0e 94 0d 31 	call	0x621a	; 0x621a <eeprom_update_byte>
		}
		break;
     656:	27 c0       	rjmp	.+78     	; 0x6a6 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x106>
		}
		break;

		case Enable_LEDs:
		{
			ee_byte_addr = (uint8_t*)&(EepromManager::ee_vars.enable_LEDs);
     658:	84 ee       	ldi	r24, 0xE4	; 228
     65a:	92 e0       	ldi	r25, 0x02	; 2
		}
		break;
     65c:	17 c0       	rjmp	.+46     	; 0x68c <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xec>
		}
		break;

		case Enable_start_timer:
		{
			ee_byte_addr = (uint8_t*)&(EepromManager::ee_vars.enable_start_timer);
     65e:	89 ee       	ldi	r24, 0xE9	; 233
     660:	92 e0       	ldi	r25, 0x02	; 2
		}
		break;
     662:	14 c0       	rjmp	.+40     	; 0x68c <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xec>

		case Enable_transmitter:
		{
			ee_byte_addr = (uint8_t*)&(EepromManager::ee_vars.enable_transmitter);
     664:	8a ee       	ldi	r24, 0xEA	; 234
     666:	92 e0       	ldi	r25, 0x02	; 2

		}
		break;
     668:	11 c0       	rjmp	.+34     	; 0x68c <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xec>
		}
		break;

		case Utc_offset:
		{
			ee_byte_addr = (uint8_t*)&(EepromManager::ee_vars.utc_offset);
     66a:	83 ef       	ldi	r24, 0xF3	; 243
     66c:	92 e0       	ldi	r25, 0x02	; 2
		}
		break;
     66e:	0e c0       	rjmp	.+28     	; 0x68c <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xec>
		}
		break;

		case Event_start_epoch:
		{
			ee_dword_addr = (uint32_t*)&(EepromManager::ee_vars.event_start_epoch);
     670:	8b ee       	ldi	r24, 0xEB	; 235
     672:	92 e0       	ldi	r25, 0x02	; 2
	{
		eeprom_update_word(ee_word_addr, *(uint16_t*)val);
	}
	else if(ee_dword_addr)
	{
		eeprom_update_dword(ee_dword_addr, *(uint32_t*)val);
     674:	4d 91       	ld	r20, X+
     676:	5d 91       	ld	r21, X+
     678:	6d 91       	ld	r22, X+
     67a:	7c 91       	ld	r23, X
     67c:	0e 94 1f 31 	call	0x623e	; 0x623e <eeprom_update_dword>
     680:	12 c0       	rjmp	.+36     	; 0x6a6 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x106>
		}
		break;

		case Id_codespeed:
		{
			ee_byte_addr = (uint8_t*)&(EepromManager::ee_vars.id_codespeed);
     682:	81 ee       	ldi	r24, 0xE1	; 225
     684:	92 e0       	ldi	r25, 0x02	; 2
     686:	02 c0       	rjmp	.+4      	; 0x68c <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xec>
		}
		break;

		case Am_audio_frequency:
		{
			ee_byte_addr = (uint8_t*)&(EepromManager::ee_vars.am_audio_frequency);
     688:	83 ee       	ldi	r24, 0xE3	; 227
     68a:	92 e0       	ldi	r25, 0x02	; 2
		break;
	}

	if(ee_byte_addr)
	{
		eeprom_update_byte(ee_byte_addr, *(uint8_t*)val);
     68c:	6c 91       	ld	r22, X
     68e:	0e 94 0d 31 	call	0x621a	; 0x621a <eeprom_update_byte>
     692:	09 c0       	rjmp	.+18     	; 0x6a6 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0x106>
		}
		break;

		case Atmega_temp_calibration:
		{
			ee_word_addr = (uint16_t*)&(EepromManager::ee_vars.atmega_temp_calibration);
     694:	85 ee       	ldi	r24, 0xE5	; 229
     696:	92 e0       	ldi	r25, 0x02	; 2
     698:	02 c0       	rjmp	.+4      	; 0x69e <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv+0xfe>
		}
		break;

		case Eeprom_initialization_flag:
		{
			ee_word_addr = (uint16_t*)&(EepromManager::ee_vars.eeprom_initialization_flag);
     69a:	84 ef       	ldi	r24, 0xF4	; 244
     69c:	92 e0       	ldi	r25, 0x02	; 2
	{
		eeprom_update_byte(ee_byte_addr, *(uint8_t*)val);
	}
	else if(ee_word_addr)
	{
		eeprom_update_word(ee_word_addr, *(uint16_t*)val);
     69e:	6d 91       	ld	r22, X+
     6a0:	7c 91       	ld	r23, X
     6a2:	0e 94 2b 31 	call	0x6256	; 0x6256 <eeprom_update_word>
	}
	else if(ee_dword_addr)
	{
		eeprom_update_dword(ee_dword_addr, *(uint32_t*)val);
	}
}
     6a6:	df 91       	pop	r29
     6a8:	cf 91       	pop	r28
     6aa:	1f 91       	pop	r17
     6ac:	0f 91       	pop	r16
     6ae:	08 95       	ret

000006b0 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>:

void EepromManager::sendEEPROMString(EE_var_t v)
{
     6b0:	ef 92       	push	r14
     6b2:	ff 92       	push	r15
     6b4:	0f 93       	push	r16
     6b6:	1f 93       	push	r17
     6b8:	cf 93       	push	r28
     6ba:	c6 2f       	mov	r28, r22
	char* ee_addr = NULL;

	if(!lb_enabled())
     6bc:	0e 94 f7 09 	call	0x13ee	; 0x13ee <_Z10lb_enabledv>
     6c0:	88 23       	and	r24, r24
     6c2:	09 f4       	brne	.+2      	; 0x6c6 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x16>
     6c4:	46 c0       	rjmp	.+140    	; 0x752 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0xa2>
	{
		return;
	}

	switch(v)
     6c6:	8c 2f       	mov	r24, r28
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	8b 30       	cpi	r24, 0x0B	; 11
     6cc:	91 05       	cpc	r25, r1
     6ce:	08 f0       	brcs	.+2      	; 0x6d2 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x22>
     6d0:	40 c0       	rjmp	.+128    	; 0x752 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0xa2>
     6d2:	fc 01       	movw	r30, r24
     6d4:	ea 58       	subi	r30, 0x8A	; 138
     6d6:	ff 4f       	sbci	r31, 0xFF	; 255
     6d8:	0c 94 6b 2c 	jmp	0x58d6	; 0x58d6 <__tablejump2__>
		}
		break;

		case TextHelp:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textHelp[0]);
     6dc:	8a e2       	ldi	r24, 0x2A	; 42
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	30 c0       	rjmp	.+96     	; 0x742 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>
		}
		break;

		case TextSetStart:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textSetStart[0]);
     6e2:	8f e4       	ldi	r24, 0x4F	; 79
     6e4:	91 e0       	ldi	r25, 0x01	; 1
		}
		break;
     6e6:	2d c0       	rjmp	.+90     	; 0x742 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>

		case TextSetFinish:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textSetFinish[0]);
     6e8:	85 e7       	ldi	r24, 0x75	; 117
     6ea:	91 e0       	ldi	r25, 0x01	; 1
		}
		break;
     6ec:	2a c0       	rjmp	.+84     	; 0x742 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>

		case TextSetID:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textSetID[0]);
     6ee:	8c e9       	ldi	r24, 0x9C	; 156
     6f0:	91 e0       	ldi	r25, 0x01	; 1
		}
		break;
     6f2:	27 c0       	rjmp	.+78     	; 0x742 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>

		case TextErrFinishB4Start:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textErrFinishB4Start[0]);
     6f4:	8d eb       	ldi	r24, 0xBD	; 189
     6f6:	91 e0       	ldi	r25, 0x01	; 1

		}
		break;
     6f8:	24 c0       	rjmp	.+72     	; 0x742 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>

		case TextErrFinishInPast:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textErrFinishInPast[0]);
     6fa:	88 ed       	ldi	r24, 0xD8	; 216
     6fc:	91 e0       	ldi	r25, 0x01	; 1
		}
		break;
     6fe:	21 c0       	rjmp	.+66     	; 0x742 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>

		case TextErrStartInPast:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textErrStartInPast[0]);
     700:	8e ee       	ldi	r24, 0xEE	; 238
     702:	91 e0       	ldi	r25, 0x01	; 1
		}
		break;
     704:	1e c0       	rjmp	.+60     	; 0x742 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>

		case TextErrInvalidTime:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textErrInvalidTime[0]);
     706:	83 e0       	ldi	r24, 0x03	; 3
     708:	92 e0       	ldi	r25, 0x02	; 2
		}
		break;
     70a:	1b c0       	rjmp	.+54     	; 0x742 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>

		case TextErrTimeInPast:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textErrTimeInPast[0]);
     70c:	87 e1       	ldi	r24, 0x17	; 23
     70e:	92 e0       	ldi	r25, 0x02	; 2
		}
		break;
     710:	18 c0       	rjmp	.+48     	; 0x742 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>
		char c = eeprom_read_byte((uint8_t*)ee_addr++);

		while(c)
		{
			lb_echo_char(c);
			c = eeprom_read_byte((uint8_t*)(ee_addr++));
     712:	87 01       	movw	r16, r14

	if(ee_addr)
	{
		char c = eeprom_read_byte((uint8_t*)ee_addr++);

		while(c)
     714:	cc 23       	and	r28, r28
     716:	e9 f0       	breq	.+58     	; 0x752 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0xa2>
		{
			lb_echo_char(c);
     718:	8c 2f       	mov	r24, r28
     71a:	0e 94 ba 09 	call	0x1374	; 0x1374 <_Z12lb_echo_charh>
			c = eeprom_read_byte((uint8_t*)(ee_addr++));
     71e:	78 01       	movw	r14, r16
     720:	8f ef       	ldi	r24, 0xFF	; 255
     722:	e8 1a       	sub	r14, r24
     724:	f8 0a       	sbc	r15, r24
     726:	c8 01       	movw	r24, r16
     728:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <eeprom_read_byte>
     72c:	c8 2f       	mov	r28, r24

			while(linkbusTxInProgress())
     72e:	0e 94 0c 09 	call	0x1218	; 0x1218 <_Z19linkbusTxInProgressv>
     732:	81 11       	cpse	r24, r1
     734:	fc cf       	rjmp	.-8      	; 0x72e <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x7e>
     736:	ed cf       	rjmp	.-38     	; 0x712 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x62>

	switch(v)
	{
		case TextVersion:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textVersion[0]);
     738:	80 e0       	ldi	r24, 0x00	; 0
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	02 c0       	rjmp	.+4      	; 0x742 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x92>
		}
		break;

		case TextSetTime:
		{
			ee_addr = (char*)&(EepromManager::ee_vars.textSetTime[0]);
     73e:	87 e2       	ldi	r24, 0x27	; 39
     740:	91 e0       	ldi	r25, 0x01	; 1
		break;
	}

	if(ee_addr)
	{
		char c = eeprom_read_byte((uint8_t*)ee_addr++);
     742:	8c 01       	movw	r16, r24
     744:	0f 5f       	subi	r16, 0xFF	; 255
     746:	1f 4f       	sbci	r17, 0xFF	; 255
     748:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <eeprom_read_byte>
     74c:	c8 2f       	mov	r28, r24

		while(c)
     74e:	81 11       	cpse	r24, r1
     750:	e3 cf       	rjmp	.-58     	; 0x718 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t+0x68>
			{
				;
			}
		}
	}
}
     752:	cf 91       	pop	r28
     754:	1f 91       	pop	r17
     756:	0f 91       	pop	r16
     758:	ff 90       	pop	r15
     75a:	ef 90       	pop	r14
     75c:	08 95       	ret

0000075e <_ZN13EepromManager11readNonVolsEv>:

BOOL EepromManager::readNonVols(void)
{
     75e:	ef 92       	push	r14
     760:	ff 92       	push	r15
     762:	0f 93       	push	r16
     764:	1f 93       	push	r17
     766:	cf 93       	push	r28
     768:	df 93       	push	r29
	BOOL failure = TRUE;
	uint16_t i;
	uint16_t initialization_flag = eeprom_read_word(&(EepromManager::ee_vars.eeprom_initialization_flag));
     76a:	84 ef       	ldi	r24, 0xF4	; 244
     76c:	92 e0       	ldi	r25, 0x02	; 2
     76e:	0e 94 07 31 	call	0x620e	; 0x620e <eeprom_read_word>

	if(initialization_flag == EEPROM_INITIALIZED_FLAG)  /* EEPROM is up to date */
     772:	8b 3b       	cpi	r24, 0xBB	; 187
     774:	91 05       	cpc	r25, r1
     776:	09 f0       	breq	.+2      	; 0x77a <_ZN13EepromManager11readNonVolsEv+0x1c>
     778:	c2 c0       	rjmp	.+388    	; 0x8fe <__DATA_REGION_LENGTH__+0xfe>
	{
		g_id_codespeed = CLAMP(MIN_CODE_SPEED_WPM, eeprom_read_byte(&(EepromManager::ee_vars.id_codespeed)), MAX_CODE_SPEED_WPM);
     77a:	81 ee       	ldi	r24, 0xE1	; 225
     77c:	92 e0       	ldi	r25, 0x02	; 2
     77e:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <eeprom_read_byte>
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	85 30       	cpi	r24, 0x05	; 5
     786:	91 05       	cpc	r25, r1
     788:	14 f4       	brge	.+4      	; 0x78e <_ZN13EepromManager11readNonVolsEv+0x30>
     78a:	85 e0       	ldi	r24, 0x05	; 5
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	85 31       	cpi	r24, 0x15	; 21
     790:	91 05       	cpc	r25, r1
     792:	14 f0       	brlt	.+4      	; 0x798 <_ZN13EepromManager11readNonVolsEv+0x3a>
     794:	84 e1       	ldi	r24, 0x14	; 20
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <g_id_codespeed>
		g_fox = CLAMP(BEACON, (Fox_t)eeprom_read_byte(&(EepromManager::ee_vars.fox_setting)), NO_CODE_START_TONES_5M);
     79c:	82 ee       	ldi	r24, 0xE2	; 226
     79e:	92 e0       	ldi	r25, 0x02	; 2
     7a0:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <eeprom_read_byte>
     7a4:	86 31       	cpi	r24, 0x16	; 22
     7a6:	08 f0       	brcs	.+2      	; 0x7aa <_ZN13EepromManager11readNonVolsEv+0x4c>
     7a8:	85 e1       	ldi	r24, 0x15	; 21
     7aa:	80 93 b0 05 	sts	0x05B0, r24	; 0x8005b0 <g_fox>
		g_AM_audio_frequency = eeprom_read_byte(&(EepromManager::ee_vars.am_audio_frequency));
     7ae:	83 ee       	ldi	r24, 0xE3	; 227
     7b0:	92 e0       	ldi	r25, 0x02	; 2
     7b2:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <eeprom_read_byte>
     7b6:	80 93 9c 05 	sts	0x059C, r24	; 0x80059c <g_AM_audio_frequency>
		g_atmega_temp_calibration = (int16_t)eeprom_read_word((uint16_t*)&(EepromManager::ee_vars.atmega_temp_calibration));
     7ba:	85 ee       	ldi	r24, 0xE5	; 229
     7bc:	92 e0       	ldi	r25, 0x02	; 2
     7be:	0e 94 07 31 	call	0x620e	; 0x620e <eeprom_read_word>
     7c2:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <g_atmega_temp_calibration+0x1>
     7c6:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <g_atmega_temp_calibration>
		g_rv3028_offset = (int16_t)eeprom_read_word((uint16_t*)&(EepromManager::ee_vars.rv3028_offset));
     7ca:	87 ee       	ldi	r24, 0xE7	; 231
     7cc:	92 e0       	ldi	r25, 0x02	; 2
     7ce:	0e 94 07 31 	call	0x620e	; 0x620e <eeprom_read_word>
     7d2:	90 93 2d 05 	sts	0x052D, r25	; 0x80052d <g_rv3028_offset+0x1>
     7d6:	80 93 2c 05 	sts	0x052C, r24	; 0x80052c <g_rv3028_offset>
		g_enable_LEDs = eeprom_read_byte(&(EepromManager::ee_vars.enable_LEDs));
     7da:	84 ee       	ldi	r24, 0xE4	; 228
     7dc:	92 e0       	ldi	r25, 0x02	; 2
     7de:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <eeprom_read_byte>
     7e2:	80 93 30 05 	sts	0x0530, r24	; 0x800530 <g_enable_LEDs>
		g_enable_start_timer = eeprom_read_byte(&(EepromManager::ee_vars.enable_start_timer));
     7e6:	89 ee       	ldi	r24, 0xE9	; 233
     7e8:	92 e0       	ldi	r25, 0x02	; 2
     7ea:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <eeprom_read_byte>
     7ee:	80 93 2f 05 	sts	0x052F, r24	; 0x80052f <g_enable_start_timer>
		g_enable_transmitter = eeprom_read_byte(&(EepromManager::ee_vars.enable_transmitter));
     7f2:	8a ee       	ldi	r24, 0xEA	; 234
     7f4:	92 e0       	ldi	r25, 0x02	; 2
     7f6:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <eeprom_read_byte>
     7fa:	80 93 2e 05 	sts	0x052E, r24	; 0x80052e <g_enable_transmitter>
		g_event_start_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_start_epoch));
     7fe:	8b ee       	ldi	r24, 0xEB	; 235
     800:	92 e0       	ldi	r25, 0x02	; 2
     802:	0e 94 01 31 	call	0x6202	; 0x6202 <eeprom_read_dword>
     806:	60 93 a3 05 	sts	0x05A3, r22	; 0x8005a3 <g_event_start_epoch>
     80a:	70 93 a4 05 	sts	0x05A4, r23	; 0x8005a4 <g_event_start_epoch+0x1>
     80e:	80 93 a5 05 	sts	0x05A5, r24	; 0x8005a5 <g_event_start_epoch+0x2>
     812:	90 93 a6 05 	sts	0x05A6, r25	; 0x8005a6 <g_event_start_epoch+0x3>
		g_event_finish_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_finish_epoch));
     816:	8f ee       	ldi	r24, 0xEF	; 239
     818:	92 e0       	ldi	r25, 0x02	; 2
     81a:	0e 94 01 31 	call	0x6202	; 0x6202 <eeprom_read_dword>
     81e:	60 93 9f 05 	sts	0x059F, r22	; 0x80059f <g_event_finish_epoch>
     822:	70 93 a0 05 	sts	0x05A0, r23	; 0x8005a0 <g_event_finish_epoch+0x1>
     826:	80 93 a1 05 	sts	0x05A1, r24	; 0x8005a1 <g_event_finish_epoch+0x2>
     82a:	90 93 a2 05 	sts	0x05A2, r25	; 0x8005a2 <g_event_finish_epoch+0x3>
		g_utc_offset = (int8_t)eeprom_read_byte(&(EepromManager::ee_vars.utc_offset));
     82e:	83 ef       	ldi	r24, 0xF3	; 243
     830:	92 e0       	ldi	r25, 0x02	; 2
     832:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <eeprom_read_byte>
     836:	80 93 9e 05 	sts	0x059E, r24	; 0x80059e <g_utc_offset>
     83a:	0b e2       	ldi	r16, 0x2B	; 43
     83c:	12 e0       	ldi	r17, 0x02	; 2
     83e:	c8 e4       	ldi	r28, 0x48	; 72
     840:	d5 e0       	ldi	r29, 0x05	; 5
     842:	0f 2e       	mov	r0, r31
     844:	fc e5       	ldi	r31, 0x5C	; 92
     846:	ef 2e       	mov	r14, r31
     848:	f5 e0       	ldi	r31, 0x05	; 5
     84a:	ff 2e       	mov	r15, r31
     84c:	f0 2d       	mov	r31, r0

		for(i = 0; i < MAX_PATTERN_TEXT_LENGTH; i++)
		{
			g_messages_text[STATION_ID][i] = (char)eeprom_read_byte((uint8_t*)(&(EepromManager::ee_vars.stationID_text[i])));
     84e:	c8 01       	movw	r24, r16
     850:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <eeprom_read_byte>
     854:	89 93       	st	Y+, r24
			if(!g_messages_text[STATION_ID][i])
     856:	81 11       	cpse	r24, r1
     858:	0b c0       	rjmp	.+22     	; 0x870 <__DATA_REGION_LENGTH__+0x70>
     85a:	08 ed       	ldi	r16, 0xD8	; 216
     85c:	12 e0       	ldi	r17, 0x02	; 2
     85e:	c0 e6       	ldi	r28, 0x60	; 96
     860:	d5 e0       	ldi	r29, 0x05	; 5
     862:	0f 2e       	mov	r0, r31
     864:	f8 e6       	ldi	r31, 0x68	; 104
     866:	ef 2e       	mov	r14, r31
     868:	f5 e0       	ldi	r31, 0x05	; 5
     86a:	ff 2e       	mov	r15, r31
     86c:	f0 2d       	mov	r31, r0
     86e:	06 c0       	rjmp	.+12     	; 0x87c <__DATA_REGION_LENGTH__+0x7c>
     870:	0f 5f       	subi	r16, 0xFF	; 255
     872:	1f 4f       	sbci	r17, 0xFF	; 255
		g_enable_transmitter = eeprom_read_byte(&(EepromManager::ee_vars.enable_transmitter));
		g_event_start_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_start_epoch));
		g_event_finish_epoch = eeprom_read_dword(&(EepromManager::ee_vars.event_finish_epoch));
		g_utc_offset = (int8_t)eeprom_read_byte(&(EepromManager::ee_vars.utc_offset));

		for(i = 0; i < MAX_PATTERN_TEXT_LENGTH; i++)
     874:	ce 15       	cp	r28, r14
     876:	df 05       	cpc	r29, r15
     878:	51 f7       	brne	.-44     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
     87a:	ef cf       	rjmp	.-34     	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
			}
		}

		for(i = 0; i < MAX_UNLOCK_CODE_LENGTH; i++)
		{
			g_unlockCode[i] = (char)eeprom_read_byte((uint8_t*)(&(EepromManager::ee_vars.unlockCode[i])));
     87c:	c8 01       	movw	r24, r16
     87e:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <eeprom_read_byte>
     882:	89 93       	st	Y+, r24
			if(!g_unlockCode[i])
     884:	88 23       	and	r24, r24
     886:	29 f0       	breq	.+10     	; 0x892 <__DATA_REGION_LENGTH__+0x92>
     888:	0f 5f       	subi	r16, 0xFF	; 255
     88a:	1f 4f       	sbci	r17, 0xFF	; 255
			{
				break;
			}
		}

		for(i = 0; i < MAX_UNLOCK_CODE_LENGTH; i++)
     88c:	ce 15       	cp	r28, r14
     88e:	df 05       	cpc	r29, r15
     890:	a9 f7       	brne	.-22     	; 0x87c <__DATA_REGION_LENGTH__+0x7c>
     892:	08 eb       	ldi	r16, 0xB8	; 184
     894:	12 e0       	ldi	r17, 0x02	; 2
     896:	cb e7       	ldi	r28, 0x7B	; 123
     898:	d5 e0       	ldi	r29, 0x05	; 5
     89a:	0f 2e       	mov	r0, r31
     89c:	fb e9       	ldi	r31, 0x9B	; 155
     89e:	ef 2e       	mov	r14, r31
     8a0:	f5 e0       	ldi	r31, 0x05	; 5
     8a2:	ff 2e       	mov	r15, r31
     8a4:	f0 2d       	mov	r31, r0
			}
		}

		for(i = 0; i < SIZE_OF_DATA_MODULATION; i++)    /* Use 1-degree steps and take advantage of parabola symmetry for -35C to +85C coverage */
		{
			g_dataModulation[i] = (uint8_t)eeprom_read_byte((uint8_t*)&(EepromManager::ee_vars.dataModulation[i]));
     8a6:	c8 01       	movw	r24, r16
     8a8:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <eeprom_read_byte>
     8ac:	89 93       	st	Y+, r24
     8ae:	0f 5f       	subi	r16, 0xFF	; 255
     8b0:	1f 4f       	sbci	r17, 0xFF	; 255
			{
				break;
			}
		}

		for(i = 0; i < SIZE_OF_DATA_MODULATION; i++)    /* Use 1-degree steps and take advantage of parabola symmetry for -35C to +85C coverage */
     8b2:	ce 15       	cp	r28, r14
     8b4:	df 05       	cpc	r29, r15
     8b6:	b9 f7       	brne	.-18     	; 0x8a6 <__DATA_REGION_LENGTH__+0xa6>
		{
			g_dataModulation[i] = (uint8_t)eeprom_read_byte((uint8_t*)&(EepromManager::ee_vars.dataModulation[i]));
		}

		/* Perform sanity checks */
		if(g_event_start_epoch && (g_event_finish_epoch <= g_event_start_epoch))
     8b8:	80 91 a3 05 	lds	r24, 0x05A3	; 0x8005a3 <g_event_start_epoch>
     8bc:	90 91 a4 05 	lds	r25, 0x05A4	; 0x8005a4 <g_event_start_epoch+0x1>
     8c0:	a0 91 a5 05 	lds	r26, 0x05A5	; 0x8005a5 <g_event_start_epoch+0x2>
     8c4:	b0 91 a6 05 	lds	r27, 0x05A6	; 0x8005a6 <g_event_start_epoch+0x3>
     8c8:	89 2b       	or	r24, r25
     8ca:	8a 2b       	or	r24, r26
     8cc:	8b 2b       	or	r24, r27
     8ce:	c9 f0       	breq	.+50     	; 0x902 <__stack+0x3>
     8d0:	40 91 9f 05 	lds	r20, 0x059F	; 0x80059f <g_event_finish_epoch>
     8d4:	50 91 a0 05 	lds	r21, 0x05A0	; 0x8005a0 <g_event_finish_epoch+0x1>
     8d8:	60 91 a1 05 	lds	r22, 0x05A1	; 0x8005a1 <g_event_finish_epoch+0x2>
     8dc:	70 91 a2 05 	lds	r23, 0x05A2	; 0x8005a2 <g_event_finish_epoch+0x3>
     8e0:	80 91 a3 05 	lds	r24, 0x05A3	; 0x8005a3 <g_event_start_epoch>
     8e4:	90 91 a4 05 	lds	r25, 0x05A4	; 0x8005a4 <g_event_start_epoch+0x1>
     8e8:	a0 91 a5 05 	lds	r26, 0x05A5	; 0x8005a5 <g_event_start_epoch+0x2>
     8ec:	b0 91 a6 05 	lds	r27, 0x05A6	; 0x8005a6 <g_event_start_epoch+0x3>
     8f0:	84 17       	cp	r24, r20
     8f2:	95 07       	cpc	r25, r21
     8f4:	a6 07       	cpc	r26, r22
     8f6:	b7 07       	cpc	r27, r23
     8f8:	30 f4       	brcc	.+12     	; 0x906 <__stack+0x7>
		{
			g_event_finish_epoch = g_event_start_epoch + SECONDS_24H;
		}

		failure = FALSE;
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	19 c0       	rjmp	.+50     	; 0x930 <__stack+0x31>
	}
}

BOOL EepromManager::readNonVols(void)
{
	BOOL failure = TRUE;
     8fe:	81 e0       	ldi	r24, 0x01	; 1
     900:	17 c0       	rjmp	.+46     	; 0x930 <__stack+0x31>
		if(g_event_start_epoch && (g_event_finish_epoch <= g_event_start_epoch))
		{
			g_event_finish_epoch = g_event_start_epoch + SECONDS_24H;
		}

		failure = FALSE;
     902:	80 e0       	ldi	r24, 0x00	; 0
     904:	15 c0       	rjmp	.+42     	; 0x930 <__stack+0x31>
		}

		/* Perform sanity checks */
		if(g_event_start_epoch && (g_event_finish_epoch <= g_event_start_epoch))
		{
			g_event_finish_epoch = g_event_start_epoch + SECONDS_24H;
     906:	80 91 a3 05 	lds	r24, 0x05A3	; 0x8005a3 <g_event_start_epoch>
     90a:	90 91 a4 05 	lds	r25, 0x05A4	; 0x8005a4 <g_event_start_epoch+0x1>
     90e:	a0 91 a5 05 	lds	r26, 0x05A5	; 0x8005a5 <g_event_start_epoch+0x2>
     912:	b0 91 a6 05 	lds	r27, 0x05A6	; 0x8005a6 <g_event_start_epoch+0x3>
     916:	80 58       	subi	r24, 0x80	; 128
     918:	9e 4a       	sbci	r25, 0xAE	; 174
     91a:	ae 4f       	sbci	r26, 0xFE	; 254
     91c:	bf 4f       	sbci	r27, 0xFF	; 255
     91e:	80 93 9f 05 	sts	0x059F, r24	; 0x80059f <g_event_finish_epoch>
     922:	90 93 a0 05 	sts	0x05A0, r25	; 0x8005a0 <g_event_finish_epoch+0x1>
     926:	a0 93 a1 05 	sts	0x05A1, r26	; 0x8005a1 <g_event_finish_epoch+0x2>
     92a:	b0 93 a2 05 	sts	0x05A2, r27	; 0x8005a2 <g_event_finish_epoch+0x3>
		}

		failure = FALSE;
     92e:	80 e0       	ldi	r24, 0x00	; 0
	}

	return( failure);
}
     930:	df 91       	pop	r29
     932:	cf 91       	pop	r28
     934:	1f 91       	pop	r17
     936:	0f 91       	pop	r16
     938:	ff 90       	pop	r15
     93a:	ef 90       	pop	r14
     93c:	08 95       	ret

0000093e <_ZN13EepromManager9send_HelpEv>:

/***********************************************************************
 * send_Help(void)
 ************************************************************************/
void EepromManager::send_Help(void)
{
     93e:	cf 93       	push	r28
     940:	df 93       	push	r29
     942:	ec 01       	movw	r28, r24

	lb_send_NewLine();
     944:	0e 94 b1 09 	call	0x1362	; 0x1362 <_Z15lb_send_NewLinev>
	sendEEPROMString(TextVersion);
     948:	60 e0       	ldi	r22, 0x00	; 0
     94a:	ce 01       	movw	r24, r28
     94c:	0e 94 58 03 	call	0x6b0	; 0x6b0 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	sendEEPROMString(TextHelp);
     950:	61 e0       	ldi	r22, 0x01	; 1
     952:	ce 01       	movw	r24, r28
     954:	0e 94 58 03 	call	0x6b0	; 0x6b0 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	lb_send_NewLine();
     958:	0e 94 b1 09 	call	0x1362	; 0x1362 <_Z15lb_send_NewLinev>
	lb_send_NewLine();
     95c:	0e 94 b1 09 	call	0x1362	; 0x1362 <_Z15lb_send_NewLinev>
}
     960:	df 91       	pop	r29
     962:	cf 91       	pop	r28
     964:	08 95       	ret

00000966 <_ZN13EepromManager20readTemperatureTableEi>:

uint16_t EepromManager::readTemperatureTable(int i)
{
	return( (uint16_t)eeprom_read_word(&(EepromManager::ee_vars.temperature_table[i])));
     966:	cb 01       	movw	r24, r22
     968:	88 0f       	add	r24, r24
     96a:	99 1f       	adc	r25, r25
     96c:	80 5c       	subi	r24, 0xC0	; 192
     96e:	9d 4f       	sbci	r25, 0xFD	; 253
     970:	0e 94 07 31 	call	0x620e	; 0x620e <eeprom_read_word>
}
     974:	08 95       	ret

00000976 <_Z8setAttenj>:
	static uint8_t upper2;

void setAtten(tenthDB_t att)
{
	uint8_t pattern;
	att = MIN(att+2, MAX_ATTEN_TENTHS_DB); /* round up */
     976:	9c 01       	movw	r18, r24
     978:	2e 5f       	subi	r18, 0xFE	; 254
     97a:	3f 4f       	sbci	r19, 0xFF	; 255
     97c:	2b 33       	cpi	r18, 0x3B	; 59
     97e:	81 e0       	ldi	r24, 0x01	; 1
     980:	38 07       	cpc	r19, r24
     982:	10 f0       	brcs	.+4      	; 0x988 <_Z8setAttenj+0x12>
     984:	2b e3       	ldi	r18, 0x3B	; 59
     986:	31 e0       	ldi	r19, 0x01	; 1
	att -= (att % 5); /* set to nearest multiple of 5 */
     988:	ad ec       	ldi	r26, 0xCD	; 205
     98a:	bc ec       	ldi	r27, 0xCC	; 204
     98c:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <__umulhisi3>
     990:	96 95       	lsr	r25
     992:	87 95       	ror	r24
     994:	96 95       	lsr	r25
     996:	87 95       	ror	r24
     998:	9c 01       	movw	r18, r24
     99a:	22 0f       	add	r18, r18
     99c:	33 1f       	adc	r19, r19
     99e:	22 0f       	add	r18, r18
     9a0:	33 1f       	adc	r19, r19
     9a2:	28 0f       	add	r18, r24
     9a4:	39 1f       	adc	r19, r25
	att /= 5;
     9a6:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <__umulhisi3>
     9aa:	96 95       	lsr	r25
     9ac:	87 95       	ror	r24
     9ae:	96 95       	lsr	r25
     9b0:	87 95       	ror	r24

	lower4 = dB_low(att);
	upper2 = dB_high(att);
     9b2:	9c 01       	movw	r18, r24
     9b4:	20 73       	andi	r18, 0x30	; 48
     9b6:	33 27       	eor	r19, r19
     9b8:	32 95       	swap	r19
     9ba:	22 95       	swap	r18
     9bc:	2f 70       	andi	r18, 0x0F	; 15
     9be:	23 27       	eor	r18, r19
     9c0:	3f 70       	andi	r19, 0x0F	; 15
     9c2:	23 27       	eor	r18, r19
     9c4:	20 93 0a 03 	sts	0x030A, r18	; 0x80030a <__data_end>

	pattern = PORTC & 0xF0;
     9c8:	98 b1       	in	r25, 0x08	; 8
	PORTC = pattern | lower4;
     9ca:	8f 70       	andi	r24, 0x0F	; 15
     9cc:	90 7f       	andi	r25, 0xF0	; 240
     9ce:	89 2b       	or	r24, r25
     9d0:	88 b9       	out	0x08, r24	; 8

	pattern = PORTD & 0xFC;
     9d2:	8b b1       	in	r24, 0x0b	; 11
	PORTD = pattern | upper2;
     9d4:	8c 7f       	andi	r24, 0xFC	; 252
     9d6:	90 91 0a 03 	lds	r25, 0x030A	; 0x80030a <__data_end>
     9da:	89 2b       	or	r24, r25
     9dc:	8b b9       	out	0x0b, r24	; 11
     9de:	08 95       	ret

000009e0 <_Z18setupPortsForF1975v>:
}

void setupPortsForF1975(void)
{
	linkbus_disable();
     9e0:	0e 94 51 09 	call	0x12a2	; 0x12a2 <_Z15linkbus_disablev>
	pinMode(PIN_D0, OUTPUT);
     9e4:	61 e0       	ldi	r22, 0x01	; 1
     9e6:	8e e0       	ldi	r24, 0x0E	; 14
     9e8:	0e 94 5f 01 	call	0x2be	; 0x2be <_Z7pinModehh>
	pinMode(PIN_D1, OUTPUT);
     9ec:	61 e0       	ldi	r22, 0x01	; 1
     9ee:	8f e0       	ldi	r24, 0x0F	; 15
     9f0:	0e 94 5f 01 	call	0x2be	; 0x2be <_Z7pinModehh>
	pinMode(PIN_D2, OUTPUT);
     9f4:	61 e0       	ldi	r22, 0x01	; 1
     9f6:	80 e1       	ldi	r24, 0x10	; 16
     9f8:	0e 94 5f 01 	call	0x2be	; 0x2be <_Z7pinModehh>
	pinMode(PIN_D3, OUTPUT);
     9fc:	61 e0       	ldi	r22, 0x01	; 1
     9fe:	81 e1       	ldi	r24, 0x11	; 17
     a00:	0e 94 5f 01 	call	0x2be	; 0x2be <_Z7pinModehh>
	pinMode(PIN_D4, OUTPUT);  /* Also RXD */
     a04:	61 e0       	ldi	r22, 0x01	; 1
     a06:	80 e0       	ldi	r24, 0x00	; 0
     a08:	0e 94 5f 01 	call	0x2be	; 0x2be <_Z7pinModehh>
	pinMode(PIN_D5, OUTPUT);  /* Also TXD */
     a0c:	61 e0       	ldi	r22, 0x01	; 1
     a0e:	81 e0       	ldi	r24, 0x01	; 1
     a10:	0e 94 5f 01 	call	0x2be	; 0x2be <_Z7pinModehh>
	pinMode(PIN_PWDN, OUTPUT);
     a14:	61 e0       	ldi	r22, 0x01	; 1
     a16:	86 e0       	ldi	r24, 0x06	; 6
     a18:	0e 94 5f 01 	call	0x2be	; 0x2be <_Z7pinModehh>
	digitalWrite(PIN_PWDN, ON);
     a1c:	61 e0       	ldi	r22, 0x01	; 1
     a1e:	86 e0       	ldi	r24, 0x06	; 6
     a20:	0e 94 6f 02 	call	0x4de	; 0x4de <_Z12digitalWritehh>
     a24:	08 95       	ret

00000a26 <_ZN8GoertzelC1Eff>:
int _index = 0;
bool _samplesReady = false;

int* testData;

Goertzel::Goertzel(float N, float sampling_frequency)
     a26:	ef 92       	push	r14
     a28:	ff 92       	push	r15
     a2a:	0f 93       	push	r16
     a2c:	1f 93       	push	r17
     a2e:	cf 93       	push	r28
     a30:	df 93       	push	r29
     a32:	e4 2e       	mov	r14, r20
     a34:	f5 2e       	mov	r15, r21
     a36:	d6 2f       	mov	r29, r22
     a38:	c7 2f       	mov	r28, r23
{
	_SAMPLING_FREQUENCY = sampling_frequency;   /*on 16mhz, ~8928.57142857143, on 8mhz ~44444 */
     a3a:	00 93 22 03 	sts	0x0322, r16	; 0x800322 <_SAMPLING_FREQUENCY>
     a3e:	10 93 23 03 	sts	0x0323, r17	; 0x800323 <_SAMPLING_FREQUENCY+0x1>
     a42:	20 93 24 03 	sts	0x0324, r18	; 0x800324 <_SAMPLING_FREQUENCY+0x2>
     a46:	30 93 25 03 	sts	0x0325, r19	; 0x800325 <_SAMPLING_FREQUENCY+0x3>
	_N = CLAMP(100, N, MAXN);
     a4a:	20 e0       	ldi	r18, 0x00	; 0
     a4c:	30 e0       	ldi	r19, 0x00	; 0
     a4e:	41 e5       	ldi	r20, 0x51	; 81
     a50:	53 e4       	ldi	r21, 0x43	; 67
     a52:	6e 2d       	mov	r22, r14
     a54:	7f 2d       	mov	r23, r15
     a56:	8d 2f       	mov	r24, r29
     a58:	9c 2f       	mov	r25, r28
     a5a:	0e 94 f8 2a 	call	0x55f0	; 0x55f0 <__gesf2>
     a5e:	18 16       	cp	r1, r24
     a60:	6c f0       	brlt	.+26     	; 0xa7c <_ZN8GoertzelC1Eff+0x56>
     a62:	20 e0       	ldi	r18, 0x00	; 0
     a64:	30 e0       	ldi	r19, 0x00	; 0
     a66:	48 ec       	ldi	r20, 0xC8	; 200
     a68:	52 e4       	ldi	r21, 0x42	; 66
     a6a:	6e 2d       	mov	r22, r14
     a6c:	7f 2d       	mov	r23, r15
     a6e:	8d 2f       	mov	r24, r29
     a70:	9c 2f       	mov	r25, r28
     a72:	0e 94 55 29 	call	0x52aa	; 0x52aa <__cmpsf2>
     a76:	88 23       	and	r24, r24
     a78:	34 f0       	brlt	.+12     	; 0xa86 <_ZN8GoertzelC1Eff+0x60>
     a7a:	09 c0       	rjmp	.+18     	; 0xa8e <_ZN8GoertzelC1Eff+0x68>
     a7c:	e1 2c       	mov	r14, r1
     a7e:	f1 2c       	mov	r15, r1
     a80:	d1 e5       	ldi	r29, 0x51	; 81
     a82:	c3 e4       	ldi	r28, 0x43	; 67
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <_ZN8GoertzelC1Eff+0x68>
     a86:	e1 2c       	mov	r14, r1
     a88:	f1 2c       	mov	r15, r1
     a8a:	d8 ec       	ldi	r29, 0xC8	; 200
     a8c:	c2 e4       	ldi	r28, 0x42	; 66
     a8e:	6e 2d       	mov	r22, r14
     a90:	7f 2d       	mov	r23, r15
     a92:	8d 2f       	mov	r24, r29
     a94:	9c 2f       	mov	r25, r28
     a96:	0e 94 d1 29 	call	0x53a2	; 0x53a2 <__fixsfsi>
     a9a:	70 93 1d 03 	sts	0x031D, r23	; 0x80031d <_N+0x1>
     a9e:	60 93 1c 03 	sts	0x031C, r22	; 0x80031c <_N>
	testData = (int*)malloc(_N * sizeof(int));
     aa2:	cb 01       	movw	r24, r22
     aa4:	88 0f       	add	r24, r24
     aa6:	99 1f       	adc	r25, r25
     aa8:	0e 94 9a 2c 	call	0x5934	; 0x5934 <malloc>
     aac:	90 93 0c 03 	sts	0x030C, r25	; 0x80030c <testData+0x1>
     ab0:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <testData>
}
     ab4:	df 91       	pop	r29
     ab6:	cf 91       	pop	r28
     ab8:	1f 91       	pop	r17
     aba:	0f 91       	pop	r16
     abc:	ff 90       	pop	r15
     abe:	ef 90       	pop	r14
     ac0:	08 95       	ret

00000ac2 <_ZN8GoertzelD1Ev>:

Goertzel::~Goertzel()
{
	free(testData);
     ac2:	80 91 0b 03 	lds	r24, 0x030B	; 0x80030b <testData>
     ac6:	90 91 0c 03 	lds	r25, 0x030C	; 0x80030c <testData+0x1>
     aca:	0e 94 32 2d 	call	0x5a64	; 0x5a64 <free>
     ace:	08 95       	ret

00000ad0 <_ZN8Goertzel13ResetGoertzelEv>:
}

/* Call this routine before every "block" (size=N) of samples. */
void Goertzel::ResetGoertzel(void)
{
	Q2 = 0;
     ad0:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <Q2>
     ad4:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <Q2+0x1>
     ad8:	10 92 12 03 	sts	0x0312, r1	; 0x800312 <Q2+0x2>
     adc:	10 92 13 03 	sts	0x0313, r1	; 0x800313 <Q2+0x3>
	Q1 = 0;
     ae0:	10 92 14 03 	sts	0x0314, r1	; 0x800314 <Q1>
     ae4:	10 92 15 03 	sts	0x0315, r1	; 0x800315 <Q1+0x1>
     ae8:	10 92 16 03 	sts	0x0316, r1	; 0x800316 <Q1+0x2>
     aec:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <Q1+0x3>
	_samplesReady = false;
     af0:	10 92 0d 03 	sts	0x030D, r1	; 0x80030d <_samplesReady>
     af4:	08 95       	ret

00000af6 <_ZN8Goertzel18SetTargetFrequencyEf>:
{
	free(testData);
}

void Goertzel::SetTargetFrequency(float target_frequency)
{
     af6:	8f 92       	push	r8
     af8:	9f 92       	push	r9
     afa:	af 92       	push	r10
     afc:	bf 92       	push	r11
     afe:	cf 92       	push	r12
     b00:	df 92       	push	r13
     b02:	ef 92       	push	r14
     b04:	ff 92       	push	r15
     b06:	cf 93       	push	r28
     b08:	df 93       	push	r29
     b0a:	ec 01       	movw	r28, r24
     b0c:	4a 01       	movw	r8, r20
     b0e:	5b 01       	movw	r10, r22
	float floatN = (float)_N;
     b10:	60 91 1c 03 	lds	r22, 0x031C	; 0x80031c <_N>
     b14:	70 91 1d 03 	lds	r23, 0x031D	; 0x80031d <_N+0x1>
     b18:	07 2e       	mov	r0, r23
     b1a:	00 0c       	add	r0, r0
     b1c:	88 0b       	sbc	r24, r24
     b1e:	99 0b       	sbc	r25, r25
     b20:	0e 94 09 2a 	call	0x5412	; 0x5412 <__floatsisf>
     b24:	6b 01       	movw	r12, r22
     b26:	7c 01       	movw	r14, r24

	_TARGET_FREQUENCY = target_frequency;   /*should be integer of SAMPLING_RATE/N */
     b28:	80 92 1e 03 	sts	0x031E, r8	; 0x80031e <_TARGET_FREQUENCY>
     b2c:	90 92 1f 03 	sts	0x031F, r9	; 0x80031f <_TARGET_FREQUENCY+0x1>
     b30:	a0 92 20 03 	sts	0x0320, r10	; 0x800320 <_TARGET_FREQUENCY+0x2>
     b34:	b0 92 21 03 	sts	0x0321, r11	; 0x800321 <_TARGET_FREQUENCY+0x3>
	int k = (int)(0.5 + ((floatN * _TARGET_FREQUENCY) / _SAMPLING_FREQUENCY));
	float w = (2.0 * PI * k) / floatN;
	g_coeff = 2.0 * cos(w);
     b38:	a5 01       	movw	r20, r10
     b3a:	94 01       	movw	r18, r8
     b3c:	0e 94 fd 2a 	call	0x55fa	; 0x55fa <__mulsf3>
     b40:	20 91 22 03 	lds	r18, 0x0322	; 0x800322 <_SAMPLING_FREQUENCY>
     b44:	30 91 23 03 	lds	r19, 0x0323	; 0x800323 <_SAMPLING_FREQUENCY+0x1>
     b48:	40 91 24 03 	lds	r20, 0x0324	; 0x800324 <_SAMPLING_FREQUENCY+0x2>
     b4c:	50 91 25 03 	lds	r21, 0x0325	; 0x800325 <_SAMPLING_FREQUENCY+0x3>
     b50:	0e 94 5f 29 	call	0x52be	; 0x52be <__divsf3>
     b54:	20 e0       	ldi	r18, 0x00	; 0
     b56:	30 e0       	ldi	r19, 0x00	; 0
     b58:	40 e0       	ldi	r20, 0x00	; 0
     b5a:	5f e3       	ldi	r21, 0x3F	; 63
     b5c:	0e 94 e9 28 	call	0x51d2	; 0x51d2 <__addsf3>
     b60:	0e 94 d1 29 	call	0x53a2	; 0x53a2 <__fixsfsi>
     b64:	07 2e       	mov	r0, r23
     b66:	00 0c       	add	r0, r0
     b68:	88 0b       	sbc	r24, r24
     b6a:	99 0b       	sbc	r25, r25
     b6c:	0e 94 09 2a 	call	0x5412	; 0x5412 <__floatsisf>
     b70:	2b ed       	ldi	r18, 0xDB	; 219
     b72:	3f e0       	ldi	r19, 0x0F	; 15
     b74:	49 ec       	ldi	r20, 0xC9	; 201
     b76:	50 e4       	ldi	r21, 0x40	; 64
     b78:	0e 94 fd 2a 	call	0x55fa	; 0x55fa <__mulsf3>
     b7c:	a7 01       	movw	r20, r14
     b7e:	96 01       	movw	r18, r12
     b80:	0e 94 5f 29 	call	0x52be	; 0x52be <__divsf3>
     b84:	0e 94 5a 29 	call	0x52b4	; 0x52b4 <cos>
     b88:	9b 01       	movw	r18, r22
     b8a:	ac 01       	movw	r20, r24
     b8c:	0e 94 e9 28 	call	0x51d2	; 0x51d2 <__addsf3>
     b90:	60 93 18 03 	sts	0x0318, r22	; 0x800318 <g_coeff>
     b94:	70 93 19 03 	sts	0x0319, r23	; 0x800319 <g_coeff+0x1>
     b98:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <g_coeff+0x2>
     b9c:	90 93 1b 03 	sts	0x031B, r25	; 0x80031b <g_coeff+0x3>
	ResetGoertzel();
     ba0:	ce 01       	movw	r24, r28
     ba2:	0e 94 68 05 	call	0xad0	; 0xad0 <_ZN8Goertzel13ResetGoertzelEv>
}
     ba6:	df 91       	pop	r29
     ba8:	cf 91       	pop	r28
     baa:	ff 90       	pop	r15
     bac:	ef 90       	pop	r14
     bae:	df 90       	pop	r13
     bb0:	cf 90       	pop	r12
     bb2:	bf 90       	pop	r11
     bb4:	af 90       	pop	r10
     bb6:	9f 90       	pop	r9
     bb8:	8f 90       	pop	r8
     bba:	08 95       	ret

00000bbc <_ZN8Goertzel13ProcessSampleEi>:
	_samplesReady = false;
}

/* Call this routine for every sample. */
void Goertzel::ProcessSample(int sample)
{
     bbc:	8f 92       	push	r8
     bbe:	9f 92       	push	r9
     bc0:	af 92       	push	r10
     bc2:	bf 92       	push	r11
     bc4:	cf 92       	push	r12
     bc6:	df 92       	push	r13
     bc8:	ef 92       	push	r14
     bca:	ff 92       	push	r15
     bcc:	cf 93       	push	r28
     bce:	df 93       	push	r29
     bd0:	eb 01       	movw	r28, r22
	float Q0 = g_coeff * Q1 - Q2 + (float)(sample - ADCCENTER);
     bd2:	c0 90 14 03 	lds	r12, 0x0314	; 0x800314 <Q1>
     bd6:	d0 90 15 03 	lds	r13, 0x0315	; 0x800315 <Q1+0x1>
     bda:	e0 90 16 03 	lds	r14, 0x0316	; 0x800316 <Q1+0x2>
     bde:	f0 90 17 03 	lds	r15, 0x0317	; 0x800317 <Q1+0x3>
     be2:	20 91 18 03 	lds	r18, 0x0318	; 0x800318 <g_coeff>
     be6:	30 91 19 03 	lds	r19, 0x0319	; 0x800319 <g_coeff+0x1>
     bea:	40 91 1a 03 	lds	r20, 0x031A	; 0x80031a <g_coeff+0x2>
     bee:	50 91 1b 03 	lds	r21, 0x031B	; 0x80031b <g_coeff+0x3>
     bf2:	c7 01       	movw	r24, r14
     bf4:	b6 01       	movw	r22, r12
     bf6:	0e 94 fd 2a 	call	0x55fa	; 0x55fa <__mulsf3>
     bfa:	20 91 10 03 	lds	r18, 0x0310	; 0x800310 <Q2>
     bfe:	30 91 11 03 	lds	r19, 0x0311	; 0x800311 <Q2+0x1>
     c02:	40 91 12 03 	lds	r20, 0x0312	; 0x800312 <Q2+0x2>
     c06:	50 91 13 03 	lds	r21, 0x0313	; 0x800313 <Q2+0x3>
     c0a:	0e 94 e8 28 	call	0x51d0	; 0x51d0 <__subsf3>
     c0e:	4b 01       	movw	r8, r22
     c10:	5c 01       	movw	r10, r24
     c12:	be 01       	movw	r22, r28
     c14:	72 50       	subi	r23, 0x02	; 2
     c16:	07 2e       	mov	r0, r23
     c18:	00 0c       	add	r0, r0
     c1a:	88 0b       	sbc	r24, r24
     c1c:	99 0b       	sbc	r25, r25
     c1e:	0e 94 09 2a 	call	0x5412	; 0x5412 <__floatsisf>
     c22:	9b 01       	movw	r18, r22
     c24:	ac 01       	movw	r20, r24
     c26:	c5 01       	movw	r24, r10
     c28:	b4 01       	movw	r22, r8
     c2a:	0e 94 e9 28 	call	0x51d2	; 0x51d2 <__addsf3>

	Q2 = Q1;
     c2e:	c0 92 10 03 	sts	0x0310, r12	; 0x800310 <Q2>
     c32:	d0 92 11 03 	sts	0x0311, r13	; 0x800311 <Q2+0x1>
     c36:	e0 92 12 03 	sts	0x0312, r14	; 0x800312 <Q2+0x2>
     c3a:	f0 92 13 03 	sts	0x0313, r15	; 0x800313 <Q2+0x3>
	Q1 = Q0;
     c3e:	60 93 14 03 	sts	0x0314, r22	; 0x800314 <Q1>
     c42:	70 93 15 03 	sts	0x0315, r23	; 0x800315 <Q1+0x1>
     c46:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <Q1+0x2>
     c4a:	90 93 17 03 	sts	0x0317, r25	; 0x800317 <Q1+0x3>
}
     c4e:	df 91       	pop	r29
     c50:	cf 91       	pop	r28
     c52:	ff 90       	pop	r15
     c54:	ef 90       	pop	r14
     c56:	df 90       	pop	r13
     c58:	cf 90       	pop	r12
     c5a:	bf 90       	pop	r11
     c5c:	af 90       	pop	r10
     c5e:	9f 90       	pop	r9
     c60:	8f 90       	pop	r8
     c62:	08 95       	ret

00000c64 <_ZN8Goertzel9DataPointEi>:

bool Goertzel::DataPoint(int data)
{
	if(_samplesReady)
     c64:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <_samplesReady>
     c68:	81 11       	cpse	r24, r1
     c6a:	27 c0       	rjmp	.+78     	; 0xcba <_ZN8Goertzel9DataPointEi+0x56>
	{
		return(_samplesReady);
	}

	testData[_index] = data;
     c6c:	e0 91 0e 03 	lds	r30, 0x030E	; 0x80030e <_index>
     c70:	f0 91 0f 03 	lds	r31, 0x030F	; 0x80030f <_index+0x1>
     c74:	ee 0f       	add	r30, r30
     c76:	ff 1f       	adc	r31, r31
     c78:	80 91 0b 03 	lds	r24, 0x030B	; 0x80030b <testData>
     c7c:	90 91 0c 03 	lds	r25, 0x030C	; 0x80030c <testData+0x1>
     c80:	e8 0f       	add	r30, r24
     c82:	f9 1f       	adc	r31, r25
     c84:	71 83       	std	Z+1, r23	; 0x01
     c86:	60 83       	st	Z, r22
	_index++;
     c88:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <_index>
     c8c:	90 91 0f 03 	lds	r25, 0x030F	; 0x80030f <_index+0x1>
     c90:	01 96       	adiw	r24, 0x01	; 1
     c92:	90 93 0f 03 	sts	0x030F, r25	; 0x80030f <_index+0x1>
     c96:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <_index>
	if(_index >= _N)
     c9a:	20 91 1c 03 	lds	r18, 0x031C	; 0x80031c <_N>
     c9e:	30 91 1d 03 	lds	r19, 0x031D	; 0x80031d <_N+0x1>
     ca2:	82 17       	cp	r24, r18
     ca4:	93 07       	cpc	r25, r19
     ca6:	3c f0       	brlt	.+14     	; 0xcb6 <_ZN8Goertzel9DataPointEi+0x52>
	{
		_index = 0;
     ca8:	10 92 0f 03 	sts	0x030F, r1	; 0x80030f <_index+0x1>
     cac:	10 92 0e 03 	sts	0x030E, r1	; 0x80030e <_index>
		_samplesReady = true;
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <_samplesReady>
	}

	return(_samplesReady);
     cb6:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <_samplesReady>
}
     cba:	08 95       	ret

00000cbc <_ZN8Goertzel12SamplesReadyEv>:

bool Goertzel::SamplesReady(void)
{
	return(_samplesReady);
}
     cbc:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <_samplesReady>
     cc0:	08 95       	ret

00000cc2 <_ZN8Goertzel10Magnitude2Ev>:

float Goertzel::Magnitude2()
{
     cc2:	4f 92       	push	r4
     cc4:	5f 92       	push	r5
     cc6:	6f 92       	push	r6
     cc8:	7f 92       	push	r7
     cca:	8f 92       	push	r8
     ccc:	9f 92       	push	r9
     cce:	af 92       	push	r10
     cd0:	bf 92       	push	r11
     cd2:	cf 92       	push	r12
     cd4:	df 92       	push	r13
     cd6:	ef 92       	push	r14
     cd8:	ff 92       	push	r15
     cda:	0f 93       	push	r16
     cdc:	1f 93       	push	r17
     cde:	cf 93       	push	r28
     ce0:	df 93       	push	r29
     ce2:	8c 01       	movw	r16, r24
	float magnitude2;

	/* Process the samples. */
	for(int index = 0; index < _N; index++)
     ce4:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <_N>
     ce8:	90 91 1d 03 	lds	r25, 0x031D	; 0x80031d <_N+0x1>
     cec:	18 16       	cp	r1, r24
     cee:	19 06       	cpc	r1, r25
     cf0:	c4 f4       	brge	.+48     	; 0xd22 <_ZN8Goertzel10Magnitude2Ev+0x60>
     cf2:	c0 e0       	ldi	r28, 0x00	; 0
     cf4:	d0 e0       	ldi	r29, 0x00	; 0
	{
		ProcessSample(testData[index]);
     cf6:	ce 01       	movw	r24, r28
     cf8:	88 0f       	add	r24, r24
     cfa:	99 1f       	adc	r25, r25
     cfc:	e0 91 0b 03 	lds	r30, 0x030B	; 0x80030b <testData>
     d00:	f0 91 0c 03 	lds	r31, 0x030C	; 0x80030c <testData+0x1>
     d04:	e8 0f       	add	r30, r24
     d06:	f9 1f       	adc	r31, r25
     d08:	60 81       	ld	r22, Z
     d0a:	71 81       	ldd	r23, Z+1	; 0x01
     d0c:	c8 01       	movw	r24, r16
     d0e:	0e 94 de 05 	call	0xbbc	; 0xbbc <_ZN8Goertzel13ProcessSampleEi>
float Goertzel::Magnitude2()
{
	float magnitude2;

	/* Process the samples. */
	for(int index = 0; index < _N; index++)
     d12:	21 96       	adiw	r28, 0x01	; 1
     d14:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <_N>
     d18:	90 91 1d 03 	lds	r25, 0x031D	; 0x80031d <_N+0x1>
     d1c:	c8 17       	cp	r28, r24
     d1e:	d9 07       	cpc	r29, r25
     d20:	54 f3       	brlt	.-44     	; 0xcf6 <_ZN8Goertzel10Magnitude2Ev+0x34>
	{
		ProcessSample(testData[index]);
	}

	magnitude2 = Q1 * Q1 + Q2 * Q2 - g_coeff * Q1 * Q2;
     d22:	80 90 14 03 	lds	r8, 0x0314	; 0x800314 <Q1>
     d26:	90 90 15 03 	lds	r9, 0x0315	; 0x800315 <Q1+0x1>
     d2a:	a0 90 16 03 	lds	r10, 0x0316	; 0x800316 <Q1+0x2>
     d2e:	b0 90 17 03 	lds	r11, 0x0317	; 0x800317 <Q1+0x3>
     d32:	c0 90 10 03 	lds	r12, 0x0310	; 0x800310 <Q2>
     d36:	d0 90 11 03 	lds	r13, 0x0311	; 0x800311 <Q2+0x1>
     d3a:	e0 90 12 03 	lds	r14, 0x0312	; 0x800312 <Q2+0x2>
     d3e:	f0 90 13 03 	lds	r15, 0x0313	; 0x800313 <Q2+0x3>
     d42:	a5 01       	movw	r20, r10
     d44:	94 01       	movw	r18, r8
     d46:	c5 01       	movw	r24, r10
     d48:	b4 01       	movw	r22, r8
     d4a:	0e 94 fd 2a 	call	0x55fa	; 0x55fa <__mulsf3>
     d4e:	2b 01       	movw	r4, r22
     d50:	3c 01       	movw	r6, r24
     d52:	a7 01       	movw	r20, r14
     d54:	96 01       	movw	r18, r12
     d56:	c7 01       	movw	r24, r14
     d58:	b6 01       	movw	r22, r12
     d5a:	0e 94 fd 2a 	call	0x55fa	; 0x55fa <__mulsf3>
     d5e:	9b 01       	movw	r18, r22
     d60:	ac 01       	movw	r20, r24
     d62:	c3 01       	movw	r24, r6
     d64:	b2 01       	movw	r22, r4
     d66:	0e 94 e9 28 	call	0x51d2	; 0x51d2 <__addsf3>
     d6a:	2b 01       	movw	r4, r22
     d6c:	3c 01       	movw	r6, r24
     d6e:	20 91 18 03 	lds	r18, 0x0318	; 0x800318 <g_coeff>
     d72:	30 91 19 03 	lds	r19, 0x0319	; 0x800319 <g_coeff+0x1>
     d76:	40 91 1a 03 	lds	r20, 0x031A	; 0x80031a <g_coeff+0x2>
     d7a:	50 91 1b 03 	lds	r21, 0x031B	; 0x80031b <g_coeff+0x3>
     d7e:	c5 01       	movw	r24, r10
     d80:	b4 01       	movw	r22, r8
     d82:	0e 94 fd 2a 	call	0x55fa	; 0x55fa <__mulsf3>
     d86:	a7 01       	movw	r20, r14
     d88:	96 01       	movw	r18, r12
     d8a:	0e 94 fd 2a 	call	0x55fa	; 0x55fa <__mulsf3>
     d8e:	9b 01       	movw	r18, r22
     d90:	ac 01       	movw	r20, r24
     d92:	c3 01       	movw	r24, r6
     d94:	b2 01       	movw	r22, r4
     d96:	0e 94 e8 28 	call	0x51d0	; 0x51d0 <__subsf3>
     d9a:	6b 01       	movw	r12, r22
     d9c:	7c 01       	movw	r14, r24

	ResetGoertzel();
     d9e:	c8 01       	movw	r24, r16
     da0:	0e 94 68 05 	call	0xad0	; 0xad0 <_ZN8Goertzel13ResetGoertzelEv>
	return( magnitude2);
}
     da4:	c7 01       	movw	r24, r14
     da6:	b6 01       	movw	r22, r12
     da8:	df 91       	pop	r29
     daa:	cf 91       	pop	r28
     dac:	1f 91       	pop	r17
     dae:	0f 91       	pop	r16
     db0:	ff 90       	pop	r15
     db2:	ef 90       	pop	r14
     db4:	df 90       	pop	r13
     db6:	cf 90       	pop	r12
     db8:	bf 90       	pop	r11
     dba:	af 90       	pop	r10
     dbc:	9f 90       	pop	r9
     dbe:	8f 90       	pop	r8
     dc0:	7f 90       	pop	r7
     dc2:	6f 90       	pop	r6
     dc4:	5f 90       	pop	r5
     dc6:	4f 90       	pop	r4
     dc8:	08 95       	ret

00000dca <_Z8i2c_initv>:
	}
#endif /* SUPPORT_I2C_CLEARBUS_FUNCTION */

void i2c_init(void)
{
	power_twi_enable();
     dca:	e4 e6       	ldi	r30, 0x64	; 100
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	80 81       	ld	r24, Z
     dd0:	8f 77       	andi	r24, 0x7F	; 127
     dd2:	80 83       	st	Z, r24

	/* set SCL to ~100 kHz for 8 MHz CPU clock */
	TWSR = 0;   /* Prescale /1 */
     dd4:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	TWBR = 0x25;
     dd8:	85 e2       	ldi	r24, 0x25	; 37
     dda:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>

	/* enable I2C */
	TWCR = _BV(TWEN);
     dde:	84 e0       	ldi	r24, 0x04	; 4
     de0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	g_i2c_not_timed_out = TRUE;
     de4:	81 e0       	ldi	r24, 0x01	; 1
     de6:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <g_i2c_not_timed_out>
     dea:	08 95       	ret

00000dec <_Z9i2c_startv>:
#else
	void i2c_start(void)
#endif
{
#ifdef I2C_TIMEOUT_SUPPORT
		TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN);
     dec:	84 ea       	ldi	r24, 0xA4	; 164
     dee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
     df2:	ec eb       	ldi	r30, 0xBC	; 188
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	80 81       	ld	r24, Z
     df8:	88 23       	and	r24, r24
     dfa:	64 f0       	brlt	.+24     	; 0xe14 <_Z9i2c_startv+0x28>
     dfc:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_i2c_not_timed_out>
     e00:	81 11       	cpse	r24, r1
     e02:	f9 cf       	rjmp	.-14     	; 0xdf6 <_Z9i2c_startv+0xa>
     e04:	07 c0       	rjmp	.+14     	; 0xe14 <_Z9i2c_startv+0x28>
			;
		}

		if(!g_i2c_not_timed_out)    /* if timed out, reset the bus */
		{
			TWCR = (1 << TWINT) | (1 << TWSTO);
     e06:	80 e9       	ldi	r24, 0x90	; 144
     e08:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
			g_i2c_not_timed_out = TRUE;
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <g_i2c_not_timed_out>
			return( TRUE);
     e12:	08 95       	ret
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
		{
			;
		}

		if(!g_i2c_not_timed_out)    /* if timed out, reset the bus */
     e14:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_i2c_not_timed_out>
     e18:	88 23       	and	r24, r24
     e1a:	a9 f3       	breq	.-22     	; 0xe06 <_Z9i2c_startv+0x1a>
			TWCR = (1 << TWINT) | (1 << TWSTO);
			g_i2c_not_timed_out = TRUE;
			return( TRUE);
		}

		return( FALSE);
     e1c:	80 e0       	ldi	r24, 0x00	; 0
		while(!(TWCR & _BV(TWINT)))
		{
			;
		}
#endif
}
     e1e:	08 95       	ret

00000e20 <_Z8i2c_stopv>:

void i2c_stop(void)
{
	TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
     e20:	84 e9       	ldi	r24, 0x94	; 148
     e22:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     e26:	08 95       	ret

00000e28 <_Z17i2c_write_successhh>:
}

BOOL i2c_write_success(uint8_t data, uint8_t success)
{
#ifdef I2C_TIMEOUT_SUPPORT
		TWDR = data;
     e28:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR = _BV(TWINT) | _BV(TWEN);
     e2c:	84 e8       	ldi	r24, 0x84	; 132
     e2e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
     e32:	ec eb       	ldi	r30, 0xBC	; 188
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	80 81       	ld	r24, Z
     e38:	88 23       	and	r24, r24
     e3a:	64 f0       	brlt	.+24     	; 0xe54 <_Z17i2c_write_successhh+0x2c>
     e3c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_i2c_not_timed_out>
     e40:	81 11       	cpse	r24, r1
     e42:	f9 cf       	rjmp	.-14     	; 0xe36 <_Z17i2c_write_successhh+0xe>
     e44:	07 c0       	rjmp	.+14     	; 0xe54 <_Z17i2c_write_successhh+0x2c>
		uint8_t stat = TW_STATUS;

		/* ignore timeout condition to ensure i2c_stop() gets sent */
		if(stat != success)
		{
			TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
     e46:	84 e9       	ldi	r24, 0x94	; 148
     e48:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
			g_i2c_not_timed_out = TRUE;
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <g_i2c_not_timed_out>
			return(TRUE);
     e52:	08 95       	ret
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
		{
			;
		}

		uint8_t stat = TW_STATUS;
     e54:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>

		/* ignore timeout condition to ensure i2c_stop() gets sent */
		if(stat != success)
     e58:	88 7f       	andi	r24, 0xF8	; 248
     e5a:	86 13       	cpse	r24, r22
     e5c:	f4 cf       	rjmp	.-24     	; 0xe46 <_Z17i2c_write_successhh+0x1e>
			TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
			g_i2c_not_timed_out = TRUE;
			return(TRUE);
		}

		return( FALSE);
     e5e:	80 e0       	ldi	r24, 0x00	; 0
			return(TRUE);
		}

		return(FALSE);
#endif
}
     e60:	08 95       	ret

00000e62 <_Z12i2c_read_ackv>:

uint8_t i2c_read_ack(void)
{
#ifdef I2C_TIMEOUT_SUPPORT
		TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);
     e62:	84 ec       	ldi	r24, 0xC4	; 196
     e64:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
     e68:	ec eb       	ldi	r30, 0xBC	; 188
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	88 23       	and	r24, r24
     e70:	24 f0       	brlt	.+8      	; 0xe7a <_Z12i2c_read_ackv+0x18>
     e72:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_i2c_not_timed_out>
     e76:	81 11       	cpse	r24, r1
     e78:	f9 cf       	rjmp	.-14     	; 0xe6c <_Z12i2c_read_ackv+0xa>
		{
			;
		}

		return(TWDR);
     e7a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
			;
		}

		return( TWDR);
#endif
}
     e7e:	08 95       	ret

00000e80 <_Z13i2c_read_nackv>:

uint8_t i2c_read_nack(void)
{
#ifdef I2C_TIMEOUT_SUPPORT
		TWCR = _BV(TWINT) | _BV(TWEN);
     e80:	84 e8       	ldi	r24, 0x84	; 132
     e82:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
     e86:	ec eb       	ldi	r30, 0xBC	; 188
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	80 81       	ld	r24, Z
     e8c:	88 23       	and	r24, r24
     e8e:	24 f0       	brlt	.+8      	; 0xe98 <_Z13i2c_read_nackv+0x18>
     e90:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_i2c_not_timed_out>
     e94:	81 11       	cpse	r24, r1
     e96:	f9 cf       	rjmp	.-14     	; 0xe8a <_Z13i2c_read_nackv+0xa>
		{
			;
		}

		return( TWDR);
     e98:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
			;
		}

		return( TWDR);
#endif
}
     e9c:	08 95       	ret

00000e9e <_Z10i2c_statush>:

BOOL i2c_status(uint8_t status)
{
	if(TW_STATUS != status)
     e9e:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     ea2:	28 7f       	andi	r18, 0xF8	; 248
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	28 17       	cp	r18, r24
     eaa:	39 07       	cpc	r19, r25
     eac:	29 f0       	breq	.+10     	; 0xeb8 <_Z10i2c_statush+0x1a>
	{
		TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
     eae:	84 e9       	ldi	r24, 0x94	; 148
     eb0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		return(TRUE);
     eb4:	81 e0       	ldi	r24, 0x01	; 1
     eb6:	08 95       	ret
	}

	return(FALSE);
     eb8:	80 e0       	ldi	r24, 0x00	; 0
}
     eba:	08 95       	ret

00000ebc <_Z16i2c_device_writehhPhh>:
#ifdef SELECTIVELY_DISABLE_OPTIMIZATION
	BOOL __attribute__((optimize("O0"))) i2c_device_write(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2write)
#else
	BOOL i2c_device_write(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2write)
#endif
{
     ebc:	cf 93       	push	r28
     ebe:	df 93       	push	r29
     ec0:	00 d0       	rcall	.+0      	; 0xec2 <_Z16i2c_device_writehhPhh+0x6>
     ec2:	00 d0       	rcall	.+0      	; 0xec4 <_Z16i2c_device_writehhPhh+0x8>
     ec4:	00 d0       	rcall	.+0      	; 0xec6 <_Z16i2c_device_writehhPhh+0xa>
     ec6:	cd b7       	in	r28, 0x3d	; 61
     ec8:	de b7       	in	r29, 0x3e	; 62
     eca:	8a 83       	std	Y+2, r24	; 0x02
     ecc:	6b 83       	std	Y+3, r22	; 0x03
     ece:	5d 83       	std	Y+5, r21	; 0x05
     ed0:	4c 83       	std	Y+4, r20	; 0x04
     ed2:	2e 83       	std	Y+6, r18	; 0x06
		#ifndef DEBUG_WITHOUT_I2C
		uint8_t index = 0;
     ed4:	19 82       	std	Y+1, r1	; 0x01

		i2c_start();
     ed6:	0e 94 f6 06 	call	0xdec	; 0xdec <_Z9i2c_startv>
		if(i2c_status(TW_START))
     eda:	88 e0       	ldi	r24, 0x08	; 8
     edc:	0e 94 4f 07 	call	0xe9e	; 0xe9e <_Z10i2c_statush>
     ee0:	98 2f       	mov	r25, r24
     ee2:	81 e0       	ldi	r24, 0x01	; 1
     ee4:	99 23       	and	r25, r25
     ee6:	09 f4       	brne	.+2      	; 0xeea <_Z16i2c_device_writehhPhh+0x2e>
     ee8:	80 e0       	ldi	r24, 0x00	; 0
     eea:	88 23       	and	r24, r24
     eec:	11 f0       	breq	.+4      	; 0xef2 <_Z16i2c_device_writehhPhh+0x36>
		{
			return(TRUE);
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	3f c0       	rjmp	.+126    	; 0xf70 <_Z16i2c_device_writehhPhh+0xb4>
		}

		if(i2c_write_success(slaveAddr, TW_MT_SLA_ACK))
     ef2:	68 e1       	ldi	r22, 0x18	; 24
     ef4:	8a 81       	ldd	r24, Y+2	; 0x02
     ef6:	0e 94 14 07 	call	0xe28	; 0xe28 <_Z17i2c_write_successhh>
     efa:	98 2f       	mov	r25, r24
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	99 23       	and	r25, r25
     f00:	09 f4       	brne	.+2      	; 0xf04 <_Z16i2c_device_writehhPhh+0x48>
     f02:	80 e0       	ldi	r24, 0x00	; 0
     f04:	88 23       	and	r24, r24
     f06:	11 f0       	breq	.+4      	; 0xf0c <_Z16i2c_device_writehhPhh+0x50>
		{
			return(TRUE);
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	32 c0       	rjmp	.+100    	; 0xf70 <_Z16i2c_device_writehhPhh+0xb4>
		}

		if(i2c_write_success(addr, TW_MT_DATA_ACK))
     f0c:	68 e2       	ldi	r22, 0x28	; 40
     f0e:	8b 81       	ldd	r24, Y+3	; 0x03
     f10:	0e 94 14 07 	call	0xe28	; 0xe28 <_Z17i2c_write_successhh>
     f14:	98 2f       	mov	r25, r24
     f16:	81 e0       	ldi	r24, 0x01	; 1
     f18:	99 23       	and	r25, r25
     f1a:	09 f4       	brne	.+2      	; 0xf1e <_Z16i2c_device_writehhPhh+0x62>
     f1c:	80 e0       	ldi	r24, 0x00	; 0
     f1e:	88 23       	and	r24, r24
     f20:	11 f0       	breq	.+4      	; 0xf26 <_Z16i2c_device_writehhPhh+0x6a>
		{
			return(TRUE);
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	25 c0       	rjmp	.+74     	; 0xf70 <_Z16i2c_device_writehhPhh+0xb4>
		}

		while(bytes2write--)
     f26:	8e 81       	ldd	r24, Y+6	; 0x06
     f28:	9f ef       	ldi	r25, 0xFF	; 255
     f2a:	98 0f       	add	r25, r24
     f2c:	9e 83       	std	Y+6, r25	; 0x06
     f2e:	91 e0       	ldi	r25, 0x01	; 1
     f30:	88 23       	and	r24, r24
     f32:	09 f4       	brne	.+2      	; 0xf36 <_Z16i2c_device_writehhPhh+0x7a>
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	99 23       	and	r25, r25
     f38:	c1 f0       	breq	.+48     	; 0xf6a <_Z16i2c_device_writehhPhh+0xae>
		{
			if(i2c_write_success(data[index++], TW_MT_DATA_ACK))
     f3a:	89 81       	ldd	r24, Y+1	; 0x01
     f3c:	91 e0       	ldi	r25, 0x01	; 1
     f3e:	98 0f       	add	r25, r24
     f40:	99 83       	std	Y+1, r25	; 0x01
     f42:	88 2f       	mov	r24, r24
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	2c 81       	ldd	r18, Y+4	; 0x04
     f48:	3d 81       	ldd	r19, Y+5	; 0x05
     f4a:	82 0f       	add	r24, r18
     f4c:	93 1f       	adc	r25, r19
     f4e:	fc 01       	movw	r30, r24
     f50:	80 81       	ld	r24, Z
     f52:	68 e2       	ldi	r22, 0x28	; 40
     f54:	0e 94 14 07 	call	0xe28	; 0xe28 <_Z17i2c_write_successhh>
     f58:	98 2f       	mov	r25, r24
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	99 23       	and	r25, r25
     f5e:	09 f4       	brne	.+2      	; 0xf62 <_Z16i2c_device_writehhPhh+0xa6>
     f60:	80 e0       	ldi	r24, 0x00	; 0
     f62:	88 23       	and	r24, r24
     f64:	01 f3       	breq	.-64     	; 0xf26 <_Z16i2c_device_writehhPhh+0x6a>
			{
				return(TRUE);
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	03 c0       	rjmp	.+6      	; 0xf70 <_Z16i2c_device_writehhPhh+0xb4>
			}
		}

		i2c_stop();
     f6a:	0e 94 10 07 	call	0xe20	; 0xe20 <_Z8i2c_stopv>

		#endif  /* #ifndef DEBUG_WITHOUT_I2C */

	return(FALSE);
     f6e:	80 e0       	ldi	r24, 0x00	; 0
}
     f70:	26 96       	adiw	r28, 0x06	; 6
     f72:	0f b6       	in	r0, 0x3f	; 63
     f74:	f8 94       	cli
     f76:	de bf       	out	0x3e, r29	; 62
     f78:	0f be       	out	0x3f, r0	; 63
     f7a:	cd bf       	out	0x3d, r28	; 61
     f7c:	df 91       	pop	r29
     f7e:	cf 91       	pop	r28
     f80:	08 95       	ret

00000f82 <_Z15i2c_device_readhhPhh>:
#ifdef SELECTIVELY_DISABLE_OPTIMIZATION
	BOOL __attribute__((optimize("O0"))) i2c_device_read(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2read)
#else
	BOOL i2c_device_read(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2read)
#endif
{
     f82:	0f 93       	push	r16
     f84:	1f 93       	push	r17
     f86:	cf 93       	push	r28
     f88:	df 93       	push	r29
     f8a:	00 d0       	rcall	.+0      	; 0xf8c <_Z15i2c_device_readhhPhh+0xa>
     f8c:	00 d0       	rcall	.+0      	; 0xf8e <_Z15i2c_device_readhhPhh+0xc>
     f8e:	00 d0       	rcall	.+0      	; 0xf90 <_Z15i2c_device_readhhPhh+0xe>
     f90:	cd b7       	in	r28, 0x3d	; 61
     f92:	de b7       	in	r29, 0x3e	; 62
     f94:	8a 83       	std	Y+2, r24	; 0x02
     f96:	6b 83       	std	Y+3, r22	; 0x03
     f98:	5d 83       	std	Y+5, r21	; 0x05
     f9a:	4c 83       	std	Y+4, r20	; 0x04
     f9c:	2e 83       	std	Y+6, r18	; 0x06
		#ifndef DEBUG_WITHOUT_I2C
		uint8_t index = 0;
     f9e:	19 82       	std	Y+1, r1	; 0x01

		i2c_start();
     fa0:	0e 94 f6 06 	call	0xdec	; 0xdec <_Z9i2c_startv>
		if(i2c_status(TW_START))
     fa4:	88 e0       	ldi	r24, 0x08	; 8
     fa6:	0e 94 4f 07 	call	0xe9e	; 0xe9e <_Z10i2c_statush>
     faa:	98 2f       	mov	r25, r24
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	99 23       	and	r25, r25
     fb0:	09 f4       	brne	.+2      	; 0xfb4 <_Z15i2c_device_readhhPhh+0x32>
     fb2:	80 e0       	ldi	r24, 0x00	; 0
     fb4:	88 23       	and	r24, r24
     fb6:	11 f0       	breq	.+4      	; 0xfbc <_Z15i2c_device_readhhPhh+0x3a>
		{
			return(TRUE);
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	79 c0       	rjmp	.+242    	; 0x10ae <_Z15i2c_device_readhhPhh+0x12c>
		}

		if(i2c_write_success(slaveAddr, TW_MT_SLA_ACK))
     fbc:	68 e1       	ldi	r22, 0x18	; 24
     fbe:	8a 81       	ldd	r24, Y+2	; 0x02
     fc0:	0e 94 14 07 	call	0xe28	; 0xe28 <_Z17i2c_write_successhh>
     fc4:	98 2f       	mov	r25, r24
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	99 23       	and	r25, r25
     fca:	09 f4       	brne	.+2      	; 0xfce <_Z15i2c_device_readhhPhh+0x4c>
     fcc:	80 e0       	ldi	r24, 0x00	; 0
     fce:	88 23       	and	r24, r24
     fd0:	11 f0       	breq	.+4      	; 0xfd6 <_Z15i2c_device_readhhPhh+0x54>
		{
			return(TRUE);
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	6c c0       	rjmp	.+216    	; 0x10ae <_Z15i2c_device_readhhPhh+0x12c>
		}

		if(i2c_write_success(addr, TW_MT_DATA_ACK))
     fd6:	68 e2       	ldi	r22, 0x28	; 40
     fd8:	8b 81       	ldd	r24, Y+3	; 0x03
     fda:	0e 94 14 07 	call	0xe28	; 0xe28 <_Z17i2c_write_successhh>
     fde:	98 2f       	mov	r25, r24
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	99 23       	and	r25, r25
     fe4:	09 f4       	brne	.+2      	; 0xfe8 <_Z15i2c_device_readhhPhh+0x66>
     fe6:	80 e0       	ldi	r24, 0x00	; 0
     fe8:	88 23       	and	r24, r24
     fea:	11 f0       	breq	.+4      	; 0xff0 <_Z15i2c_device_readhhPhh+0x6e>
		{
			return(TRUE);
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	5f c0       	rjmp	.+190    	; 0x10ae <_Z15i2c_device_readhhPhh+0x12c>
		}

		i2c_start();
     ff0:	0e 94 f6 06 	call	0xdec	; 0xdec <_Z9i2c_startv>
		if(i2c_status(TW_REP_START))
     ff4:	80 e1       	ldi	r24, 0x10	; 16
     ff6:	0e 94 4f 07 	call	0xe9e	; 0xe9e <_Z10i2c_statush>
     ffa:	98 2f       	mov	r25, r24
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	99 23       	and	r25, r25
    1000:	09 f4       	brne	.+2      	; 0x1004 <_Z15i2c_device_readhhPhh+0x82>
    1002:	80 e0       	ldi	r24, 0x00	; 0
    1004:	88 23       	and	r24, r24
    1006:	11 f0       	breq	.+4      	; 0x100c <_Z15i2c_device_readhhPhh+0x8a>
		{
			return(TRUE);
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	51 c0       	rjmp	.+162    	; 0x10ae <_Z15i2c_device_readhhPhh+0x12c>
		}

		if(i2c_write_success((slaveAddr | TW_READ), TW_MR_SLA_ACK))
    100c:	8a 81       	ldd	r24, Y+2	; 0x02
    100e:	81 60       	ori	r24, 0x01	; 1
    1010:	60 e4       	ldi	r22, 0x40	; 64
    1012:	0e 94 14 07 	call	0xe28	; 0xe28 <_Z17i2c_write_successhh>
    1016:	98 2f       	mov	r25, r24
    1018:	81 e0       	ldi	r24, 0x01	; 1
    101a:	99 23       	and	r25, r25
    101c:	09 f4       	brne	.+2      	; 0x1020 <_Z15i2c_device_readhhPhh+0x9e>
    101e:	80 e0       	ldi	r24, 0x00	; 0
    1020:	88 23       	and	r24, r24
    1022:	11 f0       	breq	.+4      	; 0x1028 <_Z15i2c_device_readhhPhh+0xa6>
		{
			return(TRUE);
    1024:	81 e0       	ldi	r24, 0x01	; 1
    1026:	43 c0       	rjmp	.+134    	; 0x10ae <_Z15i2c_device_readhhPhh+0x12c>
		}

		while(bytes2read--)
    1028:	8e 81       	ldd	r24, Y+6	; 0x06
    102a:	9f ef       	ldi	r25, 0xFF	; 255
    102c:	98 0f       	add	r25, r24
    102e:	9e 83       	std	Y+6, r25	; 0x06
    1030:	91 e0       	ldi	r25, 0x01	; 1
    1032:	88 23       	and	r24, r24
    1034:	09 f4       	brne	.+2      	; 0x1038 <_Z15i2c_device_readhhPhh+0xb6>
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	99 23       	and	r25, r25
    103a:	b1 f1       	breq	.+108    	; 0x10a8 <_Z15i2c_device_readhhPhh+0x126>
		{
			if(bytes2read)
    103c:	8e 81       	ldd	r24, Y+6	; 0x06
    103e:	88 23       	and	r24, r24
    1040:	d9 f0       	breq	.+54     	; 0x1078 <_Z15i2c_device_readhhPhh+0xf6>
			{
				data[index++] = i2c_read_ack();
    1042:	89 81       	ldd	r24, Y+1	; 0x01
    1044:	91 e0       	ldi	r25, 0x01	; 1
    1046:	98 0f       	add	r25, r24
    1048:	99 83       	std	Y+1, r25	; 0x01
    104a:	88 2f       	mov	r24, r24
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	2c 81       	ldd	r18, Y+4	; 0x04
    1050:	3d 81       	ldd	r19, Y+5	; 0x05
    1052:	89 01       	movw	r16, r18
    1054:	08 0f       	add	r16, r24
    1056:	19 1f       	adc	r17, r25
    1058:	0e 94 31 07 	call	0xe62	; 0xe62 <_Z12i2c_read_ackv>
    105c:	f8 01       	movw	r30, r16
    105e:	80 83       	st	Z, r24
				if(i2c_status(TW_MR_DATA_ACK))
    1060:	80 e5       	ldi	r24, 0x50	; 80
    1062:	0e 94 4f 07 	call	0xe9e	; 0xe9e <_Z10i2c_statush>
    1066:	98 2f       	mov	r25, r24
    1068:	81 e0       	ldi	r24, 0x01	; 1
    106a:	99 23       	and	r25, r25
    106c:	09 f4       	brne	.+2      	; 0x1070 <_Z15i2c_device_readhhPhh+0xee>
    106e:	80 e0       	ldi	r24, 0x00	; 0
    1070:	88 23       	and	r24, r24
    1072:	d1 f2       	breq	.-76     	; 0x1028 <_Z15i2c_device_readhhPhh+0xa6>
				{
					return(TRUE);
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	1b c0       	rjmp	.+54     	; 0x10ae <_Z15i2c_device_readhhPhh+0x12c>
				}
			}
			else
			{
				data[index] = i2c_read_nack();
    1078:	89 81       	ldd	r24, Y+1	; 0x01
    107a:	88 2f       	mov	r24, r24
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	2c 81       	ldd	r18, Y+4	; 0x04
    1080:	3d 81       	ldd	r19, Y+5	; 0x05
    1082:	89 01       	movw	r16, r18
    1084:	08 0f       	add	r16, r24
    1086:	19 1f       	adc	r17, r25
    1088:	0e 94 40 07 	call	0xe80	; 0xe80 <_Z13i2c_read_nackv>
    108c:	f8 01       	movw	r30, r16
    108e:	80 83       	st	Z, r24
				if(i2c_status(TW_MR_DATA_NACK))
    1090:	88 e5       	ldi	r24, 0x58	; 88
    1092:	0e 94 4f 07 	call	0xe9e	; 0xe9e <_Z10i2c_statush>
    1096:	98 2f       	mov	r25, r24
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	99 23       	and	r25, r25
    109c:	09 f4       	brne	.+2      	; 0x10a0 <_Z15i2c_device_readhhPhh+0x11e>
    109e:	80 e0       	ldi	r24, 0x00	; 0
    10a0:	88 23       	and	r24, r24
    10a2:	11 f2       	breq	.-124    	; 0x1028 <_Z15i2c_device_readhhPhh+0xa6>
				{
					return(TRUE);
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	03 c0       	rjmp	.+6      	; 0x10ae <_Z15i2c_device_readhhPhh+0x12c>
				}
			}
		}

		i2c_stop();
    10a8:	0e 94 10 07 	call	0xe20	; 0xe20 <_Z8i2c_stopv>

		#endif  /* #ifndef DEBUG_WITHOUT_I2C */

	return(FALSE);
    10ac:	80 e0       	ldi	r24, 0x00	; 0
}
    10ae:	26 96       	adiw	r28, 0x06	; 6
    10b0:	0f b6       	in	r0, 0x3f	; 63
    10b2:	f8 94       	cli
    10b4:	de bf       	out	0x3e, r29	; 62
    10b6:	0f be       	out	0x3f, r0	; 63
    10b8:	cd bf       	out	0x3d, r28	; 61
    10ba:	df 91       	pop	r29
    10bc:	cf 91       	pop	r28
    10be:	1f 91       	pop	r17
    10c0:	0f 91       	pop	r16
    10c2:	08 95       	ret

000010c4 <_Z16nextFullTxBufferv>:
	sprintf(g_tempMsgBuff, "> %s=%d%s", label, value, lineTerm);
	while((err = linkbus_send_text(g_tempMsgBuff)))
	{
		;
	}
	while(!err && linkbusTxInProgress())
    10c4:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <_ZZ16nextFullTxBuffervE11bufferIndex>
    10c8:	94 e0       	ldi	r25, 0x04	; 4
    10ca:	59 e2       	ldi	r21, 0x29	; 41
    10cc:	28 2f       	mov	r18, r24
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	52 9f       	mul	r21, r18
    10d2:	f0 01       	movw	r30, r0
    10d4:	53 9f       	mul	r21, r19
    10d6:	f0 0d       	add	r31, r0
    10d8:	11 24       	eor	r1, r1
    10da:	e8 55       	subi	r30, 0x58	; 88
    10dc:	fc 4f       	sbci	r31, 0xFC	; 252
    10de:	40 81       	ld	r20, Z
    10e0:	41 11       	cpse	r20, r1
    10e2:	0c c0       	rjmp	.+24     	; 0x10fc <_Z16nextFullTxBufferv+0x38>
    10e4:	91 50       	subi	r25, 0x01	; 1
    10e6:	29 f0       	breq	.+10     	; 0x10f2 <_Z16nextFullTxBufferv+0x2e>
    10e8:	8f 5f       	subi	r24, 0xFF	; 255
    10ea:	84 30       	cpi	r24, 0x04	; 4
    10ec:	78 f3       	brcs	.-34     	; 0x10cc <_Z16nextFullTxBufferv+0x8>
    10ee:	80 e0       	ldi	r24, 0x00	; 0
    10f0:	ed cf       	rjmp	.-38     	; 0x10cc <_Z16nextFullTxBufferv+0x8>
    10f2:	80 93 29 03 	sts	0x0329, r24	; 0x800329 <_ZZ16nextFullTxBuffervE11bufferIndex>
    10f6:	80 e0       	ldi	r24, 0x00	; 0
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	08 95       	ret
    10fc:	80 93 29 03 	sts	0x0329, r24	; 0x800329 <_ZZ16nextFullTxBuffervE11bufferIndex>
    1100:	49 e2       	ldi	r20, 0x29	; 41
    1102:	42 9f       	mul	r20, r18
    1104:	c0 01       	movw	r24, r0
    1106:	43 9f       	mul	r20, r19
    1108:	90 0d       	add	r25, r0
    110a:	11 24       	eor	r1, r1
    110c:	88 55       	subi	r24, 0x58	; 88
    110e:	9c 4f       	sbci	r25, 0xFC	; 252
    1110:	08 95       	ret

00001112 <_Z17nextEmptyTxBufferv>:
    1112:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <_ZZ17nextEmptyTxBuffervE11bufferIndex>
    1116:	94 e0       	ldi	r25, 0x04	; 4
    1118:	59 e2       	ldi	r21, 0x29	; 41
    111a:	28 2f       	mov	r18, r24
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	52 9f       	mul	r21, r18
    1120:	f0 01       	movw	r30, r0
    1122:	53 9f       	mul	r21, r19
    1124:	f0 0d       	add	r31, r0
    1126:	11 24       	eor	r1, r1
    1128:	e8 55       	subi	r30, 0x58	; 88
    112a:	fc 4f       	sbci	r31, 0xFC	; 252
    112c:	40 81       	ld	r20, Z
    112e:	44 23       	and	r20, r20
    1130:	61 f0       	breq	.+24     	; 0x114a <_Z17nextEmptyTxBufferv+0x38>
    1132:	91 50       	subi	r25, 0x01	; 1
    1134:	29 f0       	breq	.+10     	; 0x1140 <_Z17nextEmptyTxBufferv+0x2e>
    1136:	8f 5f       	subi	r24, 0xFF	; 255
    1138:	84 30       	cpi	r24, 0x04	; 4
    113a:	78 f3       	brcs	.-34     	; 0x111a <_Z17nextEmptyTxBufferv+0x8>
    113c:	80 e0       	ldi	r24, 0x00	; 0
    113e:	ed cf       	rjmp	.-38     	; 0x111a <_Z17nextEmptyTxBufferv+0x8>
    1140:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <_ZZ17nextEmptyTxBuffervE11bufferIndex>
    1144:	80 e0       	ldi	r24, 0x00	; 0
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	08 95       	ret
    114a:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <_ZZ17nextEmptyTxBuffervE11bufferIndex>
    114e:	49 e2       	ldi	r20, 0x29	; 41
    1150:	42 9f       	mul	r20, r18
    1152:	c0 01       	movw	r24, r0
    1154:	43 9f       	mul	r20, r19
    1156:	90 0d       	add	r25, r0
    1158:	11 24       	eor	r1, r1
    115a:	88 55       	subi	r24, 0x58	; 88
    115c:	9c 4f       	sbci	r25, 0xFC	; 252
    115e:	08 95       	ret

00001160 <_Z17nextEmptyRxBufferv>:
    1160:	80 91 27 03 	lds	r24, 0x0327	; 0x800327 <_ZZ17nextEmptyRxBuffervE11bufferIndex>
    1164:	28 2f       	mov	r18, r24
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	9f e3       	ldi	r25, 0x3F	; 63
    116a:	89 9f       	mul	r24, r25
    116c:	f0 01       	movw	r30, r0
    116e:	11 24       	eor	r1, r1
    1170:	e6 5d       	subi	r30, 0xD6	; 214
    1172:	fc 4f       	sbci	r31, 0xFC	; 252
    1174:	41 81       	ldd	r20, Z+1	; 0x01
    1176:	52 81       	ldd	r21, Z+2	; 0x02
    1178:	45 2b       	or	r20, r21
    117a:	a9 f0       	breq	.+42     	; 0x11a6 <_Z17nextEmptyRxBufferv+0x46>
    117c:	8f 5f       	subi	r24, 0xFF	; 255
    117e:	82 30       	cpi	r24, 0x02	; 2
    1180:	08 f0       	brcs	.+2      	; 0x1184 <_Z17nextEmptyRxBufferv+0x24>
    1182:	80 e0       	ldi	r24, 0x00	; 0
    1184:	28 2f       	mov	r18, r24
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	9f e3       	ldi	r25, 0x3F	; 63
    118a:	89 9f       	mul	r24, r25
    118c:	f0 01       	movw	r30, r0
    118e:	11 24       	eor	r1, r1
    1190:	e6 5d       	subi	r30, 0xD6	; 214
    1192:	fc 4f       	sbci	r31, 0xFC	; 252
    1194:	41 81       	ldd	r20, Z+1	; 0x01
    1196:	52 81       	ldd	r21, Z+2	; 0x02
    1198:	45 2b       	or	r20, r21
    119a:	29 f0       	breq	.+10     	; 0x11a6 <_Z17nextEmptyRxBufferv+0x46>
    119c:	80 93 27 03 	sts	0x0327, r24	; 0x800327 <_ZZ17nextEmptyRxBuffervE11bufferIndex>
    11a0:	80 e0       	ldi	r24, 0x00	; 0
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	08 95       	ret
    11a6:	80 93 27 03 	sts	0x0327, r24	; 0x800327 <_ZZ17nextEmptyRxBuffervE11bufferIndex>
    11aa:	4f e3       	ldi	r20, 0x3F	; 63
    11ac:	42 9f       	mul	r20, r18
    11ae:	c0 01       	movw	r24, r0
    11b0:	43 9f       	mul	r20, r19
    11b2:	90 0d       	add	r25, r0
    11b4:	11 24       	eor	r1, r1
    11b6:	86 5d       	subi	r24, 0xD6	; 214
    11b8:	9c 4f       	sbci	r25, 0xFC	; 252
    11ba:	08 95       	ret

000011bc <_Z16nextFullRxBufferv>:
    11bc:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <_ZZ16nextFullRxBuffervE11bufferIndex>
    11c0:	28 2f       	mov	r18, r24
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	9f e3       	ldi	r25, 0x3F	; 63
    11c6:	89 9f       	mul	r24, r25
    11c8:	f0 01       	movw	r30, r0
    11ca:	11 24       	eor	r1, r1
    11cc:	e6 5d       	subi	r30, 0xD6	; 214
    11ce:	fc 4f       	sbci	r31, 0xFC	; 252
    11d0:	41 81       	ldd	r20, Z+1	; 0x01
    11d2:	52 81       	ldd	r21, Z+2	; 0x02
    11d4:	45 2b       	or	r20, r21
    11d6:	a9 f4       	brne	.+42     	; 0x1202 <_Z16nextFullRxBufferv+0x46>
    11d8:	8f 5f       	subi	r24, 0xFF	; 255
    11da:	82 30       	cpi	r24, 0x02	; 2
    11dc:	08 f0       	brcs	.+2      	; 0x11e0 <_Z16nextFullRxBufferv+0x24>
    11de:	80 e0       	ldi	r24, 0x00	; 0
    11e0:	28 2f       	mov	r18, r24
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	9f e3       	ldi	r25, 0x3F	; 63
    11e6:	89 9f       	mul	r24, r25
    11e8:	f0 01       	movw	r30, r0
    11ea:	11 24       	eor	r1, r1
    11ec:	e6 5d       	subi	r30, 0xD6	; 214
    11ee:	fc 4f       	sbci	r31, 0xFC	; 252
    11f0:	41 81       	ldd	r20, Z+1	; 0x01
    11f2:	52 81       	ldd	r21, Z+2	; 0x02
    11f4:	45 2b       	or	r20, r21
    11f6:	29 f4       	brne	.+10     	; 0x1202 <_Z16nextFullRxBufferv+0x46>
    11f8:	80 93 26 03 	sts	0x0326, r24	; 0x800326 <_ZZ16nextFullRxBuffervE11bufferIndex>
    11fc:	80 e0       	ldi	r24, 0x00	; 0
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	08 95       	ret
    1202:	80 93 26 03 	sts	0x0326, r24	; 0x800326 <_ZZ16nextFullRxBuffervE11bufferIndex>
    1206:	4f e3       	ldi	r20, 0x3F	; 63
    1208:	42 9f       	mul	r20, r18
    120a:	c0 01       	movw	r24, r0
    120c:	43 9f       	mul	r20, r19
    120e:	90 0d       	add	r25, r0
    1210:	11 24       	eor	r1, r1
    1212:	86 5d       	subi	r24, 0xD6	; 214
    1214:	9c 4f       	sbci	r25, 0xFC	; 252
    1216:	08 95       	ret

00001218 <_Z19linkbusTxInProgressv>:
    1218:	80 91 4c 04 	lds	r24, 0x044C	; 0x80044c <_ZL17linkbus_tx_active>
    121c:	08 95       	ret

0000121e <_Z16linkbus_start_txv>:
    121e:	90 91 4c 04 	lds	r25, 0x044C	; 0x80044c <_ZL17linkbus_tx_active>
    1222:	81 e0       	ldi	r24, 0x01	; 1
    1224:	91 11       	cpse	r25, r1
    1226:	80 e0       	ldi	r24, 0x00	; 0
    1228:	91 11       	cpse	r25, r1
    122a:	08 c0       	rjmp	.+16     	; 0x123c <_Z16linkbus_start_txv+0x1e>
    122c:	91 e0       	ldi	r25, 0x01	; 1
    122e:	90 93 4c 04 	sts	0x044C, r25	; 0x80044c <_ZL17linkbus_tx_active>
    1232:	e1 ec       	ldi	r30, 0xC1	; 193
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	90 81       	ld	r25, Z
    1238:	90 62       	ori	r25, 0x20	; 32
    123a:	90 83       	st	Z, r25
    123c:	08 95       	ret

0000123e <_Z14linkbus_end_txv>:
    123e:	80 91 4c 04 	lds	r24, 0x044C	; 0x80044c <_ZL17linkbus_tx_active>
    1242:	88 23       	and	r24, r24
    1244:	39 f0       	breq	.+14     	; 0x1254 <_Z14linkbus_end_txv+0x16>
    1246:	e1 ec       	ldi	r30, 0xC1	; 193
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	80 81       	ld	r24, Z
    124c:	8f 7d       	andi	r24, 0xDF	; 223
    124e:	80 83       	st	Z, r24
    1250:	10 92 4c 04 	sts	0x044C, r1	; 0x80044c <_ZL17linkbus_tx_active>
    1254:	08 95       	ret

00001256 <_Z12linkbus_initm>:
    1256:	9b 01       	movw	r18, r22
    1258:	ac 01       	movw	r20, r24
    125a:	8e e7       	ldi	r24, 0x7E	; 126
    125c:	ea e2       	ldi	r30, 0x2A	; 42
    125e:	f3 e0       	ldi	r31, 0x03	; 3
    1260:	df 01       	movw	r26, r30
    1262:	1d 92       	st	X+, r1
    1264:	8a 95       	dec	r24
    1266:	e9 f7       	brne	.-6      	; 0x1262 <_Z12linkbus_initm+0xc>
    1268:	e8 ea       	ldi	r30, 0xA8	; 168
    126a:	f3 e0       	ldi	r31, 0x03	; 3
    126c:	10 82       	st	Z, r1
    126e:	11 a6       	std	Z+41, r1	; 0x29
    1270:	10 92 fa 03 	sts	0x03FA, r1	; 0x8003fa <_ZL9tx_buffer+0x52>
    1274:	10 92 23 04 	sts	0x0423, r1	; 0x800423 <_ZL9tx_buffer+0x7b>
    1278:	60 e4       	ldi	r22, 0x40	; 64
    127a:	72 e4       	ldi	r23, 0x42	; 66
    127c:	8f e0       	ldi	r24, 0x0F	; 15
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	0e 94 2a 2c 	call	0x5854	; 0x5854 <__udivmodsi4>
    1284:	21 50       	subi	r18, 0x01	; 1
    1286:	31 09       	sbc	r19, r1
    1288:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    128c:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    1290:	88 e9       	ldi	r24, 0x98	; 152
    1292:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    1296:	8e e0       	ldi	r24, 0x0E	; 14
    1298:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    129c:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <_ZL14g_bus_disabled>
    12a0:	08 95       	ret

000012a2 <_Z15linkbus_disablev>:
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_ZL14g_bus_disabled>
    12a8:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    12ac:	0e 94 1f 09 	call	0x123e	; 0x123e <_Z14linkbus_end_txv>
    12b0:	8e e7       	ldi	r24, 0x7E	; 126
    12b2:	ea e2       	ldi	r30, 0x2A	; 42
    12b4:	f3 e0       	ldi	r31, 0x03	; 3
    12b6:	df 01       	movw	r26, r30
    12b8:	1d 92       	st	X+, r1
    12ba:	8a 95       	dec	r24
    12bc:	e9 f7       	brne	.-6      	; 0x12b8 <_Z15linkbus_disablev+0x16>
    12be:	e8 ea       	ldi	r30, 0xA8	; 168
    12c0:	f3 e0       	ldi	r31, 0x03	; 3
    12c2:	10 82       	st	Z, r1
    12c4:	11 a6       	std	Z+41, r1	; 0x29
    12c6:	10 92 fa 03 	sts	0x03FA, r1	; 0x8003fa <_ZL9tx_buffer+0x52>
    12ca:	10 92 23 04 	sts	0x0423, r1	; 0x800423 <_ZL9tx_buffer+0x7b>
    12ce:	08 95       	ret

000012d0 <_Z17linkbus_send_textPc>:
    12d0:	0f 93       	push	r16
    12d2:	1f 93       	push	r17
    12d4:	cf 93       	push	r28
    12d6:	df 93       	push	r29
    12d8:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <_ZL14g_bus_disabled>
    12dc:	21 11       	cpse	r18, r1
    12de:	14 c0       	rjmp	.+40     	; 0x1308 <_Z17linkbus_send_textPc+0x38>
    12e0:	00 97       	sbiw	r24, 0x00	; 0
    12e2:	a1 f0       	breq	.+40     	; 0x130c <_Z17linkbus_send_textPc+0x3c>
    12e4:	8c 01       	movw	r16, r24
    12e6:	0e 94 89 08 	call	0x1112	; 0x1112 <_Z17nextEmptyTxBufferv>
    12ea:	00 97       	sbiw	r24, 0x00	; 0
    12ec:	b9 f4       	brne	.+46     	; 0x131c <_Z17linkbus_send_textPc+0x4c>
    12ee:	c8 ec       	ldi	r28, 0xC8	; 200
    12f0:	d0 e0       	ldi	r29, 0x00	; 0
    12f2:	02 c0       	rjmp	.+4      	; 0x12f8 <_Z17linkbus_send_textPc+0x28>
    12f4:	20 97       	sbiw	r28, 0x00	; 0
    12f6:	61 f0       	breq	.+24     	; 0x1310 <_Z17linkbus_send_textPc+0x40>
    12f8:	90 91 4c 04 	lds	r25, 0x044C	; 0x80044c <_ZL17linkbus_tx_active>
    12fc:	99 23       	and	r25, r25
    12fe:	51 f0       	breq	.+20     	; 0x1314 <_Z17linkbus_send_textPc+0x44>
    1300:	20 97       	sbiw	r28, 0x00	; 0
    1302:	d1 f0       	breq	.+52     	; 0x1338 <_Z17linkbus_send_textPc+0x68>
    1304:	21 97       	sbiw	r28, 0x01	; 1
    1306:	f8 cf       	rjmp	.-16     	; 0x12f8 <_Z17linkbus_send_textPc+0x28>
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	1b c0       	rjmp	.+54     	; 0x1342 <_Z17linkbus_send_textPc+0x72>
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	19 c0       	rjmp	.+50     	; 0x1342 <_Z17linkbus_send_textPc+0x72>
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	17 c0       	rjmp	.+46     	; 0x1342 <_Z17linkbus_send_textPc+0x72>
    1314:	0e 94 89 08 	call	0x1112	; 0x1112 <_Z17nextEmptyTxBufferv>
    1318:	00 97       	sbiw	r24, 0x00	; 0
    131a:	61 f3       	breq	.-40     	; 0x12f4 <_Z17linkbus_send_textPc+0x24>
    131c:	1f 93       	push	r17
    131e:	0f 93       	push	r16
    1320:	9f 93       	push	r25
    1322:	8f 93       	push	r24
    1324:	0e 94 46 2e 	call	0x5c8c	; 0x5c8c <sprintf>
    1328:	0e 94 0f 09 	call	0x121e	; 0x121e <_Z16linkbus_start_txv>
    132c:	0f 90       	pop	r0
    132e:	0f 90       	pop	r0
    1330:	0f 90       	pop	r0
    1332:	0f 90       	pop	r0
    1334:	80 e0       	ldi	r24, 0x00	; 0
    1336:	05 c0       	rjmp	.+10     	; 0x1342 <_Z17linkbus_send_textPc+0x72>
    1338:	0e 94 89 08 	call	0x1112	; 0x1112 <_Z17nextEmptyTxBufferv>
    133c:	00 97       	sbiw	r24, 0x00	; 0
    133e:	71 f7       	brne	.-36     	; 0x131c <_Z17linkbus_send_textPc+0x4c>
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	df 91       	pop	r29
    1344:	cf 91       	pop	r28
    1346:	1f 91       	pop	r17
    1348:	0f 91       	pop	r16
    134a:	08 95       	ret

0000134c <_Z17lb_send_NewPromptv>:
    134c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <_ZL14g_bus_disabled>
    1350:	81 11       	cpse	r24, r1
    1352:	06 c0       	rjmp	.+12     	; 0x1360 <_Z17lb_send_NewPromptv+0x14>
    1354:	85 e2       	ldi	r24, 0x25	; 37
    1356:	91 e0       	ldi	r25, 0x01	; 1
    1358:	0e 94 68 09 	call	0x12d0	; 0x12d0 <_Z17linkbus_send_textPc>
    135c:	81 11       	cpse	r24, r1
    135e:	fa cf       	rjmp	.-12     	; 0x1354 <_Z17lb_send_NewPromptv+0x8>
    1360:	08 95       	ret

00001362 <_Z15lb_send_NewLinev>:
    1362:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <_ZL14g_bus_disabled>
    1366:	81 11       	cpse	r24, r1
    1368:	04 c0       	rjmp	.+8      	; 0x1372 <_Z15lb_send_NewLinev+0x10>
    136a:	88 e2       	ldi	r24, 0x28	; 40
    136c:	91 e0       	ldi	r25, 0x01	; 1
    136e:	0e 94 68 09 	call	0x12d0	; 0x12d0 <_Z17linkbus_send_textPc>
    1372:	08 95       	ret

00001374 <_Z12lb_echo_charh>:
    1374:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14g_bus_disabled>
    1378:	91 11       	cpse	r25, r1
    137a:	07 c0       	rjmp	.+14     	; 0x138a <_Z12lb_echo_charh+0x16>
    137c:	ed e4       	ldi	r30, 0x4D	; 77
    137e:	f4 e0       	ldi	r31, 0x04	; 4
    1380:	80 83       	st	Z, r24
    1382:	11 82       	std	Z+1, r1	; 0x01
    1384:	cf 01       	movw	r24, r30
    1386:	0e 94 68 09 	call	0x12d0	; 0x12d0 <_Z17linkbus_send_textPc>
    138a:	08 95       	ret

0000138c <_Z14lb_send_stringPch>:
    138c:	cf 93       	push	r28
    138e:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <_ZL14g_bus_disabled>
    1392:	21 11       	cpse	r18, r1
    1394:	25 c0       	rjmp	.+74     	; 0x13e0 <_Z14lb_send_stringPch+0x54>
    1396:	00 97       	sbiw	r24, 0x00	; 0
    1398:	29 f1       	breq	.+74     	; 0x13e4 <_Z14lb_send_stringPch+0x58>
    139a:	fc 01       	movw	r30, r24
    139c:	01 90       	ld	r0, Z+
    139e:	00 20       	and	r0, r0
    13a0:	e9 f7       	brne	.-6      	; 0x139c <_Z14lb_send_stringPch+0x10>
    13a2:	31 97       	sbiw	r30, 0x01	; 1
    13a4:	e8 1b       	sub	r30, r24
    13a6:	f9 0b       	sbc	r31, r25
    13a8:	ba 97       	sbiw	r30, 0x2a	; 42
    13aa:	f0 f4       	brcc	.+60     	; 0x13e8 <_Z14lb_send_stringPch+0x5c>
    13ac:	c6 2f       	mov	r28, r22
    13ae:	bc 01       	movw	r22, r24
    13b0:	49 e2       	ldi	r20, 0x29	; 41
    13b2:	50 e0       	ldi	r21, 0x00	; 0
    13b4:	8d e4       	ldi	r24, 0x4D	; 77
    13b6:	94 e0       	ldi	r25, 0x04	; 4
    13b8:	0e 94 1a 2e 	call	0x5c34	; 0x5c34 <strncpy>
    13bc:	cc 23       	and	r28, r28
    13be:	59 f0       	breq	.+22     	; 0x13d6 <_Z14lb_send_stringPch+0x4a>
    13c0:	8d e4       	ldi	r24, 0x4D	; 77
    13c2:	94 e0       	ldi	r25, 0x04	; 4
    13c4:	0e 94 68 09 	call	0x12d0	; 0x12d0 <_Z17linkbus_send_textPc>
    13c8:	81 11       	cpse	r24, r1
    13ca:	fa cf       	rjmp	.-12     	; 0x13c0 <_Z14lb_send_stringPch+0x34>
    13cc:	80 91 4c 04 	lds	r24, 0x044C	; 0x80044c <_ZL17linkbus_tx_active>
    13d0:	81 11       	cpse	r24, r1
    13d2:	fc cf       	rjmp	.-8      	; 0x13cc <_Z14lb_send_stringPch+0x40>
    13d4:	0a c0       	rjmp	.+20     	; 0x13ea <_Z14lb_send_stringPch+0x5e>
    13d6:	8d e4       	ldi	r24, 0x4D	; 77
    13d8:	94 e0       	ldi	r25, 0x04	; 4
    13da:	0e 94 68 09 	call	0x12d0	; 0x12d0 <_Z17linkbus_send_textPc>
    13de:	05 c0       	rjmp	.+10     	; 0x13ea <_Z14lb_send_stringPch+0x5e>
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	03 c0       	rjmp	.+6      	; 0x13ea <_Z14lb_send_stringPch+0x5e>
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	01 c0       	rjmp	.+2      	; 0x13ea <_Z14lb_send_stringPch+0x5e>
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	cf 91       	pop	r28
    13ec:	08 95       	ret

000013ee <_Z10lb_enabledv>:
}


BOOL lb_enabled(void)
{
	return !g_bus_disabled;
    13ee:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL14g_bus_disabled>
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	91 11       	cpse	r25, r1
    13f6:	80 e0       	ldi	r24, 0x00	; 0
}
    13f8:	08 95       	ret

000013fa <__vector_21>:
		g_audio_tone_state = ON;
	}
	else
	{
		OCR0A = DEFAULT_TONE_FREQUENCY;
		g_audio_tone_state = OFF;
    13fa:	1f 92       	push	r1
    13fc:	0f 92       	push	r0
    13fe:	0f b6       	in	r0, 0x3f	; 63
    1400:	0f 92       	push	r0
    1402:	11 24       	eor	r1, r1
    1404:	2f 93       	push	r18
    1406:	3f 93       	push	r19
    1408:	4f 93       	push	r20
    140a:	5f 93       	push	r21
    140c:	6f 93       	push	r22
    140e:	7f 93       	push	r23
    1410:	8f 93       	push	r24
    1412:	9f 93       	push	r25
    1414:	af 93       	push	r26
    1416:	bf 93       	push	r27
    1418:	ef 93       	push	r30
    141a:	ff 93       	push	r31
    141c:	61 e0       	ldi	r22, 0x01	; 1
    141e:	8b e0       	ldi	r24, 0x0B	; 11
    1420:	0e 94 6f 02 	call	0x4de	; 0x4de <_Z12digitalWritehh>
    1424:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    1428:	70 e0       	ldi	r23, 0x00	; 0
    142a:	82 e2       	ldi	r24, 0x22	; 34
    142c:	95 e0       	ldi	r25, 0x05	; 5
    142e:	0e 94 32 06 	call	0xc64	; 0xc64 <_ZN8Goertzel9DataPointEi>
    1432:	88 23       	and	r24, r24
    1434:	29 f0       	breq	.+10     	; 0x1440 <__vector_21+0x46>
    1436:	ea e7       	ldi	r30, 0x7A	; 122
    1438:	f0 e0       	ldi	r31, 0x00	; 0
    143a:	80 81       	ld	r24, Z
    143c:	87 7f       	andi	r24, 0xF7	; 247
    143e:	80 83       	st	Z, r24
    1440:	60 e0       	ldi	r22, 0x00	; 0
    1442:	8b e0       	ldi	r24, 0x0B	; 11
    1444:	0e 94 6f 02 	call	0x4de	; 0x4de <_Z12digitalWritehh>
    1448:	ff 91       	pop	r31
    144a:	ef 91       	pop	r30
    144c:	bf 91       	pop	r27
    144e:	af 91       	pop	r26
    1450:	9f 91       	pop	r25
    1452:	8f 91       	pop	r24
    1454:	7f 91       	pop	r23
    1456:	6f 91       	pop	r22
    1458:	5f 91       	pop	r21
    145a:	4f 91       	pop	r20
    145c:	3f 91       	pop	r19
    145e:	2f 91       	pop	r18
    1460:	0f 90       	pop	r0
    1462:	0f be       	out	0x3f, r0	; 63
    1464:	0f 90       	pop	r0
    1466:	1f 90       	pop	r1
    1468:	18 95       	reti

0000146a <__vector_18>:
    146a:	1f 92       	push	r1
    146c:	0f 92       	push	r0
    146e:	0f b6       	in	r0, 0x3f	; 63
    1470:	0f 92       	push	r0
    1472:	11 24       	eor	r1, r1
    1474:	1f 93       	push	r17
    1476:	2f 93       	push	r18
    1478:	3f 93       	push	r19
    147a:	4f 93       	push	r20
    147c:	5f 93       	push	r21
    147e:	6f 93       	push	r22
    1480:	7f 93       	push	r23
    1482:	8f 93       	push	r24
    1484:	9f 93       	push	r25
    1486:	af 93       	push	r26
    1488:	bf 93       	push	r27
    148a:	cf 93       	push	r28
    148c:	df 93       	push	r29
    148e:	ef 93       	push	r30
    1490:	ff 93       	push	r31
    1492:	10 91 c6 00 	lds	r17, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    1496:	c0 91 f7 04 	lds	r28, 0x04F7	; 0x8004f7 <_ZZ11__vector_18E4buff>
    149a:	d0 91 f8 04 	lds	r29, 0x04F8	; 0x8004f8 <_ZZ11__vector_18E4buff+0x1>
    149e:	20 97       	sbiw	r28, 0x00	; 0
    14a0:	51 f4       	brne	.+20     	; 0x14b6 <__vector_18+0x4c>
    14a2:	0e 94 b0 08 	call	0x1160	; 0x1160 <_Z17nextEmptyRxBufferv>
    14a6:	ec 01       	movw	r28, r24
    14a8:	90 93 f8 04 	sts	0x04F8, r25	; 0x8004f8 <_ZZ11__vector_18E4buff+0x1>
    14ac:	80 93 f7 04 	sts	0x04F7, r24	; 0x8004f7 <_ZZ11__vector_18E4buff>
    14b0:	89 2b       	or	r24, r25
    14b2:	09 f4       	brne	.+2      	; 0x14b6 <__vector_18+0x4c>
    14b4:	62 c1       	rjmp	.+708    	; 0x177a <__vector_18+0x310>
    14b6:	81 2f       	mov	r24, r17
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	0e 94 00 2e 	call	0x5c00	; 0x5c00 <toupper>
    14be:	9c 01       	movw	r18, r24
    14c0:	80 91 f6 04 	lds	r24, 0x04F6	; 0x8004f6 <_ZZ11__vector_18E11ignoreCount>
    14c4:	88 23       	and	r24, r24
    14c6:	21 f0       	breq	.+8      	; 0x14d0 <__vector_18+0x66>
    14c8:	81 50       	subi	r24, 0x01	; 1
    14ca:	80 93 f6 04 	sts	0x04F6, r24	; 0x8004f6 <_ZZ11__vector_18E11ignoreCount>
    14ce:	55 c1       	rjmp	.+682    	; 0x177a <__vector_18+0x310>
    14d0:	2b 31       	cpi	r18, 0x1B	; 27
    14d2:	21 f4       	brne	.+8      	; 0x14dc <__vector_18+0x72>
    14d4:	82 e0       	ldi	r24, 0x02	; 2
    14d6:	80 93 f6 04 	sts	0x04F6, r24	; 0x8004f6 <_ZZ11__vector_18E11ignoreCount>
    14da:	4f c1       	rjmp	.+670    	; 0x177a <__vector_18+0x310>
    14dc:	2d 30       	cpi	r18, 0x0D	; 13
    14de:	09 f0       	breq	.+2      	; 0x14e2 <__vector_18+0x78>
    14e0:	3f c0       	rjmp	.+126    	; 0x1560 <__vector_18+0xf6>
    14e2:	80 91 b5 04 	lds	r24, 0x04B5	; 0x8004b5 <_ZZ11__vector_18E13receiving_msg>
    14e6:	88 23       	and	r24, r24
    14e8:	31 f1       	breq	.+76     	; 0x1536 <__vector_18+0xcc>
    14ea:	e0 91 f5 04 	lds	r30, 0x04F5	; 0x8004f5 <_ZZ11__vector_18E9charIndex>
    14ee:	ee 23       	and	r30, r30
    14f0:	f9 f0       	breq	.+62     	; 0x1530 <__vector_18+0xc6>
    14f2:	82 e0       	ldi	r24, 0x02	; 2
    14f4:	88 83       	st	Y, r24
    14f6:	80 91 b3 04 	lds	r24, 0x04B3	; 0x8004b3 <_ZZ11__vector_18E6msg_ID>
    14fa:	90 91 b4 04 	lds	r25, 0x04B4	; 0x8004b4 <_ZZ11__vector_18E6msg_ID+0x1>
    14fe:	9a 83       	std	Y+2, r25	; 0x02
    1500:	89 83       	std	Y+1, r24	; 0x01
    1502:	80 91 b2 04 	lds	r24, 0x04B2	; 0x8004b2 <_ZZ11__vector_18E11field_index>
    1506:	88 23       	and	r24, r24
    1508:	79 f0       	breq	.+30     	; 0x1528 <__vector_18+0xbe>
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	01 97       	sbiw	r24, 0x01	; 1
    150e:	40 91 b1 04 	lds	r20, 0x04B1	; 0x8004b1 <_ZZ11__vector_18E9field_len>
    1512:	54 e1       	ldi	r21, 0x14	; 20
    1514:	58 9f       	mul	r21, r24
    1516:	90 01       	movw	r18, r0
    1518:	59 9f       	mul	r21, r25
    151a:	30 0d       	add	r19, r0
    151c:	11 24       	eor	r1, r1
    151e:	c2 0f       	add	r28, r18
    1520:	d3 1f       	adc	r29, r19
    1522:	c4 0f       	add	r28, r20
    1524:	d1 1d       	adc	r29, r1
    1526:	1b 82       	std	Y+3, r1	; 0x03
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	ea 54       	subi	r30, 0x4A	; 74
    152c:	fb 4f       	sbci	r31, 0xFB	; 251
    152e:	10 82       	st	Z, r1
    1530:	0e 94 b1 09 	call	0x1362	; 0x1362 <_Z15lb_send_NewLinev>
    1534:	04 c0       	rjmp	.+8      	; 0x153e <__vector_18+0xd4>
    1536:	8f ef       	ldi	r24, 0xFF	; 255
    1538:	9f e7       	ldi	r25, 0x7F	; 127
    153a:	9a 83       	std	Y+2, r25	; 0x02
    153c:	89 83       	std	Y+1, r24	; 0x01
    153e:	10 92 f5 04 	sts	0x04F5, r1	; 0x8004f5 <_ZZ11__vector_18E9charIndex>
    1542:	10 92 b1 04 	sts	0x04B1, r1	; 0x8004b1 <_ZZ11__vector_18E9field_len>
    1546:	10 92 b4 04 	sts	0x04B4, r1	; 0x8004b4 <_ZZ11__vector_18E6msg_ID+0x1>
    154a:	10 92 b3 04 	sts	0x04B3, r1	; 0x8004b3 <_ZZ11__vector_18E6msg_ID>
    154e:	10 92 b2 04 	sts	0x04B2, r1	; 0x8004b2 <_ZZ11__vector_18E11field_index>
    1552:	10 92 f8 04 	sts	0x04F8, r1	; 0x8004f8 <_ZZ11__vector_18E4buff+0x1>
    1556:	10 92 f7 04 	sts	0x04F7, r1	; 0x8004f7 <_ZZ11__vector_18E4buff>
    155a:	10 92 b5 04 	sts	0x04B5, r1	; 0x8004b5 <_ZZ11__vector_18E13receiving_msg>
    155e:	0d c1       	rjmp	.+538    	; 0x177a <__vector_18+0x310>
    1560:	22 23       	and	r18, r18
    1562:	09 f4       	brne	.+2      	; 0x1566 <__vector_18+0xfc>
    1564:	0a c1       	rjmp	.+532    	; 0x177a <__vector_18+0x310>
    1566:	e0 91 f5 04 	lds	r30, 0x04F5	; 0x8004f5 <_ZZ11__vector_18E9charIndex>
    156a:	4e 2f       	mov	r20, r30
    156c:	50 e0       	ldi	r21, 0x00	; 0
    156e:	da 01       	movw	r26, r20
    1570:	aa 54       	subi	r26, 0x4A	; 74
    1572:	bb 4f       	sbci	r27, 0xFB	; 251
    1574:	2c 93       	st	X, r18
    1576:	ee 23       	and	r30, r30
    1578:	09 f4       	brne	.+2      	; 0x157c <__vector_18+0x112>
    157a:	d6 c0       	rjmp	.+428    	; 0x1728 <__vector_18+0x2be>
    157c:	2f 37       	cpi	r18, 0x7F	; 127
    157e:	09 f0       	breq	.+2      	; 0x1582 <__vector_18+0x118>
    1580:	5f c0       	rjmp	.+190    	; 0x1640 <__vector_18+0x1d6>
    1582:	e1 50       	subi	r30, 0x01	; 1
    1584:	e0 93 f5 04 	sts	0x04F5, r30	; 0x8004f5 <_ZZ11__vector_18E9charIndex>
    1588:	80 91 b2 04 	lds	r24, 0x04B2	; 0x8004b2 <_ZZ11__vector_18E11field_index>
    158c:	81 11       	cpse	r24, r1
    158e:	13 c0       	rjmp	.+38     	; 0x15b6 <__vector_18+0x14c>
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	ea 54       	subi	r30, 0x4A	; 74
    1594:	fb 4f       	sbci	r31, 0xFB	; 251
    1596:	40 81       	ld	r20, Z
    1598:	80 91 b3 04 	lds	r24, 0x04B3	; 0x8004b3 <_ZZ11__vector_18E6msg_ID>
    159c:	90 91 b4 04 	lds	r25, 0x04B4	; 0x8004b4 <_ZZ11__vector_18E6msg_ID+0x1>
    15a0:	84 1b       	sub	r24, r20
    15a2:	91 09       	sbc	r25, r1
    15a4:	6a e0       	ldi	r22, 0x0A	; 10
    15a6:	70 e0       	ldi	r23, 0x00	; 0
    15a8:	0e 94 16 2c 	call	0x582c	; 0x582c <__divmodhi4>
    15ac:	70 93 b4 04 	sts	0x04B4, r23	; 0x8004b4 <_ZZ11__vector_18E6msg_ID+0x1>
    15b0:	60 93 b3 04 	sts	0x04B3, r22	; 0x8004b3 <_ZZ11__vector_18E6msg_ID>
    15b4:	39 c0       	rjmp	.+114    	; 0x1628 <__vector_18+0x1be>
    15b6:	90 91 b1 04 	lds	r25, 0x04B1	; 0x8004b1 <_ZZ11__vector_18E9field_len>
    15ba:	99 23       	and	r25, r25
    15bc:	91 f0       	breq	.+36     	; 0x15e2 <__vector_18+0x178>
    15be:	4f ef       	ldi	r20, 0xFF	; 255
    15c0:	49 0f       	add	r20, r25
    15c2:	40 93 b1 04 	sts	0x04B1, r20	; 0x8004b1 <_ZZ11__vector_18E9field_len>
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	01 97       	sbiw	r24, 0x01	; 1
    15ca:	54 e1       	ldi	r21, 0x14	; 20
    15cc:	58 9f       	mul	r21, r24
    15ce:	b0 01       	movw	r22, r0
    15d0:	59 9f       	mul	r21, r25
    15d2:	70 0d       	add	r23, r0
    15d4:	11 24       	eor	r1, r1
    15d6:	c6 0f       	add	r28, r22
    15d8:	d7 1f       	adc	r29, r23
    15da:	c4 0f       	add	r28, r20
    15dc:	d1 1d       	adc	r29, r1
    15de:	1b 82       	std	Y+3, r1	; 0x03
    15e0:	23 c0       	rjmp	.+70     	; 0x1628 <__vector_18+0x1be>
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	ea 54       	subi	r30, 0x4A	; 74
    15e6:	fb 4f       	sbci	r31, 0xFB	; 251
    15e8:	90 81       	ld	r25, Z
    15ea:	90 32       	cpi	r25, 0x20	; 32
    15ec:	a1 f4       	brne	.+40     	; 0x1616 <__vector_18+0x1ac>
    15ee:	81 50       	subi	r24, 0x01	; 1
    15f0:	80 93 b2 04 	sts	0x04B2, r24	; 0x8004b2 <_ZZ11__vector_18E11field_index>
    15f4:	de 01       	movw	r26, r28
    15f6:	94 e1       	ldi	r25, 0x14	; 20
    15f8:	89 9f       	mul	r24, r25
    15fa:	a0 0d       	add	r26, r0
    15fc:	b1 1d       	adc	r27, r1
    15fe:	11 24       	eor	r1, r1
    1600:	13 96       	adiw	r26, 0x03	; 3
    1602:	fd 01       	movw	r30, r26
    1604:	01 90       	ld	r0, Z+
    1606:	00 20       	and	r0, r0
    1608:	e9 f7       	brne	.-6      	; 0x1604 <__vector_18+0x19a>
    160a:	31 97       	sbiw	r30, 0x01	; 1
    160c:	ea 1b       	sub	r30, r26
    160e:	fb 0b       	sbc	r31, r27
    1610:	e0 93 b1 04 	sts	0x04B1, r30	; 0x8004b1 <_ZZ11__vector_18E9field_len>
    1614:	09 c0       	rjmp	.+18     	; 0x1628 <__vector_18+0x1be>
    1616:	94 e1       	ldi	r25, 0x14	; 20
    1618:	89 9f       	mul	r24, r25
    161a:	c0 0d       	add	r28, r0
    161c:	d1 1d       	adc	r29, r1
    161e:	11 24       	eor	r1, r1
    1620:	1b 82       	std	Y+3, r1	; 0x03
    1622:	81 50       	subi	r24, 0x01	; 1
    1624:	80 93 b2 04 	sts	0x04B2, r24	; 0x8004b2 <_ZZ11__vector_18E11field_index>
    1628:	80 91 f5 04 	lds	r24, 0x04F5	; 0x8004f5 <_ZZ11__vector_18E9charIndex>
    162c:	e8 2f       	mov	r30, r24
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	ea 54       	subi	r30, 0x4A	; 74
    1632:	fb 4f       	sbci	r31, 0xFB	; 251
    1634:	10 82       	st	Z, r1
    1636:	81 11       	cpse	r24, r1
    1638:	93 c0       	rjmp	.+294    	; 0x1760 <__vector_18+0x2f6>
    163a:	10 92 b5 04 	sts	0x04B5, r1	; 0x8004b5 <_ZZ11__vector_18E13receiving_msg>
    163e:	90 c0       	rjmp	.+288    	; 0x1760 <__vector_18+0x2f6>
    1640:	20 32       	cpi	r18, 0x20	; 32
    1642:	79 f5       	brne	.+94     	; 0x16a2 <__vector_18+0x238>
    1644:	fa 01       	movw	r30, r20
    1646:	eb 54       	subi	r30, 0x4B	; 75
    1648:	fb 4f       	sbci	r31, 0xFB	; 251
    164a:	80 81       	ld	r24, Z
    164c:	80 32       	cpi	r24, 0x20	; 32
    164e:	09 f4       	brne	.+2      	; 0x1652 <__vector_18+0x1e8>
    1650:	94 c0       	rjmp	.+296    	; 0x177a <__vector_18+0x310>
    1652:	80 91 b2 04 	lds	r24, 0x04B2	; 0x8004b2 <_ZZ11__vector_18E11field_index>
    1656:	68 2f       	mov	r22, r24
    1658:	70 e0       	ldi	r23, 0x00	; 0
    165a:	fb 01       	movw	r30, r22
    165c:	31 96       	adiw	r30, 0x01	; 1
    165e:	33 97       	sbiw	r30, 0x03	; 3
    1660:	0c f0       	brlt	.+2      	; 0x1664 <__vector_18+0x1fa>
    1662:	8b c0       	rjmp	.+278    	; 0x177a <__vector_18+0x310>
    1664:	88 23       	and	r24, r24
    1666:	79 f0       	breq	.+30     	; 0x1686 <__vector_18+0x21c>
    1668:	61 50       	subi	r22, 0x01	; 1
    166a:	71 09       	sbc	r23, r1
    166c:	90 91 b1 04 	lds	r25, 0x04B1	; 0x8004b1 <_ZZ11__vector_18E9field_len>
    1670:	a4 e1       	ldi	r26, 0x14	; 20
    1672:	a6 9f       	mul	r26, r22
    1674:	f0 01       	movw	r30, r0
    1676:	a7 9f       	mul	r26, r23
    1678:	f0 0d       	add	r31, r0
    167a:	11 24       	eor	r1, r1
    167c:	ce 0f       	add	r28, r30
    167e:	df 1f       	adc	r29, r31
    1680:	c9 0f       	add	r28, r25
    1682:	d1 1d       	adc	r29, r1
    1684:	1b 82       	std	Y+3, r1	; 0x03
    1686:	8f 5f       	subi	r24, 0xFF	; 255
    1688:	80 93 b2 04 	sts	0x04B2, r24	; 0x8004b2 <_ZZ11__vector_18E11field_index>
    168c:	10 92 b1 04 	sts	0x04B1, r1	; 0x8004b1 <_ZZ11__vector_18E9field_len>
    1690:	4f 5f       	subi	r20, 0xFF	; 255
    1692:	5f 4f       	sbci	r21, 0xFF	; 255
    1694:	4e 33       	cpi	r20, 0x3E	; 62
    1696:	51 05       	cpc	r21, r1
    1698:	0c f0       	brlt	.+2      	; 0x169c <__vector_18+0x232>
    169a:	4e e3       	ldi	r20, 0x3E	; 62
    169c:	40 93 f5 04 	sts	0x04F5, r20	; 0x8004f5 <_ZZ11__vector_18E9charIndex>
    16a0:	5f c0       	rjmp	.+190    	; 0x1760 <__vector_18+0x2f6>
    16a2:	80 91 b1 04 	lds	r24, 0x04B1	; 0x8004b1 <_ZZ11__vector_18E9field_len>
    16a6:	84 31       	cpi	r24, 0x14	; 20
    16a8:	08 f0       	brcs	.+2      	; 0x16ac <__vector_18+0x242>
    16aa:	67 c0       	rjmp	.+206    	; 0x177a <__vector_18+0x310>
    16ac:	40 91 b2 04 	lds	r20, 0x04B2	; 0x8004b2 <_ZZ11__vector_18E11field_index>
    16b0:	41 11       	cpse	r20, r1
    16b2:	19 c0       	rjmp	.+50     	; 0x16e6 <__vector_18+0x27c>
    16b4:	40 91 b3 04 	lds	r20, 0x04B3	; 0x8004b3 <_ZZ11__vector_18E6msg_ID>
    16b8:	50 91 b4 04 	lds	r21, 0x04B4	; 0x8004b4 <_ZZ11__vector_18E6msg_ID+0x1>
    16bc:	ba 01       	movw	r22, r20
    16be:	66 0f       	add	r22, r22
    16c0:	77 1f       	adc	r23, r23
    16c2:	44 0f       	add	r20, r20
    16c4:	55 1f       	adc	r21, r21
    16c6:	44 0f       	add	r20, r20
    16c8:	55 1f       	adc	r21, r21
    16ca:	44 0f       	add	r20, r20
    16cc:	55 1f       	adc	r21, r21
    16ce:	46 0f       	add	r20, r22
    16d0:	57 1f       	adc	r21, r23
    16d2:	42 0f       	add	r20, r18
    16d4:	51 1d       	adc	r21, r1
    16d6:	50 93 b4 04 	sts	0x04B4, r21	; 0x8004b4 <_ZZ11__vector_18E6msg_ID+0x1>
    16da:	40 93 b3 04 	sts	0x04B3, r20	; 0x8004b3 <_ZZ11__vector_18E6msg_ID>
    16de:	8f 5f       	subi	r24, 0xFF	; 255
    16e0:	80 93 b1 04 	sts	0x04B1, r24	; 0x8004b1 <_ZZ11__vector_18E9field_len>
    16e4:	16 c0       	rjmp	.+44     	; 0x1712 <__vector_18+0x2a8>
    16e6:	50 e0       	ldi	r21, 0x00	; 0
    16e8:	41 50       	subi	r20, 0x01	; 1
    16ea:	51 09       	sbc	r21, r1
    16ec:	91 e0       	ldi	r25, 0x01	; 1
    16ee:	98 0f       	add	r25, r24
    16f0:	90 93 b1 04 	sts	0x04B1, r25	; 0x8004b1 <_ZZ11__vector_18E9field_len>
    16f4:	e4 e1       	ldi	r30, 0x14	; 20
    16f6:	e4 9f       	mul	r30, r20
    16f8:	b0 01       	movw	r22, r0
    16fa:	e5 9f       	mul	r30, r21
    16fc:	70 0d       	add	r23, r0
    16fe:	11 24       	eor	r1, r1
    1700:	c6 0f       	add	r28, r22
    1702:	d7 1f       	adc	r29, r23
    1704:	fe 01       	movw	r30, r28
    1706:	e8 0f       	add	r30, r24
    1708:	f1 1d       	adc	r31, r1
    170a:	23 83       	std	Z+3, r18	; 0x03
    170c:	c9 0f       	add	r28, r25
    170e:	d1 1d       	adc	r29, r1
    1710:	1b 82       	std	Y+3, r1	; 0x03
    1712:	80 91 f5 04 	lds	r24, 0x04F5	; 0x8004f5 <_ZZ11__vector_18E9charIndex>
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	01 96       	adiw	r24, 0x01	; 1
    171a:	8e 33       	cpi	r24, 0x3E	; 62
    171c:	91 05       	cpc	r25, r1
    171e:	0c f0       	brlt	.+2      	; 0x1722 <__vector_18+0x2b8>
    1720:	8e e3       	ldi	r24, 0x3E	; 62
    1722:	80 93 f5 04 	sts	0x04F5, r24	; 0x8004f5 <_ZZ11__vector_18E9charIndex>
    1726:	1c c0       	rjmp	.+56     	; 0x1760 <__vector_18+0x2f6>
    1728:	2f 37       	cpi	r18, 0x7F	; 127
    172a:	41 f4       	brne	.+16     	; 0x173c <__vector_18+0x2d2>
    172c:	80 91 b3 04 	lds	r24, 0x04B3	; 0x8004b3 <_ZZ11__vector_18E6msg_ID>
    1730:	90 91 b4 04 	lds	r25, 0x04B4	; 0x8004b4 <_ZZ11__vector_18E6msg_ID+0x1>
    1734:	18 16       	cp	r1, r24
    1736:	19 06       	cpc	r1, r25
    1738:	bc f0       	brlt	.+46     	; 0x1768 <__vector_18+0x2fe>
    173a:	1b c0       	rjmp	.+54     	; 0x1772 <__vector_18+0x308>
    173c:	20 32       	cpi	r18, 0x20	; 32
    173e:	e9 f0       	breq	.+58     	; 0x177a <__vector_18+0x310>
    1740:	10 92 b2 04 	sts	0x04B2, r1	; 0x8004b2 <_ZZ11__vector_18E11field_index>
    1744:	c9 01       	movw	r24, r18
    1746:	99 27       	eor	r25, r25
    1748:	90 93 b4 04 	sts	0x04B4, r25	; 0x8004b4 <_ZZ11__vector_18E6msg_ID+0x1>
    174c:	80 93 b3 04 	sts	0x04B3, r24	; 0x8004b3 <_ZZ11__vector_18E6msg_ID>
    1750:	1b 82       	std	Y+3, r1	; 0x03
    1752:	1f 8a       	std	Y+23, r1	; 0x17
    1754:	1b a6       	std	Y+43, r1	; 0x2b
    1756:	81 e0       	ldi	r24, 0x01	; 1
    1758:	80 93 b5 04 	sts	0x04B5, r24	; 0x8004b5 <_ZZ11__vector_18E13receiving_msg>
    175c:	80 93 f5 04 	sts	0x04F5, r24	; 0x8004f5 <_ZZ11__vector_18E9charIndex>
    1760:	82 2f       	mov	r24, r18
    1762:	0e 94 ba 09 	call	0x1374	; 0x1374 <_Z12lb_echo_charh>
    1766:	09 c0       	rjmp	.+18     	; 0x177a <__vector_18+0x310>
    1768:	10 92 b4 04 	sts	0x04B4, r1	; 0x8004b4 <_ZZ11__vector_18E6msg_ID+0x1>
    176c:	10 92 b3 04 	sts	0x04B3, r1	; 0x8004b3 <_ZZ11__vector_18E6msg_ID>
    1770:	f7 cf       	rjmp	.-18     	; 0x1760 <__vector_18+0x2f6>
    1772:	10 92 b4 04 	sts	0x04B4, r1	; 0x8004b4 <_ZZ11__vector_18E6msg_ID+0x1>
    1776:	10 92 b3 04 	sts	0x04B3, r1	; 0x8004b3 <_ZZ11__vector_18E6msg_ID>
    177a:	ff 91       	pop	r31
    177c:	ef 91       	pop	r30
    177e:	df 91       	pop	r29
    1780:	cf 91       	pop	r28
    1782:	bf 91       	pop	r27
    1784:	af 91       	pop	r26
    1786:	9f 91       	pop	r25
    1788:	8f 91       	pop	r24
    178a:	7f 91       	pop	r23
    178c:	6f 91       	pop	r22
    178e:	5f 91       	pop	r21
    1790:	4f 91       	pop	r20
    1792:	3f 91       	pop	r19
    1794:	2f 91       	pop	r18
    1796:	1f 91       	pop	r17
    1798:	0f 90       	pop	r0
    179a:	0f be       	out	0x3f, r0	; 63
    179c:	0f 90       	pop	r0
    179e:	1f 90       	pop	r1
    17a0:	18 95       	reti

000017a2 <__vector_19>:
    17a2:	1f 92       	push	r1
    17a4:	0f 92       	push	r0
    17a6:	0f b6       	in	r0, 0x3f	; 63
    17a8:	0f 92       	push	r0
    17aa:	11 24       	eor	r1, r1
    17ac:	2f 93       	push	r18
    17ae:	3f 93       	push	r19
    17b0:	4f 93       	push	r20
    17b2:	5f 93       	push	r21
    17b4:	6f 93       	push	r22
    17b6:	7f 93       	push	r23
    17b8:	8f 93       	push	r24
    17ba:	9f 93       	push	r25
    17bc:	af 93       	push	r26
    17be:	bf 93       	push	r27
    17c0:	ef 93       	push	r30
    17c2:	ff 93       	push	r31
    17c4:	80 91 af 04 	lds	r24, 0x04AF	; 0x8004af <_ZZ11__vector_19E4buff>
    17c8:	90 91 b0 04 	lds	r25, 0x04B0	; 0x8004b0 <_ZZ11__vector_19E4buff+0x1>
    17cc:	89 2b       	or	r24, r25
    17ce:	31 f4       	brne	.+12     	; 0x17dc <__vector_19+0x3a>
    17d0:	0e 94 62 08 	call	0x10c4	; 0x10c4 <_Z16nextFullTxBufferv>
    17d4:	90 93 b0 04 	sts	0x04B0, r25	; 0x8004b0 <_ZZ11__vector_19E4buff+0x1>
    17d8:	80 93 af 04 	sts	0x04AF, r24	; 0x8004af <_ZZ11__vector_19E4buff>
    17dc:	e0 91 af 04 	lds	r30, 0x04AF	; 0x8004af <_ZZ11__vector_19E4buff>
    17e0:	f0 91 b0 04 	lds	r31, 0x04B0	; 0x8004b0 <_ZZ11__vector_19E4buff+0x1>
    17e4:	80 91 ae 04 	lds	r24, 0x04AE	; 0x8004ae <_ZZ11__vector_19E9charIndex>
    17e8:	df 01       	movw	r26, r30
    17ea:	a8 0f       	add	r26, r24
    17ec:	b1 1d       	adc	r27, r1
    17ee:	9c 91       	ld	r25, X
    17f0:	99 23       	and	r25, r25
    17f2:	31 f0       	breq	.+12     	; 0x1800 <__vector_19+0x5e>
    17f4:	8f 5f       	subi	r24, 0xFF	; 255
    17f6:	80 93 ae 04 	sts	0x04AE, r24	; 0x8004ae <_ZZ11__vector_19E9charIndex>
    17fa:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    17fe:	0d c0       	rjmp	.+26     	; 0x181a <__vector_19+0x78>
    1800:	10 92 ae 04 	sts	0x04AE, r1	; 0x8004ae <_ZZ11__vector_19E9charIndex>
    1804:	10 82       	st	Z, r1
    1806:	0e 94 62 08 	call	0x10c4	; 0x10c4 <_Z16nextFullTxBufferv>
    180a:	90 93 b0 04 	sts	0x04B0, r25	; 0x8004b0 <_ZZ11__vector_19E4buff+0x1>
    180e:	80 93 af 04 	sts	0x04AF, r24	; 0x8004af <_ZZ11__vector_19E4buff>
    1812:	89 2b       	or	r24, r25
    1814:	11 f4       	brne	.+4      	; 0x181a <__vector_19+0x78>
    1816:	0e 94 1f 09 	call	0x123e	; 0x123e <_Z14linkbus_end_txv>
    181a:	ff 91       	pop	r31
    181c:	ef 91       	pop	r30
    181e:	bf 91       	pop	r27
    1820:	af 91       	pop	r26
    1822:	9f 91       	pop	r25
    1824:	8f 91       	pop	r24
    1826:	7f 91       	pop	r23
    1828:	6f 91       	pop	r22
    182a:	5f 91       	pop	r21
    182c:	4f 91       	pop	r20
    182e:	3f 91       	pop	r19
    1830:	2f 91       	pop	r18
    1832:	0f 90       	pop	r0
    1834:	0f be       	out	0x3f, r0	; 63
    1836:	0f 90       	pop	r0
    1838:	1f 90       	pop	r1
    183a:	18 95       	reti

0000183c <__vector_14>:
    183c:	1f 92       	push	r1
    183e:	0f 92       	push	r0
    1840:	0f b6       	in	r0, 0x3f	; 63
    1842:	0f 92       	push	r0
    1844:	11 24       	eor	r1, r1
    1846:	2f 93       	push	r18
    1848:	3f 93       	push	r19
    184a:	4f 93       	push	r20
    184c:	5f 93       	push	r21
    184e:	6f 93       	push	r22
    1850:	7f 93       	push	r23
    1852:	8f 93       	push	r24
    1854:	9f 93       	push	r25
    1856:	af 93       	push	r26
    1858:	bf 93       	push	r27
    185a:	ef 93       	push	r30
    185c:	ff 93       	push	r31
    185e:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <_ZZ11__vector_14E6toggle>
    1862:	91 e0       	ldi	r25, 0x01	; 1
    1864:	81 11       	cpse	r24, r1
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	90 93 a1 04 	sts	0x04A1, r25	; 0x8004a1 <_ZZ11__vector_14E6toggle>
    186c:	90 91 6e 05 	lds	r25, 0x056E	; 0x80056e <g_audio_tone_state>
    1870:	99 23       	and	r25, r25
    1872:	61 f0       	breq	.+24     	; 0x188c <__vector_14+0x50>
    1874:	81 11       	cpse	r24, r1
    1876:	05 c0       	rjmp	.+10     	; 0x1882 <__vector_14+0x46>
    1878:	61 e0       	ldi	r22, 0x01	; 1
    187a:	89 e0       	ldi	r24, 0x09	; 9
    187c:	0e 94 6f 02 	call	0x4de	; 0x4de <_Z12digitalWritehh>
    1880:	09 c0       	rjmp	.+18     	; 0x1894 <__vector_14+0x58>
    1882:	60 e0       	ldi	r22, 0x00	; 0
    1884:	89 e0       	ldi	r24, 0x09	; 9
    1886:	0e 94 6f 02 	call	0x4de	; 0x4de <_Z12digitalWritehh>
    188a:	04 c0       	rjmp	.+8      	; 0x1894 <__vector_14+0x58>
    188c:	60 e0       	ldi	r22, 0x00	; 0
    188e:	89 e0       	ldi	r24, 0x09	; 9
    1890:	0e 94 6f 02 	call	0x4de	; 0x4de <_Z12digitalWritehh>
    1894:	ff 91       	pop	r31
    1896:	ef 91       	pop	r30
    1898:	bf 91       	pop	r27
    189a:	af 91       	pop	r26
    189c:	9f 91       	pop	r25
    189e:	8f 91       	pop	r24
    18a0:	7f 91       	pop	r23
    18a2:	6f 91       	pop	r22
    18a4:	5f 91       	pop	r21
    18a6:	4f 91       	pop	r20
    18a8:	3f 91       	pop	r19
    18aa:	2f 91       	pop	r18
    18ac:	0f 90       	pop	r0
    18ae:	0f be       	out	0x3f, r0	; 63
    18b0:	0f 90       	pop	r0
    18b2:	1f 90       	pop	r1
    18b4:	18 95       	reti

000018b6 <__vector_11>:
    18b6:	1f 92       	push	r1
    18b8:	0f 92       	push	r0
    18ba:	0f b6       	in	r0, 0x3f	; 63
    18bc:	0f 92       	push	r0
    18be:	11 24       	eor	r1, r1
    18c0:	8f 93       	push	r24
    18c2:	9f 93       	push	r25
    18c4:	ef 93       	push	r30
    18c6:	ff 93       	push	r31
    18c8:	80 91 9d 05 	lds	r24, 0x059D	; 0x80059d <g_sendAMmodulation>
    18cc:	81 11       	cpse	r24, r1
    18ce:	2e c0       	rjmp	.+92     	; 0x192c <__vector_11+0x76>
    18d0:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <_ZZ11__vector_11E5index>
    18d4:	81 11       	cpse	r24, r1
    18d6:	2a c0       	rjmp	.+84     	; 0x192c <__vector_11+0x76>
    18d8:	80 91 9b 05 	lds	r24, 0x059B	; 0x80059b <g_sendAMmodulationConstantly>
    18dc:	88 23       	and	r24, r24
    18de:	91 f0       	breq	.+36     	; 0x1904 <__vector_11+0x4e>
    18e0:	34 c0       	rjmp	.+104    	; 0x194a <__vector_11+0x94>
    18e2:	10 92 a0 04 	sts	0x04A0, r1	; 0x8004a0 <_ZZ11__vector_11E5index>
    18e6:	98 b1       	in	r25, 0x08	; 8
    18e8:	8f 70       	andi	r24, 0x0F	; 15
    18ea:	90 7f       	andi	r25, 0xF0	; 240
    18ec:	89 2b       	or	r24, r25
    18ee:	88 b9       	out	0x08, r24	; 8
    18f0:	9b b1       	in	r25, 0x0b	; 11
    18f2:	80 91 9f 04 	lds	r24, 0x049F	; 0x80049f <_ZZ11__vector_11E11controlPins>
    18f6:	80 73       	andi	r24, 0x30	; 48
    18f8:	82 95       	swap	r24
    18fa:	8f 70       	andi	r24, 0x0F	; 15
    18fc:	9c 7f       	andi	r25, 0xFC	; 252
    18fe:	89 2b       	or	r24, r25
    1900:	8b b9       	out	0x0b, r24	; 11
    1902:	2b c0       	rjmp	.+86     	; 0x195a <__vector_11+0xa4>
    1904:	80 91 9f 04 	lds	r24, 0x049F	; 0x80049f <_ZZ11__vector_11E11controlPins>
    1908:	8f 33       	cpi	r24, 0x3F	; 63
    190a:	39 f1       	breq	.+78     	; 0x195a <__vector_11+0xa4>
    190c:	8f e3       	ldi	r24, 0x3F	; 63
    190e:	80 93 9f 04 	sts	0x049F, r24	; 0x80049f <_ZZ11__vector_11E11controlPins>
    1912:	88 b1       	in	r24, 0x08	; 8
    1914:	8f 60       	ori	r24, 0x0F	; 15
    1916:	88 b9       	out	0x08, r24	; 8
    1918:	9b b1       	in	r25, 0x0b	; 11
    191a:	80 91 9f 04 	lds	r24, 0x049F	; 0x80049f <_ZZ11__vector_11E11controlPins>
    191e:	80 73       	andi	r24, 0x30	; 48
    1920:	82 95       	swap	r24
    1922:	8f 70       	andi	r24, 0x0F	; 15
    1924:	9c 7f       	andi	r25, 0xFC	; 252
    1926:	89 2b       	or	r24, r25
    1928:	8b b9       	out	0x0b, r24	; 11
    192a:	17 c0       	rjmp	.+46     	; 0x195a <__vector_11+0xa4>
    192c:	e0 91 a0 04 	lds	r30, 0x04A0	; 0x8004a0 <_ZZ11__vector_11E5index>
    1930:	91 e0       	ldi	r25, 0x01	; 1
    1932:	9e 0f       	add	r25, r30
    1934:	90 93 a0 04 	sts	0x04A0, r25	; 0x8004a0 <_ZZ11__vector_11E5index>
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	e5 58       	subi	r30, 0x85	; 133
    193c:	fa 4f       	sbci	r31, 0xFA	; 250
    193e:	80 81       	ld	r24, Z
    1940:	80 93 9f 04 	sts	0x049F, r24	; 0x80049f <_ZZ11__vector_11E11controlPins>
    1944:	90 32       	cpi	r25, 0x20	; 32
    1946:	68 f6       	brcc	.-102    	; 0x18e2 <__vector_11+0x2c>
    1948:	ce cf       	rjmp	.-100    	; 0x18e6 <__vector_11+0x30>
    194a:	81 e0       	ldi	r24, 0x01	; 1
    194c:	80 93 a0 04 	sts	0x04A0, r24	; 0x8004a0 <_ZZ11__vector_11E5index>
    1950:	80 91 7b 05 	lds	r24, 0x057B	; 0x80057b <g_dataModulation>
    1954:	80 93 9f 04 	sts	0x049F, r24	; 0x80049f <_ZZ11__vector_11E11controlPins>
    1958:	c6 cf       	rjmp	.-116    	; 0x18e6 <__vector_11+0x30>
    195a:	ff 91       	pop	r31
    195c:	ef 91       	pop	r30
    195e:	9f 91       	pop	r25
    1960:	8f 91       	pop	r24
    1962:	0f 90       	pop	r0
    1964:	0f be       	out	0x3f, r0	; 63
    1966:	0f 90       	pop	r0
    1968:	1f 90       	pop	r1
    196a:	18 95       	reti

0000196c <_Z23clockConfigurationErrorv>:
    196c:	0f 93       	push	r16
    196e:	1f 93       	push	r17
    1970:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <g_transmissions_disabled>
    1974:	88 23       	and	r24, r24
    1976:	09 f4       	brne	.+2      	; 0x197a <_Z23clockConfigurationErrorv+0xe>
    1978:	61 c0       	rjmp	.+194    	; 0x1a3c <_Z23clockConfigurationErrorv+0xd0>
    197a:	80 91 9f 05 	lds	r24, 0x059F	; 0x80059f <g_event_finish_epoch>
    197e:	90 91 a0 05 	lds	r25, 0x05A0	; 0x8005a0 <g_event_finish_epoch+0x1>
    1982:	a0 91 a1 05 	lds	r26, 0x05A1	; 0x8005a1 <g_event_finish_epoch+0x2>
    1986:	b0 91 a2 05 	lds	r27, 0x05A2	; 0x8005a2 <g_event_finish_epoch+0x3>
    198a:	89 2b       	or	r24, r25
    198c:	8a 2b       	or	r24, r26
    198e:	8b 2b       	or	r24, r27
    1990:	09 f4       	brne	.+2      	; 0x1994 <_Z23clockConfigurationErrorv+0x28>
    1992:	4d c0       	rjmp	.+154    	; 0x1a2e <_Z23clockConfigurationErrorv+0xc2>
    1994:	80 91 9f 05 	lds	r24, 0x059F	; 0x80059f <g_event_finish_epoch>
    1998:	90 91 a0 05 	lds	r25, 0x05A0	; 0x8005a0 <g_event_finish_epoch+0x1>
    199c:	a0 91 a1 05 	lds	r26, 0x05A1	; 0x8005a1 <g_event_finish_epoch+0x2>
    19a0:	b0 91 a2 05 	lds	r27, 0x05A2	; 0x8005a2 <g_event_finish_epoch+0x3>
    19a4:	89 2b       	or	r24, r25
    19a6:	8a 2b       	or	r24, r26
    19a8:	8b 2b       	or	r24, r27
    19aa:	09 f4       	brne	.+2      	; 0x19ae <_Z23clockConfigurationErrorv+0x42>
    19ac:	42 c0       	rjmp	.+132    	; 0x1a32 <_Z23clockConfigurationErrorv+0xc6>
    19ae:	80 91 a7 05 	lds	r24, 0x05A7	; 0x8005a7 <g_current_epoch>
    19b2:	90 91 a8 05 	lds	r25, 0x05A8	; 0x8005a8 <g_current_epoch+0x1>
    19b6:	a0 91 a9 05 	lds	r26, 0x05A9	; 0x8005a9 <g_current_epoch+0x2>
    19ba:	b0 91 aa 05 	lds	r27, 0x05AA	; 0x8005aa <g_current_epoch+0x3>
    19be:	81 15       	cp	r24, r1
    19c0:	96 46       	sbci	r25, 0x66	; 102
    19c2:	ae 4e       	sbci	r26, 0xEE	; 238
    19c4:	bf 45       	sbci	r27, 0x5F	; 95
    19c6:	b8 f1       	brcs	.+110    	; 0x1a36 <_Z23clockConfigurationErrorv+0xca>
    19c8:	40 91 9f 05 	lds	r20, 0x059F	; 0x80059f <g_event_finish_epoch>
    19cc:	50 91 a0 05 	lds	r21, 0x05A0	; 0x8005a0 <g_event_finish_epoch+0x1>
    19d0:	60 91 a1 05 	lds	r22, 0x05A1	; 0x8005a1 <g_event_finish_epoch+0x2>
    19d4:	70 91 a2 05 	lds	r23, 0x05A2	; 0x8005a2 <g_event_finish_epoch+0x3>
    19d8:	80 91 a3 05 	lds	r24, 0x05A3	; 0x8005a3 <g_event_start_epoch>
    19dc:	90 91 a4 05 	lds	r25, 0x05A4	; 0x8005a4 <g_event_start_epoch+0x1>
    19e0:	a0 91 a5 05 	lds	r26, 0x05A5	; 0x8005a5 <g_event_start_epoch+0x2>
    19e4:	b0 91 a6 05 	lds	r27, 0x05A6	; 0x8005a6 <g_event_start_epoch+0x3>
    19e8:	84 17       	cp	r24, r20
    19ea:	95 07       	cpc	r25, r21
    19ec:	a6 07       	cpc	r26, r22
    19ee:	b7 07       	cpc	r27, r23
    19f0:	20 f5       	brcc	.+72     	; 0x1a3a <_Z23clockConfigurationErrorv+0xce>
    19f2:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <g_transmissions_disabled>
    19f6:	88 23       	and	r24, r24
    19f8:	c1 f0       	breq	.+48     	; 0x1a2a <_Z23clockConfigurationErrorv+0xbe>
    19fa:	00 91 a7 05 	lds	r16, 0x05A7	; 0x8005a7 <g_current_epoch>
    19fe:	10 91 a8 05 	lds	r17, 0x05A8	; 0x8005a8 <g_current_epoch+0x1>
    1a02:	20 91 a9 05 	lds	r18, 0x05A9	; 0x8005a9 <g_current_epoch+0x2>
    1a06:	30 91 aa 05 	lds	r19, 0x05AA	; 0x8005aa <g_current_epoch+0x3>
    1a0a:	40 91 9f 05 	lds	r20, 0x059F	; 0x80059f <g_event_finish_epoch>
    1a0e:	50 91 a0 05 	lds	r21, 0x05A0	; 0x8005a0 <g_event_finish_epoch+0x1>
    1a12:	60 91 a1 05 	lds	r22, 0x05A1	; 0x8005a1 <g_event_finish_epoch+0x2>
    1a16:	70 91 a2 05 	lds	r23, 0x05A2	; 0x8005a2 <g_event_finish_epoch+0x3>
    1a1a:	81 e0       	ldi	r24, 0x01	; 1
    1a1c:	40 17       	cp	r20, r16
    1a1e:	51 07       	cpc	r21, r17
    1a20:	62 07       	cpc	r22, r18
    1a22:	73 07       	cpc	r23, r19
    1a24:	58 f0       	brcs	.+22     	; 0x1a3c <_Z23clockConfigurationErrorv+0xd0>
    1a26:	80 e0       	ldi	r24, 0x00	; 0
    1a28:	09 c0       	rjmp	.+18     	; 0x1a3c <_Z23clockConfigurationErrorv+0xd0>
    1a2a:	80 e0       	ldi	r24, 0x00	; 0
    1a2c:	07 c0       	rjmp	.+14     	; 0x1a3c <_Z23clockConfigurationErrorv+0xd0>
    1a2e:	81 e0       	ldi	r24, 0x01	; 1
    1a30:	05 c0       	rjmp	.+10     	; 0x1a3c <_Z23clockConfigurationErrorv+0xd0>
    1a32:	81 e0       	ldi	r24, 0x01	; 1
    1a34:	03 c0       	rjmp	.+6      	; 0x1a3c <_Z23clockConfigurationErrorv+0xd0>
    1a36:	81 e0       	ldi	r24, 0x01	; 1
    1a38:	01 c0       	rjmp	.+2      	; 0x1a3c <_Z23clockConfigurationErrorv+0xd0>
    1a3a:	81 e0       	ldi	r24, 0x01	; 1
    1a3c:	1f 91       	pop	r17
    1a3e:	0f 91       	pop	r16
    1a40:	08 95       	ret

00001a42 <_Z13sendMorseToneh>:
    1a42:	90 91 6d 05 	lds	r25, 0x056D	; 0x80056d <g_lastSeconds>
    1a46:	91 11       	cpse	r25, r1
    1a48:	0a c0       	rjmp	.+20     	; 0x1a5e <_Z13sendMorseToneh+0x1c>
    1a4a:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <g_fox_tone_offset>
    1a4e:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <g_fox_tone_offset+0x1>
    1a52:	9f e2       	ldi	r25, 0x2F	; 47
    1a54:	92 1b       	sub	r25, r18
    1a56:	97 bd       	out	0x27, r25	; 39
    1a58:	80 93 6e 05 	sts	0x056E, r24	; 0x80056e <g_audio_tone_state>
    1a5c:	08 95       	ret
    1a5e:	8f e2       	ldi	r24, 0x2F	; 47
    1a60:	87 bd       	out	0x27, r24	; 39
    1a62:	10 92 6e 05 	sts	0x056E, r1	; 0x80056e <g_audio_tone_state>
    1a66:	08 95       	ret

00001a68 <__vector_8>:
    1a68:	1f 92       	push	r1
    1a6a:	0f 92       	push	r0
    1a6c:	0f b6       	in	r0, 0x3f	; 63
    1a6e:	0f 92       	push	r0
    1a70:	11 24       	eor	r1, r1
    1a72:	2f 93       	push	r18
    1a74:	3f 93       	push	r19
    1a76:	4f 93       	push	r20
    1a78:	5f 93       	push	r21
    1a7a:	6f 93       	push	r22
    1a7c:	7f 93       	push	r23
    1a7e:	8f 93       	push	r24
    1a80:	9f 93       	push	r25
    1a82:	af 93       	push	r26
    1a84:	bf 93       	push	r27
    1a86:	ef 93       	push	r30
    1a88:	ff 93       	push	r31
    1a8a:	cf 93       	push	r28
    1a8c:	df 93       	push	r29
    1a8e:	00 d0       	rcall	.+0      	; 0x1a90 <__vector_8+0x28>
    1a90:	cd b7       	in	r28, 0x3d	; 61
    1a92:	de b7       	in	r29, 0x3e	; 62
    1a94:	80 91 23 05 	lds	r24, 0x0523	; 0x800523 <g_tick_count>
    1a98:	90 91 24 05 	lds	r25, 0x0524	; 0x800524 <g_tick_count+0x1>
    1a9c:	a0 91 25 05 	lds	r26, 0x0525	; 0x800525 <g_tick_count+0x2>
    1aa0:	b0 91 26 05 	lds	r27, 0x0526	; 0x800526 <g_tick_count+0x3>
    1aa4:	01 96       	adiw	r24, 0x01	; 1
    1aa6:	a1 1d       	adc	r26, r1
    1aa8:	b1 1d       	adc	r27, r1
    1aaa:	80 93 23 05 	sts	0x0523, r24	; 0x800523 <g_tick_count>
    1aae:	90 93 24 05 	sts	0x0524, r25	; 0x800524 <g_tick_count+0x1>
    1ab2:	a0 93 25 05 	sts	0x0525, r26	; 0x800525 <g_tick_count+0x2>
    1ab6:	b0 93 26 05 	sts	0x0526, r27	; 0x800526 <g_tick_count+0x3>
    1aba:	81 e0       	ldi	r24, 0x01	; 1
    1abc:	89 83       	std	Y+1, r24	; 0x01
    1abe:	1a 82       	std	Y+2, r1	; 0x02
    1ac0:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <g_sync_enabled>
    1ac4:	88 23       	and	r24, r24
    1ac6:	91 f1       	breq	.+100    	; 0x1b2c <__vector_8+0xc4>
    1ac8:	84 e0       	ldi	r24, 0x04	; 4
    1aca:	0e 94 24 02 	call	0x448	; 0x448 <_Z11digitalReadh>
    1ace:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <_ZZ10__vector_8E15holdButtonState>
    1ad2:	89 13       	cpse	r24, r25
    1ad4:	25 c0       	rjmp	.+74     	; 0x1b20 <__vector_8+0xb8>
    1ad6:	20 91 6b 05 	lds	r18, 0x056B	; 0x80056b <g_sync_pin_timer>
    1ada:	30 91 6c 05 	lds	r19, 0x056C	; 0x80056c <g_sync_pin_timer+0x1>
    1ade:	2b 3b       	cpi	r18, 0xBB	; 187
    1ae0:	30 41       	sbci	r19, 0x10	; 16
    1ae2:	54 f4       	brge	.+20     	; 0x1af8 <__vector_8+0x90>
    1ae4:	20 91 6b 05 	lds	r18, 0x056B	; 0x80056b <g_sync_pin_timer>
    1ae8:	30 91 6c 05 	lds	r19, 0x056C	; 0x80056c <g_sync_pin_timer+0x1>
    1aec:	2f 5f       	subi	r18, 0xFF	; 255
    1aee:	3f 4f       	sbci	r19, 0xFF	; 255
    1af0:	30 93 6c 05 	sts	0x056C, r19	; 0x80056c <g_sync_pin_timer+0x1>
    1af4:	20 93 6b 05 	sts	0x056B, r18	; 0x80056b <g_sync_pin_timer>
    1af8:	20 91 6b 05 	lds	r18, 0x056B	; 0x80056b <g_sync_pin_timer>
    1afc:	30 91 6c 05 	lds	r19, 0x056C	; 0x80056c <g_sync_pin_timer+0x1>
    1b00:	25 36       	cpi	r18, 0x65	; 101
    1b02:	31 05       	cpc	r19, r1
    1b04:	9c f0       	brlt	.+38     	; 0x1b2c <__vector_8+0xc4>
    1b06:	81 30       	cpi	r24, 0x01	; 1
    1b08:	09 f4       	brne	.+2      	; 0x1b0c <__vector_8+0xa4>
    1b0a:	a6 c1       	rjmp	.+844    	; 0x1e58 <__vector_8+0x3f0>
    1b0c:	92 e0       	ldi	r25, 0x02	; 2
    1b0e:	90 93 6a 05 	sts	0x056A, r25	; 0x80056a <g_sync_pin_stable>
    1b12:	81 11       	cpse	r24, r1
    1b14:	0b c0       	rjmp	.+22     	; 0x1b2c <__vector_8+0xc4>
    1b16:	61 e0       	ldi	r22, 0x01	; 1
    1b18:	87 e0       	ldi	r24, 0x07	; 7
    1b1a:	0e 94 6f 02 	call	0x4de	; 0x4de <_Z12digitalWritehh>
    1b1e:	06 c0       	rjmp	.+12     	; 0x1b2c <__vector_8+0xc4>
    1b20:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <_ZZ10__vector_8E15holdButtonState>
    1b24:	10 92 6c 05 	sts	0x056C, r1	; 0x80056c <g_sync_pin_timer+0x1>
    1b28:	10 92 6b 05 	sts	0x056B, r1	; 0x80056b <g_sync_pin_timer>
    1b2c:	80 91 69 05 	lds	r24, 0x0569	; 0x800569 <g_dtmf_detected>
    1b30:	81 11       	cpse	r24, r1
    1b32:	04 c0       	rjmp	.+8      	; 0x1b3c <__vector_8+0xd4>
    1b34:	80 91 5e 05 	lds	r24, 0x055E	; 0x80055e <g_config_error>
    1b38:	88 23       	and	r24, r24
    1b3a:	c1 f0       	breq	.+48     	; 0x1b6c <__vector_8+0x104>
    1b3c:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <_ZZ10__vector_8E13blink_counter>
    1b40:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <_ZZ10__vector_8E13blink_counter+0x1>
    1b44:	22 3e       	cpi	r18, 0xE2	; 226
    1b46:	8f ef       	ldi	r24, 0xFF	; 255
    1b48:	38 07       	cpc	r19, r24
    1b4a:	34 f4       	brge	.+12     	; 0x1b58 <__vector_8+0xf0>
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <_ZZ10__vector_8E21blink_count_direction+0x1>
    1b54:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <_ZZ10__vector_8E21blink_count_direction>
    1b58:	2f 31       	cpi	r18, 0x1F	; 31
    1b5a:	31 05       	cpc	r19, r1
    1b5c:	a4 f0       	brlt	.+40     	; 0x1b86 <__vector_8+0x11e>
    1b5e:	8f ef       	ldi	r24, 0xFF	; 255
    1b60:	9f ef       	ldi	r25, 0xFF	; 255
    1b62:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <_ZZ10__vector_8E21blink_count_direction+0x1>
    1b66:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <_ZZ10__vector_8E21blink_count_direction>
    1b6a:	0d c0       	rjmp	.+26     	; 0x1b86 <__vector_8+0x11e>
    1b6c:	81 e0       	ldi	r24, 0x01	; 1
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <_ZZ10__vector_8E21blink_count_direction+0x1>
    1b74:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <_ZZ10__vector_8E21blink_count_direction>
    1b78:	8f e1       	ldi	r24, 0x1F	; 31
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <_ZZ10__vector_8E13blink_counter+0x1>
    1b80:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <_ZZ10__vector_8E13blink_counter>
    1b84:	10 c0       	rjmp	.+32     	; 0x1ba6 <__vector_8+0x13e>
    1b86:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <_ZZ10__vector_8E21blink_count_direction>
    1b8a:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <_ZZ10__vector_8E21blink_count_direction+0x1>
    1b8e:	82 0f       	add	r24, r18
    1b90:	93 1f       	adc	r25, r19
    1b92:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <_ZZ10__vector_8E13blink_counter+0x1>
    1b96:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <_ZZ10__vector_8E13blink_counter>
    1b9a:	99 23       	and	r25, r25
    1b9c:	24 f4       	brge	.+8      	; 0x1ba6 <__vector_8+0x13e>
    1b9e:	81 e0       	ldi	r24, 0x01	; 1
    1ba0:	80 93 ab 05 	sts	0x05AB, r24	; 0x8005ab <g_blinky_time>
    1ba4:	02 c0       	rjmp	.+4      	; 0x1baa <__vector_8+0x142>
    1ba6:	10 92 ab 05 	sts	0x05AB, r1	; 0x8005ab <g_blinky_time>
    1baa:	80 91 f9 04 	lds	r24, 0x04F9	; 0x8004f9 <_ZL16g_LEDs_Timed_Out>
    1bae:	81 11       	cpse	r24, r1
    1bb0:	24 c0       	rjmp	.+72     	; 0x1bfa <__vector_8+0x192>
    1bb2:	80 91 6a 05 	lds	r24, 0x056A	; 0x80056a <g_sync_pin_stable>
    1bb6:	82 30       	cpi	r24, 0x02	; 2
    1bb8:	09 f0       	breq	.+2      	; 0x1bbc <__vector_8+0x154>
    1bba:	52 c1       	rjmp	.+676    	; 0x1e60 <__vector_8+0x3f8>
    1bbc:	1e c0       	rjmp	.+60     	; 0x1bfa <__vector_8+0x192>
    1bbe:	80 91 ab 05 	lds	r24, 0x05AB	; 0x8005ab <g_blinky_time>
    1bc2:	88 23       	and	r24, r24
    1bc4:	29 f0       	breq	.+10     	; 0x1bd0 <__vector_8+0x168>
    1bc6:	60 e0       	ldi	r22, 0x00	; 0
    1bc8:	8d e0       	ldi	r24, 0x0D	; 13
    1bca:	0e 94 6f 02 	call	0x4de	; 0x4de <_Z12digitalWritehh>
    1bce:	04 c0       	rjmp	.+8      	; 0x1bd8 <__vector_8+0x170>
    1bd0:	61 e0       	ldi	r22, 0x01	; 1
    1bd2:	8d e0       	ldi	r24, 0x0D	; 13
    1bd4:	0e 94 6f 02 	call	0x4de	; 0x4de <_Z12digitalWritehh>
    1bd8:	80 91 5e 05 	lds	r24, 0x055E	; 0x80055e <g_config_error>
    1bdc:	88 23       	and	r24, r24
    1bde:	69 f0       	breq	.+26     	; 0x1bfa <__vector_8+0x192>
    1be0:	80 91 ab 05 	lds	r24, 0x05AB	; 0x8005ab <g_blinky_time>
    1be4:	88 23       	and	r24, r24
    1be6:	29 f0       	breq	.+10     	; 0x1bf2 <__vector_8+0x18a>
    1be8:	60 e0       	ldi	r22, 0x00	; 0
    1bea:	87 e0       	ldi	r24, 0x07	; 7
    1bec:	0e 94 6f 02 	call	0x4de	; 0x4de <_Z12digitalWritehh>
    1bf0:	04 c0       	rjmp	.+8      	; 0x1bfa <__vector_8+0x192>
    1bf2:	61 e0       	ldi	r22, 0x01	; 1
    1bf4:	87 e0       	ldi	r24, 0x07	; 7
    1bf6:	0e 94 6f 02 	call	0x4de	; 0x4de <_Z12digitalWritehh>
    1bfa:	80 91 2f 05 	lds	r24, 0x052F	; 0x80052f <g_enable_start_timer>
    1bfe:	88 23       	and	r24, r24
    1c00:	09 f4       	brne	.+2      	; 0x1c04 <__vector_8+0x19c>
    1c02:	58 c0       	rjmp	.+176    	; 0x1cb4 <__vector_8+0x24c>
    1c04:	80 91 6d 05 	lds	r24, 0x056D	; 0x80056d <g_lastSeconds>
    1c08:	90 91 ad 04 	lds	r25, 0x04AD	; 0x8004ad <_ZZ10__vector_8E14hold_last10sec>
    1c0c:	98 17       	cp	r25, r24
    1c0e:	b1 f0       	breq	.+44     	; 0x1c3c <__vector_8+0x1d4>
    1c10:	80 91 6d 05 	lds	r24, 0x056D	; 0x80056d <g_lastSeconds>
    1c14:	80 93 ad 04 	sts	0x04AD, r24	; 0x8004ad <_ZZ10__vector_8E14hold_last10sec>
    1c18:	88 23       	and	r24, r24
    1c1a:	49 f0       	breq	.+18     	; 0x1c2e <__vector_8+0x1c6>
    1c1c:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <_ZZ10__vector_8E9playMorse>
    1c20:	83 e6       	ldi	r24, 0x63	; 99
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	90 93 ac 04 	sts	0x04AC, r25	; 0x8004ac <_ZZ10__vector_8E13starting_blip+0x1>
    1c28:	80 93 ab 04 	sts	0x04AB, r24	; 0x8004ab <_ZZ10__vector_8E13starting_blip>
    1c2c:	14 c0       	rjmp	.+40     	; 0x1c56 <__vector_8+0x1ee>
    1c2e:	10 92 ac 04 	sts	0x04AC, r1	; 0x8004ac <_ZZ10__vector_8E13starting_blip+0x1>
    1c32:	10 92 ab 04 	sts	0x04AB, r1	; 0x8004ab <_ZZ10__vector_8E13starting_blip>
    1c36:	87 e2       	ldi	r24, 0x27	; 39
    1c38:	9b e0       	ldi	r25, 0x0B	; 11
    1c3a:	28 c0       	rjmp	.+80     	; 0x1c8c <__vector_8+0x224>
    1c3c:	80 91 ab 04 	lds	r24, 0x04AB	; 0x8004ab <_ZZ10__vector_8E13starting_blip>
    1c40:	90 91 ac 04 	lds	r25, 0x04AC	; 0x8004ac <_ZZ10__vector_8E13starting_blip+0x1>
    1c44:	00 97       	sbiw	r24, 0x00	; 0
    1c46:	e1 f0       	breq	.+56     	; 0x1c80 <__vector_8+0x218>
    1c48:	01 97       	sbiw	r24, 0x01	; 1
    1c4a:	90 93 ac 04 	sts	0x04AC, r25	; 0x8004ac <_ZZ10__vector_8E13starting_blip+0x1>
    1c4e:	80 93 ab 04 	sts	0x04AB, r24	; 0x8004ab <_ZZ10__vector_8E13starting_blip>
    1c52:	89 2b       	or	r24, r25
    1c54:	81 f0       	breq	.+32     	; 0x1c76 <__vector_8+0x20e>
    1c56:	80 91 6d 05 	lds	r24, 0x056D	; 0x80056d <g_lastSeconds>
    1c5a:	86 30       	cpi	r24, 0x06	; 6
    1c5c:	30 f0       	brcs	.+12     	; 0x1c6a <__vector_8+0x202>
    1c5e:	8f e3       	ldi	r24, 0x3F	; 63
    1c60:	87 bd       	out	0x27, r24	; 39
    1c62:	81 e0       	ldi	r24, 0x01	; 1
    1c64:	80 93 6e 05 	sts	0x056E, r24	; 0x80056e <g_audio_tone_state>
    1c68:	25 c0       	rjmp	.+74     	; 0x1cb4 <__vector_8+0x24c>
    1c6a:	8f e1       	ldi	r24, 0x1F	; 31
    1c6c:	87 bd       	out	0x27, r24	; 39
    1c6e:	81 e0       	ldi	r24, 0x01	; 1
    1c70:	80 93 6e 05 	sts	0x056E, r24	; 0x80056e <g_audio_tone_state>
    1c74:	1f c0       	rjmp	.+62     	; 0x1cb4 <__vector_8+0x24c>
    1c76:	8f e2       	ldi	r24, 0x2F	; 47
    1c78:	87 bd       	out	0x27, r24	; 39
    1c7a:	10 92 6e 05 	sts	0x056E, r1	; 0x80056e <g_audio_tone_state>
    1c7e:	1a c0       	rjmp	.+52     	; 0x1cb4 <__vector_8+0x24c>
    1c80:	80 91 a9 04 	lds	r24, 0x04A9	; 0x8004a9 <_ZZ10__vector_8E13starting_boop>
    1c84:	90 91 aa 04 	lds	r25, 0x04AA	; 0x8004aa <_ZZ10__vector_8E13starting_boop+0x1>
    1c88:	00 97       	sbiw	r24, 0x00	; 0
    1c8a:	a1 f0       	breq	.+40     	; 0x1cb4 <__vector_8+0x24c>
    1c8c:	01 97       	sbiw	r24, 0x01	; 1
    1c8e:	90 93 aa 04 	sts	0x04AA, r25	; 0x8004aa <_ZZ10__vector_8E13starting_boop+0x1>
    1c92:	80 93 a9 04 	sts	0x04A9, r24	; 0x8004a9 <_ZZ10__vector_8E13starting_boop>
    1c96:	89 2b       	or	r24, r25
    1c98:	41 f4       	brne	.+16     	; 0x1caa <__vector_8+0x242>
    1c9a:	8f e2       	ldi	r24, 0x2F	; 47
    1c9c:	87 bd       	out	0x27, r24	; 39
    1c9e:	10 92 6e 05 	sts	0x056E, r1	; 0x80056e <g_audio_tone_state>
    1ca2:	81 e0       	ldi	r24, 0x01	; 1
    1ca4:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <_ZZ10__vector_8E9playMorse>
    1ca8:	05 c0       	rjmp	.+10     	; 0x1cb4 <__vector_8+0x24c>
    1caa:	8f e4       	ldi	r24, 0x4F	; 79
    1cac:	87 bd       	out	0x27, r24	; 39
    1cae:	81 e0       	ldi	r24, 0x01	; 1
    1cb0:	80 93 6e 05 	sts	0x056E, r24	; 0x80056e <g_audio_tone_state>
    1cb4:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <g_transmissions_disabled>
    1cb8:	81 11       	cpse	r24, r1
    1cba:	d7 c0       	rjmp	.+430    	; 0x1e6a <__vector_8+0x402>
    1cbc:	80 91 af 05 	lds	r24, 0x05AF	; 0x8005af <g_on_the_air>
    1cc0:	81 11       	cpse	r24, r1
    1cc2:	d8 c0       	rjmp	.+432    	; 0x1e74 <__vector_8+0x40c>
    1cc4:	d2 c0       	rjmp	.+420    	; 0x1e6a <__vector_8+0x402>
    1cc6:	61 e0       	ldi	r22, 0x01	; 1
    1cc8:	88 e0       	ldi	r24, 0x08	; 8
    1cca:	0e 94 6f 02 	call	0x4de	; 0x4de <_Z12digitalWritehh>
    1cce:	84 e9       	ldi	r24, 0x94	; 148
    1cd0:	95 e0       	ldi	r25, 0x05	; 5
    1cd2:	90 93 a8 04 	sts	0x04A8, r25	; 0x8004a8 <_ZZ10__vector_8E9ptt_delay+0x1>
    1cd6:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <_ZZ10__vector_8E9ptt_delay>
    1cda:	d8 c0       	rjmp	.+432    	; 0x1e8c <__vector_8+0x424>
    1cdc:	80 91 a7 04 	lds	r24, 0x04A7	; 0x8004a7 <_ZZ10__vector_8E9ptt_delay>
    1ce0:	90 91 a8 04 	lds	r25, 0x04A8	; 0x8004a8 <_ZZ10__vector_8E9ptt_delay+0x1>
    1ce4:	00 97       	sbiw	r24, 0x00	; 0
    1ce6:	31 f0       	breq	.+12     	; 0x1cf4 <__vector_8+0x28c>
    1ce8:	01 97       	sbiw	r24, 0x01	; 1
    1cea:	90 93 a8 04 	sts	0x04A8, r25	; 0x8004a8 <_ZZ10__vector_8E9ptt_delay+0x1>
    1cee:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <_ZZ10__vector_8E9ptt_delay>
    1cf2:	cc c0       	rjmp	.+408    	; 0x1e8c <__vector_8+0x424>
    1cf4:	80 91 a5 04 	lds	r24, 0x04A5	; 0x8004a5 <_ZZ10__vector_8E7codeInc>
    1cf8:	90 91 a6 04 	lds	r25, 0x04A6	; 0x8004a6 <_ZZ10__vector_8E7codeInc+0x1>
    1cfc:	00 97       	sbiw	r24, 0x00	; 0
    1cfe:	09 f4       	brne	.+2      	; 0x1d02 <__vector_8+0x29a>
    1d00:	4b c0       	rjmp	.+150    	; 0x1d98 <__vector_8+0x330>
    1d02:	01 97       	sbiw	r24, 0x01	; 1
    1d04:	90 93 a6 04 	sts	0x04A6, r25	; 0x8004a6 <_ZZ10__vector_8E7codeInc+0x1>
    1d08:	80 93 a5 04 	sts	0x04A5, r24	; 0x8004a5 <_ZZ10__vector_8E7codeInc>
    1d0c:	89 2b       	or	r24, r25
    1d0e:	09 f0       	breq	.+2      	; 0x1d12 <__vector_8+0x2aa>
    1d10:	bd c0       	rjmp	.+378    	; 0x1e8c <__vector_8+0x424>
    1d12:	ae 01       	movw	r20, r28
    1d14:	4e 5f       	subi	r20, 0xFE	; 254
    1d16:	5f 4f       	sbci	r21, 0xFF	; 255
    1d18:	be 01       	movw	r22, r28
    1d1a:	6f 5f       	subi	r22, 0xFF	; 255
    1d1c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d1e:	80 e0       	ldi	r24, 0x00	; 0
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	0e 94 c5 25 	call	0x4b8a	; 0x4b8a <_Z9makeMorsePcPhS0_>
    1d26:	80 93 a4 04 	sts	0x04A4, r24	; 0x8004a4 <_ZZ10__vector_8E3key>
    1d2a:	99 81       	ldd	r25, Y+1	; 0x01
    1d2c:	91 11       	cpse	r25, r1
    1d2e:	11 c0       	rjmp	.+34     	; 0x1d52 <__vector_8+0x2ea>
    1d30:	9a 81       	ldd	r25, Y+2	; 0x02
    1d32:	99 23       	and	r25, r25
    1d34:	71 f0       	breq	.+28     	; 0x1d52 <__vector_8+0x2ea>
    1d36:	10 92 a4 04 	sts	0x04A4, r1	; 0x8004a4 <_ZZ10__vector_8E3key>
    1d3a:	81 e0       	ldi	r24, 0x01	; 1
    1d3c:	80 93 ac 05 	sts	0x05AC, r24	; 0x8005ac <g_callsign_sent>
    1d40:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <_ZZ10__vector_8E9playMorse>
    1d44:	88 23       	and	r24, r24
    1d46:	09 f4       	brne	.+2      	; 0x1d4a <__vector_8+0x2e2>
    1d48:	a1 c0       	rjmp	.+322    	; 0x1e8c <__vector_8+0x424>
    1d4a:	80 e0       	ldi	r24, 0x00	; 0
    1d4c:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <_Z13sendMorseToneh>
    1d50:	1e c0       	rjmp	.+60     	; 0x1d8e <__vector_8+0x326>
    1d52:	88 23       	and	r24, r24
    1d54:	b9 f0       	breq	.+46     	; 0x1d84 <__vector_8+0x31c>
    1d56:	80 91 f9 04 	lds	r24, 0x04F9	; 0x8004f9 <_ZL16g_LEDs_Timed_Out>
    1d5a:	81 11       	cpse	r24, r1
    1d5c:	04 c0       	rjmp	.+8      	; 0x1d66 <__vector_8+0x2fe>
    1d5e:	61 e0       	ldi	r22, 0x01	; 1
    1d60:	87 e0       	ldi	r24, 0x07	; 7
    1d62:	0e 94 6f 02 	call	0x4de	; 0x4de <_Z12digitalWritehh>
    1d66:	80 91 2e 05 	lds	r24, 0x052E	; 0x80052e <g_enable_transmitter>
    1d6a:	88 23       	and	r24, r24
    1d6c:	59 f0       	breq	.+22     	; 0x1d84 <__vector_8+0x31c>
    1d6e:	61 e0       	ldi	r22, 0x01	; 1
    1d70:	8a e0       	ldi	r24, 0x0A	; 10
    1d72:	0e 94 6f 02 	call	0x4de	; 0x4de <_Z12digitalWritehh>
    1d76:	61 e0       	ldi	r22, 0x01	; 1
    1d78:	88 e0       	ldi	r24, 0x08	; 8
    1d7a:	0e 94 6f 02 	call	0x4de	; 0x4de <_Z12digitalWritehh>
    1d7e:	81 e0       	ldi	r24, 0x01	; 1
    1d80:	80 93 9d 05 	sts	0x059D, r24	; 0x80059d <g_sendAMmodulation>
    1d84:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <_ZZ10__vector_8E9playMorse>
    1d88:	88 23       	and	r24, r24
    1d8a:	09 f4       	brne	.+2      	; 0x1d8e <__vector_8+0x326>
    1d8c:	7f c0       	rjmp	.+254    	; 0x1e8c <__vector_8+0x424>
    1d8e:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <_ZZ10__vector_8E3key>
    1d92:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <_Z13sendMorseToneh>
    1d96:	7a c0       	rjmp	.+244    	; 0x1e8c <__vector_8+0x424>
    1d98:	80 91 f9 04 	lds	r24, 0x04F9	; 0x8004f9 <_ZL16g_LEDs_Timed_Out>
    1d9c:	81 11       	cpse	r24, r1
    1d9e:	05 c0       	rjmp	.+10     	; 0x1daa <__vector_8+0x342>
    1da0:	80 91 6a 05 	lds	r24, 0x056A	; 0x80056a <g_sync_pin_stable>
    1da4:	82 30       	cpi	r24, 0x02	; 2
    1da6:	09 f0       	breq	.+2      	; 0x1daa <__vector_8+0x342>
    1da8:	6b c0       	rjmp	.+214    	; 0x1e80 <__vector_8+0x418>
    1daa:	80 91 2e 05 	lds	r24, 0x052E	; 0x80052e <g_enable_transmitter>
    1dae:	88 23       	and	r24, r24
    1db0:	49 f0       	breq	.+18     	; 0x1dc4 <__vector_8+0x35c>
    1db2:	60 91 a4 04 	lds	r22, 0x04A4	; 0x8004a4 <_ZZ10__vector_8E3key>
    1db6:	8a e0       	ldi	r24, 0x0A	; 10
    1db8:	0e 94 6f 02 	call	0x4de	; 0x4de <_Z12digitalWritehh>
    1dbc:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <_ZZ10__vector_8E3key>
    1dc0:	80 93 9d 05 	sts	0x059D, r24	; 0x80059d <g_sendAMmodulation>
    1dc4:	80 91 ad 05 	lds	r24, 0x05AD	; 0x8005ad <g_code_throttle>
    1dc8:	90 91 ae 05 	lds	r25, 0x05AE	; 0x8005ae <g_code_throttle+0x1>
    1dcc:	90 93 a6 04 	sts	0x04A6, r25	; 0x8004a6 <_ZZ10__vector_8E7codeInc+0x1>
    1dd0:	80 93 a5 04 	sts	0x04A5, r24	; 0x8004a5 <_ZZ10__vector_8E7codeInc>
    1dd4:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <_ZZ10__vector_8E9playMorse>
    1dd8:	88 23       	and	r24, r24
    1dda:	09 f4       	brne	.+2      	; 0x1dde <__vector_8+0x376>
    1ddc:	57 c0       	rjmp	.+174    	; 0x1e8c <__vector_8+0x424>
    1dde:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <_ZZ10__vector_8E3key>
    1de2:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <_Z13sendMorseToneh>
    1de6:	52 c0       	rjmp	.+164    	; 0x1e8c <__vector_8+0x424>
    1de8:	10 92 a4 04 	sts	0x04A4, r1	; 0x8004a4 <_ZZ10__vector_8E3key>
    1dec:	80 91 6a 05 	lds	r24, 0x056A	; 0x80056a <g_sync_pin_stable>
    1df0:	81 11       	cpse	r24, r1
    1df2:	04 c0       	rjmp	.+8      	; 0x1dfc <__vector_8+0x394>
    1df4:	60 e0       	ldi	r22, 0x00	; 0
    1df6:	87 e0       	ldi	r24, 0x07	; 7
    1df8:	0e 94 6f 02 	call	0x4de	; 0x4de <_Z12digitalWritehh>
    1dfc:	60 e0       	ldi	r22, 0x00	; 0
    1dfe:	8a e0       	ldi	r24, 0x0A	; 10
    1e00:	0e 94 6f 02 	call	0x4de	; 0x4de <_Z12digitalWritehh>
    1e04:	60 e0       	ldi	r22, 0x00	; 0
    1e06:	88 e0       	ldi	r24, 0x08	; 8
    1e08:	0e 94 6f 02 	call	0x4de	; 0x4de <_Z12digitalWritehh>
    1e0c:	10 92 9d 05 	sts	0x059D, r1	; 0x80059d <g_sendAMmodulation>
    1e10:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <_ZZ10__vector_8E9playMorse>
    1e14:	88 23       	and	r24, r24
    1e16:	19 f0       	breq	.+6      	; 0x1e1e <__vector_8+0x3b6>
    1e18:	80 e0       	ldi	r24, 0x00	; 0
    1e1a:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <_Z13sendMorseToneh>
    1e1e:	88 e0       	ldi	r24, 0x08	; 8
    1e20:	0e 94 24 02 	call	0x448	; 0x448 <_Z11digitalReadh>
    1e24:	88 23       	and	r24, r24
    1e26:	39 f0       	breq	.+14     	; 0x1e36 <__vector_8+0x3ce>
    1e28:	84 e6       	ldi	r24, 0x64	; 100
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	90 93 a8 04 	sts	0x04A8, r25	; 0x8004a8 <_ZZ10__vector_8E9ptt_delay+0x1>
    1e30:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <_ZZ10__vector_8E9ptt_delay>
    1e34:	2b c0       	rjmp	.+86     	; 0x1e8c <__vector_8+0x424>
    1e36:	80 91 a7 04 	lds	r24, 0x04A7	; 0x8004a7 <_ZZ10__vector_8E9ptt_delay>
    1e3a:	90 91 a8 04 	lds	r25, 0x04A8	; 0x8004a8 <_ZZ10__vector_8E9ptt_delay+0x1>
    1e3e:	00 97       	sbiw	r24, 0x00	; 0
    1e40:	31 f0       	breq	.+12     	; 0x1e4e <__vector_8+0x3e6>
    1e42:	01 97       	sbiw	r24, 0x01	; 1
    1e44:	90 93 a8 04 	sts	0x04A8, r25	; 0x8004a8 <_ZZ10__vector_8E9ptt_delay+0x1>
    1e48:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <_ZZ10__vector_8E9ptt_delay>
    1e4c:	1f c0       	rjmp	.+62     	; 0x1e8c <__vector_8+0x424>
    1e4e:	60 e0       	ldi	r22, 0x00	; 0
    1e50:	88 e0       	ldi	r24, 0x08	; 8
    1e52:	0e 94 6f 02 	call	0x4de	; 0x4de <_Z12digitalWritehh>
    1e56:	1a c0       	rjmp	.+52     	; 0x1e8c <__vector_8+0x424>
    1e58:	81 e0       	ldi	r24, 0x01	; 1
    1e5a:	80 93 6a 05 	sts	0x056A, r24	; 0x80056a <g_sync_pin_stable>
    1e5e:	66 ce       	rjmp	.-820    	; 0x1b2c <__vector_8+0xc4>
    1e60:	80 91 69 05 	lds	r24, 0x0569	; 0x800569 <g_dtmf_detected>
    1e64:	81 11       	cpse	r24, r1
    1e66:	ab ce       	rjmp	.-682    	; 0x1bbe <__vector_8+0x156>
    1e68:	b7 ce       	rjmp	.-658    	; 0x1bd8 <__vector_8+0x170>
    1e6a:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <_ZZ10__vector_8E3key>
    1e6e:	81 11       	cpse	r24, r1
    1e70:	bb cf       	rjmp	.-138    	; 0x1de8 <__vector_8+0x380>
    1e72:	c4 cf       	rjmp	.-120    	; 0x1dfc <__vector_8+0x394>
    1e74:	88 e0       	ldi	r24, 0x08	; 8
    1e76:	0e 94 24 02 	call	0x448	; 0x448 <_Z11digitalReadh>
    1e7a:	81 11       	cpse	r24, r1
    1e7c:	2f cf       	rjmp	.-418    	; 0x1cdc <__vector_8+0x274>
    1e7e:	23 cf       	rjmp	.-442    	; 0x1cc6 <__vector_8+0x25e>
    1e80:	60 91 a4 04 	lds	r22, 0x04A4	; 0x8004a4 <_ZZ10__vector_8E3key>
    1e84:	87 e0       	ldi	r24, 0x07	; 7
    1e86:	0e 94 6f 02 	call	0x4de	; 0x4de <_Z12digitalWritehh>
    1e8a:	8f cf       	rjmp	.-226    	; 0x1daa <__vector_8+0x342>
    1e8c:	0f 90       	pop	r0
    1e8e:	0f 90       	pop	r0
    1e90:	df 91       	pop	r29
    1e92:	cf 91       	pop	r28
    1e94:	ff 91       	pop	r31
    1e96:	ef 91       	pop	r30
    1e98:	bf 91       	pop	r27
    1e9a:	af 91       	pop	r26
    1e9c:	9f 91       	pop	r25
    1e9e:	8f 91       	pop	r24
    1ea0:	7f 91       	pop	r23
    1ea2:	6f 91       	pop	r22
    1ea4:	5f 91       	pop	r21
    1ea6:	4f 91       	pop	r20
    1ea8:	3f 91       	pop	r19
    1eaa:	2f 91       	pop	r18
    1eac:	0f 90       	pop	r0
    1eae:	0f be       	out	0x3f, r0	; 63
    1eb0:	0f 90       	pop	r0
    1eb2:	1f 90       	pop	r1
    1eb4:	18 95       	reti

00001eb6 <_Z11setupForFoxP5Fox_t>:

#endif  /* #if !INIT_EEPROM_ONLY */


void setupForFox(Fox_t* fox)
{
    1eb6:	cf 93       	push	r28
    1eb8:	df 93       	push	r29
    1eba:	00 d0       	rcall	.+0      	; 0x1ebc <_Z11setupForFoxP5Fox_t+0x6>
    1ebc:	cd b7       	in	r28, 0x3d	; 61
    1ebe:	de b7       	in	r29, 0x3e	; 62
	if(fox)
    1ec0:	00 97       	sbiw	r24, 0x00	; 0
    1ec2:	31 f0       	breq	.+12     	; 0x1ed0 <_Z11setupForFoxP5Fox_t+0x1a>
	{
		if(*fox != INVALID_FOX)
    1ec4:	fc 01       	movw	r30, r24
    1ec6:	80 81       	ld	r24, Z
    1ec8:	86 31       	cpi	r24, 0x16	; 22
    1eca:	11 f0       	breq	.+4      	; 0x1ed0 <_Z11setupForFoxP5Fox_t+0x1a>
		{
			g_fox = *fox;
    1ecc:	80 93 b0 05 	sts	0x05B0, r24	; 0x8005b0 <g_fox>
		}
	}

	switch(g_fox)
    1ed0:	e0 91 b0 05 	lds	r30, 0x05B0	; 0x8005b0 <g_fox>
    1ed4:	8e 2f       	mov	r24, r30
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	fc 01       	movw	r30, r24
    1eda:	31 97       	sbiw	r30, 0x01	; 1
    1edc:	e5 31       	cpi	r30, 0x15	; 21
    1ede:	f1 05       	cpc	r31, r1
    1ee0:	08 f0       	brcs	.+2      	; 0x1ee4 <_Z11setupForFoxP5Fox_t+0x2e>
    1ee2:	6b c0       	rjmp	.+214    	; 0x1fba <_Z11setupForFoxP5Fox_t+0x104>
    1ee4:	ef 57       	subi	r30, 0x7F	; 127
    1ee6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee8:	0c 94 6b 2c 	jmp	0x58d6	; 0x58d6 <__tablejump2__>
	{
		case NO_CODE_START_TONES_2M:
		{
			g_startclock_interval = 120;
    1eec:	88 e7       	ldi	r24, 0x78	; 120
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <g_startclock_interval+0x1>
    1ef4:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <g_startclock_interval>
			g_enable_start_timer = TRUE;
    1ef8:	81 e0       	ldi	r24, 0x01	; 1
    1efa:	80 93 2f 05 	sts	0x052F, r24	; 0x80052f <g_enable_start_timer>
		}
		break;
    1efe:	7d c0       	rjmp	.+250    	; 0x1ffa <_Z11setupForFoxP5Fox_t+0x144>

		case NO_CODE_START_TONES_5M:
		{
			g_startclock_interval = 300;
    1f00:	8c e2       	ldi	r24, 0x2C	; 44
    1f02:	91 e0       	ldi	r25, 0x01	; 1
    1f04:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <g_startclock_interval+0x1>
    1f08:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <g_startclock_interval>
			g_enable_start_timer = TRUE;
    1f0c:	81 e0       	ldi	r24, 0x01	; 1
    1f0e:	80 93 2f 05 	sts	0x052F, r24	; 0x80052f <g_enable_start_timer>
		}
		break;
    1f12:	73 c0       	rjmp	.+230    	; 0x1ffa <_Z11setupForFoxP5Fox_t+0x144>
		case FOX_3:
		case FOX_4:
		case FOX_5:
		case FOX_DEMO:
		{
			g_on_air_interval = 60;
    1f14:	8c e3       	ldi	r24, 0x3C	; 60
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	90 93 7a 05 	sts	0x057A, r25	; 0x80057a <g_on_air_interval+0x1>
    1f1c:	80 93 79 05 	sts	0x0579, r24	; 0x800579 <g_on_air_interval>
			g_number_of_foxes = 5;
    1f20:	25 e0       	ldi	r18, 0x05	; 5
    1f22:	30 e0       	ldi	r19, 0x00	; 0
    1f24:	30 93 76 05 	sts	0x0576, r19	; 0x800576 <g_number_of_foxes+0x1>
    1f28:	20 93 75 05 	sts	0x0575, r18	; 0x800575 <g_number_of_foxes>
			g_fox_id_offset = 0;
    1f2c:	10 92 73 05 	sts	0x0573, r1	; 0x800573 <g_fox_id_offset+0x1>
    1f30:	10 92 72 05 	sts	0x0572, r1	; 0x800572 <g_fox_id_offset>
			g_pattern_codespeed = 8;
    1f34:	28 e0       	ldi	r18, 0x08	; 8
    1f36:	20 93 18 01 	sts	0x0118, r18	; 0x800118 <g_pattern_codespeed>
			g_id_interval = 60;
    1f3a:	90 93 71 05 	sts	0x0571, r25	; 0x800571 <g_id_interval+0x1>
    1f3e:	80 93 70 05 	sts	0x0570, r24	; 0x800570 <g_id_interval>
			g_startclock_interval = 300;
    1f42:	8c e2       	ldi	r24, 0x2C	; 44
    1f44:	91 e0       	ldi	r25, 0x01	; 1
    1f46:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <g_startclock_interval+0x1>
    1f4a:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <g_startclock_interval>
		}
		break;
    1f4e:	55 c0       	rjmp	.+170    	; 0x1ffa <_Z11setupForFoxP5Fox_t+0x144>

		case SPRINT_S1:
		case SPRINT_F5:
		case SPRINT_DEMO:
		{
			g_on_air_interval = 12;
    1f50:	8c e0       	ldi	r24, 0x0C	; 12
    1f52:	90 e0       	ldi	r25, 0x00	; 0
    1f54:	90 93 7a 05 	sts	0x057A, r25	; 0x80057a <g_on_air_interval+0x1>
    1f58:	80 93 79 05 	sts	0x0579, r24	; 0x800579 <g_on_air_interval>
			g_number_of_foxes = 5;
    1f5c:	85 e0       	ldi	r24, 0x05	; 5
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	90 93 76 05 	sts	0x0576, r25	; 0x800576 <g_number_of_foxes+0x1>
    1f64:	80 93 75 05 	sts	0x0575, r24	; 0x800575 <g_number_of_foxes>
			g_pattern_codespeed = ((g_fox == SPRINT_DEMO) || (g_fox <= SPRINT_S5)) ? 10 : 15;
    1f68:	80 91 b0 05 	lds	r24, 0x05B0	; 0x8005b0 <g_fox>
    1f6c:	83 31       	cpi	r24, 0x13	; 19
    1f6e:	31 f0       	breq	.+12     	; 0x1f7c <_Z11setupForFoxP5Fox_t+0xc6>
    1f70:	80 91 b0 05 	lds	r24, 0x05B0	; 0x8005b0 <g_fox>
    1f74:	8e 30       	cpi	r24, 0x0E	; 14
    1f76:	20 f0       	brcs	.+8      	; 0x1f80 <_Z11setupForFoxP5Fox_t+0xca>
    1f78:	8f e0       	ldi	r24, 0x0F	; 15
    1f7a:	03 c0       	rjmp	.+6      	; 0x1f82 <_Z11setupForFoxP5Fox_t+0xcc>
    1f7c:	8a e0       	ldi	r24, 0x0A	; 10
    1f7e:	01 c0       	rjmp	.+2      	; 0x1f82 <_Z11setupForFoxP5Fox_t+0xcc>
    1f80:	8a e0       	ldi	r24, 0x0A	; 10
    1f82:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <g_pattern_codespeed>
			g_fox_id_offset = g_fox <= SPRINT_S5 ? SPRINT_S1 - 1 : SPRINT_F1 - 1;
    1f86:	80 91 b0 05 	lds	r24, 0x05B0	; 0x8005b0 <g_fox>
    1f8a:	8e 30       	cpi	r24, 0x0E	; 14
    1f8c:	18 f0       	brcs	.+6      	; 0x1f94 <_Z11setupForFoxP5Fox_t+0xde>
    1f8e:	8d e0       	ldi	r24, 0x0D	; 13
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	02 c0       	rjmp	.+4      	; 0x1f98 <_Z11setupForFoxP5Fox_t+0xe2>
    1f94:	88 e0       	ldi	r24, 0x08	; 8
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	90 93 73 05 	sts	0x0573, r25	; 0x800573 <g_fox_id_offset+0x1>
    1f9c:	80 93 72 05 	sts	0x0572, r24	; 0x800572 <g_fox_id_offset>
			g_id_interval = 600;
    1fa0:	88 e5       	ldi	r24, 0x58	; 88
    1fa2:	92 e0       	ldi	r25, 0x02	; 2
    1fa4:	90 93 71 05 	sts	0x0571, r25	; 0x800571 <g_id_interval+0x1>
    1fa8:	80 93 70 05 	sts	0x0570, r24	; 0x800570 <g_id_interval>
			g_startclock_interval = 120;
    1fac:	88 e7       	ldi	r24, 0x78	; 120
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <g_startclock_interval+0x1>
    1fb4:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <g_startclock_interval>
		}
		break;
    1fb8:	20 c0       	rjmp	.+64     	; 0x1ffa <_Z11setupForFoxP5Fox_t+0x144>

/* case BEACON: */
/* case SPECTATOR: */
		default:
		{
			g_on_air_interval = 600;
    1fba:	88 e5       	ldi	r24, 0x58	; 88
    1fbc:	92 e0       	ldi	r25, 0x02	; 2
    1fbe:	90 93 7a 05 	sts	0x057A, r25	; 0x80057a <g_on_air_interval+0x1>
    1fc2:	80 93 79 05 	sts	0x0579, r24	; 0x800579 <g_on_air_interval>
			g_number_of_foxes = 1;
    1fc6:	21 e0       	ldi	r18, 0x01	; 1
    1fc8:	30 e0       	ldi	r19, 0x00	; 0
    1fca:	30 93 76 05 	sts	0x0576, r19	; 0x800576 <g_number_of_foxes+0x1>
    1fce:	20 93 75 05 	sts	0x0575, r18	; 0x800575 <g_number_of_foxes>
			g_pattern_codespeed = 8;
    1fd2:	28 e0       	ldi	r18, 0x08	; 8
    1fd4:	20 93 18 01 	sts	0x0118, r18	; 0x800118 <g_pattern_codespeed>
			g_id_interval = 600;
    1fd8:	90 93 71 05 	sts	0x0571, r25	; 0x800571 <g_id_interval+0x1>
    1fdc:	80 93 70 05 	sts	0x0570, r24	; 0x800570 <g_id_interval>
			g_startclock_interval = (g_fox == SPECTATOR) ? 120 : 300;
    1fe0:	80 91 b0 05 	lds	r24, 0x05B0	; 0x8005b0 <g_fox>
    1fe4:	88 30       	cpi	r24, 0x08	; 8
    1fe6:	19 f0       	breq	.+6      	; 0x1fee <_Z11setupForFoxP5Fox_t+0x138>
    1fe8:	8c e2       	ldi	r24, 0x2C	; 44
    1fea:	91 e0       	ldi	r25, 0x01	; 1
    1fec:	02 c0       	rjmp	.+4      	; 0x1ff2 <_Z11setupForFoxP5Fox_t+0x13c>
    1fee:	88 e7       	ldi	r24, 0x78	; 120
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <g_startclock_interval+0x1>
    1ff6:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <g_startclock_interval>
		}
		break;
	}

	if(g_use_rtc_to_start)
    1ffa:	80 91 5d 05 	lds	r24, 0x055D	; 0x80055d <g_use_rtc_to_start>
    1ffe:	88 23       	and	r24, r24
    2000:	09 f4       	brne	.+2      	; 0x2004 <_Z11setupForFoxP5Fox_t+0x14e>
    2002:	bd c0       	rjmp	.+378    	; 0x217e <_Z11setupForFoxP5Fox_t+0x2c8>
	{
		if(g_event_start_epoch < g_current_epoch)                           /* timed event in progress */
    2004:	40 91 a3 05 	lds	r20, 0x05A3	; 0x8005a3 <g_event_start_epoch>
    2008:	50 91 a4 05 	lds	r21, 0x05A4	; 0x8005a4 <g_event_start_epoch+0x1>
    200c:	60 91 a5 05 	lds	r22, 0x05A5	; 0x8005a5 <g_event_start_epoch+0x2>
    2010:	70 91 a6 05 	lds	r23, 0x05A6	; 0x8005a6 <g_event_start_epoch+0x3>
    2014:	80 91 a7 05 	lds	r24, 0x05A7	; 0x8005a7 <g_current_epoch>
    2018:	90 91 a8 05 	lds	r25, 0x05A8	; 0x8005a8 <g_current_epoch+0x1>
    201c:	a0 91 a9 05 	lds	r26, 0x05A9	; 0x8005a9 <g_current_epoch+0x2>
    2020:	b0 91 aa 05 	lds	r27, 0x05AA	; 0x8005aa <g_current_epoch+0x3>
    2024:	48 17       	cp	r20, r24
    2026:	59 07       	cpc	r21, r25
    2028:	6a 07       	cpc	r22, r26
    202a:	7b 07       	cpc	r23, r27
    202c:	08 f0       	brcs	.+2      	; 0x2030 <_Z11setupForFoxP5Fox_t+0x17a>
    202e:	86 c0       	rjmp	.+268    	; 0x213c <_Z11setupForFoxP5Fox_t+0x286>
		{
			g_seconds_since_sync = g_current_epoch - g_event_start_epoch;   /* Total elapsed time counter: synced at event start time */
    2030:	80 91 a7 05 	lds	r24, 0x05A7	; 0x8005a7 <g_current_epoch>
    2034:	90 91 a8 05 	lds	r25, 0x05A8	; 0x8005a8 <g_current_epoch+0x1>
    2038:	a0 91 a9 05 	lds	r26, 0x05A9	; 0x8005a9 <g_current_epoch+0x2>
    203c:	b0 91 aa 05 	lds	r27, 0x05AA	; 0x8005aa <g_current_epoch+0x3>
    2040:	40 91 a3 05 	lds	r20, 0x05A3	; 0x8005a3 <g_event_start_epoch>
    2044:	50 91 a4 05 	lds	r21, 0x05A4	; 0x8005a4 <g_event_start_epoch+0x1>
    2048:	60 91 a5 05 	lds	r22, 0x05A5	; 0x8005a5 <g_event_start_epoch+0x2>
    204c:	70 91 a6 05 	lds	r23, 0x05A6	; 0x8005a6 <g_event_start_epoch+0x3>
    2050:	84 1b       	sub	r24, r20
    2052:	95 0b       	sbc	r25, r21
    2054:	a6 0b       	sbc	r26, r22
    2056:	b7 0b       	sbc	r27, r23
    2058:	80 93 b1 05 	sts	0x05B1, r24	; 0x8005b1 <g_seconds_since_sync>
    205c:	90 93 b2 05 	sts	0x05B2, r25	; 0x8005b2 <g_seconds_since_sync+0x1>
    2060:	a0 93 b3 05 	sts	0x05B3, r26	; 0x8005b3 <g_seconds_since_sync+0x2>
    2064:	b0 93 b4 05 	sts	0x05B4, r27	; 0x8005b4 <g_seconds_since_sync+0x3>
			g_on_the_air       = FALSE;                                     /* Controls transmitter Morse activity */
    2068:	10 92 af 05 	sts	0x05AF, r1	; 0x8005af <g_on_the_air>
			g_code_throttle    = 0;                                         /* Adjusts Morse code speed */
    206c:	10 92 ae 05 	sts	0x05AE, r1	; 0x8005ae <g_code_throttle+0x1>
    2070:	10 92 ad 05 	sts	0x05AD, r1	; 0x8005ad <g_code_throttle>
			g_callsign_sent = FALSE;
    2074:	10 92 ac 05 	sts	0x05AC, r1	; 0x8005ac <g_callsign_sent>

			g_fox_seconds_into_interval = g_seconds_since_sync % g_startclock_interval;
    2078:	60 91 b1 05 	lds	r22, 0x05B1	; 0x8005b1 <g_seconds_since_sync>
    207c:	70 91 b2 05 	lds	r23, 0x05B2	; 0x8005b2 <g_seconds_since_sync+0x1>
    2080:	80 91 b3 05 	lds	r24, 0x05B3	; 0x8005b3 <g_seconds_since_sync+0x2>
    2084:	90 91 b4 05 	lds	r25, 0x05B4	; 0x8005b4 <g_seconds_since_sync+0x3>
    2088:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <g_startclock_interval>
    208c:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <g_startclock_interval+0x1>
    2090:	03 2e       	mov	r0, r19
    2092:	00 0c       	add	r0, r0
    2094:	44 0b       	sbc	r20, r20
    2096:	55 0b       	sbc	r21, r21
    2098:	0e 94 4c 2c 	call	0x5898	; 0x5898 <__divmodsi4>
    209c:	70 93 78 05 	sts	0x0578, r23	; 0x800578 <g_fox_seconds_into_interval+0x1>
    20a0:	60 93 77 05 	sts	0x0577, r22	; 0x800577 <g_fox_seconds_into_interval>
			g_fox_counter = CLAMP(1, 1 + (g_fox_seconds_into_interval / g_on_air_interval), g_number_of_foxes);
    20a4:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <g_fox_seconds_into_interval>
    20a8:	90 91 78 05 	lds	r25, 0x0578	; 0x800578 <g_fox_seconds_into_interval+0x1>
    20ac:	60 91 79 05 	lds	r22, 0x0579	; 0x800579 <g_on_air_interval>
    20b0:	70 91 7a 05 	lds	r23, 0x057A	; 0x80057a <g_on_air_interval+0x1>
    20b4:	0e 94 16 2c 	call	0x582c	; 0x582c <__divmodhi4>
    20b8:	6f 5f       	subi	r22, 0xFF	; 255
    20ba:	7f 4f       	sbci	r23, 0xFF	; 255
    20bc:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <g_number_of_foxes>
    20c0:	90 91 76 05 	lds	r25, 0x0576	; 0x800576 <g_number_of_foxes+0x1>
    20c4:	9a 83       	std	Y+2, r25	; 0x02
    20c6:	89 83       	std	Y+1, r24	; 0x01
    20c8:	89 81       	ldd	r24, Y+1	; 0x01
    20ca:	9a 81       	ldd	r25, Y+2	; 0x02
    20cc:	86 17       	cp	r24, r22
    20ce:	97 07       	cpc	r25, r23
    20d0:	34 f0       	brlt	.+12     	; 0x20de <_Z11setupForFoxP5Fox_t+0x228>
    20d2:	16 16       	cp	r1, r22
    20d4:	17 06       	cpc	r1, r23
    20d6:	2c f0       	brlt	.+10     	; 0x20e2 <_Z11setupForFoxP5Fox_t+0x22c>
    20d8:	61 e0       	ldi	r22, 0x01	; 1
    20da:	70 e0       	ldi	r23, 0x00	; 0
    20dc:	02 c0       	rjmp	.+4      	; 0x20e2 <_Z11setupForFoxP5Fox_t+0x22c>
    20de:	69 81       	ldd	r22, Y+1	; 0x01
    20e0:	7a 81       	ldd	r23, Y+2	; 0x02
    20e2:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <g_fox_counter+0x1>
    20e6:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <g_fox_counter>
			g_fox_transition = FALSE;
    20ea:	10 92 74 05 	sts	0x0574, r1	; 0x800574 <g_fox_transition>
			g_time_to_ID = FALSE;
    20ee:	10 92 6f 05 	sts	0x056F, r1	; 0x80056f <g_time_to_ID>
			g_audio_tone_state = OFF;
    20f2:	10 92 6e 05 	sts	0x056E, r1	; 0x80056e <g_audio_tone_state>
			g_fox_tone_offset = g_fox_counter;
    20f6:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <g_fox_counter>
    20fa:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <g_fox_counter+0x1>
    20fe:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <g_fox_tone_offset+0x1>
    2102:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <g_fox_tone_offset>
			g_lastSeconds = (uint8_t)((g_seconds_since_sync + 11) % g_startclock_interval);
    2106:	80 91 b1 05 	lds	r24, 0x05B1	; 0x8005b1 <g_seconds_since_sync>
    210a:	90 91 b2 05 	lds	r25, 0x05B2	; 0x8005b2 <g_seconds_since_sync+0x1>
    210e:	a0 91 b3 05 	lds	r26, 0x05B3	; 0x8005b3 <g_seconds_since_sync+0x2>
    2112:	b0 91 b4 05 	lds	r27, 0x05B4	; 0x8005b4 <g_seconds_since_sync+0x3>
    2116:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <g_startclock_interval>
    211a:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <g_startclock_interval+0x1>
    211e:	bc 01       	movw	r22, r24
    2120:	cd 01       	movw	r24, r26
    2122:	65 5f       	subi	r22, 0xF5	; 245
    2124:	7f 4f       	sbci	r23, 0xFF	; 255
    2126:	8f 4f       	sbci	r24, 0xFF	; 255
    2128:	9f 4f       	sbci	r25, 0xFF	; 255
    212a:	03 2e       	mov	r0, r19
    212c:	00 0c       	add	r0, r0
    212e:	44 0b       	sbc	r20, r20
    2130:	55 0b       	sbc	r21, r21
    2132:	0e 94 4c 2c 	call	0x5898	; 0x5898 <__divmodsi4>
    2136:	60 93 6d 05 	sts	0x056D, r22	; 0x80056d <g_lastSeconds>
    213a:	3f c0       	rjmp	.+126    	; 0x21ba <_Z11setupForFoxP5Fox_t+0x304>
		}
		else                            /* event starts in the future */
		{
			g_seconds_since_sync = 0;   /* Total elapsed time counter */
    213c:	10 92 b1 05 	sts	0x05B1, r1	; 0x8005b1 <g_seconds_since_sync>
    2140:	10 92 b2 05 	sts	0x05B2, r1	; 0x8005b2 <g_seconds_since_sync+0x1>
    2144:	10 92 b3 05 	sts	0x05B3, r1	; 0x8005b3 <g_seconds_since_sync+0x2>
    2148:	10 92 b4 05 	sts	0x05B4, r1	; 0x8005b4 <g_seconds_since_sync+0x3>
			g_on_the_air       = FALSE; /* Controls transmitter Morse activity */
    214c:	10 92 af 05 	sts	0x05AF, r1	; 0x8005af <g_on_the_air>
			g_code_throttle    = 0;     /* Adjusts Morse code speed */
    2150:	10 92 ae 05 	sts	0x05AE, r1	; 0x8005ae <g_code_throttle+0x1>
    2154:	10 92 ad 05 	sts	0x05AD, r1	; 0x8005ad <g_code_throttle>
			g_callsign_sent = FALSE;
    2158:	10 92 ac 05 	sts	0x05AC, r1	; 0x8005ac <g_callsign_sent>

			g_fox_counter = 1;
    215c:	81 e0       	ldi	r24, 0x01	; 1
    215e:	90 e0       	ldi	r25, 0x00	; 0
    2160:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <g_fox_counter+0x1>
    2164:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <g_fox_counter>
			g_fox_seconds_into_interval = 0;
    2168:	10 92 78 05 	sts	0x0578, r1	; 0x800578 <g_fox_seconds_into_interval+0x1>
    216c:	10 92 77 05 	sts	0x0577, r1	; 0x800577 <g_fox_seconds_into_interval>
			g_fox_transition = FALSE;
    2170:	10 92 74 05 	sts	0x0574, r1	; 0x800574 <g_fox_transition>
			g_time_to_ID = FALSE;
    2174:	10 92 6f 05 	sts	0x056F, r1	; 0x80056f <g_time_to_ID>
			g_audio_tone_state = OFF;
    2178:	10 92 6e 05 	sts	0x056E, r1	; 0x80056e <g_audio_tone_state>
    217c:	1e c0       	rjmp	.+60     	; 0x21ba <_Z11setupForFoxP5Fox_t+0x304>
		}
	}
	else                            /* manual start */
	{
		g_seconds_since_sync = 0;   /* Total elapsed time counter */
    217e:	10 92 b1 05 	sts	0x05B1, r1	; 0x8005b1 <g_seconds_since_sync>
    2182:	10 92 b2 05 	sts	0x05B2, r1	; 0x8005b2 <g_seconds_since_sync+0x1>
    2186:	10 92 b3 05 	sts	0x05B3, r1	; 0x8005b3 <g_seconds_since_sync+0x2>
    218a:	10 92 b4 05 	sts	0x05B4, r1	; 0x8005b4 <g_seconds_since_sync+0x3>
		g_on_the_air       = FALSE; /* Controls transmitter Morse activity */
    218e:	10 92 af 05 	sts	0x05AF, r1	; 0x8005af <g_on_the_air>
		g_code_throttle    = 0;     /* Adjusts Morse code speed */
    2192:	10 92 ae 05 	sts	0x05AE, r1	; 0x8005ae <g_code_throttle+0x1>
    2196:	10 92 ad 05 	sts	0x05AD, r1	; 0x8005ad <g_code_throttle>
		g_callsign_sent = FALSE;
    219a:	10 92 ac 05 	sts	0x05AC, r1	; 0x8005ac <g_callsign_sent>

/*		g_on_air_interval = 0; */
		g_fox_seconds_into_interval = 0;
    219e:	10 92 78 05 	sts	0x0578, r1	; 0x800578 <g_fox_seconds_into_interval+0x1>
    21a2:	10 92 77 05 	sts	0x0577, r1	; 0x800577 <g_fox_seconds_into_interval>
/*		g_number_of_foxes = 0; */
		g_fox_transition = FALSE;
    21a6:	10 92 74 05 	sts	0x0574, r1	; 0x800574 <g_fox_transition>
		g_fox_id_offset = 0;
    21aa:	10 92 73 05 	sts	0x0573, r1	; 0x800573 <g_fox_id_offset+0x1>
    21ae:	10 92 72 05 	sts	0x0572, r1	; 0x800572 <g_fox_id_offset>
/*		g_id_interval = 0; */
		g_time_to_ID = FALSE;
    21b2:	10 92 6f 05 	sts	0x056F, r1	; 0x80056f <g_time_to_ID>
		g_audio_tone_state = OFF;
    21b6:	10 92 6e 05 	sts	0x056E, r1	; 0x80056e <g_audio_tone_state>
	}

	g_LEDs_Timed_Out = !g_enable_LEDs;
    21ba:	90 91 30 05 	lds	r25, 0x0530	; 0x800530 <g_enable_LEDs>
    21be:	81 e0       	ldi	r24, 0x01	; 1
    21c0:	91 11       	cpse	r25, r1
    21c2:	80 e0       	ldi	r24, 0x00	; 0
    21c4:	80 93 f9 04 	sts	0x04F9, r24	; 0x8004f9 <_ZL16g_LEDs_Timed_Out>
	digitalWrite(PIN_LED2, OFF);    /*  LED Off - in case it was on in the middle of a transmission */
    21c8:	60 e0       	ldi	r22, 0x00	; 0
    21ca:	87 e0       	ldi	r24, 0x07	; 7
    21cc:	0e 94 6f 02 	call	0x4de	; 0x4de <_Z12digitalWritehh>
}
    21d0:	0f 90       	pop	r0
    21d2:	0f 90       	pop	r0
    21d4:	df 91       	pop	r29
    21d6:	cf 91       	pop	r28
    21d8:	08 95       	ret

000021da <__vector_1>:

/***********************************************************************
 * Handle RTC 1-second interrupts
 **********************************************************************/
ISR( INT0_vect )
{
    21da:	1f 92       	push	r1
    21dc:	0f 92       	push	r0
    21de:	0f b6       	in	r0, 0x3f	; 63
    21e0:	0f 92       	push	r0
    21e2:	11 24       	eor	r1, r1
    21e4:	2f 93       	push	r18
    21e6:	3f 93       	push	r19
    21e8:	4f 93       	push	r20
    21ea:	5f 93       	push	r21
    21ec:	6f 93       	push	r22
    21ee:	7f 93       	push	r23
    21f0:	8f 93       	push	r24
    21f2:	9f 93       	push	r25
    21f4:	af 93       	push	r26
    21f6:	bf 93       	push	r27
    21f8:	ef 93       	push	r30
    21fa:	ff 93       	push	r31
	static int id_countdown = 0;

	g_current_epoch++;
    21fc:	80 91 a7 05 	lds	r24, 0x05A7	; 0x8005a7 <g_current_epoch>
    2200:	90 91 a8 05 	lds	r25, 0x05A8	; 0x8005a8 <g_current_epoch+0x1>
    2204:	a0 91 a9 05 	lds	r26, 0x05A9	; 0x8005a9 <g_current_epoch+0x2>
    2208:	b0 91 aa 05 	lds	r27, 0x05AA	; 0x8005aa <g_current_epoch+0x3>
    220c:	01 96       	adiw	r24, 0x01	; 1
    220e:	a1 1d       	adc	r26, r1
    2210:	b1 1d       	adc	r27, r1
    2212:	80 93 a7 05 	sts	0x05A7, r24	; 0x8005a7 <g_current_epoch>
    2216:	90 93 a8 05 	sts	0x05A8, r25	; 0x8005a8 <g_current_epoch+0x1>
    221a:	a0 93 a9 05 	sts	0x05A9, r26	; 0x8005a9 <g_current_epoch+0x2>
    221e:	b0 93 aa 05 	sts	0x05AA, r27	; 0x8005aa <g_current_epoch+0x3>

	if(g_temperature_check_countdown)
    2222:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <g_temperature_check_countdown>
    2226:	88 23       	and	r24, r24
    2228:	29 f0       	breq	.+10     	; 0x2234 <__vector_1+0x5a>
	{
		g_temperature_check_countdown--;
    222a:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <g_temperature_check_countdown>
    222e:	81 50       	subi	r24, 0x01	; 1
    2230:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <g_temperature_check_countdown>
		/* TODO: only access RTC/I2C functions if sleeping - never if foreground processes are running
		 * g_current_epoch = rv3028_get_epoch(NULL, NULL); / * resync to RTC periodically * / */
	}

	if(g_transmissions_disabled)
    2234:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <g_transmissions_disabled>
    2238:	88 23       	and	r24, r24
    223a:	91 f1       	breq	.+100    	; 0x22a0 <__vector_1+0xc6>
	{
		if(g_use_rtc_to_start)
    223c:	80 91 5d 05 	lds	r24, 0x055D	; 0x80055d <g_use_rtc_to_start>
    2240:	88 23       	and	r24, r24
    2242:	09 f4       	brne	.+2      	; 0x2246 <__vector_1+0x6c>
    2244:	33 c1       	rjmp	.+614    	; 0x24ac <__vector_1+0x2d2>
		{
			if((g_current_epoch >= g_event_start_epoch) && (g_current_epoch < g_event_finish_epoch))
    2246:	40 91 a7 05 	lds	r20, 0x05A7	; 0x8005a7 <g_current_epoch>
    224a:	50 91 a8 05 	lds	r21, 0x05A8	; 0x8005a8 <g_current_epoch+0x1>
    224e:	60 91 a9 05 	lds	r22, 0x05A9	; 0x8005a9 <g_current_epoch+0x2>
    2252:	70 91 aa 05 	lds	r23, 0x05AA	; 0x8005aa <g_current_epoch+0x3>
    2256:	80 91 a3 05 	lds	r24, 0x05A3	; 0x8005a3 <g_event_start_epoch>
    225a:	90 91 a4 05 	lds	r25, 0x05A4	; 0x8005a4 <g_event_start_epoch+0x1>
    225e:	a0 91 a5 05 	lds	r26, 0x05A5	; 0x8005a5 <g_event_start_epoch+0x2>
    2262:	b0 91 a6 05 	lds	r27, 0x05A6	; 0x8005a6 <g_event_start_epoch+0x3>
    2266:	48 17       	cp	r20, r24
    2268:	59 07       	cpc	r21, r25
    226a:	6a 07       	cpc	r22, r26
    226c:	7b 07       	cpc	r23, r27
    226e:	08 f4       	brcc	.+2      	; 0x2272 <__vector_1+0x98>
    2270:	1d c1       	rjmp	.+570    	; 0x24ac <__vector_1+0x2d2>
    2272:	40 91 a7 05 	lds	r20, 0x05A7	; 0x8005a7 <g_current_epoch>
    2276:	50 91 a8 05 	lds	r21, 0x05A8	; 0x8005a8 <g_current_epoch+0x1>
    227a:	60 91 a9 05 	lds	r22, 0x05A9	; 0x8005a9 <g_current_epoch+0x2>
    227e:	70 91 aa 05 	lds	r23, 0x05AA	; 0x8005aa <g_current_epoch+0x3>
    2282:	80 91 9f 05 	lds	r24, 0x059F	; 0x80059f <g_event_finish_epoch>
    2286:	90 91 a0 05 	lds	r25, 0x05A0	; 0x8005a0 <g_event_finish_epoch+0x1>
    228a:	a0 91 a1 05 	lds	r26, 0x05A1	; 0x8005a1 <g_event_finish_epoch+0x2>
    228e:	b0 91 a2 05 	lds	r27, 0x05A2	; 0x8005a2 <g_event_finish_epoch+0x3>
    2292:	48 17       	cp	r20, r24
    2294:	59 07       	cpc	r21, r25
    2296:	6a 07       	cpc	r22, r26
    2298:	7b 07       	cpc	r23, r27
    229a:	08 f4       	brcc	.+2      	; 0x229e <__vector_1+0xc4>
    229c:	cd c0       	rjmp	.+410    	; 0x2438 <__vector_1+0x25e>
    229e:	06 c1       	rjmp	.+524    	; 0x24ac <__vector_1+0x2d2>
			}
		}
	}
	else
	{
		if(g_use_rtc_to_start)
    22a0:	80 91 5d 05 	lds	r24, 0x055D	; 0x80055d <g_use_rtc_to_start>
    22a4:	88 23       	and	r24, r24
    22a6:	e1 f0       	breq	.+56     	; 0x22e0 <__vector_1+0x106>
		{
			if(g_current_epoch >= g_event_finish_epoch)
    22a8:	40 91 a7 05 	lds	r20, 0x05A7	; 0x8005a7 <g_current_epoch>
    22ac:	50 91 a8 05 	lds	r21, 0x05A8	; 0x8005a8 <g_current_epoch+0x1>
    22b0:	60 91 a9 05 	lds	r22, 0x05A9	; 0x8005a9 <g_current_epoch+0x2>
    22b4:	70 91 aa 05 	lds	r23, 0x05AA	; 0x8005aa <g_current_epoch+0x3>
    22b8:	80 91 9f 05 	lds	r24, 0x059F	; 0x80059f <g_event_finish_epoch>
    22bc:	90 91 a0 05 	lds	r25, 0x05A0	; 0x8005a0 <g_event_finish_epoch+0x1>
    22c0:	a0 91 a1 05 	lds	r26, 0x05A1	; 0x8005a1 <g_event_finish_epoch+0x2>
    22c4:	b0 91 a2 05 	lds	r27, 0x05A2	; 0x8005a2 <g_event_finish_epoch+0x3>
    22c8:	48 17       	cp	r20, r24
    22ca:	59 07       	cpc	r21, r25
    22cc:	6a 07       	cpc	r22, r26
    22ce:	7b 07       	cpc	r23, r27
    22d0:	38 f0       	brcs	.+14     	; 0x22e0 <__vector_1+0x106>
			{
				g_use_rtc_to_start = FALSE;
    22d2:	10 92 5d 05 	sts	0x055D, r1	; 0x80055d <g_use_rtc_to_start>
				g_transmissions_disabled = TRUE;
    22d6:	81 e0       	ldi	r24, 0x01	; 1
    22d8:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <g_transmissions_disabled>
				g_on_the_air = FALSE;
    22dc:	10 92 af 05 	sts	0x05AF, r1	; 0x8005af <g_on_the_air>
			}
		}

		if(!g_transmissions_disabled)
    22e0:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <g_transmissions_disabled>
    22e4:	81 11       	cpse	r24, r1
    22e6:	e2 c0       	rjmp	.+452    	; 0x24ac <__vector_1+0x2d2>
		{
			if(g_seconds_since_sync == 0)   /* sync just occurred */
    22e8:	80 91 b1 05 	lds	r24, 0x05B1	; 0x8005b1 <g_seconds_since_sync>
    22ec:	90 91 b2 05 	lds	r25, 0x05B2	; 0x8005b2 <g_seconds_since_sync+0x1>
    22f0:	a0 91 b3 05 	lds	r26, 0x05B3	; 0x8005b3 <g_seconds_since_sync+0x2>
    22f4:	b0 91 b4 05 	lds	r27, 0x05B4	; 0x8005b4 <g_seconds_since_sync+0x3>
    22f8:	89 2b       	or	r24, r25
    22fa:	8a 2b       	or	r24, r26
    22fc:	8b 2b       	or	r24, r27
    22fe:	81 f4       	brne	.+32     	; 0x2320 <__vector_1+0x146>
			{
				id_countdown = g_id_interval;
    2300:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <g_id_interval>
    2304:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <g_id_interval+0x1>
    2308:	90 93 a3 04 	sts	0x04A3, r25	; 0x8004a3 <_ZZ10__vector_1E12id_countdown+0x1>
    230c:	80 93 a2 04 	sts	0x04A2, r24	; 0x8004a2 <_ZZ10__vector_1E12id_countdown>
				g_fox_counter = 1;
    2310:	81 e0       	ldi	r24, 0x01	; 1
    2312:	90 e0       	ldi	r25, 0x00	; 0
    2314:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <g_fox_counter+0x1>
    2318:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <g_fox_counter>
				g_lastSeconds = 0;
    231c:	10 92 6d 05 	sts	0x056D, r1	; 0x80056d <g_lastSeconds>
				/* TODO: only access RTC/I2C functions if sleeping - never if foreground processes are running
				 * g_current_epoch = rv3028_get_epoch(NULL, NULL); / * resync to RTC periodically * / */
			}

			g_seconds_since_sync++; /* Total elapsed time counter */
    2320:	80 91 b1 05 	lds	r24, 0x05B1	; 0x8005b1 <g_seconds_since_sync>
    2324:	90 91 b2 05 	lds	r25, 0x05B2	; 0x8005b2 <g_seconds_since_sync+0x1>
    2328:	a0 91 b3 05 	lds	r26, 0x05B3	; 0x8005b3 <g_seconds_since_sync+0x2>
    232c:	b0 91 b4 05 	lds	r27, 0x05B4	; 0x8005b4 <g_seconds_since_sync+0x3>
    2330:	01 96       	adiw	r24, 0x01	; 1
    2332:	a1 1d       	adc	r26, r1
    2334:	b1 1d       	adc	r27, r1
    2336:	80 93 b1 05 	sts	0x05B1, r24	; 0x8005b1 <g_seconds_since_sync>
    233a:	90 93 b2 05 	sts	0x05B2, r25	; 0x8005b2 <g_seconds_since_sync+0x1>
    233e:	a0 93 b3 05 	sts	0x05B3, r26	; 0x8005b3 <g_seconds_since_sync+0x2>
    2342:	b0 93 b4 05 	sts	0x05B4, r27	; 0x8005b4 <g_seconds_since_sync+0x3>
			g_fox_seconds_into_interval++;
    2346:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <g_fox_seconds_into_interval>
    234a:	90 91 78 05 	lds	r25, 0x0578	; 0x800578 <g_fox_seconds_into_interval+0x1>
    234e:	01 96       	adiw	r24, 0x01	; 1
    2350:	90 93 78 05 	sts	0x0578, r25	; 0x800578 <g_fox_seconds_into_interval+0x1>
    2354:	80 93 77 05 	sts	0x0577, r24	; 0x800577 <g_fox_seconds_into_interval>

			if(id_countdown)
    2358:	80 91 a2 04 	lds	r24, 0x04A2	; 0x8004a2 <_ZZ10__vector_1E12id_countdown>
    235c:	90 91 a3 04 	lds	r25, 0x04A3	; 0x8004a3 <_ZZ10__vector_1E12id_countdown+0x1>
    2360:	00 97       	sbiw	r24, 0x00	; 0
    2362:	29 f0       	breq	.+10     	; 0x236e <__vector_1+0x194>
			{
				id_countdown--;
    2364:	01 97       	sbiw	r24, 0x01	; 1
    2366:	90 93 a3 04 	sts	0x04A3, r25	; 0x8004a3 <_ZZ10__vector_1E12id_countdown+0x1>
    236a:	80 93 a2 04 	sts	0x04A2, r24	; 0x8004a2 <_ZZ10__vector_1E12id_countdown>
			}

			if(g_number_of_foxes && ((g_seconds_since_sync % g_on_air_interval) == 0))
    236e:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <g_number_of_foxes>
    2372:	90 91 76 05 	lds	r25, 0x0576	; 0x800576 <g_number_of_foxes+0x1>
    2376:	89 2b       	or	r24, r25
    2378:	e1 f1       	breq	.+120    	; 0x23f2 <__vector_1+0x218>
    237a:	60 91 b1 05 	lds	r22, 0x05B1	; 0x8005b1 <g_seconds_since_sync>
    237e:	70 91 b2 05 	lds	r23, 0x05B2	; 0x8005b2 <g_seconds_since_sync+0x1>
    2382:	80 91 b3 05 	lds	r24, 0x05B3	; 0x8005b3 <g_seconds_since_sync+0x2>
    2386:	90 91 b4 05 	lds	r25, 0x05B4	; 0x8005b4 <g_seconds_since_sync+0x3>
    238a:	20 91 79 05 	lds	r18, 0x0579	; 0x800579 <g_on_air_interval>
    238e:	30 91 7a 05 	lds	r19, 0x057A	; 0x80057a <g_on_air_interval+0x1>
    2392:	03 2e       	mov	r0, r19
    2394:	00 0c       	add	r0, r0
    2396:	44 0b       	sbc	r20, r20
    2398:	55 0b       	sbc	r21, r21
    239a:	0e 94 4c 2c 	call	0x5898	; 0x5898 <__divmodsi4>
    239e:	67 2b       	or	r22, r23
    23a0:	68 2b       	or	r22, r24
    23a2:	69 2b       	or	r22, r25
    23a4:	09 f4       	brne	.+2      	; 0x23a8 <__vector_1+0x1ce>
    23a6:	4f c0       	rjmp	.+158    	; 0x2446 <__vector_1+0x26c>
    23a8:	24 c0       	rjmp	.+72     	; 0x23f2 <__vector_1+0x218>
			{
				g_fox_counter++;

				if(g_fox_counter > g_number_of_foxes)
				{
					g_fox_counter = 1;
    23aa:	81 e0       	ldi	r24, 0x01	; 1
    23ac:	90 e0       	ldi	r25, 0x00	; 0
    23ae:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <g_fox_counter+0x1>
    23b2:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <g_fox_counter>
 *						pinMode(PIN_SYNC, INPUT);
 *						pinMode(PIN_SYNC, OUTPUT);  / * Set sync pin as output low * /
 *						g_sync_enabled = FALSE;
 *					} */

					g_LEDs_Timed_Out = TRUE;
    23b6:	80 93 f9 04 	sts	0x04F9, r24	; 0x8004f9 <_ZL16g_LEDs_Timed_Out>
					digitalWrite(PIN_LED2, OFF);
    23ba:	60 e0       	ldi	r22, 0x00	; 0
    23bc:	87 e0       	ldi	r24, 0x07	; 7
    23be:	0e 94 6f 02 	call	0x4de	; 0x4de <_Z12digitalWritehh>
				}
				g_fox_transition = TRUE;
    23c2:	81 e0       	ldi	r24, 0x01	; 1
    23c4:	80 93 74 05 	sts	0x0574, r24	; 0x800574 <g_fox_transition>
				g_fox_seconds_into_interval = 0;
    23c8:	10 92 78 05 	sts	0x0578, r1	; 0x800578 <g_fox_seconds_into_interval+0x1>
    23cc:	10 92 77 05 	sts	0x0577, r1	; 0x800577 <g_fox_seconds_into_interval>

				if(!id_countdown)
    23d0:	80 91 a2 04 	lds	r24, 0x04A2	; 0x8004a2 <_ZZ10__vector_1E12id_countdown>
    23d4:	90 91 a3 04 	lds	r25, 0x04A3	; 0x8004a3 <_ZZ10__vector_1E12id_countdown+0x1>
    23d8:	89 2b       	or	r24, r25
    23da:	59 f4       	brne	.+22     	; 0x23f2 <__vector_1+0x218>
				{
					id_countdown = g_id_interval;
    23dc:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <g_id_interval>
    23e0:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <g_id_interval+0x1>
    23e4:	90 93 a3 04 	sts	0x04A3, r25	; 0x8004a3 <_ZZ10__vector_1E12id_countdown+0x1>
    23e8:	80 93 a2 04 	sts	0x04A2, r24	; 0x8004a2 <_ZZ10__vector_1E12id_countdown>
					g_time_to_ID = TRUE;
    23ec:	81 e0       	ldi	r24, 0x01	; 1
    23ee:	80 93 6f 05 	sts	0x056F, r24	; 0x80056f <g_time_to_ID>
				}
			}

			if(g_enable_start_timer && ((g_seconds_since_sync + 11) % g_startclock_interval <= 10))
    23f2:	80 91 2f 05 	lds	r24, 0x052F	; 0x80052f <g_enable_start_timer>
    23f6:	88 23       	and	r24, r24
    23f8:	09 f4       	brne	.+2      	; 0x23fc <__vector_1+0x222>
    23fa:	56 c0       	rjmp	.+172    	; 0x24a8 <__vector_1+0x2ce>
    23fc:	80 91 b1 05 	lds	r24, 0x05B1	; 0x8005b1 <g_seconds_since_sync>
    2400:	90 91 b2 05 	lds	r25, 0x05B2	; 0x8005b2 <g_seconds_since_sync+0x1>
    2404:	a0 91 b3 05 	lds	r26, 0x05B3	; 0x8005b3 <g_seconds_since_sync+0x2>
    2408:	b0 91 b4 05 	lds	r27, 0x05B4	; 0x8005b4 <g_seconds_since_sync+0x3>
    240c:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <g_startclock_interval>
    2410:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <g_startclock_interval+0x1>
    2414:	bc 01       	movw	r22, r24
    2416:	cd 01       	movw	r24, r26
    2418:	65 5f       	subi	r22, 0xF5	; 245
    241a:	7f 4f       	sbci	r23, 0xFF	; 255
    241c:	8f 4f       	sbci	r24, 0xFF	; 255
    241e:	9f 4f       	sbci	r25, 0xFF	; 255
    2420:	03 2e       	mov	r0, r19
    2422:	00 0c       	add	r0, r0
    2424:	44 0b       	sbc	r20, r20
    2426:	55 0b       	sbc	r21, r21
    2428:	0e 94 4c 2c 	call	0x5898	; 0x5898 <__divmodsi4>
    242c:	6b 30       	cpi	r22, 0x0B	; 11
    242e:	71 05       	cpc	r23, r1
    2430:	81 05       	cpc	r24, r1
    2432:	91 05       	cpc	r25, r1
    2434:	f4 f0       	brlt	.+60     	; 0x2472 <__vector_1+0x298>
    2436:	38 c0       	rjmp	.+112    	; 0x24a8 <__vector_1+0x2ce>
	{
		if(g_use_rtc_to_start)
		{
			if((g_current_epoch >= g_event_start_epoch) && (g_current_epoch < g_event_finish_epoch))
			{
				setupForFox(NULL);
    2438:	80 e0       	ldi	r24, 0x00	; 0
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <_Z11setupForFoxP5Fox_t>
				g_transmissions_disabled = FALSE;
    2440:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <g_transmissions_disabled>
    2444:	33 c0       	rjmp	.+102    	; 0x24ac <__vector_1+0x2d2>
				id_countdown--;
			}

			if(g_number_of_foxes && ((g_seconds_since_sync % g_on_air_interval) == 0))
			{
				g_fox_counter++;
    2446:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <g_fox_counter>
    244a:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <g_fox_counter+0x1>
    244e:	01 96       	adiw	r24, 0x01	; 1
    2450:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <g_fox_counter+0x1>
    2454:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <g_fox_counter>

				if(g_fox_counter > g_number_of_foxes)
    2458:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <g_fox_counter>
    245c:	30 91 21 01 	lds	r19, 0x0121	; 0x800121 <g_fox_counter+0x1>
    2460:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <g_number_of_foxes>
    2464:	90 91 76 05 	lds	r25, 0x0576	; 0x800576 <g_number_of_foxes+0x1>
    2468:	82 17       	cp	r24, r18
    246a:	93 07       	cpc	r25, r19
    246c:	0c f0       	brlt	.+2      	; 0x2470 <__vector_1+0x296>
    246e:	a9 cf       	rjmp	.-174    	; 0x23c2 <__vector_1+0x1e8>
    2470:	9c cf       	rjmp	.-200    	; 0x23aa <__vector_1+0x1d0>
				}
			}

			if(g_enable_start_timer && ((g_seconds_since_sync + 11) % g_startclock_interval <= 10))
			{
				g_lastSeconds = (uint8_t)((g_seconds_since_sync + 11) % g_startclock_interval);
    2472:	80 91 b1 05 	lds	r24, 0x05B1	; 0x8005b1 <g_seconds_since_sync>
    2476:	90 91 b2 05 	lds	r25, 0x05B2	; 0x8005b2 <g_seconds_since_sync+0x1>
    247a:	a0 91 b3 05 	lds	r26, 0x05B3	; 0x8005b3 <g_seconds_since_sync+0x2>
    247e:	b0 91 b4 05 	lds	r27, 0x05B4	; 0x8005b4 <g_seconds_since_sync+0x3>
    2482:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <g_startclock_interval>
    2486:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <g_startclock_interval+0x1>
    248a:	bc 01       	movw	r22, r24
    248c:	cd 01       	movw	r24, r26
    248e:	65 5f       	subi	r22, 0xF5	; 245
    2490:	7f 4f       	sbci	r23, 0xFF	; 255
    2492:	8f 4f       	sbci	r24, 0xFF	; 255
    2494:	9f 4f       	sbci	r25, 0xFF	; 255
    2496:	03 2e       	mov	r0, r19
    2498:	00 0c       	add	r0, r0
    249a:	44 0b       	sbc	r20, r20
    249c:	55 0b       	sbc	r21, r21
    249e:	0e 94 4c 2c 	call	0x5898	; 0x5898 <__divmodsi4>
    24a2:	60 93 6d 05 	sts	0x056D, r22	; 0x80056d <g_lastSeconds>
    24a6:	02 c0       	rjmp	.+4      	; 0x24ac <__vector_1+0x2d2>
			}
			else
			{
				g_lastSeconds = 0;
    24a8:	10 92 6d 05 	sts	0x056D, r1	; 0x80056d <g_lastSeconds>
			}
		}
	}
}   /* end of INT0 ISR */
    24ac:	ff 91       	pop	r31
    24ae:	ef 91       	pop	r30
    24b0:	bf 91       	pop	r27
    24b2:	af 91       	pop	r26
    24b4:	9f 91       	pop	r25
    24b6:	8f 91       	pop	r24
    24b8:	7f 91       	pop	r23
    24ba:	6f 91       	pop	r22
    24bc:	5f 91       	pop	r21
    24be:	4f 91       	pop	r20
    24c0:	3f 91       	pop	r19
    24c2:	2f 91       	pop	r18
    24c4:	0f 90       	pop	r0
    24c6:	0f be       	out	0x3f, r0	; 63
    24c8:	0f 90       	pop	r0
    24ca:	1f 90       	pop	r1
    24cc:	18 95       	reti

000024ce <_Z7readADCv>:
 * Read the temperature ADC value
 */
uint16_t readADC()
{
	/* Make sure the most recent ADC read is complete. */
	while((ADCSRA & (1 << ADSC)))
    24ce:	ea e7       	ldi	r30, 0x7A	; 122
    24d0:	f0 e0       	ldi	r31, 0x00	; 0
    24d2:	80 81       	ld	r24, Z
    24d4:	86 fd       	sbrc	r24, 6
    24d6:	fd cf       	rjmp	.-6      	; 0x24d2 <_Z7readADCv+0x4>
	{
		;   /* Just wait for ADC to finish. */
	}
	uint16_t result = ADCW;
    24d8:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    24dc:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	/* Initiate another reading. */
	ADCSRA |= (1 << ADSC);
    24e0:	ea e7       	ldi	r30, 0x7A	; 122
    24e2:	f0 e0       	ldi	r31, 0x00	; 0
    24e4:	90 81       	ld	r25, Z
    24e6:	90 64       	ori	r25, 0x40	; 64
    24e8:	90 83       	st	Z, r25
	return( result);
}
    24ea:	c9 01       	movw	r24, r18
    24ec:	08 95       	ret

000024ee <_Z9setUpTempv>:
	/* The internal temperature has to be used
	 * with the internal reference of 1.1V.
	 * Channel 8 can not be selected with
	 * the analogRead function yet. */
	/* Set the internal reference and mux. */
	ADMUX = ((1 << REFS1) | (1 << REFS0) | (1 << MUX3));
    24ee:	88 ec       	ldi	r24, 0xC8	; 200
    24f0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>

	/* Slow the ADC clock down to 125 KHz
	 * by dividing by 128. Assumes that the
	 * standard Arduino 16 MHz clock is in use. */
	ADCSRA = (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
    24f4:	ea e7       	ldi	r30, 0x7A	; 122
    24f6:	f0 e0       	ldi	r31, 0x00	; 0
    24f8:	87 e0       	ldi	r24, 0x07	; 7
    24fa:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);  /* enable the ADC */
    24fc:	80 81       	ld	r24, Z
    24fe:	80 68       	ori	r24, 0x80	; 128
    2500:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);  /* Start the ADC */
    2502:	80 81       	ld	r24, Z
    2504:	80 64       	ori	r24, 0x40	; 64
    2506:	80 83       	st	Z, r24
	readADC();
    2508:	0e 94 67 12 	call	0x24ce	; 0x24ce <_Z7readADCv>
    250c:	08 95       	ret

0000250e <_Z7getTempv>:

/*
 * Returns the most recent temperature reading
 */
float getTemp(void)
{
    250e:	0f 93       	push	r16
    2510:	1f 93       	push	r17
    2512:	cf 93       	push	r28
    2514:	df 93       	push	r29
	float offset = CLAMP(-200., (float)g_atmega_temp_calibration / 10., 200.);
    2516:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <g_atmega_temp_calibration>
    251a:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <g_atmega_temp_calibration+0x1>
    251e:	07 2e       	mov	r0, r23
    2520:	00 0c       	add	r0, r0
    2522:	88 0b       	sbc	r24, r24
    2524:	99 0b       	sbc	r25, r25
    2526:	0e 94 09 2a 	call	0x5412	; 0x5412 <__floatsisf>
    252a:	20 e0       	ldi	r18, 0x00	; 0
    252c:	30 e0       	ldi	r19, 0x00	; 0
    252e:	40 e2       	ldi	r20, 0x20	; 32
    2530:	51 e4       	ldi	r21, 0x41	; 65
    2532:	0e 94 5f 29 	call	0x52be	; 0x52be <__divsf3>
    2536:	06 2f       	mov	r16, r22
    2538:	17 2f       	mov	r17, r23
    253a:	d8 2f       	mov	r29, r24
    253c:	c9 2f       	mov	r28, r25
    253e:	20 e0       	ldi	r18, 0x00	; 0
    2540:	30 e0       	ldi	r19, 0x00	; 0
    2542:	48 e4       	ldi	r20, 0x48	; 72
    2544:	53 e4       	ldi	r21, 0x43	; 67
    2546:	0e 94 f8 2a 	call	0x55f0	; 0x55f0 <__gesf2>
    254a:	18 16       	cp	r1, r24
    254c:	6c f0       	brlt	.+26     	; 0x2568 <_Z7getTempv+0x5a>
    254e:	20 e0       	ldi	r18, 0x00	; 0
    2550:	30 e0       	ldi	r19, 0x00	; 0
    2552:	48 e4       	ldi	r20, 0x48	; 72
    2554:	53 ec       	ldi	r21, 0xC3	; 195
    2556:	60 2f       	mov	r22, r16
    2558:	71 2f       	mov	r23, r17
    255a:	8d 2f       	mov	r24, r29
    255c:	9c 2f       	mov	r25, r28
    255e:	0e 94 55 29 	call	0x52aa	; 0x52aa <__cmpsf2>
    2562:	88 23       	and	r24, r24
    2564:	34 f0       	brlt	.+12     	; 0x2572 <_Z7getTempv+0x64>
    2566:	09 c0       	rjmp	.+18     	; 0x257a <_Z7getTempv+0x6c>
    2568:	00 e0       	ldi	r16, 0x00	; 0
    256a:	10 e0       	ldi	r17, 0x00	; 0
    256c:	d8 e4       	ldi	r29, 0x48	; 72
    256e:	c3 e4       	ldi	r28, 0x43	; 67
    2570:	04 c0       	rjmp	.+8      	; 0x257a <_Z7getTempv+0x6c>
    2572:	00 e0       	ldi	r16, 0x00	; 0
    2574:	10 e0       	ldi	r17, 0x00	; 0
    2576:	d8 e4       	ldi	r29, 0x48	; 72
    2578:	c3 ec       	ldi	r28, 0xC3	; 195

	/* The offset in 1/10ths C (first term) was determined empirically */
	readADC();  /* throw away first reading */
    257a:	0e 94 67 12 	call	0x24ce	; 0x24ce <_Z7readADCv>
	return(roundf(offset + (readADC() - 324.31) / 1.22));
    257e:	0e 94 67 12 	call	0x24ce	; 0x24ce <_Z7readADCv>
    2582:	bc 01       	movw	r22, r24
    2584:	80 e0       	ldi	r24, 0x00	; 0
    2586:	90 e0       	ldi	r25, 0x00	; 0
    2588:	0e 94 07 2a 	call	0x540e	; 0x540e <__floatunsisf>
    258c:	2e ea       	ldi	r18, 0xAE	; 174
    258e:	37 e2       	ldi	r19, 0x27	; 39
    2590:	42 ea       	ldi	r20, 0xA2	; 162
    2592:	53 e4       	ldi	r21, 0x43	; 67
    2594:	0e 94 e8 28 	call	0x51d0	; 0x51d0 <__subsf3>
    2598:	26 ef       	ldi	r18, 0xF6	; 246
    259a:	38 e2       	ldi	r19, 0x28	; 40
    259c:	4c e9       	ldi	r20, 0x9C	; 156
    259e:	5f e3       	ldi	r21, 0x3F	; 63
    25a0:	0e 94 5f 29 	call	0x52be	; 0x52be <__divsf3>
    25a4:	20 2f       	mov	r18, r16
    25a6:	31 2f       	mov	r19, r17
    25a8:	4d 2f       	mov	r20, r29
    25aa:	5c 2f       	mov	r21, r28
    25ac:	0e 94 e9 28 	call	0x51d2	; 0x51d2 <__addsf3>
    25b0:	0e 94 6a 2b 	call	0x56d4	; 0x56d4 <round>
}
    25b4:	df 91       	pop	r29
    25b6:	cf 91       	pop	r28
    25b8:	1f 91       	pop	r17
    25ba:	0f 91       	pop	r16
    25bc:	08 95       	ret

000025be <_Z18setUpAudioSamplingh>:

void setUpAudioSampling(BOOL enableSampling)
{
	ADCSRA = 0;                             /* clear ADCSRA register */
    25be:	ea e7       	ldi	r30, 0x7A	; 122
    25c0:	f0 e0       	ldi	r31, 0x00	; 0
    25c2:	10 82       	st	Z, r1
	ADCSRB = 0;                             /* clear ADCSRB register */
    25c4:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
	ADMUX = 0;
    25c8:	ac e7       	ldi	r26, 0x7C	; 124
    25ca:	b0 e0       	ldi	r27, 0x00	; 0
    25cc:	1c 92       	st	X, r1
	ADMUX |= 0x06;                          /* set A6 analog input pin */
    25ce:	9c 91       	ld	r25, X
    25d0:	96 60       	ori	r25, 0x06	; 6
    25d2:	9c 93       	st	X, r25
	ADMUX |= (1 << REFS1) | (1 << REFS0);   /* set reference voltage to internal 1.1V */
    25d4:	9c 91       	ld	r25, X
    25d6:	90 6c       	ori	r25, 0xC0	; 192
    25d8:	9c 93       	st	X, r25
	ADMUX |= (1 << ADLAR);                  /* left align ADC value to 8 bits from ADCH register */
    25da:	9c 91       	ld	r25, X
    25dc:	90 62       	ori	r25, 0x20	; 32
    25de:	9c 93       	st	X, r25
#elif SAMPLE_RATE == 77040
		ADCSRA |= (1 << ADPS2);                                 /* 16 prescaler for 76900 sps */
#elif SAMPLE_RATE == 38520
		ADCSRA |= (1 << ADPS2) | (1 << ADPS0);                  /* 32 prescaler for 38500 sps */
#elif SAMPLE_RATE == 19260
		ADCSRA |= (1 << ADPS2) | (1 << ADPS1);                  /* 64 prescaler for 19250 sps */
    25e0:	90 81       	ld	r25, Z
    25e2:	96 60       	ori	r25, 0x06	; 6
    25e4:	90 83       	st	Z, r25
		ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);   /* 128 prescaler for 9630 sps */
#else
#error "Select a valid sample rate."
#endif

	ADCSRA |= (1 << ADATE);     /* enable auto trigger */
    25e6:	90 81       	ld	r25, Z
    25e8:	90 62       	ori	r25, 0x20	; 32
    25ea:	90 83       	st	Z, r25
	ADCSRA |= (1 << ADIE);      /* enable interrupts when measurement complete */
    25ec:	90 81       	ld	r25, Z
    25ee:	98 60       	ori	r25, 0x08	; 8
    25f0:	90 83       	st	Z, r25
	ADCSRA |= (1 << ADEN);      /* enable ADC */
    25f2:	90 81       	ld	r25, Z
    25f4:	90 68       	ori	r25, 0x80	; 128
    25f6:	90 83       	st	Z, r25

	if(enableSampling)
    25f8:	88 23       	and	r24, r24
    25fa:	31 f0       	breq	.+12     	; 0x2608 <_Z18setUpAudioSamplingh+0x4a>
	{
		ADCSRA |= (1 << ADIE);  /* enable interrupts when measurement complete */
    25fc:	80 81       	ld	r24, Z
    25fe:	88 60       	ori	r24, 0x08	; 8
    2600:	80 83       	st	Z, r24
		ADCSRA |= (1 << ADSC);  /* start ADC measurements */
    2602:	80 81       	ld	r24, Z
    2604:	80 64       	ori	r24, 0x40	; 64
    2606:	80 83       	st	Z, r24
    2608:	08 95       	ret

0000260a <_Z11only_digitsPc>:
	}
}

BOOL only_digits(char *s)
{
    260a:	fc 01       	movw	r30, r24
	while(*s)
    260c:	21 91       	ld	r18, Z+
    260e:	22 23       	and	r18, r18
    2610:	41 f0       	breq	.+16     	; 0x2622 <_Z11only_digitsPc+0x18>
	{
		if(isdigit(*s++) == 0)
    2612:	30 e0       	ldi	r19, 0x00	; 0
    2614:	20 53       	subi	r18, 0x30	; 48
    2616:	31 09       	sbc	r19, r1
    2618:	2a 30       	cpi	r18, 0x0A	; 10
    261a:	31 05       	cpc	r19, r1
    261c:	b8 f3       	brcs	.-18     	; 0x260c <_Z11only_digitsPc+0x2>
		{
			return( FALSE);
    261e:	80 e0       	ldi	r24, 0x00	; 0
    2620:	08 95       	ret
		}
	}

	return( TRUE);
    2622:	81 e0       	ldi	r24, 0x01	; 1
}
    2624:	08 95       	ret

00002626 <_Z13startEventNowv>:

void startEventNow(void)
{
#if !INIT_EEPROM_ONLY
		linkbus_disable();
    2626:	0e 94 51 09 	call	0x12a2	; 0x12a2 <_Z15linkbus_disablev>
		setupForFox(NULL);
    262a:	80 e0       	ldi	r24, 0x00	; 0
    262c:	90 e0       	ldi	r25, 0x00	; 0
    262e:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <_Z11setupForFoxP5Fox_t>
		setupPortsForF1975();
    2632:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <_Z18setupPortsForF1975v>
		g_transmissions_disabled = FALSE;
    2636:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <g_transmissions_disabled>
		lb_send_string((char*)"Sync OK\n", FALSE);
    263a:	60 e0       	ldi	r22, 0x00	; 0
    263c:	8a e2       	ldi	r24, 0x2A	; 42
    263e:	91 e0       	ldi	r25, 0x01	; 1
    2640:	0e 94 c6 09 	call	0x138c	; 0x138c <_Z14lb_send_stringPch>
    2644:	08 95       	ret

00002646 <_Z12stopEventNowv>:
#endif  /* !INIT_EEPROM_ONLY */
}

void stopEventNow(void)
{
	g_transmissions_disabled = TRUE;
    2646:	81 e0       	ldi	r24, 0x01	; 1
    2648:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <g_transmissions_disabled>
	if(!g_sync_pin_stable)
    264c:	80 91 6a 05 	lds	r24, 0x056A	; 0x80056a <g_sync_pin_stable>
    2650:	81 11       	cpse	r24, r1
    2652:	04 c0       	rjmp	.+8      	; 0x265c <_Z12stopEventNowv+0x16>
	{
		digitalWrite(PIN_LED2, OFF);        /*  LED Off */
    2654:	60 e0       	ldi	r22, 0x00	; 0
    2656:	87 e0       	ldi	r24, 0x07	; 7
    2658:	0e 94 6f 02 	call	0x4de	; 0x4de <_Z12digitalWritehh>
	}

	digitalWrite(PIN_CW_KEY_LOGIC, OFF);    /* TX key line */
    265c:	60 e0       	ldi	r22, 0x00	; 0
    265e:	8a e0       	ldi	r24, 0x0A	; 10
    2660:	0e 94 6f 02 	call	0x4de	; 0x4de <_Z12digitalWritehh>
	digitalWrite(PIN_PTT_LOGIC, OFF);       /* Unkey the microphone / de-energize transmitter */
    2664:	60 e0       	ldi	r22, 0x00	; 0
    2666:	88 e0       	ldi	r24, 0x08	; 8
    2668:	0e 94 6f 02 	call	0x4de	; 0x4de <_Z12digitalWritehh>
	g_sendAMmodulation = FALSE;
    266c:	10 92 9d 05 	sts	0x059D, r1	; 0x80059d <g_sendAMmodulation>

	linkbus_init(BAUD);
    2670:	60 e0       	ldi	r22, 0x00	; 0
    2672:	71 ee       	ldi	r23, 0xE1	; 225
    2674:	80 e0       	ldi	r24, 0x00	; 0
    2676:	90 e0       	ldi	r25, 0x00	; 0
    2678:	0e 94 2b 09 	call	0x1256	; 0x1256 <_Z12linkbus_initm>
    267c:	08 95       	ret

0000267e <__vector_5>:
 *
 * Handles pushbutton presses
 *
 ************************************************************************/
ISR(PCINT2_vect)
{
    267e:	1f 92       	push	r1
    2680:	0f 92       	push	r0
    2682:	0f b6       	in	r0, 0x3f	; 63
    2684:	0f 92       	push	r0
    2686:	11 24       	eor	r1, r1
    2688:	2f 93       	push	r18
    268a:	3f 93       	push	r19
    268c:	4f 93       	push	r20
    268e:	5f 93       	push	r21
    2690:	6f 93       	push	r22
    2692:	7f 93       	push	r23
    2694:	8f 93       	push	r24
    2696:	9f 93       	push	r25
    2698:	af 93       	push	r26
    269a:	bf 93       	push	r27
    269c:	ef 93       	push	r30
    269e:	ff 93       	push	r31
	BOOL pinVal = digitalRead(PIN_SYNC);
    26a0:	84 e0       	ldi	r24, 0x04	; 4
    26a2:	0e 94 24 02 	call	0x448	; 0x448 <_Z11digitalReadh>

	if(pinVal)                      /* Sync is high = button released */
    26a6:	88 23       	and	r24, r24
    26a8:	d9 f0       	breq	.+54     	; 0x26e0 <__vector_5+0x62>
	{
		g_LEDs_Timed_Out = FALSE;   /* Restart LEDs */
    26aa:	10 92 f9 04 	sts	0x04F9, r1	; 0x8004f9 <_ZL16g_LEDs_Timed_Out>

		if(g_transmissions_disabled)
    26ae:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <g_transmissions_disabled>
    26b2:	88 23       	and	r24, r24
    26b4:	69 f0       	breq	.+26     	; 0x26d0 <__vector_5+0x52>
		{
			if(g_sync_pin_stable == STABLE_LOW)
    26b6:	80 91 6a 05 	lds	r24, 0x056A	; 0x80056a <g_sync_pin_stable>
    26ba:	82 30       	cpi	r24, 0x02	; 2
    26bc:	89 f4       	brne	.+34     	; 0x26e0 <__vector_5+0x62>
			{
				startEventNow();
    26be:	0e 94 13 13 	call	0x2626	; 0x2626 <_Z13startEventNowv>
				g_sync_pin_stable = UNSTABLE;
    26c2:	10 92 6a 05 	sts	0x056A, r1	; 0x80056a <g_sync_pin_stable>
				digitalWrite(PIN_LED2, OFF);    /*  LED */
    26c6:	60 e0       	ldi	r22, 0x00	; 0
    26c8:	87 e0       	ldi	r24, 0x07	; 7
    26ca:	0e 94 6f 02 	call	0x4de	; 0x4de <_Z12digitalWritehh>
    26ce:	08 c0       	rjmp	.+16     	; 0x26e0 <__vector_5+0x62>
			}
		}
		else
		{
			if(g_sync_pin_stable == STABLE_LOW)
    26d0:	80 91 6a 05 	lds	r24, 0x056A	; 0x80056a <g_sync_pin_stable>
    26d4:	82 30       	cpi	r24, 0x02	; 2
    26d6:	21 f4       	brne	.+8      	; 0x26e0 <__vector_5+0x62>
			{
				stopEventNow();
    26d8:	0e 94 23 13 	call	0x2646	; 0x2646 <_Z12stopEventNowv>
				g_sync_pin_stable = UNSTABLE;
    26dc:	10 92 6a 05 	sts	0x056A, r1	; 0x80056a <g_sync_pin_stable>
			}
		}
	}

	g_sync_pin_timer = 0;
    26e0:	10 92 6c 05 	sts	0x056C, r1	; 0x80056c <g_sync_pin_timer+0x1>
    26e4:	10 92 6b 05 	sts	0x056B, r1	; 0x80056b <g_sync_pin_timer>
}
    26e8:	ff 91       	pop	r31
    26ea:	ef 91       	pop	r30
    26ec:	bf 91       	pop	r27
    26ee:	af 91       	pop	r26
    26f0:	9f 91       	pop	r25
    26f2:	8f 91       	pop	r24
    26f4:	7f 91       	pop	r23
    26f6:	6f 91       	pop	r22
    26f8:	5f 91       	pop	r21
    26fa:	4f 91       	pop	r20
    26fc:	3f 91       	pop	r19
    26fe:	2f 91       	pop	r18
    2700:	0f 90       	pop	r0
    2702:	0f be       	out	0x3f, r0	; 63
    2704:	0f 90       	pop	r0
    2706:	1f 90       	pop	r1
    2708:	18 95       	reti

0000270a <_Z18reportConfigErrorsv>:
	}
}

void reportConfigErrors(void)
{
	if(g_messages_text[STATION_ID][0] == '\0')
    270a:	80 91 48 05 	lds	r24, 0x0548	; 0x800548 <g_messages_text+0x15>
    270e:	81 11       	cpse	r24, r1
    2710:	05 c0       	rjmp	.+10     	; 0x271c <_Z18reportConfigErrorsv+0x12>
	{
		ee_mgr.sendEEPROMString(TextSetID);
    2712:	65 e0       	ldi	r22, 0x05	; 5
    2714:	85 eb       	ldi	r24, 0xB5	; 181
    2716:	95 e0       	ldi	r25, 0x05	; 5
    2718:	0e 94 58 03 	call	0x6b0	; 0x6b0 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	}

	if(g_current_epoch < MINIMUM_EPOCH) /* Current time is invalid */
    271c:	80 91 a7 05 	lds	r24, 0x05A7	; 0x8005a7 <g_current_epoch>
    2720:	90 91 a8 05 	lds	r25, 0x05A8	; 0x8005a8 <g_current_epoch+0x1>
    2724:	a0 91 a9 05 	lds	r26, 0x05A9	; 0x8005a9 <g_current_epoch+0x2>
    2728:	b0 91 aa 05 	lds	r27, 0x05AA	; 0x8005aa <g_current_epoch+0x3>
    272c:	81 15       	cp	r24, r1
    272e:	96 46       	sbci	r25, 0x66	; 102
    2730:	ae 4e       	sbci	r26, 0xEE	; 238
    2732:	bf 45       	sbci	r27, 0x5F	; 95
    2734:	28 f4       	brcc	.+10     	; 0x2740 <_Z18reportConfigErrorsv+0x36>
	{
		ee_mgr.sendEEPROMString(TextSetTime);
    2736:	62 e0       	ldi	r22, 0x02	; 2
    2738:	85 eb       	ldi	r24, 0xB5	; 181
    273a:	95 e0       	ldi	r25, 0x05	; 5
    273c:	0e 94 58 03 	call	0x6b0	; 0x6b0 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	}

	if(g_event_finish_epoch < g_current_epoch)      /* Event has already finished */
    2740:	40 91 9f 05 	lds	r20, 0x059F	; 0x80059f <g_event_finish_epoch>
    2744:	50 91 a0 05 	lds	r21, 0x05A0	; 0x8005a0 <g_event_finish_epoch+0x1>
    2748:	60 91 a1 05 	lds	r22, 0x05A1	; 0x8005a1 <g_event_finish_epoch+0x2>
    274c:	70 91 a2 05 	lds	r23, 0x05A2	; 0x8005a2 <g_event_finish_epoch+0x3>
    2750:	80 91 a7 05 	lds	r24, 0x05A7	; 0x8005a7 <g_current_epoch>
    2754:	90 91 a8 05 	lds	r25, 0x05A8	; 0x8005a8 <g_current_epoch+0x1>
    2758:	a0 91 a9 05 	lds	r26, 0x05A9	; 0x8005a9 <g_current_epoch+0x2>
    275c:	b0 91 aa 05 	lds	r27, 0x05AA	; 0x8005aa <g_current_epoch+0x3>
    2760:	48 17       	cp	r20, r24
    2762:	59 07       	cpc	r21, r25
    2764:	6a 07       	cpc	r22, r26
    2766:	7b 07       	cpc	r23, r27
    2768:	00 f5       	brcc	.+64     	; 0x27aa <_Z18reportConfigErrorsv+0xa0>
	{
		if(g_event_start_epoch < g_current_epoch)   /* Event has already started */
    276a:	40 91 a3 05 	lds	r20, 0x05A3	; 0x8005a3 <g_event_start_epoch>
    276e:	50 91 a4 05 	lds	r21, 0x05A4	; 0x8005a4 <g_event_start_epoch+0x1>
    2772:	60 91 a5 05 	lds	r22, 0x05A5	; 0x8005a5 <g_event_start_epoch+0x2>
    2776:	70 91 a6 05 	lds	r23, 0x05A6	; 0x8005a6 <g_event_start_epoch+0x3>
    277a:	80 91 a7 05 	lds	r24, 0x05A7	; 0x8005a7 <g_current_epoch>
    277e:	90 91 a8 05 	lds	r25, 0x05A8	; 0x8005a8 <g_current_epoch+0x1>
    2782:	a0 91 a9 05 	lds	r26, 0x05A9	; 0x8005a9 <g_current_epoch+0x2>
    2786:	b0 91 aa 05 	lds	r27, 0x05AA	; 0x8005aa <g_current_epoch+0x3>
    278a:	48 17       	cp	r20, r24
    278c:	59 07       	cpc	r21, r25
    278e:	6a 07       	cpc	r22, r26
    2790:	7b 07       	cpc	r23, r27
    2792:	28 f4       	brcc	.+10     	; 0x279e <_Z18reportConfigErrorsv+0x94>
		{
			ee_mgr.sendEEPROMString(TextSetStart);
    2794:	63 e0       	ldi	r22, 0x03	; 3
    2796:	85 eb       	ldi	r24, 0xB5	; 181
    2798:	95 e0       	ldi	r25, 0x05	; 5
    279a:	0e 94 58 03 	call	0x6b0	; 0x6b0 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
		}

		ee_mgr.sendEEPROMString(TextSetFinish);
    279e:	64 e0       	ldi	r22, 0x04	; 4
    27a0:	85 eb       	ldi	r24, 0xB5	; 181
    27a2:	95 e0       	ldi	r25, 0x05	; 5
    27a4:	0e 94 58 03 	call	0x6b0	; 0x6b0 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
    27a8:	08 95       	ret
	}
	else if(g_event_start_epoch < g_current_epoch)  /* Event has already started */
    27aa:	40 91 a3 05 	lds	r20, 0x05A3	; 0x8005a3 <g_event_start_epoch>
    27ae:	50 91 a4 05 	lds	r21, 0x05A4	; 0x8005a4 <g_event_start_epoch+0x1>
    27b2:	60 91 a5 05 	lds	r22, 0x05A5	; 0x8005a5 <g_event_start_epoch+0x2>
    27b6:	70 91 a6 05 	lds	r23, 0x05A6	; 0x8005a6 <g_event_start_epoch+0x3>
    27ba:	80 91 a7 05 	lds	r24, 0x05A7	; 0x8005a7 <g_current_epoch>
    27be:	90 91 a8 05 	lds	r25, 0x05A8	; 0x8005a8 <g_current_epoch+0x1>
    27c2:	a0 91 a9 05 	lds	r26, 0x05A9	; 0x8005a9 <g_current_epoch+0x2>
    27c6:	b0 91 aa 05 	lds	r27, 0x05AA	; 0x8005aa <g_current_epoch+0x3>
    27ca:	48 17       	cp	r20, r24
    27cc:	59 07       	cpc	r21, r25
    27ce:	6a 07       	cpc	r22, r26
    27d0:	7b 07       	cpc	r23, r27
    27d2:	28 f4       	brcc	.+10     	; 0x27de <_Z18reportConfigErrorsv+0xd4>
	{
		lb_send_string((char*)"Event running...\n", TRUE);
    27d4:	61 e0       	ldi	r22, 0x01	; 1
    27d6:	83 e3       	ldi	r24, 0x33	; 51
    27d8:	91 e0       	ldi	r25, 0x01	; 1
    27da:	0e 94 c6 09 	call	0x138c	; 0x138c <_Z14lb_send_stringPch>
    27de:	08 95       	ret

000027e0 <_Z14reportTimeTillmmPKcS0_>:
	}
}

BOOL reportTimeTill(time_t from, time_t until, const char* prefix, const char* failMsg)
{
    27e0:	2f 92       	push	r2
    27e2:	3f 92       	push	r3
    27e4:	4f 92       	push	r4
    27e6:	5f 92       	push	r5
    27e8:	6f 92       	push	r6
    27ea:	7f 92       	push	r7
    27ec:	8f 92       	push	r8
    27ee:	9f 92       	push	r9
    27f0:	af 92       	push	r10
    27f2:	bf 92       	push	r11
    27f4:	cf 92       	push	r12
    27f6:	df 92       	push	r13
    27f8:	ef 92       	push	r14
    27fa:	ff 92       	push	r15
    27fc:	0f 93       	push	r16
    27fe:	1f 93       	push	r17
    2800:	cf 93       	push	r28
    2802:	df 93       	push	r29
    2804:	cd b7       	in	r28, 0x3d	; 61
    2806:	de b7       	in	r29, 0x3e	; 62
    2808:	2c 97       	sbiw	r28, 0x0c	; 12
    280a:	0f b6       	in	r0, 0x3f	; 63
    280c:	f8 94       	cli
    280e:	de bf       	out	0x3e, r29	; 62
    2810:	0f be       	out	0x3f, r0	; 63
    2812:	cd bf       	out	0x3d, r28	; 61
    2814:	2b 01       	movw	r4, r22
    2816:	3c 01       	movw	r6, r24
    2818:	49 01       	movw	r8, r18
    281a:	5a 01       	movw	r10, r20
	BOOL failure = FALSE;

	if(from >= until)   /* Negative time */
    281c:	62 17       	cp	r22, r18
    281e:	73 07       	cpc	r23, r19
    2820:	84 07       	cpc	r24, r20
    2822:	95 07       	cpc	r25, r21
    2824:	50 f0       	brcs	.+20     	; 0x283a <_Z14reportTimeTillmmPKcS0_+0x5a>
	{
		failure = TRUE;
		if(failMsg)
    2826:	e1 14       	cp	r14, r1
    2828:	f1 04       	cpc	r15, r1
    282a:	09 f4       	brne	.+2      	; 0x282e <_Z14reportTimeTillmmPKcS0_+0x4e>
    282c:	04 c1       	rjmp	.+520    	; 0x2a36 <_Z14reportTimeTillmmPKcS0_+0x256>
		{
			lb_send_string((char*)failMsg, TRUE);
    282e:	61 e0       	ldi	r22, 0x01	; 1
    2830:	c7 01       	movw	r24, r14
    2832:	0e 94 c6 09 	call	0x138c	; 0x138c <_Z14lb_send_stringPch>
{
	BOOL failure = FALSE;

	if(from >= until)   /* Negative time */
	{
		failure = TRUE;
    2836:	81 e0       	ldi	r24, 0x01	; 1
    2838:	ff c0       	rjmp	.+510    	; 0x2a38 <_Z14reportTimeTillmmPKcS0_+0x258>
			lb_send_string((char*)failMsg, TRUE);
		}
	}
	else
	{
		if(prefix)
    283a:	01 15       	cp	r16, r1
    283c:	11 05       	cpc	r17, r1
    283e:	21 f0       	breq	.+8      	; 0x2848 <_Z14reportTimeTillmmPKcS0_+0x68>
		{
			lb_send_string((char*)prefix, TRUE);
    2840:	61 e0       	ldi	r22, 0x01	; 1
    2842:	c8 01       	movw	r24, r16
    2844:	0e 94 c6 09 	call	0x138c	; 0x138c <_Z14lb_send_stringPch>
		}
		time_t dif = until - from;
    2848:	75 01       	movw	r14, r10
    284a:	64 01       	movw	r12, r8
    284c:	c4 18       	sub	r12, r4
    284e:	d5 08       	sbc	r13, r5
    2850:	e6 08       	sbc	r14, r6
    2852:	f7 08       	sbc	r15, r7
		uint16_t years = dif / YEAR;
    2854:	c7 01       	movw	r24, r14
    2856:	b6 01       	movw	r22, r12
    2858:	20 e8       	ldi	r18, 0x80	; 128
    285a:	33 e3       	ldi	r19, 0x33	; 51
    285c:	41 ee       	ldi	r20, 0xE1	; 225
    285e:	51 e0       	ldi	r21, 0x01	; 1
    2860:	0e 94 2a 2c 	call	0x5854	; 0x5854 <__udivmodsi4>
    2864:	29 01       	movw	r4, r18
    2866:	3a 01       	movw	r6, r20
		time_t hold = dif - (years * YEAR);
    2868:	44 27       	eor	r20, r20
    286a:	55 27       	eor	r21, r21
    286c:	60 e8       	ldi	r22, 0x80	; 128
    286e:	73 e3       	ldi	r23, 0x33	; 51
    2870:	81 ee       	ldi	r24, 0xE1	; 225
    2872:	91 e0       	ldi	r25, 0x01	; 1
    2874:	0e 94 f2 2b 	call	0x57e4	; 0x57e4 <__mulsi3>
    2878:	c6 1a       	sub	r12, r22
    287a:	d7 0a       	sbc	r13, r23
    287c:	e8 0a       	sbc	r14, r24
    287e:	f9 0a       	sbc	r15, r25
		uint16_t days = hold / DAY;
    2880:	c7 01       	movw	r24, r14
    2882:	b6 01       	movw	r22, r12
    2884:	20 e8       	ldi	r18, 0x80	; 128
    2886:	31 e5       	ldi	r19, 0x51	; 81
    2888:	41 e0       	ldi	r20, 0x01	; 1
    288a:	50 e0       	ldi	r21, 0x00	; 0
    288c:	0e 94 2a 2c 	call	0x5854	; 0x5854 <__udivmodsi4>
    2890:	49 01       	movw	r8, r18
    2892:	5a 01       	movw	r10, r20
    2894:	19 01       	movw	r2, r18
		hold -= (days * DAY);
    2896:	44 27       	eor	r20, r20
    2898:	55 27       	eor	r21, r21
    289a:	60 e8       	ldi	r22, 0x80	; 128
    289c:	71 e5       	ldi	r23, 0x51	; 81
    289e:	81 e0       	ldi	r24, 0x01	; 1
    28a0:	90 e0       	ldi	r25, 0x00	; 0
    28a2:	0e 94 f2 2b 	call	0x57e4	; 0x57e4 <__mulsi3>
    28a6:	c6 1a       	sub	r12, r22
    28a8:	d7 0a       	sbc	r13, r23
    28aa:	e8 0a       	sbc	r14, r24
    28ac:	f9 0a       	sbc	r15, r25
		uint16_t hours = hold / HOUR;
    28ae:	c7 01       	movw	r24, r14
    28b0:	b6 01       	movw	r22, r12
    28b2:	20 e1       	ldi	r18, 0x10	; 16
    28b4:	3e e0       	ldi	r19, 0x0E	; 14
    28b6:	40 e0       	ldi	r20, 0x00	; 0
    28b8:	50 e0       	ldi	r21, 0x00	; 0
    28ba:	0e 94 2a 2c 	call	0x5854	; 0x5854 <__udivmodsi4>
    28be:	29 83       	std	Y+1, r18	; 0x01
    28c0:	3a 83       	std	Y+2, r19	; 0x02
    28c2:	4b 83       	std	Y+3, r20	; 0x03
    28c4:	5c 83       	std	Y+4, r21	; 0x04
    28c6:	29 81       	ldd	r18, Y+1	; 0x01
    28c8:	3a 81       	ldd	r19, Y+2	; 0x02
    28ca:	3a 87       	std	Y+10, r19	; 0x0a
    28cc:	29 87       	std	Y+9, r18	; 0x09
		hold -= (hours * HOUR);
    28ce:	29 81       	ldd	r18, Y+1	; 0x01
    28d0:	3a 81       	ldd	r19, Y+2	; 0x02
    28d2:	4b 81       	ldd	r20, Y+3	; 0x03
    28d4:	5c 81       	ldd	r21, Y+4	; 0x04
    28d6:	44 27       	eor	r20, r20
    28d8:	55 27       	eor	r21, r21
    28da:	a0 e1       	ldi	r26, 0x10	; 16
    28dc:	be e0       	ldi	r27, 0x0E	; 14
    28de:	0e 94 87 2c 	call	0x590e	; 0x590e <__muluhisi3>
    28e2:	c6 1a       	sub	r12, r22
    28e4:	d7 0a       	sbc	r13, r23
    28e6:	e8 0a       	sbc	r14, r24
    28e8:	f9 0a       	sbc	r15, r25
		uint16_t minutes = hold / MINUTE;
    28ea:	c7 01       	movw	r24, r14
    28ec:	b6 01       	movw	r22, r12
    28ee:	2c e3       	ldi	r18, 0x3C	; 60
    28f0:	30 e0       	ldi	r19, 0x00	; 0
    28f2:	40 e0       	ldi	r20, 0x00	; 0
    28f4:	50 e0       	ldi	r21, 0x00	; 0
    28f6:	0e 94 2a 2c 	call	0x5854	; 0x5854 <__udivmodsi4>
    28fa:	2d 83       	std	Y+5, r18	; 0x05
    28fc:	3e 83       	std	Y+6, r19	; 0x06
    28fe:	4f 83       	std	Y+7, r20	; 0x07
    2900:	58 87       	std	Y+8, r21	; 0x08
    2902:	0d 81       	ldd	r16, Y+5	; 0x05
    2904:	1e 81       	ldd	r17, Y+6	; 0x06
		uint16_t seconds = hold - (minutes * MINUTE);
    2906:	2c e3       	ldi	r18, 0x3C	; 60
    2908:	20 9f       	mul	r18, r16
    290a:	c0 01       	movw	r24, r0
    290c:	21 9f       	mul	r18, r17
    290e:	90 0d       	add	r25, r0
    2910:	11 24       	eor	r1, r1
    2912:	a6 01       	movw	r20, r12
    2914:	48 1b       	sub	r20, r24
    2916:	59 0b       	sbc	r21, r25
    2918:	5c 87       	std	Y+12, r21	; 0x0c
    291a:	4b 87       	std	Y+11, r20	; 0x0b

		g_tempStr[0] = '\0';
    291c:	10 92 fa 04 	sts	0x04FA, r1	; 0x8004fa <g_tempStr>

		if(years)
    2920:	41 14       	cp	r4, r1
    2922:	51 04       	cpc	r5, r1
    2924:	b9 f0       	breq	.+46     	; 0x2954 <_Z14reportTimeTillmmPKcS0_+0x174>
		{
			sprintf(g_tempStr, "%d yrs ", years);
    2926:	5f 92       	push	r5
    2928:	4f 92       	push	r4
    292a:	85 e4       	ldi	r24, 0x45	; 69
    292c:	91 e0       	ldi	r25, 0x01	; 1
    292e:	9f 93       	push	r25
    2930:	8f 93       	push	r24
    2932:	8a ef       	ldi	r24, 0xFA	; 250
    2934:	94 e0       	ldi	r25, 0x04	; 4
    2936:	9f 93       	push	r25
    2938:	8f 93       	push	r24
    293a:	0e 94 46 2e 	call	0x5c8c	; 0x5c8c <sprintf>
			lb_send_string(g_tempStr, TRUE);
    293e:	61 e0       	ldi	r22, 0x01	; 1
    2940:	8a ef       	ldi	r24, 0xFA	; 250
    2942:	94 e0       	ldi	r25, 0x04	; 4
    2944:	0e 94 c6 09 	call	0x138c	; 0x138c <_Z14lb_send_stringPch>
    2948:	0f 90       	pop	r0
    294a:	0f 90       	pop	r0
    294c:	0f 90       	pop	r0
    294e:	0f 90       	pop	r0
    2950:	0f 90       	pop	r0
    2952:	0f 90       	pop	r0
		}

		if(days)
    2954:	23 28       	or	r2, r3
    2956:	b9 f0       	breq	.+46     	; 0x2986 <_Z14reportTimeTillmmPKcS0_+0x1a6>
		{
			sprintf(g_tempStr, "%d days ", days);
    2958:	9f 92       	push	r9
    295a:	8f 92       	push	r8
    295c:	8d e4       	ldi	r24, 0x4D	; 77
    295e:	91 e0       	ldi	r25, 0x01	; 1
    2960:	9f 93       	push	r25
    2962:	8f 93       	push	r24
    2964:	8a ef       	ldi	r24, 0xFA	; 250
    2966:	94 e0       	ldi	r25, 0x04	; 4
    2968:	9f 93       	push	r25
    296a:	8f 93       	push	r24
    296c:	0e 94 46 2e 	call	0x5c8c	; 0x5c8c <sprintf>
			lb_send_string(g_tempStr, TRUE);
    2970:	61 e0       	ldi	r22, 0x01	; 1
    2972:	8a ef       	ldi	r24, 0xFA	; 250
    2974:	94 e0       	ldi	r25, 0x04	; 4
    2976:	0e 94 c6 09 	call	0x138c	; 0x138c <_Z14lb_send_stringPch>
    297a:	0f 90       	pop	r0
    297c:	0f 90       	pop	r0
    297e:	0f 90       	pop	r0
    2980:	0f 90       	pop	r0
    2982:	0f 90       	pop	r0
    2984:	0f 90       	pop	r0
		}

		if(hours)
    2986:	89 85       	ldd	r24, Y+9	; 0x09
    2988:	9a 85       	ldd	r25, Y+10	; 0x0a
    298a:	89 2b       	or	r24, r25
    298c:	c9 f0       	breq	.+50     	; 0x29c0 <_Z14reportTimeTillmmPKcS0_+0x1e0>
		{
			sprintf(g_tempStr, "%d hrs ", hours);
    298e:	9a 81       	ldd	r25, Y+2	; 0x02
    2990:	9f 93       	push	r25
    2992:	e9 81       	ldd	r30, Y+1	; 0x01
    2994:	ef 93       	push	r30
    2996:	86 e5       	ldi	r24, 0x56	; 86
    2998:	91 e0       	ldi	r25, 0x01	; 1
    299a:	9f 93       	push	r25
    299c:	8f 93       	push	r24
    299e:	8a ef       	ldi	r24, 0xFA	; 250
    29a0:	94 e0       	ldi	r25, 0x04	; 4
    29a2:	9f 93       	push	r25
    29a4:	8f 93       	push	r24
    29a6:	0e 94 46 2e 	call	0x5c8c	; 0x5c8c <sprintf>
			lb_send_string(g_tempStr, TRUE);
    29aa:	61 e0       	ldi	r22, 0x01	; 1
    29ac:	8a ef       	ldi	r24, 0xFA	; 250
    29ae:	94 e0       	ldi	r25, 0x04	; 4
    29b0:	0e 94 c6 09 	call	0x138c	; 0x138c <_Z14lb_send_stringPch>
    29b4:	0f 90       	pop	r0
    29b6:	0f 90       	pop	r0
    29b8:	0f 90       	pop	r0
    29ba:	0f 90       	pop	r0
    29bc:	0f 90       	pop	r0
    29be:	0f 90       	pop	r0
		}

		if(minutes)
    29c0:	01 2b       	or	r16, r17
    29c2:	c9 f0       	breq	.+50     	; 0x29f6 <_Z14reportTimeTillmmPKcS0_+0x216>
		{
			sprintf(g_tempStr, "%d min ", minutes);
    29c4:	fe 81       	ldd	r31, Y+6	; 0x06
    29c6:	ff 93       	push	r31
    29c8:	2d 81       	ldd	r18, Y+5	; 0x05
    29ca:	2f 93       	push	r18
    29cc:	8e e5       	ldi	r24, 0x5E	; 94
    29ce:	91 e0       	ldi	r25, 0x01	; 1
    29d0:	9f 93       	push	r25
    29d2:	8f 93       	push	r24
    29d4:	8a ef       	ldi	r24, 0xFA	; 250
    29d6:	94 e0       	ldi	r25, 0x04	; 4
    29d8:	9f 93       	push	r25
    29da:	8f 93       	push	r24
    29dc:	0e 94 46 2e 	call	0x5c8c	; 0x5c8c <sprintf>
			lb_send_string(g_tempStr, TRUE);
    29e0:	61 e0       	ldi	r22, 0x01	; 1
    29e2:	8a ef       	ldi	r24, 0xFA	; 250
    29e4:	94 e0       	ldi	r25, 0x04	; 4
    29e6:	0e 94 c6 09 	call	0x138c	; 0x138c <_Z14lb_send_stringPch>
    29ea:	0f 90       	pop	r0
    29ec:	0f 90       	pop	r0
    29ee:	0f 90       	pop	r0
    29f0:	0f 90       	pop	r0
    29f2:	0f 90       	pop	r0
    29f4:	0f 90       	pop	r0
		}

		sprintf(g_tempStr, "%d sec", seconds);
    29f6:	3c 85       	ldd	r19, Y+12	; 0x0c
    29f8:	3f 93       	push	r19
    29fa:	4b 85       	ldd	r20, Y+11	; 0x0b
    29fc:	4f 93       	push	r20
    29fe:	86 e6       	ldi	r24, 0x66	; 102
    2a00:	91 e0       	ldi	r25, 0x01	; 1
    2a02:	9f 93       	push	r25
    2a04:	8f 93       	push	r24
    2a06:	8a ef       	ldi	r24, 0xFA	; 250
    2a08:	94 e0       	ldi	r25, 0x04	; 4
    2a0a:	9f 93       	push	r25
    2a0c:	8f 93       	push	r24
    2a0e:	0e 94 46 2e 	call	0x5c8c	; 0x5c8c <sprintf>
		lb_send_string(g_tempStr, TRUE);
    2a12:	61 e0       	ldi	r22, 0x01	; 1
    2a14:	8a ef       	ldi	r24, 0xFA	; 250
    2a16:	94 e0       	ldi	r25, 0x04	; 4
    2a18:	0e 94 c6 09 	call	0x138c	; 0x138c <_Z14lb_send_stringPch>

		lb_send_NewLine();
    2a1c:	0e 94 b1 09 	call	0x1362	; 0x1362 <_Z15lb_send_NewLinev>
		g_tempStr[0] = '\0';
    2a20:	ea ef       	ldi	r30, 0xFA	; 250
    2a22:	f4 e0       	ldi	r31, 0x04	; 4
    2a24:	10 82       	st	Z, r1
    2a26:	0f 90       	pop	r0
    2a28:	0f 90       	pop	r0
    2a2a:	0f 90       	pop	r0
    2a2c:	0f 90       	pop	r0
    2a2e:	0f 90       	pop	r0
    2a30:	0f 90       	pop	r0
	}
}

BOOL reportTimeTill(time_t from, time_t until, const char* prefix, const char* failMsg)
{
	BOOL failure = FALSE;
    2a32:	80 e0       	ldi	r24, 0x00	; 0
    2a34:	01 c0       	rjmp	.+2      	; 0x2a38 <_Z14reportTimeTillmmPKcS0_+0x258>

	if(from >= until)   /* Negative time */
	{
		failure = TRUE;
    2a36:	81 e0       	ldi	r24, 0x01	; 1
		lb_send_NewLine();
		g_tempStr[0] = '\0';
	}

	return( failure);
}
    2a38:	2c 96       	adiw	r28, 0x0c	; 12
    2a3a:	0f b6       	in	r0, 0x3f	; 63
    2a3c:	f8 94       	cli
    2a3e:	de bf       	out	0x3e, r29	; 62
    2a40:	0f be       	out	0x3f, r0	; 63
    2a42:	cd bf       	out	0x3d, r28	; 61
    2a44:	df 91       	pop	r29
    2a46:	cf 91       	pop	r28
    2a48:	1f 91       	pop	r17
    2a4a:	0f 91       	pop	r16
    2a4c:	ff 90       	pop	r15
    2a4e:	ef 90       	pop	r14
    2a50:	df 90       	pop	r13
    2a52:	cf 90       	pop	r12
    2a54:	bf 90       	pop	r11
    2a56:	af 90       	pop	r10
    2a58:	9f 90       	pop	r9
    2a5a:	8f 90       	pop	r8
    2a5c:	7f 90       	pop	r7
    2a5e:	6f 90       	pop	r6
    2a60:	5f 90       	pop	r5
    2a62:	4f 90       	pop	r4
    2a64:	3f 90       	pop	r3
    2a66:	2f 90       	pop	r2
    2a68:	08 95       	ret

00002a6a <_Z18startEventUsingRTCv>:

	linkbus_init(BAUD);
}

void startEventUsingRTC(void)
{
    2a6a:	ef 92       	push	r14
    2a6c:	ff 92       	push	r15
    2a6e:	0f 93       	push	r16
    2a70:	1f 93       	push	r17
	g_transmissions_disabled = TRUE;
    2a72:	81 e0       	ldi	r24, 0x01	; 1
    2a74:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <g_transmissions_disabled>

	if(!clockConfigurationError())
    2a78:	0e 94 b6 0c 	call	0x196c	; 0x196c <_Z23clockConfigurationErrorv>
    2a7c:	81 11       	cpse	r24, r1
    2a7e:	5d c0       	rjmp	.+186    	; 0x2b3a <_Z18startEventUsingRTCv+0xd0>
	{
		g_use_rtc_to_start = TRUE;
    2a80:	81 e0       	ldi	r24, 0x01	; 1
    2a82:	80 93 5d 05 	sts	0x055D, r24	; 0x80055d <g_use_rtc_to_start>
		reportTimeTill(g_current_epoch, g_event_start_epoch, "Starts in: ", "In progress\n");
    2a86:	20 91 a3 05 	lds	r18, 0x05A3	; 0x8005a3 <g_event_start_epoch>
    2a8a:	30 91 a4 05 	lds	r19, 0x05A4	; 0x8005a4 <g_event_start_epoch+0x1>
    2a8e:	40 91 a5 05 	lds	r20, 0x05A5	; 0x8005a5 <g_event_start_epoch+0x2>
    2a92:	50 91 a6 05 	lds	r21, 0x05A6	; 0x8005a6 <g_event_start_epoch+0x3>
    2a96:	60 91 a7 05 	lds	r22, 0x05A7	; 0x8005a7 <g_current_epoch>
    2a9a:	70 91 a8 05 	lds	r23, 0x05A8	; 0x8005a8 <g_current_epoch+0x1>
    2a9e:	80 91 a9 05 	lds	r24, 0x05A9	; 0x8005a9 <g_current_epoch+0x2>
    2aa2:	90 91 aa 05 	lds	r25, 0x05AA	; 0x8005aa <g_current_epoch+0x3>
    2aa6:	0f 2e       	mov	r0, r31
    2aa8:	fd e6       	ldi	r31, 0x6D	; 109
    2aaa:	ef 2e       	mov	r14, r31
    2aac:	f1 e0       	ldi	r31, 0x01	; 1
    2aae:	ff 2e       	mov	r15, r31
    2ab0:	f0 2d       	mov	r31, r0
    2ab2:	0a e7       	ldi	r16, 0x7A	; 122
    2ab4:	11 e0       	ldi	r17, 0x01	; 1
    2ab6:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <_Z14reportTimeTillmmPKcS0_>
		reportTimeTill(g_event_start_epoch, g_event_finish_epoch, "Lasts: ", NULL);
    2aba:	20 91 9f 05 	lds	r18, 0x059F	; 0x80059f <g_event_finish_epoch>
    2abe:	30 91 a0 05 	lds	r19, 0x05A0	; 0x8005a0 <g_event_finish_epoch+0x1>
    2ac2:	40 91 a1 05 	lds	r20, 0x05A1	; 0x8005a1 <g_event_finish_epoch+0x2>
    2ac6:	50 91 a2 05 	lds	r21, 0x05A2	; 0x8005a2 <g_event_finish_epoch+0x3>
    2aca:	60 91 a3 05 	lds	r22, 0x05A3	; 0x8005a3 <g_event_start_epoch>
    2ace:	70 91 a4 05 	lds	r23, 0x05A4	; 0x8005a4 <g_event_start_epoch+0x1>
    2ad2:	80 91 a5 05 	lds	r24, 0x05A5	; 0x8005a5 <g_event_start_epoch+0x2>
    2ad6:	90 91 a6 05 	lds	r25, 0x05A6	; 0x8005a6 <g_event_start_epoch+0x3>
    2ada:	e1 2c       	mov	r14, r1
    2adc:	f1 2c       	mov	r15, r1
    2ade:	06 e8       	ldi	r16, 0x86	; 134
    2ae0:	11 e0       	ldi	r17, 0x01	; 1
    2ae2:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <_Z14reportTimeTillmmPKcS0_>
		if(g_event_start_epoch < g_current_epoch)
    2ae6:	40 91 a3 05 	lds	r20, 0x05A3	; 0x8005a3 <g_event_start_epoch>
    2aea:	50 91 a4 05 	lds	r21, 0x05A4	; 0x8005a4 <g_event_start_epoch+0x1>
    2aee:	60 91 a5 05 	lds	r22, 0x05A5	; 0x8005a5 <g_event_start_epoch+0x2>
    2af2:	70 91 a6 05 	lds	r23, 0x05A6	; 0x8005a6 <g_event_start_epoch+0x3>
    2af6:	80 91 a7 05 	lds	r24, 0x05A7	; 0x8005a7 <g_current_epoch>
    2afa:	90 91 a8 05 	lds	r25, 0x05A8	; 0x8005a8 <g_current_epoch+0x1>
    2afe:	a0 91 a9 05 	lds	r26, 0x05A9	; 0x8005a9 <g_current_epoch+0x2>
    2b02:	b0 91 aa 05 	lds	r27, 0x05AA	; 0x8005aa <g_current_epoch+0x3>
    2b06:	48 17       	cp	r20, r24
    2b08:	59 07       	cpc	r21, r25
    2b0a:	6a 07       	cpc	r22, r26
    2b0c:	7b 07       	cpc	r23, r27
    2b0e:	b8 f4       	brcc	.+46     	; 0x2b3e <_Z18startEventUsingRTCv+0xd4>
		{
			reportTimeTill(g_current_epoch, g_event_finish_epoch, "Time Remaining: ", NULL);
    2b10:	20 91 9f 05 	lds	r18, 0x059F	; 0x80059f <g_event_finish_epoch>
    2b14:	30 91 a0 05 	lds	r19, 0x05A0	; 0x8005a0 <g_event_finish_epoch+0x1>
    2b18:	40 91 a1 05 	lds	r20, 0x05A1	; 0x8005a1 <g_event_finish_epoch+0x2>
    2b1c:	50 91 a2 05 	lds	r21, 0x05A2	; 0x8005a2 <g_event_finish_epoch+0x3>
    2b20:	60 91 a7 05 	lds	r22, 0x05A7	; 0x8005a7 <g_current_epoch>
    2b24:	70 91 a8 05 	lds	r23, 0x05A8	; 0x8005a8 <g_current_epoch+0x1>
    2b28:	80 91 a9 05 	lds	r24, 0x05A9	; 0x8005a9 <g_current_epoch+0x2>
    2b2c:	90 91 aa 05 	lds	r25, 0x05AA	; 0x8005aa <g_current_epoch+0x3>
    2b30:	0e e8       	ldi	r16, 0x8E	; 142
    2b32:	11 e0       	ldi	r17, 0x01	; 1
    2b34:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <_Z14reportTimeTillmmPKcS0_>
    2b38:	02 c0       	rjmp	.+4      	; 0x2b3e <_Z18startEventUsingRTCv+0xd4>
		}
	}
	else
	{
		reportConfigErrors();
    2b3a:	0e 94 85 13 	call	0x270a	; 0x270a <_Z18reportConfigErrorsv>
	}
}
    2b3e:	1f 91       	pop	r17
    2b40:	0f 91       	pop	r16
    2b42:	ff 90       	pop	r15
    2b44:	ef 90       	pop	r14
    2b46:	08 95       	ret

00002b48 <_Z18validateTimeStringPcPma>:

	return( failure);
}

time_t validateTimeString(char* str, time_t* epicVar, int8_t offsetHours)
{
    2b48:	4f 92       	push	r4
    2b4a:	5f 92       	push	r5
    2b4c:	6f 92       	push	r6
    2b4e:	7f 92       	push	r7
    2b50:	8f 92       	push	r8
    2b52:	9f 92       	push	r9
    2b54:	af 92       	push	r10
    2b56:	bf 92       	push	r11
    2b58:	ef 92       	push	r14
    2b5a:	ff 92       	push	r15
    2b5c:	0f 93       	push	r16
    2b5e:	1f 93       	push	r17
    2b60:	cf 93       	push	r28
    2b62:	df 93       	push	r29
    2b64:	cd b7       	in	r28, 0x3d	; 61
    2b66:	de b7       	in	r29, 0x3e	; 62
    2b68:	2c 97       	sbiw	r28, 0x0c	; 12
    2b6a:	0f b6       	in	r0, 0x3f	; 63
    2b6c:	f8 94       	cli
    2b6e:	de bf       	out	0x3e, r29	; 62
    2b70:	0f be       	out	0x3f, r0	; 63
    2b72:	cd bf       	out	0x3d, r28	; 61
    2b74:	8c 01       	movw	r16, r24
    2b76:	e4 2e       	mov	r14, r20
	time_t valid = 0;
	int len = strlen(str);
    2b78:	fc 01       	movw	r30, r24
    2b7a:	01 90       	ld	r0, Z+
    2b7c:	00 20       	and	r0, r0
    2b7e:	e9 f7       	brne	.-6      	; 0x2b7a <_Z18validateTimeStringPcPma+0x32>
    2b80:	31 97       	sbiw	r30, 0x01	; 1
    2b82:	e8 1b       	sub	r30, r24
    2b84:	f9 0b       	sbc	r31, r25
	time_t minimumEpoch = MINIMUM_EPOCH;
	uint8_t validationType = 0;

	if(epicVar == &g_event_start_epoch)
    2b86:	25 e0       	ldi	r18, 0x05	; 5
    2b88:	63 3a       	cpi	r22, 0xA3	; 163
    2b8a:	72 07       	cpc	r23, r18
    2b8c:	49 f5       	brne	.+82     	; 0x2be0 <_Z18validateTimeStringPcPma+0x98>
	{
		minimumEpoch = MAX(g_current_epoch, MINIMUM_EPOCH);
    2b8e:	80 91 a7 05 	lds	r24, 0x05A7	; 0x8005a7 <g_current_epoch>
    2b92:	90 91 a8 05 	lds	r25, 0x05A8	; 0x8005a8 <g_current_epoch+0x1>
    2b96:	a0 91 a9 05 	lds	r26, 0x05A9	; 0x8005a9 <g_current_epoch+0x2>
    2b9a:	b0 91 aa 05 	lds	r27, 0x05AA	; 0x8005aa <g_current_epoch+0x3>
    2b9e:	89 87       	std	Y+9, r24	; 0x09
    2ba0:	9a 87       	std	Y+10, r25	; 0x0a
    2ba2:	ab 87       	std	Y+11, r26	; 0x0b
    2ba4:	bc 87       	std	Y+12, r27	; 0x0c
    2ba6:	80 e0       	ldi	r24, 0x00	; 0
    2ba8:	96 e6       	ldi	r25, 0x66	; 102
    2baa:	ae ee       	ldi	r26, 0xEE	; 238
    2bac:	bf e5       	ldi	r27, 0x5F	; 95
    2bae:	89 83       	std	Y+1, r24	; 0x01
    2bb0:	9a 83       	std	Y+2, r25	; 0x02
    2bb2:	ab 83       	std	Y+3, r26	; 0x03
    2bb4:	bc 83       	std	Y+4, r27	; 0x04
    2bb6:	89 85       	ldd	r24, Y+9	; 0x09
    2bb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bba:	ab 85       	ldd	r26, Y+11	; 0x0b
    2bbc:	bc 85       	ldd	r27, Y+12	; 0x0c
    2bbe:	81 15       	cp	r24, r1
    2bc0:	96 46       	sbci	r25, 0x66	; 102
    2bc2:	ae 4e       	sbci	r26, 0xEE	; 238
    2bc4:	bf 45       	sbci	r27, 0x5F	; 95
    2bc6:	28 f4       	brcc	.+10     	; 0x2bd2 <_Z18validateTimeStringPcPma+0x8a>
    2bc8:	89 80       	ldd	r8, Y+1	; 0x01
    2bca:	9a 80       	ldd	r9, Y+2	; 0x02
    2bcc:	ab 80       	ldd	r10, Y+3	; 0x03
    2bce:	bc 80       	ldd	r11, Y+4	; 0x04
    2bd0:	04 c0       	rjmp	.+8      	; 0x2bda <_Z18validateTimeStringPcPma+0x92>
    2bd2:	89 84       	ldd	r8, Y+9	; 0x09
    2bd4:	9a 84       	ldd	r9, Y+10	; 0x0a
    2bd6:	ab 84       	ldd	r10, Y+11	; 0x0b
    2bd8:	bc 84       	ldd	r11, Y+12	; 0x0c
		validationType = 1;
    2bda:	ff 24       	eor	r15, r15
    2bdc:	f3 94       	inc	r15
    2bde:	42 c0       	rjmp	.+132    	; 0x2c64 <_Z18validateTimeStringPcPma+0x11c>
	}
	else if(epicVar == &g_event_finish_epoch)
    2be0:	6f 59       	subi	r22, 0x9F	; 159
    2be2:	75 40       	sbci	r23, 0x05	; 5
    2be4:	a9 f5       	brne	.+106    	; 0x2c50 <_Z18validateTimeStringPcPma+0x108>
	{
		minimumEpoch = MAX(g_event_start_epoch, g_current_epoch);
    2be6:	80 91 a3 05 	lds	r24, 0x05A3	; 0x8005a3 <g_event_start_epoch>
    2bea:	90 91 a4 05 	lds	r25, 0x05A4	; 0x8005a4 <g_event_start_epoch+0x1>
    2bee:	a0 91 a5 05 	lds	r26, 0x05A5	; 0x8005a5 <g_event_start_epoch+0x2>
    2bf2:	b0 91 a6 05 	lds	r27, 0x05A6	; 0x8005a6 <g_event_start_epoch+0x3>
    2bf6:	8d 83       	std	Y+5, r24	; 0x05
    2bf8:	9e 83       	std	Y+6, r25	; 0x06
    2bfa:	af 83       	std	Y+7, r26	; 0x07
    2bfc:	b8 87       	std	Y+8, r27	; 0x08
    2bfe:	80 91 a7 05 	lds	r24, 0x05A7	; 0x8005a7 <g_current_epoch>
    2c02:	90 91 a8 05 	lds	r25, 0x05A8	; 0x8005a8 <g_current_epoch+0x1>
    2c06:	a0 91 a9 05 	lds	r26, 0x05A9	; 0x8005a9 <g_current_epoch+0x2>
    2c0a:	b0 91 aa 05 	lds	r27, 0x05AA	; 0x8005aa <g_current_epoch+0x3>
    2c0e:	89 83       	std	Y+1, r24	; 0x01
    2c10:	9a 83       	std	Y+2, r25	; 0x02
    2c12:	ab 83       	std	Y+3, r26	; 0x03
    2c14:	bc 83       	std	Y+4, r27	; 0x04
    2c16:	4d 81       	ldd	r20, Y+5	; 0x05
    2c18:	5e 81       	ldd	r21, Y+6	; 0x06
    2c1a:	6f 81       	ldd	r22, Y+7	; 0x07
    2c1c:	78 85       	ldd	r23, Y+8	; 0x08
    2c1e:	89 81       	ldd	r24, Y+1	; 0x01
    2c20:	9a 81       	ldd	r25, Y+2	; 0x02
    2c22:	ab 81       	ldd	r26, Y+3	; 0x03
    2c24:	bc 81       	ldd	r27, Y+4	; 0x04
    2c26:	48 17       	cp	r20, r24
    2c28:	59 07       	cpc	r21, r25
    2c2a:	6a 07       	cpc	r22, r26
    2c2c:	7b 07       	cpc	r23, r27
    2c2e:	40 f4       	brcc	.+16     	; 0x2c40 <_Z18validateTimeStringPcPma+0xf8>
    2c30:	89 80       	ldd	r8, Y+1	; 0x01
    2c32:	9a 80       	ldd	r9, Y+2	; 0x02
    2c34:	ab 80       	ldd	r10, Y+3	; 0x03
    2c36:	bc 80       	ldd	r11, Y+4	; 0x04
		validationType = 2;
    2c38:	68 94       	set
    2c3a:	ff 24       	eor	r15, r15
    2c3c:	f1 f8       	bld	r15, 1
    2c3e:	12 c0       	rjmp	.+36     	; 0x2c64 <_Z18validateTimeStringPcPma+0x11c>
		minimumEpoch = MAX(g_current_epoch, MINIMUM_EPOCH);
		validationType = 1;
	}
	else if(epicVar == &g_event_finish_epoch)
	{
		minimumEpoch = MAX(g_event_start_epoch, g_current_epoch);
    2c40:	8d 80       	ldd	r8, Y+5	; 0x05
    2c42:	9e 80       	ldd	r9, Y+6	; 0x06
    2c44:	af 80       	ldd	r10, Y+7	; 0x07
    2c46:	b8 84       	ldd	r11, Y+8	; 0x08
		validationType = 2;
    2c48:	68 94       	set
    2c4a:	ff 24       	eor	r15, r15
    2c4c:	f1 f8       	bld	r15, 1
    2c4e:	0a c0       	rjmp	.+20     	; 0x2c64 <_Z18validateTimeStringPcPma+0x11c>
time_t validateTimeString(char* str, time_t* epicVar, int8_t offsetHours)
{
	time_t valid = 0;
	int len = strlen(str);
	time_t minimumEpoch = MINIMUM_EPOCH;
	uint8_t validationType = 0;
    2c50:	f1 2c       	mov	r15, r1

time_t validateTimeString(char* str, time_t* epicVar, int8_t offsetHours)
{
	time_t valid = 0;
	int len = strlen(str);
	time_t minimumEpoch = MINIMUM_EPOCH;
    2c52:	0f 2e       	mov	r0, r31
    2c54:	81 2c       	mov	r8, r1
    2c56:	f6 e6       	ldi	r31, 0x66	; 102
    2c58:	9f 2e       	mov	r9, r31
    2c5a:	fe ee       	ldi	r31, 0xEE	; 238
    2c5c:	af 2e       	mov	r10, r31
    2c5e:	ff e5       	ldi	r31, 0x5F	; 95
    2c60:	bf 2e       	mov	r11, r31
    2c62:	f0 2d       	mov	r31, r0
	{
		minimumEpoch = MAX(g_event_start_epoch, g_current_epoch);
		validationType = 2;
	}

	if((len == 12) && (only_digits(str)))
    2c64:	ec 30       	cpi	r30, 0x0C	; 12
    2c66:	f1 05       	cpc	r31, r1
    2c68:	09 f0       	breq	.+2      	; 0x2c6c <_Z18validateTimeStringPcPma+0x124>
    2c6a:	5e c0       	rjmp	.+188    	; 0x2d28 <_Z18validateTimeStringPcPma+0x1e0>
    2c6c:	c8 01       	movw	r24, r16
    2c6e:	0e 94 05 13 	call	0x260a	; 0x260a <_Z11only_digitsPc>
    2c72:	88 23       	and	r24, r24
    2c74:	09 f4       	brne	.+2      	; 0x2c78 <_Z18validateTimeStringPcPma+0x130>
    2c76:	4f c0       	rjmp	.+158    	; 0x2d16 <_Z18validateTimeStringPcPma+0x1ce>
	{
		time_t ep = rv3028_get_epoch(NULL, str);    /* String format "YYMMDDhhmmss" */
    2c78:	b8 01       	movw	r22, r16
    2c7a:	80 e0       	ldi	r24, 0x00	; 0
    2c7c:	90 e0       	ldi	r25, 0x00	; 0
    2c7e:	0e 94 5e 27 	call	0x4ebc	; 0x4ebc <_Z16rv3028_get_epochPbPc>
    2c82:	2b 01       	movw	r4, r22
    2c84:	3c 01       	movw	r6, r24

		ep += (HOUR * offsetHours);
    2c86:	ae 2d       	mov	r26, r14
    2c88:	ee 0c       	add	r14, r14
    2c8a:	bb 0b       	sbc	r27, r27
    2c8c:	20 e1       	ldi	r18, 0x10	; 16
    2c8e:	3e e0       	ldi	r19, 0x0E	; 14
    2c90:	0e 94 80 2c 	call	0x5900	; 0x5900 <__usmulhisi3>
    2c94:	64 0d       	add	r22, r4
    2c96:	75 1d       	adc	r23, r5
    2c98:	86 1d       	adc	r24, r6
    2c9a:	97 1d       	adc	r25, r7

		if(ep > minimumEpoch)
    2c9c:	86 16       	cp	r8, r22
    2c9e:	97 06       	cpc	r9, r23
    2ca0:	a8 06       	cpc	r10, r24
    2ca2:	b9 06       	cpc	r11, r25
    2ca4:	08 f4       	brcc	.+2      	; 0x2ca8 <_Z18validateTimeStringPcPma+0x160>
    2ca6:	45 c0       	rjmp	.+138    	; 0x2d32 <_Z18validateTimeStringPcPma+0x1ea>
		{
			valid = ep;
		}
		else
		{
			if(validationType == 1)         /* start time validation */
    2ca8:	21 e0       	ldi	r18, 0x01	; 1
    2caa:	f2 12       	cpse	r15, r18
    2cac:	09 c0       	rjmp	.+18     	; 0x2cc0 <_Z18validateTimeStringPcPma+0x178>
			{
				ee_mgr.sendEEPROMString(TextErrStartInPast);
    2cae:	68 e0       	ldi	r22, 0x08	; 8
    2cb0:	85 eb       	ldi	r24, 0xB5	; 181
    2cb2:	95 e0       	ldi	r25, 0x05	; 5
    2cb4:	0e 94 58 03 	call	0x6b0	; 0x6b0 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	return( failure);
}

time_t validateTimeString(char* str, time_t* epicVar, int8_t offsetHours)
{
	time_t valid = 0;
    2cb8:	60 e0       	ldi	r22, 0x00	; 0
    2cba:	70 e0       	ldi	r23, 0x00	; 0
    2cbc:	cb 01       	movw	r24, r22
    2cbe:	39 c0       	rjmp	.+114    	; 0x2d32 <_Z18validateTimeStringPcPma+0x1ea>
		{
			if(validationType == 1)         /* start time validation */
			{
				ee_mgr.sendEEPROMString(TextErrStartInPast);
			}
			else if(validationType == 2)    /* finish time validation */
    2cc0:	22 e0       	ldi	r18, 0x02	; 2
    2cc2:	f2 12       	cpse	r15, r18
    2cc4:	1f c0       	rjmp	.+62     	; 0x2d04 <_Z18validateTimeStringPcPma+0x1bc>
			{
				if(ep < g_current_epoch)
    2cc6:	00 91 a7 05 	lds	r16, 0x05A7	; 0x8005a7 <g_current_epoch>
    2cca:	10 91 a8 05 	lds	r17, 0x05A8	; 0x8005a8 <g_current_epoch+0x1>
    2cce:	20 91 a9 05 	lds	r18, 0x05A9	; 0x8005a9 <g_current_epoch+0x2>
    2cd2:	30 91 aa 05 	lds	r19, 0x05AA	; 0x8005aa <g_current_epoch+0x3>
    2cd6:	60 17       	cp	r22, r16
    2cd8:	71 07       	cpc	r23, r17
    2cda:	82 07       	cpc	r24, r18
    2cdc:	93 07       	cpc	r25, r19
    2cde:	48 f4       	brcc	.+18     	; 0x2cf2 <_Z18validateTimeStringPcPma+0x1aa>
				{
					ee_mgr.sendEEPROMString(TextErrFinishInPast);
    2ce0:	67 e0       	ldi	r22, 0x07	; 7
    2ce2:	85 eb       	ldi	r24, 0xB5	; 181
    2ce4:	95 e0       	ldi	r25, 0x05	; 5
    2ce6:	0e 94 58 03 	call	0x6b0	; 0x6b0 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	return( failure);
}

time_t validateTimeString(char* str, time_t* epicVar, int8_t offsetHours)
{
	time_t valid = 0;
    2cea:	60 e0       	ldi	r22, 0x00	; 0
    2cec:	70 e0       	ldi	r23, 0x00	; 0
    2cee:	cb 01       	movw	r24, r22
    2cf0:	20 c0       	rjmp	.+64     	; 0x2d32 <_Z18validateTimeStringPcPma+0x1ea>
				{
					ee_mgr.sendEEPROMString(TextErrFinishInPast);
				}
				else
				{
					ee_mgr.sendEEPROMString(TextErrFinishB4Start);
    2cf2:	66 e0       	ldi	r22, 0x06	; 6
    2cf4:	85 eb       	ldi	r24, 0xB5	; 181
    2cf6:	95 e0       	ldi	r25, 0x05	; 5
    2cf8:	0e 94 58 03 	call	0x6b0	; 0x6b0 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	return( failure);
}

time_t validateTimeString(char* str, time_t* epicVar, int8_t offsetHours)
{
	time_t valid = 0;
    2cfc:	60 e0       	ldi	r22, 0x00	; 0
    2cfe:	70 e0       	ldi	r23, 0x00	; 0
    2d00:	cb 01       	movw	r24, r22
    2d02:	17 c0       	rjmp	.+46     	; 0x2d32 <_Z18validateTimeStringPcPma+0x1ea>
					ee_mgr.sendEEPROMString(TextErrFinishB4Start);
				}
			}
			else    /* current time validation */
			{
				ee_mgr.sendEEPROMString(TextErrTimeInPast);
    2d04:	6a e0       	ldi	r22, 0x0A	; 10
    2d06:	85 eb       	ldi	r24, 0xB5	; 181
    2d08:	95 e0       	ldi	r25, 0x05	; 5
    2d0a:	0e 94 58 03 	call	0x6b0	; 0x6b0 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	return( failure);
}

time_t validateTimeString(char* str, time_t* epicVar, int8_t offsetHours)
{
	time_t valid = 0;
    2d0e:	60 e0       	ldi	r22, 0x00	; 0
    2d10:	70 e0       	ldi	r23, 0x00	; 0
    2d12:	cb 01       	movw	r24, r22
    2d14:	0e c0       	rjmp	.+28     	; 0x2d32 <_Z18validateTimeStringPcPma+0x1ea>
			}
		}
	}
	else if(len)
	{
		ee_mgr.sendEEPROMString(TextErrInvalidTime);
    2d16:	69 e0       	ldi	r22, 0x09	; 9
    2d18:	85 eb       	ldi	r24, 0xB5	; 181
    2d1a:	95 e0       	ldi	r25, 0x05	; 5
    2d1c:	0e 94 58 03 	call	0x6b0	; 0x6b0 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
	return( failure);
}

time_t validateTimeString(char* str, time_t* epicVar, int8_t offsetHours)
{
	time_t valid = 0;
    2d20:	60 e0       	ldi	r22, 0x00	; 0
    2d22:	70 e0       	ldi	r23, 0x00	; 0
    2d24:	cb 01       	movw	r24, r22
    2d26:	05 c0       	rjmp	.+10     	; 0x2d32 <_Z18validateTimeStringPcPma+0x1ea>
			{
				ee_mgr.sendEEPROMString(TextErrTimeInPast);
			}
		}
	}
	else if(len)
    2d28:	ef 2b       	or	r30, r31
    2d2a:	a9 f7       	brne	.-22     	; 0x2d16 <_Z18validateTimeStringPcPma+0x1ce>
	return( failure);
}

time_t validateTimeString(char* str, time_t* epicVar, int8_t offsetHours)
{
	time_t valid = 0;
    2d2c:	60 e0       	ldi	r22, 0x00	; 0
    2d2e:	70 e0       	ldi	r23, 0x00	; 0
    2d30:	cb 01       	movw	r24, r22
	{
		ee_mgr.sendEEPROMString(TextErrInvalidTime);
	}

	return(valid);
}
    2d32:	2c 96       	adiw	r28, 0x0c	; 12
    2d34:	0f b6       	in	r0, 0x3f	; 63
    2d36:	f8 94       	cli
    2d38:	de bf       	out	0x3e, r29	; 62
    2d3a:	0f be       	out	0x3f, r0	; 63
    2d3c:	cd bf       	out	0x3d, r28	; 61
    2d3e:	df 91       	pop	r29
    2d40:	cf 91       	pop	r28
    2d42:	1f 91       	pop	r17
    2d44:	0f 91       	pop	r16
    2d46:	ff 90       	pop	r15
    2d48:	ef 90       	pop	r14
    2d4a:	bf 90       	pop	r11
    2d4c:	af 90       	pop	r10
    2d4e:	9f 90       	pop	r9
    2d50:	8f 90       	pop	r8
    2d52:	7f 90       	pop	r7
    2d54:	6f 90       	pop	r6
    2d56:	5f 90       	pop	r5
    2d58:	4f 90       	pop	r4
    2d5a:	08 95       	ret

00002d5c <_Z18setAMToneFrequencyh>:

void setAMToneFrequency(uint8_t value)
{
	switch(value)
    2d5c:	84 30       	cpi	r24, 0x04	; 4
    2d5e:	c9 f0       	breq	.+50     	; 0x2d92 <_Z18setAMToneFrequencyh+0x36>
    2d60:	28 f4       	brcc	.+10     	; 0x2d6c <_Z18setAMToneFrequencyh+0x10>
    2d62:	82 30       	cpi	r24, 0x02	; 2
    2d64:	41 f0       	breq	.+16     	; 0x2d76 <_Z18setAMToneFrequencyh+0x1a>
    2d66:	83 30       	cpi	r24, 0x03	; 3
    2d68:	69 f0       	breq	.+26     	; 0x2d84 <_Z18setAMToneFrequencyh+0x28>
    2d6a:	28 c0       	rjmp	.+80     	; 0x2dbc <_Z18setAMToneFrequencyh+0x60>
    2d6c:	85 30       	cpi	r24, 0x05	; 5
    2d6e:	c1 f0       	breq	.+48     	; 0x2da0 <_Z18setAMToneFrequencyh+0x44>
    2d70:	86 30       	cpi	r24, 0x06	; 6
    2d72:	e9 f0       	breq	.+58     	; 0x2dae <_Z18setAMToneFrequencyh+0x52>
    2d74:	23 c0       	rjmp	.+70     	; 0x2dbc <_Z18setAMToneFrequencyh+0x60>
	{
		case 2:
		{
			OCR1A = 556;    /* For ~900 Hz tone output */
    2d76:	8c e2       	ldi	r24, 0x2C	; 44
    2d78:	92 e0       	ldi	r25, 0x02	; 2
    2d7a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    2d7e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		}
		break;
    2d82:	08 95       	ret

		case 3:
		{
			OCR1A = 625;    /* For ~800 Hz tone output */
    2d84:	81 e7       	ldi	r24, 0x71	; 113
    2d86:	92 e0       	ldi	r25, 0x02	; 2
    2d88:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    2d8c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		}
		break;
    2d90:	08 95       	ret

		case 4:
		{
			OCR1A = 714;    /* For ~700 Hz tone output */
    2d92:	8a ec       	ldi	r24, 0xCA	; 202
    2d94:	92 e0       	ldi	r25, 0x02	; 2
    2d96:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    2d9a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		}
		break;
    2d9e:	08 95       	ret

		case 5:
		{
			OCR1A = 833;    /* For ~600 Hz tone output */
    2da0:	81 e4       	ldi	r24, 0x41	; 65
    2da2:	93 e0       	ldi	r25, 0x03	; 3
    2da4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    2da8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		}
		break;
    2dac:	08 95       	ret

		case 6:
		{
			OCR1A = 1000;   /* For ~500 Hz tone output */
    2dae:	88 ee       	ldi	r24, 0xE8	; 232
    2db0:	93 e0       	ldi	r25, 0x03	; 3
    2db2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    2db6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		}
		break;
    2dba:	08 95       	ret

		default:
		{
			value = 1;
			OCR1A = 500;    /* For ~1000 Hz tone output */
    2dbc:	84 ef       	ldi	r24, 0xF4	; 244
    2dbe:	91 e0       	ldi	r25, 0x01	; 1
    2dc0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    2dc4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    2dc8:	08 95       	ret

00002dca <_Z17handleLinkBusMsgsv>:


/* The compiler does not seem to optimize large switch statements correctly
 * void __attribute__((optimize("O0"))) handleLinkBusMsgs() */
void handleLinkBusMsgs()
{
    2dca:	2f 92       	push	r2
    2dcc:	3f 92       	push	r3
    2dce:	4f 92       	push	r4
    2dd0:	5f 92       	push	r5
    2dd2:	6f 92       	push	r6
    2dd4:	7f 92       	push	r7
    2dd6:	8f 92       	push	r8
    2dd8:	9f 92       	push	r9
    2dda:	af 92       	push	r10
    2ddc:	bf 92       	push	r11
    2dde:	cf 92       	push	r12
    2de0:	df 92       	push	r13
    2de2:	ef 92       	push	r14
    2de4:	ff 92       	push	r15
    2de6:	0f 93       	push	r16
    2de8:	1f 93       	push	r17
    2dea:	cf 93       	push	r28
    2dec:	df 93       	push	r29
    2dee:	cd b7       	in	r28, 0x3d	; 61
    2df0:	de b7       	in	r29, 0x3e	; 62
    2df2:	2c 97       	sbiw	r28, 0x0c	; 12
    2df4:	0f b6       	in	r0, 0x3f	; 63
    2df6:	f8 94       	cli
    2df8:	de bf       	out	0x3e, r29	; 62
    2dfa:	0f be       	out	0x3f, r0	; 63
    2dfc:	cd bf       	out	0x3d, r28	; 61
						strcpy((char*)g_unlockCode, g_tempStr);
						ee_mgr.updateEEPROMVar(UnlockCode, (void*)g_unlockCode);
					}
				}

				sprintf(g_tempStr, "PWD=%s\n", (char*)g_unlockCode);
    2dfe:	0f 2e       	mov	r0, r31
    2e00:	f0 e6       	ldi	r31, 0x60	; 96
    2e02:	8f 2e       	mov	r8, r31
    2e04:	f5 e0       	ldi	r31, 0x05	; 5
    2e06:	9f 2e       	mov	r9, r31
    2e08:	f0 2d       	mov	r31, r0
    2e0a:	0f 2e       	mov	r0, r31
    2e0c:	f8 ed       	ldi	r31, 0xD8	; 216
    2e0e:	6f 2e       	mov	r6, r31
    2e10:	f1 e0       	ldi	r31, 0x01	; 1
    2e12:	7f 2e       	mov	r7, r31
    2e14:	f0 2d       	mov	r31, r0
    2e16:	0f 2e       	mov	r0, r31
    2e18:	fa ef       	ldi	r31, 0xFA	; 250
    2e1a:	af 2e       	mov	r10, r31
    2e1c:	f4 e0       	ldi	r31, 0x04	; 4
    2e1e:	bf 2e       	mov	r11, r31
    2e20:	f0 2d       	mov	r31, r0
						{
							g_time_needed_for_ID = (500 + timeRequiredToSendStrAtWPM(g_messages_text[STATION_ID], g_id_codespeed)) / 1000;
						}
					}
				}
				sprintf(g_tempStr, "ID: %d wpm\n", g_id_codespeed);
    2e22:	0f 2e       	mov	r0, r31
    2e24:	fc ec       	ldi	r31, 0xCC	; 204
    2e26:	4f 2e       	mov	r4, r31
    2e28:	f1 e0       	ldi	r31, 0x01	; 1
    2e2a:	5f 2e       	mov	r5, r31
    2e2c:	f0 2d       	mov	r31, r0
					}

					ee_mgr.updateEEPROMVar(Enable_start_timer, (void*)&g_enable_start_timer);
				}

				sprintf(g_tempStr, "STA:%s\n", g_enable_start_timer ? "ON" : "OFF");
    2e2e:	0f 2e       	mov	r0, r31
    2e30:	fd eb       	ldi	r31, 0xBD	; 189
    2e32:	2f 2e       	mov	r2, r31
    2e34:	f1 e0       	ldi	r31, 0x01	; 1
    2e36:	3f 2e       	mov	r3, r31
    2e38:	f0 2d       	mov	r31, r0
void handleLinkBusMsgs()
{
	LinkbusRxBuffer* lb_buff;
	BOOL send_ack = TRUE;

	while((lb_buff = nextFullRxBuffer()))
    2e3a:	0e 94 de 08 	call	0x11bc	; 0x11bc <_Z16nextFullRxBufferv>
    2e3e:	6c 01       	movw	r12, r24
    2e40:	00 97       	sbiw	r24, 0x00	; 0
    2e42:	09 f4       	brne	.+2      	; 0x2e46 <_Z17handleLinkBusMsgsv+0x7c>
    2e44:	a0 c5       	rjmp	.+2880   	; 0x3986 <_Z17handleLinkBusMsgsv+0xbbc>
	{
		LBMessageID msg_id = lb_buff->id;

		switch(msg_id)
    2e46:	dc 01       	movw	r26, r24
    2e48:	11 96       	adiw	r26, 0x01	; 1
    2e4a:	8d 91       	ld	r24, X+
    2e4c:	9c 91       	ld	r25, X
    2e4e:	12 97       	sbiw	r26, 0x02	; 2
    2e50:	8a 3e       	cpi	r24, 0xEA	; 234
    2e52:	b2 e2       	ldi	r27, 0x22	; 34
    2e54:	9b 07       	cpc	r25, r27
    2e56:	09 f4       	brne	.+2      	; 0x2e5a <_Z17handleLinkBusMsgsv+0x90>
    2e58:	91 c2       	rjmp	.+1314   	; 0x337c <_Z17handleLinkBusMsgsv+0x5b2>
    2e5a:	f0 f4       	brcc	.+60     	; 0x2e98 <_Z17handleLinkBusMsgsv+0xce>
    2e5c:	8f 36       	cpi	r24, 0x6F	; 111
    2e5e:	fd e1       	ldi	r31, 0x1D	; 29
    2e60:	9f 07       	cpc	r25, r31
    2e62:	09 f4       	brne	.+2      	; 0x2e66 <_Z17handleLinkBusMsgsv+0x9c>
    2e64:	bc c2       	rjmp	.+1400   	; 0x33de <_Z17handleLinkBusMsgsv+0x614>
    2e66:	50 f4       	brcc	.+20     	; 0x2e7c <_Z17handleLinkBusMsgsv+0xb2>
    2e68:	87 3d       	cpi	r24, 0xD7	; 215
    2e6a:	32 e0       	ldi	r19, 0x02	; 2
    2e6c:	93 07       	cpc	r25, r19
    2e6e:	09 f4       	brne	.+2      	; 0x2e72 <_Z17handleLinkBusMsgsv+0xa8>
    2e70:	ee c0       	rjmp	.+476    	; 0x304e <_Z17handleLinkBusMsgsv+0x284>
    2e72:	8e 31       	cpi	r24, 0x1E	; 30
    2e74:	93 40       	sbci	r25, 0x03	; 3
    2e76:	09 f4       	brne	.+2      	; 0x2e7a <_Z17handleLinkBusMsgsv+0xb0>
    2e78:	b4 c1       	rjmp	.+872    	; 0x31e2 <_Z17handleLinkBusMsgsv+0x418>
    2e7a:	5d c5       	rjmp	.+2746   	; 0x3936 <_Z17handleLinkBusMsgsv+0xb6c>
    2e7c:	86 3c       	cpi	r24, 0xC6	; 198
    2e7e:	ae e1       	ldi	r26, 0x1E	; 30
    2e80:	9a 07       	cpc	r25, r26
    2e82:	49 f1       	breq	.+82     	; 0x2ed6 <_Z17handleLinkBusMsgsv+0x10c>
    2e84:	86 3a       	cpi	r24, 0xA6	; 166
    2e86:	b0 e2       	ldi	r27, 0x20	; 32
    2e88:	9b 07       	cpc	r25, r27
    2e8a:	09 f4       	brne	.+2      	; 0x2e8e <_Z17handleLinkBusMsgsv+0xc4>
    2e8c:	18 c1       	rjmp	.+560    	; 0x30be <_Z17handleLinkBusMsgsv+0x2f4>
    2e8e:	85 32       	cpi	r24, 0x25	; 37
    2e90:	9e 41       	sbci	r25, 0x1E	; 30
    2e92:	09 f0       	breq	.+2      	; 0x2e96 <_Z17handleLinkBusMsgsv+0xcc>
    2e94:	50 c5       	rjmp	.+2720   	; 0x3936 <_Z17handleLinkBusMsgsv+0xb6c>
    2e96:	53 c5       	rjmp	.+2726   	; 0x393e <_Z17handleLinkBusMsgsv+0xb74>
    2e98:	80 3d       	cpi	r24, 0xD0	; 208
    2e9a:	f3 e2       	ldi	r31, 0x23	; 35
    2e9c:	9f 07       	cpc	r25, r31
    2e9e:	09 f4       	brne	.+2      	; 0x2ea2 <_Z17handleLinkBusMsgsv+0xd8>
    2ea0:	11 c2       	rjmp	.+1058   	; 0x32c4 <_Z17handleLinkBusMsgsv+0x4fa>
    2ea2:	50 f4       	brcc	.+20     	; 0x2eb8 <_Z17handleLinkBusMsgsv+0xee>
    2ea4:	8a 39       	cpi	r24, 0x9A	; 154
    2ea6:	33 e2       	ldi	r19, 0x23	; 35
    2ea8:	93 07       	cpc	r25, r19
    2eaa:	09 f4       	brne	.+2      	; 0x2eae <_Z17handleLinkBusMsgsv+0xe4>
    2eac:	48 c5       	rjmp	.+2704   	; 0x393e <_Z17handleLinkBusMsgsv+0xb74>
    2eae:	8f 3c       	cpi	r24, 0xCF	; 207
    2eb0:	93 42       	sbci	r25, 0x23	; 35
    2eb2:	09 f4       	brne	.+2      	; 0x2eb6 <_Z17handleLinkBusMsgsv+0xec>
    2eb4:	ee c4       	rjmp	.+2524   	; 0x3892 <_Z17handleLinkBusMsgsv+0xac8>
    2eb6:	3f c5       	rjmp	.+2686   	; 0x3936 <_Z17handleLinkBusMsgsv+0xb6c>
    2eb8:	84 33       	cpi	r24, 0x34	; 52
    2eba:	a4 e2       	ldi	r26, 0x24	; 36
    2ebc:	9a 07       	cpc	r25, r26
    2ebe:	09 f4       	brne	.+2      	; 0x2ec2 <_Z17handleLinkBusMsgsv+0xf8>
    2ec0:	7b c1       	rjmp	.+758    	; 0x31b8 <_Z17handleLinkBusMsgsv+0x3ee>
    2ec2:	8c 39       	cpi	r24, 0x9C	; 156
    2ec4:	b4 e2       	ldi	r27, 0x24	; 36
    2ec6:	9b 07       	cpc	r25, r27
    2ec8:	09 f4       	brne	.+2      	; 0x2ecc <_Z17handleLinkBusMsgsv+0x102>
    2eca:	52 c2       	rjmp	.+1188   	; 0x3370 <_Z17handleLinkBusMsgsv+0x5a6>
    2ecc:	85 3f       	cpi	r24, 0xF5	; 245
    2ece:	93 42       	sbci	r25, 0x23	; 35
    2ed0:	09 f0       	breq	.+2      	; 0x2ed4 <_Z17handleLinkBusMsgsv+0x10a>
    2ed2:	31 c5       	rjmp	.+2658   	; 0x3936 <_Z17handleLinkBusMsgsv+0xb6c>
    2ed4:	3b c1       	rjmp	.+630    	; 0x314c <_Z17handleLinkBusMsgsv+0x382>
			}
			break;

			case MESSAGE_SET_FOX:
			{
				int c = (int)(lb_buff->fields[FIELD1][0]);
    2ed6:	d6 01       	movw	r26, r12
    2ed8:	13 96       	adiw	r26, 0x03	; 3
    2eda:	8c 91       	ld	r24, X
    2edc:	13 97       	sbiw	r26, 0x03	; 3
    2ede:	90 e0       	ldi	r25, 0x00	; 0

				if(c)
    2ee0:	00 97       	sbiw	r24, 0x00	; 0
    2ee2:	09 f4       	brne	.+2      	; 0x2ee6 <_Z17handleLinkBusMsgsv+0x11c>
    2ee4:	9d c0       	rjmp	.+314    	; 0x3020 <_Z17handleLinkBusMsgsv+0x256>
				{
					if(c == 'B')
    2ee6:	82 34       	cpi	r24, 0x42	; 66
    2ee8:	91 05       	cpc	r25, r1
    2eea:	09 f4       	brne	.+2      	; 0x2eee <_Z17handleLinkBusMsgsv+0x124>
    2eec:	2e c5       	rjmp	.+2652   	; 0x394a <_Z17handleLinkBusMsgsv+0xb80>
					{
						c = BEACON;
					}
					else if(c == 'D')
    2eee:	84 34       	cpi	r24, 0x44	; 68
    2ef0:	91 05       	cpc	r25, r1
    2ef2:	41 f4       	brne	.+16     	; 0x2f04 <_Z17handleLinkBusMsgsv+0x13a>
					{
						char t = lb_buff->fields[FIELD2][0];

						if(t == 'S')
    2ef4:	57 96       	adiw	r26, 0x17	; 23
    2ef6:	8c 91       	ld	r24, X
    2ef8:	83 35       	cpi	r24, 0x53	; 83
    2efa:	09 f4       	brne	.+2      	; 0x2efe <_Z17handleLinkBusMsgsv+0x134>
    2efc:	29 c5       	rjmp	.+2642   	; 0x3950 <_Z17handleLinkBusMsgsv+0xb86>
						{
							c = SPRINT_DEMO;
						}
						else
						{
							c = FOX_DEMO;
    2efe:	86 e0       	ldi	r24, 0x06	; 6
    2f00:	90 e0       	ldi	r25, 0x00	; 0
    2f02:	7c c0       	rjmp	.+248    	; 0x2ffc <_Z17handleLinkBusMsgsv+0x232>
						}
					}
					else if(c == 'F')
    2f04:	86 34       	cpi	r24, 0x46	; 70
    2f06:	91 05       	cpc	r25, r1
    2f08:	09 f4       	brne	.+2      	; 0x2f0c <_Z17handleLinkBusMsgsv+0x142>
    2f0a:	25 c5       	rjmp	.+2634   	; 0x3956 <_Z17handleLinkBusMsgsv+0xb8c>
					{
						c = FOXORING;
					}
					else if(c == 'C')
    2f0c:	83 34       	cpi	r24, 0x43	; 67
    2f0e:	91 05       	cpc	r25, r1
    2f10:	c9 f4       	brne	.+50     	; 0x2f44 <_Z17handleLinkBusMsgsv+0x17a>
					{
						char t = lb_buff->fields[FIELD2][0];
    2f12:	f6 01       	movw	r30, r12
    2f14:	87 89       	ldd	r24, Z+23	; 0x17
						lb_buff->fields[FIELD2][1] = '\0';
    2f16:	10 8e       	std	Z+24, r1	; 0x18

						if(t == 'B')
    2f18:	82 34       	cpi	r24, 0x42	; 66
    2f1a:	29 f0       	breq	.+10     	; 0x2f26 <_Z17handleLinkBusMsgsv+0x15c>
						{
							t = '0';
						}

						if(isdigit(t))
    2f1c:	90 e0       	ldi	r25, 0x00	; 0
    2f1e:	c0 97       	sbiw	r24, 0x30	; 48
    2f20:	0a 97       	sbiw	r24, 0x0a	; 10
    2f22:	08 f0       	brcs	.+2      	; 0x2f26 <_Z17handleLinkBusMsgsv+0x15c>
    2f24:	7d c0       	rjmp	.+250    	; 0x3020 <_Z17handleLinkBusMsgsv+0x256>
						{
							c = CLAMP(BEACON, atoi(lb_buff->fields[FIELD2]), FOX_5);
    2f26:	c6 01       	movw	r24, r12
    2f28:	47 96       	adiw	r24, 0x17	; 23
    2f2a:	0e 94 bb 2d 	call	0x5b76	; 0x5b76 <atoi>
    2f2e:	99 23       	and	r25, r25
    2f30:	14 f4       	brge	.+4      	; 0x2f36 <_Z17handleLinkBusMsgsv+0x16c>
    2f32:	80 e0       	ldi	r24, 0x00	; 0
    2f34:	90 e0       	ldi	r25, 0x00	; 0
    2f36:	86 30       	cpi	r24, 0x06	; 6
    2f38:	91 05       	cpc	r25, r1
    2f3a:	0c f4       	brge	.+2      	; 0x2f3e <_Z17handleLinkBusMsgsv+0x174>
    2f3c:	5c c0       	rjmp	.+184    	; 0x2ff6 <_Z17handleLinkBusMsgsv+0x22c>
    2f3e:	85 e0       	ldi	r24, 0x05	; 5
    2f40:	90 e0       	ldi	r25, 0x00	; 0
    2f42:	59 c0       	rjmp	.+178    	; 0x2ff6 <_Z17handleLinkBusMsgsv+0x22c>
						}
					}
					else if(c == 'S')
    2f44:	83 35       	cpi	r24, 0x53	; 83
    2f46:	91 05       	cpc	r25, r1
    2f48:	09 f0       	breq	.+2      	; 0x2f4c <_Z17handleLinkBusMsgsv+0x182>
    2f4a:	43 c0       	rjmp	.+134    	; 0x2fd2 <_Z17handleLinkBusMsgsv+0x208>
					{
						int x = 0;
						char t = lb_buff->fields[FIELD2][0];
    2f4c:	d6 01       	movw	r26, r12
    2f4e:	57 96       	adiw	r26, 0x17	; 23
    2f50:	8c 91       	ld	r24, X
    2f52:	57 97       	sbiw	r26, 0x17	; 23
						char u = lb_buff->fields[FIELD2][1];
    2f54:	58 96       	adiw	r26, 0x18	; 24
    2f56:	9c 91       	ld	r25, X
    2f58:	58 97       	sbiw	r26, 0x18	; 24
						lb_buff->fields[FIELD2][2] = '\0';
    2f5a:	59 96       	adiw	r26, 0x19	; 25
    2f5c:	1c 92       	st	X, r1

						if(t == 'B')
    2f5e:	82 34       	cpi	r24, 0x42	; 66
    2f60:	09 f4       	brne	.+2      	; 0x2f64 <_Z17handleLinkBusMsgsv+0x19a>
    2f62:	5e c0       	rjmp	.+188    	; 0x3020 <_Z17handleLinkBusMsgsv+0x256>
						{
							x = BEACON;
						}
						else if(t == 'F')
    2f64:	86 34       	cpi	r24, 0x46	; 70
    2f66:	49 f4       	brne	.+18     	; 0x2f7a <_Z17handleLinkBusMsgsv+0x1b0>
						{
							if((u > '0') && (u < '6'))
    2f68:	8f ec       	ldi	r24, 0xCF	; 207
    2f6a:	89 0f       	add	r24, r25
    2f6c:	85 30       	cpi	r24, 0x05	; 5
    2f6e:	08 f0       	brcs	.+2      	; 0x2f72 <_Z17handleLinkBusMsgsv+0x1a8>
    2f70:	57 c0       	rjmp	.+174    	; 0x3020 <_Z17handleLinkBusMsgsv+0x256>
							{
								x = SPRINT_F1 + (u - '1');
    2f72:	89 2f       	mov	r24, r25
    2f74:	90 e0       	ldi	r25, 0x00	; 0
    2f76:	83 97       	sbiw	r24, 0x23	; 35
    2f78:	1c c0       	rjmp	.+56     	; 0x2fb2 <_Z17handleLinkBusMsgsv+0x1e8>
							}
						}
						else if(t == 'S')
    2f7a:	83 35       	cpi	r24, 0x53	; 83
    2f7c:	41 f4       	brne	.+16     	; 0x2f8e <_Z17handleLinkBusMsgsv+0x1c4>
						{
							if((u > '0') && (u < '6'))
    2f7e:	8f ec       	ldi	r24, 0xCF	; 207
    2f80:	89 0f       	add	r24, r25
    2f82:	85 30       	cpi	r24, 0x05	; 5
    2f84:	c8 f4       	brcc	.+50     	; 0x2fb8 <_Z17handleLinkBusMsgsv+0x1ee>
							{
								x = SPRINT_S1 + (u - '1');
    2f86:	89 2f       	mov	r24, r25
    2f88:	90 e0       	ldi	r25, 0x00	; 0
    2f8a:	88 97       	sbiw	r24, 0x28	; 40
    2f8c:	12 c0       	rjmp	.+36     	; 0x2fb2 <_Z17handleLinkBusMsgsv+0x1e8>
							else
							{
								x = SPECTATOR;
							}
						}
						else if(u == 'F')
    2f8e:	96 34       	cpi	r25, 0x46	; 70
    2f90:	41 f4       	brne	.+16     	; 0x2fa2 <_Z17handleLinkBusMsgsv+0x1d8>
						{
							if((t > '0') && (t < '6'))
    2f92:	9f ec       	ldi	r25, 0xCF	; 207
    2f94:	98 0f       	add	r25, r24
    2f96:	95 30       	cpi	r25, 0x05	; 5
    2f98:	08 f0       	brcs	.+2      	; 0x2f9c <_Z17handleLinkBusMsgsv+0x1d2>
    2f9a:	42 c0       	rjmp	.+132    	; 0x3020 <_Z17handleLinkBusMsgsv+0x256>
							{
								x = SPRINT_F1 + (t - '1');
    2f9c:	90 e0       	ldi	r25, 0x00	; 0
    2f9e:	83 97       	sbiw	r24, 0x23	; 35
    2fa0:	08 c0       	rjmp	.+16     	; 0x2fb2 <_Z17handleLinkBusMsgsv+0x1e8>
							}
						}
						else if(u == 'S')
    2fa2:	93 35       	cpi	r25, 0x53	; 83
    2fa4:	e9 f5       	brne	.+122    	; 0x3020 <_Z17handleLinkBusMsgsv+0x256>
						{
							if((t > '0') && (t < '6'))
    2fa6:	9f ec       	ldi	r25, 0xCF	; 207
    2fa8:	98 0f       	add	r25, r24
    2faa:	95 30       	cpi	r25, 0x05	; 5
    2fac:	c8 f5       	brcc	.+114    	; 0x3020 <_Z17handleLinkBusMsgsv+0x256>
							{
								x = SPRINT_S1 + (t - '1');
    2fae:	90 e0       	ldi	r25, 0x00	; 0
    2fb0:	88 97       	sbiw	r24, 0x28	; 40
							}
						}

						if(x != BEACON)
    2fb2:	00 97       	sbiw	r24, 0x00	; 0
    2fb4:	19 f4       	brne	.+6      	; 0x2fbc <_Z17handleLinkBusMsgsv+0x1f2>
    2fb6:	34 c0       	rjmp	.+104    	; 0x3020 <_Z17handleLinkBusMsgsv+0x256>
							{
								x = SPRINT_S1 + (u - '1');
							}
							else
							{
								x = SPECTATOR;
    2fb8:	88 e0       	ldi	r24, 0x08	; 8
    2fba:	90 e0       	ldi	r25, 0x00	; 0
							}
						}

						if(x != BEACON)
						{
							c = CLAMP(SPECTATOR, x, SPRINT_F5);
    2fbc:	88 30       	cpi	r24, 0x08	; 8
    2fbe:	91 05       	cpc	r25, r1
    2fc0:	14 f4       	brge	.+4      	; 0x2fc6 <_Z17handleLinkBusMsgsv+0x1fc>
    2fc2:	88 e0       	ldi	r24, 0x08	; 8
    2fc4:	90 e0       	ldi	r25, 0x00	; 0
    2fc6:	83 31       	cpi	r24, 0x13	; 19
    2fc8:	91 05       	cpc	r25, r1
    2fca:	ac f0       	brlt	.+42     	; 0x2ff6 <_Z17handleLinkBusMsgsv+0x22c>
    2fcc:	82 e1       	ldi	r24, 0x12	; 18
    2fce:	90 e0       	ldi	r25, 0x00	; 0
    2fd0:	12 c0       	rjmp	.+36     	; 0x2ff6 <_Z17handleLinkBusMsgsv+0x22c>
						}
					}
					else if(c == 'N')
    2fd2:	8e 34       	cpi	r24, 0x4E	; 78
    2fd4:	91 05       	cpc	r25, r1
    2fd6:	59 f4       	brne	.+22     	; 0x2fee <_Z17handleLinkBusMsgsv+0x224>
					{
						char t = lb_buff->fields[FIELD2][0];
    2fd8:	f6 01       	movw	r30, r12
    2fda:	87 89       	ldd	r24, Z+23	; 0x17

						if(t == '2')
    2fdc:	82 33       	cpi	r24, 0x32	; 50
    2fde:	09 f4       	brne	.+2      	; 0x2fe2 <_Z17handleLinkBusMsgsv+0x218>
    2fe0:	bd c4       	rjmp	.+2426   	; 0x395c <_Z17handleLinkBusMsgsv+0xb92>
						{
							c = NO_CODE_START_TONES_2M;
						}
						else if(t == '5')
    2fe2:	85 33       	cpi	r24, 0x35	; 53
    2fe4:	09 f4       	brne	.+2      	; 0x2fe8 <_Z17handleLinkBusMsgsv+0x21e>
    2fe6:	bc c4       	rjmp	.+2424   	; 0x3960 <_Z17handleLinkBusMsgsv+0xb96>
						{
							c = NO_CODE_START_TONES_5M;
						}
						else
						{
							c = BEACON;
    2fe8:	80 e0       	ldi	r24, 0x00	; 0
    2fea:	90 e0       	ldi	r25, 0x00	; 0
    2fec:	07 c0       	rjmp	.+14     	; 0x2ffc <_Z17handleLinkBusMsgsv+0x232>
						}
					}
					else
					{
						c = atoi(lb_buff->fields[FIELD1]);
    2fee:	c6 01       	movw	r24, r12
    2ff0:	03 96       	adiw	r24, 0x03	; 3
    2ff2:	0e 94 bb 2d 	call	0x5b76	; 0x5b76 <atoi>
					}

					if((c >= BEACON) && (c < INVALID_FOX))
    2ff6:	86 31       	cpi	r24, 0x16	; 22
    2ff8:	91 05       	cpc	r25, r1
    2ffa:	90 f4       	brcc	.+36     	; 0x3020 <_Z17handleLinkBusMsgsv+0x256>
					{
						Fox_t holdFox = (Fox_t)c;
    2ffc:	89 83       	std	Y+1, r24	; 0x01
						ee_mgr.updateEEPROMVar(Fox_setting, (void*)&holdFox);
    2ffe:	ae 01       	movw	r20, r28
    3000:	4f 5f       	subi	r20, 0xFF	; 255
    3002:	5f 4f       	sbci	r21, 0xFF	; 255
    3004:	60 e1       	ldi	r22, 0x10	; 16
    3006:	85 eb       	ldi	r24, 0xB5	; 181
    3008:	95 e0       	ldi	r25, 0x05	; 5
    300a:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						if(holdFox != g_fox)
    300e:	80 91 b0 05 	lds	r24, 0x05B0	; 0x8005b0 <g_fox>
    3012:	99 81       	ldd	r25, Y+1	; 0x01
    3014:	98 17       	cp	r25, r24
    3016:	21 f0       	breq	.+8      	; 0x3020 <_Z17handleLinkBusMsgsv+0x256>
						{
							setupForFox(&holdFox);
    3018:	ce 01       	movw	r24, r28
    301a:	01 96       	adiw	r24, 0x01	; 1
    301c:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <_Z11setupForFoxP5Fox_t>
						}
					}
				}

				sprintf(g_tempStr, "Fox=%u\n", g_fox);
    3020:	80 91 b0 05 	lds	r24, 0x05B0	; 0x8005b0 <g_fox>
    3024:	1f 92       	push	r1
    3026:	8f 93       	push	r24
    3028:	86 ea       	ldi	r24, 0xA6	; 166
    302a:	91 e0       	ldi	r25, 0x01	; 1
    302c:	9f 93       	push	r25
    302e:	8f 93       	push	r24
    3030:	bf 92       	push	r11
    3032:	af 92       	push	r10
    3034:	0e 94 46 2e 	call	0x5c8c	; 0x5c8c <sprintf>
				lb_send_string(g_tempStr, FALSE);
    3038:	60 e0       	ldi	r22, 0x00	; 0
    303a:	c5 01       	movw	r24, r10
    303c:	0e 94 c6 09 	call	0x138c	; 0x138c <_Z14lb_send_stringPch>
			}
			break;
    3040:	0f 90       	pop	r0
    3042:	0f 90       	pop	r0
    3044:	0f 90       	pop	r0
    3046:	0f 90       	pop	r0
    3048:	0f 90       	pop	r0
    304a:	0f 90       	pop	r0
    304c:	78 c4       	rjmp	.+2288   	; 0x393e <_Z17handleLinkBusMsgsv+0xb74>

			case MESSAGE_SET_AM_TONE:
			{
				if(lb_buff->fields[FIELD1][0])
    304e:	d6 01       	movw	r26, r12
    3050:	13 96       	adiw	r26, 0x03	; 3
    3052:	8c 91       	ld	r24, X
    3054:	88 23       	and	r24, r24
    3056:	e1 f0       	breq	.+56     	; 0x3090 <_Z17handleLinkBusMsgsv+0x2c6>
				{
					uint8_t toneVal = atol(lb_buff->fields[FIELD1]);
    3058:	c6 01       	movw	r24, r12
    305a:	03 96       	adiw	r24, 0x03	; 3
    305c:	0e 94 d9 2d 	call	0x5bb2	; 0x5bb2 <atol>
					g_AM_audio_frequency = CLAMP(MIN_AM_TONE_FREQUENCY, toneVal, MAX_AM_TONE_FREQUENCY);
    3060:	70 e0       	ldi	r23, 0x00	; 0
    3062:	16 16       	cp	r1, r22
    3064:	17 06       	cpc	r1, r23
    3066:	14 f0       	brlt	.+4      	; 0x306c <_Z17handleLinkBusMsgsv+0x2a2>
    3068:	61 e0       	ldi	r22, 0x01	; 1
    306a:	70 e0       	ldi	r23, 0x00	; 0
    306c:	67 30       	cpi	r22, 0x07	; 7
    306e:	71 05       	cpc	r23, r1
    3070:	14 f0       	brlt	.+4      	; 0x3076 <_Z17handleLinkBusMsgsv+0x2ac>
    3072:	66 e0       	ldi	r22, 0x06	; 6
    3074:	70 e0       	ldi	r23, 0x00	; 0
    3076:	60 93 9c 05 	sts	0x059C, r22	; 0x80059c <g_AM_audio_frequency>
					ee_mgr.updateEEPROMVar(Am_audio_frequency, (void*)&g_AM_audio_frequency);
    307a:	4c e9       	ldi	r20, 0x9C	; 156
    307c:	55 e0       	ldi	r21, 0x05	; 5
    307e:	61 e1       	ldi	r22, 0x11	; 17
    3080:	85 eb       	ldi	r24, 0xB5	; 181
    3082:	95 e0       	ldi	r25, 0x05	; 5
    3084:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
					setAMToneFrequency(g_AM_audio_frequency);
    3088:	80 91 9c 05 	lds	r24, 0x059C	; 0x80059c <g_AM_audio_frequency>
    308c:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <_Z18setAMToneFrequencyh>
				}

				sprintf(g_tempStr, "AM:%d\n", g_AM_audio_frequency);
    3090:	80 91 9c 05 	lds	r24, 0x059C	; 0x80059c <g_AM_audio_frequency>
    3094:	1f 92       	push	r1
    3096:	8f 93       	push	r24
    3098:	8e ea       	ldi	r24, 0xAE	; 174
    309a:	91 e0       	ldi	r25, 0x01	; 1
    309c:	9f 93       	push	r25
    309e:	8f 93       	push	r24
    30a0:	bf 92       	push	r11
    30a2:	af 92       	push	r10
    30a4:	0e 94 46 2e 	call	0x5c8c	; 0x5c8c <sprintf>
				lb_send_string(g_tempStr, FALSE);
    30a8:	60 e0       	ldi	r22, 0x00	; 0
    30aa:	c5 01       	movw	r24, r10
    30ac:	0e 94 c6 09 	call	0x138c	; 0x138c <_Z14lb_send_stringPch>
			}
			break;
    30b0:	0f 90       	pop	r0
    30b2:	0f 90       	pop	r0
    30b4:	0f 90       	pop	r0
    30b6:	0f 90       	pop	r0
    30b8:	0f 90       	pop	r0
    30ba:	0f 90       	pop	r0
    30bc:	40 c4       	rjmp	.+2176   	; 0x393e <_Z17handleLinkBusMsgsv+0xb74>

			case MESSAGE_LEDS:
			{
				if(lb_buff->fields[FIELD1][0])
    30be:	f6 01       	movw	r30, r12
    30c0:	83 81       	ldd	r24, Z+3	; 0x03
    30c2:	88 23       	and	r24, r24
    30c4:	09 f1       	breq	.+66     	; 0x3108 <_Z17handleLinkBusMsgsv+0x33e>
				{
					if((lb_buff->fields[FIELD1][1] == 'F') || (lb_buff->fields[FIELD1][0] == '0'))
    30c6:	94 81       	ldd	r25, Z+4	; 0x04
    30c8:	96 34       	cpi	r25, 0x46	; 70
    30ca:	11 f0       	breq	.+4      	; 0x30d0 <_Z17handleLinkBusMsgsv+0x306>
    30cc:	80 33       	cpi	r24, 0x30	; 48
    30ce:	59 f4       	brne	.+22     	; 0x30e6 <_Z17handleLinkBusMsgsv+0x31c>
					{
						g_enable_LEDs = FALSE;
    30d0:	10 92 30 05 	sts	0x0530, r1	; 0x800530 <g_enable_LEDs>
						digitalWrite(PIN_LED1, OFF);    /*  LED Off */
    30d4:	60 e0       	ldi	r22, 0x00	; 0
    30d6:	8d e0       	ldi	r24, 0x0D	; 13
    30d8:	0e 94 6f 02 	call	0x4de	; 0x4de <_Z12digitalWritehh>
						digitalWrite(PIN_LED2, OFF);
    30dc:	60 e0       	ldi	r22, 0x00	; 0
    30de:	87 e0       	ldi	r24, 0x07	; 7
    30e0:	0e 94 6f 02 	call	0x4de	; 0x4de <_Z12digitalWritehh>
    30e4:	03 c0       	rjmp	.+6      	; 0x30ec <_Z17handleLinkBusMsgsv+0x322>
					}
					else
					{
						g_enable_LEDs = TRUE;
    30e6:	81 e0       	ldi	r24, 0x01	; 1
    30e8:	80 93 30 05 	sts	0x0530, r24	; 0x800530 <g_enable_LEDs>
					}

					ee_mgr.updateEEPROMVar(Enable_LEDs, (void*)&g_enable_LEDs);
    30ec:	40 e3       	ldi	r20, 0x30	; 48
    30ee:	55 e0       	ldi	r21, 0x05	; 5
    30f0:	62 e1       	ldi	r22, 0x12	; 18
    30f2:	85 eb       	ldi	r24, 0xB5	; 181
    30f4:	95 e0       	ldi	r25, 0x05	; 5
    30f6:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
					g_LEDs_Timed_Out = !g_enable_LEDs;
    30fa:	90 91 30 05 	lds	r25, 0x0530	; 0x800530 <g_enable_LEDs>
    30fe:	81 e0       	ldi	r24, 0x01	; 1
    3100:	91 11       	cpse	r25, r1
    3102:	80 e0       	ldi	r24, 0x00	; 0
    3104:	80 93 f9 04 	sts	0x04F9, r24	; 0x8004f9 <_ZL16g_LEDs_Timed_Out>
				}

				sprintf(g_tempStr, "LED:%s\n", g_enable_LEDs ? "ON" : "OFF");
    3108:	80 91 30 05 	lds	r24, 0x0530	; 0x800530 <g_enable_LEDs>
    310c:	81 11       	cpse	r24, r1
    310e:	05 c0       	rjmp	.+10     	; 0x311a <_Z17handleLinkBusMsgsv+0x350>
    3110:	22 ea       	ldi	r18, 0xA2	; 162
    3112:	31 e0       	ldi	r19, 0x01	; 1
    3114:	82 2f       	mov	r24, r18
    3116:	93 2f       	mov	r25, r19
    3118:	04 c0       	rjmp	.+8      	; 0x3122 <_Z17handleLinkBusMsgsv+0x358>
    311a:	af e9       	ldi	r26, 0x9F	; 159
    311c:	b1 e0       	ldi	r27, 0x01	; 1
    311e:	8a 2f       	mov	r24, r26
    3120:	9b 2f       	mov	r25, r27
    3122:	9f 93       	push	r25
    3124:	8f 93       	push	r24
    3126:	85 eb       	ldi	r24, 0xB5	; 181
    3128:	91 e0       	ldi	r25, 0x01	; 1
    312a:	9f 93       	push	r25
    312c:	8f 93       	push	r24
    312e:	bf 92       	push	r11
    3130:	af 92       	push	r10
    3132:	0e 94 46 2e 	call	0x5c8c	; 0x5c8c <sprintf>
				lb_send_string(g_tempStr, FALSE);
    3136:	60 e0       	ldi	r22, 0x00	; 0
    3138:	c5 01       	movw	r24, r10
    313a:	0e 94 c6 09 	call	0x138c	; 0x138c <_Z14lb_send_stringPch>
			}
			break;
    313e:	0f 90       	pop	r0
    3140:	0f 90       	pop	r0
    3142:	0f 90       	pop	r0
    3144:	0f 90       	pop	r0
    3146:	0f 90       	pop	r0
    3148:	0f 90       	pop	r0
    314a:	f9 c3       	rjmp	.+2034   	; 0x393e <_Z17handleLinkBusMsgsv+0xb74>

			case MESSAGE_STARTTONES_ENABLE:
			{
				if(lb_buff->fields[FIELD1][0])
    314c:	f6 01       	movw	r30, r12
    314e:	83 81       	ldd	r24, Z+3	; 0x03
    3150:	88 23       	and	r24, r24
    3152:	91 f0       	breq	.+36     	; 0x3178 <_Z17handleLinkBusMsgsv+0x3ae>
				{
					if((lb_buff->fields[FIELD1][1] == 'F') || (lb_buff->fields[FIELD1][0] == '0'))
    3154:	94 81       	ldd	r25, Z+4	; 0x04
    3156:	96 34       	cpi	r25, 0x46	; 70
    3158:	11 f0       	breq	.+4      	; 0x315e <_Z17handleLinkBusMsgsv+0x394>
    315a:	80 33       	cpi	r24, 0x30	; 48
    315c:	19 f4       	brne	.+6      	; 0x3164 <_Z17handleLinkBusMsgsv+0x39a>
					{
						g_enable_start_timer = FALSE;
    315e:	10 92 2f 05 	sts	0x052F, r1	; 0x80052f <g_enable_start_timer>
    3162:	03 c0       	rjmp	.+6      	; 0x316a <_Z17handleLinkBusMsgsv+0x3a0>
					}
					else
					{
						g_enable_start_timer = TRUE;
    3164:	81 e0       	ldi	r24, 0x01	; 1
    3166:	80 93 2f 05 	sts	0x052F, r24	; 0x80052f <g_enable_start_timer>
					}

					ee_mgr.updateEEPROMVar(Enable_start_timer, (void*)&g_enable_start_timer);
    316a:	4f e2       	ldi	r20, 0x2F	; 47
    316c:	55 e0       	ldi	r21, 0x05	; 5
    316e:	65 e1       	ldi	r22, 0x15	; 21
    3170:	85 eb       	ldi	r24, 0xB5	; 181
    3172:	95 e0       	ldi	r25, 0x05	; 5
    3174:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
				}

				sprintf(g_tempStr, "STA:%s\n", g_enable_start_timer ? "ON" : "OFF");
    3178:	80 91 2f 05 	lds	r24, 0x052F	; 0x80052f <g_enable_start_timer>
    317c:	81 11       	cpse	r24, r1
    317e:	05 c0       	rjmp	.+10     	; 0x318a <_Z17handleLinkBusMsgsv+0x3c0>
    3180:	22 ea       	ldi	r18, 0xA2	; 162
    3182:	31 e0       	ldi	r19, 0x01	; 1
    3184:	82 2f       	mov	r24, r18
    3186:	93 2f       	mov	r25, r19
    3188:	04 c0       	rjmp	.+8      	; 0x3192 <_Z17handleLinkBusMsgsv+0x3c8>
    318a:	af e9       	ldi	r26, 0x9F	; 159
    318c:	b1 e0       	ldi	r27, 0x01	; 1
    318e:	8a 2f       	mov	r24, r26
    3190:	9b 2f       	mov	r25, r27
    3192:	9f 93       	push	r25
    3194:	8f 93       	push	r24
    3196:	3f 92       	push	r3
    3198:	2f 92       	push	r2
    319a:	bf 92       	push	r11
    319c:	af 92       	push	r10
    319e:	0e 94 46 2e 	call	0x5c8c	; 0x5c8c <sprintf>
				lb_send_string(g_tempStr, FALSE);
    31a2:	60 e0       	ldi	r22, 0x00	; 0
    31a4:	c5 01       	movw	r24, r10
    31a6:	0e 94 c6 09 	call	0x138c	; 0x138c <_Z14lb_send_stringPch>
			}
			break;
    31aa:	0f 90       	pop	r0
    31ac:	0f 90       	pop	r0
    31ae:	0f 90       	pop	r0
    31b0:	0f 90       	pop	r0
    31b2:	0f 90       	pop	r0
    31b4:	0f 90       	pop	r0
    31b6:	c3 c3       	rjmp	.+1926   	; 0x393e <_Z17handleLinkBusMsgsv+0xb74>

			case MESSAGE_SYNC:
			{
				if(lb_buff->fields[FIELD1][0])
    31b8:	f6 01       	movw	r30, r12
    31ba:	83 81       	ldd	r24, Z+3	; 0x03
    31bc:	88 23       	and	r24, r24
    31be:	09 f4       	brne	.+2      	; 0x31c2 <_Z17handleLinkBusMsgsv+0x3f8>
    31c0:	be c3       	rjmp	.+1916   	; 0x393e <_Z17handleLinkBusMsgsv+0xb74>
				{
					if(lb_buff->fields[FIELD1][0] == '0')       /* Stop the event. Re-sync will occur on next start */
    31c2:	80 33       	cpi	r24, 0x30	; 48
    31c4:	19 f4       	brne	.+6      	; 0x31cc <_Z17handleLinkBusMsgsv+0x402>
					{
						stopEventNow();
    31c6:	0e 94 23 13 	call	0x2646	; 0x2646 <_Z12stopEventNowv>
    31ca:	b9 c3       	rjmp	.+1906   	; 0x393e <_Z17handleLinkBusMsgsv+0xb74>
					}
					else if(lb_buff->fields[FIELD1][0] == '1')  /* Start the event, re-syncing to a start time of now - same as a button press */
    31cc:	81 33       	cpi	r24, 0x31	; 49
    31ce:	19 f4       	brne	.+6      	; 0x31d6 <_Z17handleLinkBusMsgsv+0x40c>
					{
						startEventNow();
    31d0:	0e 94 13 13 	call	0x2626	; 0x2626 <_Z13startEventNowv>
    31d4:	b4 c3       	rjmp	.+1896   	; 0x393e <_Z17handleLinkBusMsgsv+0xb74>
					}
					else if(lb_buff->fields[FIELD1][0] == '2')  /* Start the event at the programmed start time */
    31d6:	82 33       	cpi	r24, 0x32	; 50
    31d8:	09 f0       	breq	.+2      	; 0x31dc <_Z17handleLinkBusMsgsv+0x412>
    31da:	b1 c3       	rjmp	.+1890   	; 0x393e <_Z17handleLinkBusMsgsv+0xb74>
					{
						startEventUsingRTC();
    31dc:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <_Z18startEventUsingRTCv>
    31e0:	ae c3       	rjmp	.+1884   	; 0x393e <_Z17handleLinkBusMsgsv+0xb74>
			}
			break;

			case MESSAGE_SET_STATION_ID:
			{
				if(lb_buff->fields[FIELD1][0])
    31e2:	d6 01       	movw	r26, r12
    31e4:	13 96       	adiw	r26, 0x03	; 3
    31e6:	8c 91       	ld	r24, X
    31e8:	88 23       	and	r24, r24
    31ea:	99 f1       	breq	.+102    	; 0x3252 <_Z17handleLinkBusMsgsv+0x488>
				{
					strcpy(g_tempStr, " "); /* Space before ID gets sent */
    31ec:	80 e2       	ldi	r24, 0x20	; 32
    31ee:	90 e0       	ldi	r25, 0x00	; 0
    31f0:	f5 01       	movw	r30, r10
    31f2:	91 83       	std	Z+1, r25	; 0x01
    31f4:	80 83       	st	Z, r24
					strcat(g_tempStr, lb_buff->fields[FIELD1]);
    31f6:	b6 01       	movw	r22, r12
    31f8:	6d 5f       	subi	r22, 0xFD	; 253
    31fa:	7f 4f       	sbci	r23, 0xFF	; 255
    31fc:	c5 01       	movw	r24, r10
    31fe:	0e 94 08 2e 	call	0x5c10	; 0x5c10 <strcat>

					if(lb_buff->fields[FIELD2][0])
    3202:	d6 01       	movw	r26, r12
    3204:	57 96       	adiw	r26, 0x17	; 23
    3206:	8c 91       	ld	r24, X
    3208:	88 23       	and	r24, r24
    320a:	79 f0       	breq	.+30     	; 0x322a <_Z17handleLinkBusMsgsv+0x460>
					{
						strcat(g_tempStr, " ");
    320c:	f5 01       	movw	r30, r10
    320e:	01 90       	ld	r0, Z+
    3210:	00 20       	and	r0, r0
    3212:	e9 f7       	brne	.-6      	; 0x320e <_Z17handleLinkBusMsgsv+0x444>
    3214:	31 97       	sbiw	r30, 0x01	; 1
    3216:	80 e2       	ldi	r24, 0x20	; 32
    3218:	90 e0       	ldi	r25, 0x00	; 0
    321a:	91 83       	std	Z+1, r25	; 0x01
    321c:	80 83       	st	Z, r24
						strcat(g_tempStr, lb_buff->fields[FIELD2]);
    321e:	b6 01       	movw	r22, r12
    3220:	69 5e       	subi	r22, 0xE9	; 233
    3222:	7f 4f       	sbci	r23, 0xFF	; 255
    3224:	c5 01       	movw	r24, r10
    3226:	0e 94 08 2e 	call	0x5c10	; 0x5c10 <strcat>
					}

					if(strlen(g_tempStr) <= MAX_PATTERN_TEXT_LENGTH)
    322a:	f5 01       	movw	r30, r10
    322c:	01 90       	ld	r0, Z+
    322e:	00 20       	and	r0, r0
    3230:	e9 f7       	brne	.-6      	; 0x322c <_Z17handleLinkBusMsgsv+0x462>
    3232:	31 97       	sbiw	r30, 0x01	; 1
    3234:	ea 5f       	subi	r30, 0xFA	; 250
    3236:	f4 40       	sbci	r31, 0x04	; 4
    3238:	75 97       	sbiw	r30, 0x15	; 21
    323a:	58 f4       	brcc	.+22     	; 0x3252 <_Z17handleLinkBusMsgsv+0x488>
					{
						strcpy(g_messages_text[STATION_ID], g_tempStr);
    323c:	b5 01       	movw	r22, r10
    323e:	88 e4       	ldi	r24, 0x48	; 72
    3240:	95 e0       	ldi	r25, 0x05	; 5
    3242:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <strcpy>
						ee_mgr.updateEEPROMVar(StationID_text, (void*)g_tempStr);
    3246:	a5 01       	movw	r20, r10
    3248:	6b e0       	ldi	r22, 0x0B	; 11
    324a:	85 eb       	ldi	r24, 0xB5	; 181
    324c:	95 e0       	ldi	r25, 0x05	; 5
    324e:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
					}
				}

				if(g_messages_text[STATION_ID][0])
    3252:	80 91 48 05 	lds	r24, 0x0548	; 0x800548 <g_messages_text+0x15>
    3256:	88 23       	and	r24, r24
    3258:	f1 f0       	breq	.+60     	; 0x3296 <_Z17handleLinkBusMsgsv+0x4cc>
				{
					g_time_needed_for_ID = (500 + timeRequiredToSendStrAtWPM(g_messages_text[STATION_ID], g_id_codespeed)) / 1000;
    325a:	60 91 19 01 	lds	r22, 0x0119	; 0x800119 <g_id_codespeed>
    325e:	70 e0       	ldi	r23, 0x00	; 0
    3260:	88 e4       	ldi	r24, 0x48	; 72
    3262:	95 e0       	ldi	r25, 0x05	; 5
    3264:	0e 94 c3 26 	call	0x4d86	; 0x4d86 <_Z26timeRequiredToSendStrAtWPMPcj>
    3268:	8c 50       	subi	r24, 0x0C	; 12
    326a:	9e 4f       	sbci	r25, 0xFE	; 254
    326c:	9c 01       	movw	r18, r24
    326e:	36 95       	lsr	r19
    3270:	27 95       	ror	r18
    3272:	36 95       	lsr	r19
    3274:	27 95       	ror	r18
    3276:	36 95       	lsr	r19
    3278:	27 95       	ror	r18
    327a:	a5 ec       	ldi	r26, 0xC5	; 197
    327c:	b0 e2       	ldi	r27, 0x20	; 32
    327e:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <__umulhisi3>
    3282:	92 95       	swap	r25
    3284:	82 95       	swap	r24
    3286:	8f 70       	andi	r24, 0x0F	; 15
    3288:	89 27       	eor	r24, r25
    328a:	9f 70       	andi	r25, 0x0F	; 15
    328c:	89 27       	eor	r24, r25
    328e:	90 93 32 05 	sts	0x0532, r25	; 0x800532 <g_time_needed_for_ID+0x1>
    3292:	80 93 31 05 	sts	0x0531, r24	; 0x800531 <g_time_needed_for_ID>
				}

				sprintf(g_tempStr, "ID:%s\n", g_messages_text[STATION_ID]);
    3296:	88 e4       	ldi	r24, 0x48	; 72
    3298:	95 e0       	ldi	r25, 0x05	; 5
    329a:	9f 93       	push	r25
    329c:	8f 93       	push	r24
    329e:	85 ec       	ldi	r24, 0xC5	; 197
    32a0:	91 e0       	ldi	r25, 0x01	; 1
    32a2:	9f 93       	push	r25
    32a4:	8f 93       	push	r24
    32a6:	bf 92       	push	r11
    32a8:	af 92       	push	r10
    32aa:	0e 94 46 2e 	call	0x5c8c	; 0x5c8c <sprintf>
				lb_send_string(g_tempStr, TRUE);
    32ae:	61 e0       	ldi	r22, 0x01	; 1
    32b0:	c5 01       	movw	r24, r10
    32b2:	0e 94 c6 09 	call	0x138c	; 0x138c <_Z14lb_send_stringPch>
			}
			break;
    32b6:	0f 90       	pop	r0
    32b8:	0f 90       	pop	r0
    32ba:	0f 90       	pop	r0
    32bc:	0f 90       	pop	r0
    32be:	0f 90       	pop	r0
    32c0:	0f 90       	pop	r0
    32c2:	3d c3       	rjmp	.+1658   	; 0x393e <_Z17handleLinkBusMsgsv+0xb74>


			case MESSAGE_CODE_SPEED:
			{
				if(lb_buff->fields[FIELD1][0] == 'I')
    32c4:	f6 01       	movw	r30, r12
    32c6:	83 81       	ldd	r24, Z+3	; 0x03
    32c8:	89 34       	cpi	r24, 0x49	; 73
    32ca:	e9 f5       	brne	.+122    	; 0x3346 <_Z17handleLinkBusMsgsv+0x57c>
				{
					if(lb_buff->fields[FIELD2][0])
    32cc:	87 89       	ldd	r24, Z+23	; 0x17
    32ce:	88 23       	and	r24, r24
    32d0:	d1 f1       	breq	.+116    	; 0x3346 <_Z17handleLinkBusMsgsv+0x57c>
					{
						uint8_t speed = atol(lb_buff->fields[FIELD2]);
    32d2:	c6 01       	movw	r24, r12
    32d4:	47 96       	adiw	r24, 0x17	; 23
    32d6:	0e 94 d9 2d 	call	0x5bb2	; 0x5bb2 <atol>
						g_id_codespeed = CLAMP(MIN_CODE_SPEED_WPM, speed, MAX_CODE_SPEED_WPM);
    32da:	86 2f       	mov	r24, r22
    32dc:	90 e0       	ldi	r25, 0x00	; 0
    32de:	85 30       	cpi	r24, 0x05	; 5
    32e0:	91 05       	cpc	r25, r1
    32e2:	14 f4       	brge	.+4      	; 0x32e8 <_Z17handleLinkBusMsgsv+0x51e>
    32e4:	85 e0       	ldi	r24, 0x05	; 5
    32e6:	90 e0       	ldi	r25, 0x00	; 0
    32e8:	85 31       	cpi	r24, 0x15	; 21
    32ea:	91 05       	cpc	r25, r1
    32ec:	0c f0       	brlt	.+2      	; 0x32f0 <_Z17handleLinkBusMsgsv+0x526>
    32ee:	84 e1       	ldi	r24, 0x14	; 20
    32f0:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <g_id_codespeed>
						ee_mgr.updateEEPROMVar(Id_codespeed, (void*)&g_id_codespeed);
    32f4:	49 e1       	ldi	r20, 0x19	; 25
    32f6:	51 e0       	ldi	r21, 0x01	; 1
    32f8:	6f e0       	ldi	r22, 0x0F	; 15
    32fa:	85 eb       	ldi	r24, 0xB5	; 181
    32fc:	95 e0       	ldi	r25, 0x05	; 5
    32fe:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>

						if(g_messages_text[STATION_ID][0])
    3302:	80 91 48 05 	lds	r24, 0x0548	; 0x800548 <g_messages_text+0x15>
    3306:	88 23       	and	r24, r24
    3308:	f1 f0       	breq	.+60     	; 0x3346 <_Z17handleLinkBusMsgsv+0x57c>
						{
							g_time_needed_for_ID = (500 + timeRequiredToSendStrAtWPM(g_messages_text[STATION_ID], g_id_codespeed)) / 1000;
    330a:	60 91 19 01 	lds	r22, 0x0119	; 0x800119 <g_id_codespeed>
    330e:	70 e0       	ldi	r23, 0x00	; 0
    3310:	88 e4       	ldi	r24, 0x48	; 72
    3312:	95 e0       	ldi	r25, 0x05	; 5
    3314:	0e 94 c3 26 	call	0x4d86	; 0x4d86 <_Z26timeRequiredToSendStrAtWPMPcj>
    3318:	8c 50       	subi	r24, 0x0C	; 12
    331a:	9e 4f       	sbci	r25, 0xFE	; 254
    331c:	9c 01       	movw	r18, r24
    331e:	36 95       	lsr	r19
    3320:	27 95       	ror	r18
    3322:	36 95       	lsr	r19
    3324:	27 95       	ror	r18
    3326:	36 95       	lsr	r19
    3328:	27 95       	ror	r18
    332a:	a5 ec       	ldi	r26, 0xC5	; 197
    332c:	b0 e2       	ldi	r27, 0x20	; 32
    332e:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <__umulhisi3>
    3332:	92 95       	swap	r25
    3334:	82 95       	swap	r24
    3336:	8f 70       	andi	r24, 0x0F	; 15
    3338:	89 27       	eor	r24, r25
    333a:	9f 70       	andi	r25, 0x0F	; 15
    333c:	89 27       	eor	r24, r25
    333e:	90 93 32 05 	sts	0x0532, r25	; 0x800532 <g_time_needed_for_ID+0x1>
    3342:	80 93 31 05 	sts	0x0531, r24	; 0x800531 <g_time_needed_for_ID>
						}
					}
				}
				sprintf(g_tempStr, "ID: %d wpm\n", g_id_codespeed);
    3346:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <g_id_codespeed>
    334a:	1f 92       	push	r1
    334c:	8f 93       	push	r24
    334e:	5f 92       	push	r5
    3350:	4f 92       	push	r4
    3352:	bf 92       	push	r11
    3354:	af 92       	push	r10
    3356:	0e 94 46 2e 	call	0x5c8c	; 0x5c8c <sprintf>
				lb_send_string(g_tempStr, FALSE);
    335a:	60 e0       	ldi	r22, 0x00	; 0
    335c:	c5 01       	movw	r24, r10
    335e:	0e 94 c6 09 	call	0x138c	; 0x138c <_Z14lb_send_stringPch>
			}
			break;
    3362:	0f 90       	pop	r0
    3364:	0f 90       	pop	r0
    3366:	0f 90       	pop	r0
    3368:	0f 90       	pop	r0
    336a:	0f 90       	pop	r0
    336c:	0f 90       	pop	r0
    336e:	e7 c2       	rjmp	.+1486   	; 0x393e <_Z17handleLinkBusMsgsv+0xb74>

			case MESSAGE_VERSION:
			{
				ee_mgr.sendEEPROMString(TextVersion);
    3370:	60 e0       	ldi	r22, 0x00	; 0
    3372:	85 eb       	ldi	r24, 0xB5	; 181
    3374:	95 e0       	ldi	r25, 0x05	; 5
    3376:	0e 94 58 03 	call	0x6b0	; 0x6b0 <_ZN13EepromManager16sendEEPROMStringE8EE_var_t>
			}
			break;
    337a:	e1 c2       	rjmp	.+1474   	; 0x393e <_Z17handleLinkBusMsgsv+0xb74>

			case MESSAGE_PASSWORD:
			{
				if(lb_buff->fields[FIELD1][0])
    337c:	d6 01       	movw	r26, r12
    337e:	13 96       	adiw	r26, 0x03	; 3
    3380:	8c 91       	ld	r24, X
    3382:	88 23       	and	r24, r24
    3384:	c9 f0       	breq	.+50     	; 0x33b8 <_Z17handleLinkBusMsgsv+0x5ee>
				{
					strncpy(g_tempStr, lb_buff->fields[FIELD1], MAX_UNLOCK_CODE_LENGTH);
    3386:	48 e0       	ldi	r20, 0x08	; 8
    3388:	50 e0       	ldi	r21, 0x00	; 0
    338a:	b6 01       	movw	r22, r12
    338c:	6d 5f       	subi	r22, 0xFD	; 253
    338e:	7f 4f       	sbci	r23, 0xFF	; 255
    3390:	c5 01       	movw	r24, r10
    3392:	0e 94 1a 2e 	call	0x5c34	; 0x5c34 <strncpy>
					g_tempStr[MAX_UNLOCK_CODE_LENGTH] = '\0';   /* truncate to no more than max characters */
    3396:	f5 01       	movw	r30, r10
    3398:	10 86       	std	Z+8, r1	; 0x08

					if(only_digits(g_tempStr) && (strlen(g_tempStr) >= MIN_UNLOCK_CODE_LENGTH))
    339a:	c5 01       	movw	r24, r10
    339c:	0e 94 05 13 	call	0x260a	; 0x260a <_Z11only_digitsPc>
    33a0:	88 23       	and	r24, r24
    33a2:	51 f0       	breq	.+20     	; 0x33b8 <_Z17handleLinkBusMsgsv+0x5ee>
    33a4:	f5 01       	movw	r30, r10
    33a6:	01 90       	ld	r0, Z+
    33a8:	00 20       	and	r0, r0
    33aa:	e9 f7       	brne	.-6      	; 0x33a6 <_Z17handleLinkBusMsgsv+0x5dc>
    33ac:	31 97       	sbiw	r30, 0x01	; 1
    33ae:	ea 5f       	subi	r30, 0xFA	; 250
    33b0:	f4 40       	sbci	r31, 0x04	; 4
    33b2:	34 97       	sbiw	r30, 0x04	; 4
    33b4:	08 f0       	brcs	.+2      	; 0x33b8 <_Z17handleLinkBusMsgsv+0x5ee>
    33b6:	d7 c2       	rjmp	.+1454   	; 0x3966 <_Z17handleLinkBusMsgsv+0xb9c>
						strcpy((char*)g_unlockCode, g_tempStr);
						ee_mgr.updateEEPROMVar(UnlockCode, (void*)g_unlockCode);
					}
				}

				sprintf(g_tempStr, "PWD=%s\n", (char*)g_unlockCode);
    33b8:	9f 92       	push	r9
    33ba:	8f 92       	push	r8
    33bc:	7f 92       	push	r7
    33be:	6f 92       	push	r6
    33c0:	bf 92       	push	r11
    33c2:	af 92       	push	r10
    33c4:	0e 94 46 2e 	call	0x5c8c	; 0x5c8c <sprintf>
				lb_send_string(g_tempStr, TRUE);
    33c8:	61 e0       	ldi	r22, 0x01	; 1
    33ca:	c5 01       	movw	r24, r10
    33cc:	0e 94 c6 09 	call	0x138c	; 0x138c <_Z14lb_send_stringPch>
			}
			break;
    33d0:	0f 90       	pop	r0
    33d2:	0f 90       	pop	r0
    33d4:	0f 90       	pop	r0
    33d6:	0f 90       	pop	r0
    33d8:	0f 90       	pop	r0
    33da:	0f 90       	pop	r0
    33dc:	b0 c2       	rjmp	.+1376   	; 0x393e <_Z17handleLinkBusMsgsv+0xb74>

			case MESSAGE_CLOCK:
			{
				BOOL doprint = false;

				if(lb_buff->fields[FIELD1][0] == 'T')   /* Current time format "YYMMDDhhmmss" */
    33de:	d6 01       	movw	r26, r12
    33e0:	13 96       	adiw	r26, 0x03	; 3
    33e2:	8c 91       	ld	r24, X
    33e4:	84 35       	cpi	r24, 0x54	; 84
    33e6:	09 f0       	breq	.+2      	; 0x33ea <_Z17handleLinkBusMsgsv+0x620>
    33e8:	73 c0       	rjmp	.+230    	; 0x34d0 <_Z17handleLinkBusMsgsv+0x706>
				{
					strncpy(g_tempStr, lb_buff->fields[FIELD2], 12);
    33ea:	4c e0       	ldi	r20, 0x0C	; 12
    33ec:	50 e0       	ldi	r21, 0x00	; 0
    33ee:	b6 01       	movw	r22, r12
    33f0:	69 5e       	subi	r22, 0xE9	; 233
    33f2:	7f 4f       	sbci	r23, 0xFF	; 255
    33f4:	c5 01       	movw	r24, r10
    33f6:	0e 94 1a 2e 	call	0x5c34	; 0x5c34 <strncpy>
					g_tempStr[12] = '\0';               /* truncate to no more than 12 characters */
    33fa:	f5 01       	movw	r30, r10
    33fc:	14 86       	std	Z+12, r1	; 0x0c

					time_t t = validateTimeString(g_tempStr, (time_t*)&g_current_epoch, -g_utc_offset);
    33fe:	40 91 9e 05 	lds	r20, 0x059E	; 0x80059e <g_utc_offset>
    3402:	41 95       	neg	r20
    3404:	67 ea       	ldi	r22, 0xA7	; 167
    3406:	75 e0       	ldi	r23, 0x05	; 5
    3408:	c5 01       	movw	r24, r10
    340a:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <_Z18validateTimeStringPcPma>
    340e:	69 87       	std	Y+9, r22	; 0x09
    3410:	7a 87       	std	Y+10, r23	; 0x0a
    3412:	8b 87       	std	Y+11, r24	; 0x0b
    3414:	9c 87       	std	Y+12, r25	; 0x0c

					if(t)
    3416:	61 15       	cp	r22, r1
    3418:	71 05       	cpc	r23, r1
    341a:	81 05       	cpc	r24, r1
    341c:	91 05       	cpc	r25, r1
    341e:	41 f1       	breq	.+80     	; 0x3470 <_Z17handleLinkBusMsgsv+0x6a6>
					{
						rv3028_set_epoch(t);
    3420:	0e 94 0f 27 	call	0x4e1e	; 0x4e1e <_Z16rv3028_set_epochm>
						g_current_epoch = t;
    3424:	89 85       	ldd	r24, Y+9	; 0x09
    3426:	9a 85       	ldd	r25, Y+10	; 0x0a
    3428:	ab 85       	ldd	r26, Y+11	; 0x0b
    342a:	bc 85       	ldd	r27, Y+12	; 0x0c
    342c:	80 93 a7 05 	sts	0x05A7, r24	; 0x8005a7 <g_current_epoch>
    3430:	90 93 a8 05 	sts	0x05A8, r25	; 0x8005a8 <g_current_epoch+0x1>
    3434:	a0 93 a9 05 	sts	0x05A9, r26	; 0x8005a9 <g_current_epoch+0x2>
    3438:	b0 93 aa 05 	sts	0x05AA, r27	; 0x8005aa <g_current_epoch+0x3>
						sprintf(g_tempStr, "Time:%lu\n", g_current_epoch);
    343c:	80 91 a7 05 	lds	r24, 0x05A7	; 0x8005a7 <g_current_epoch>
    3440:	90 91 a8 05 	lds	r25, 0x05A8	; 0x8005a8 <g_current_epoch+0x1>
    3444:	a0 91 a9 05 	lds	r26, 0x05A9	; 0x8005a9 <g_current_epoch+0x2>
    3448:	b0 91 aa 05 	lds	r27, 0x05AA	; 0x8005aa <g_current_epoch+0x3>
    344c:	bf 93       	push	r27
    344e:	af 93       	push	r26
    3450:	9f 93       	push	r25
    3452:	8f 93       	push	r24
    3454:	85 ee       	ldi	r24, 0xE5	; 229
    3456:	91 e0       	ldi	r25, 0x01	; 1
    3458:	9f 93       	push	r25
    345a:	8f 93       	push	r24
    345c:	bf 92       	push	r11
    345e:	af 92       	push	r10
    3460:	0e 94 46 2e 	call	0x5c8c	; 0x5c8c <sprintf>
    3464:	0f b6       	in	r0, 0x3f	; 63
    3466:	f8 94       	cli
    3468:	de bf       	out	0x3e, r29	; 62
    346a:	0f be       	out	0x3f, r0	; 63
    346c:	cd bf       	out	0x3d, r28	; 61
    346e:	86 c2       	rjmp	.+1292   	; 0x397c <_Z17handleLinkBusMsgsv+0xbb2>
					}
					else
					{
						reportTimeTill(g_current_epoch, g_event_start_epoch, "Starts in: ", NULL);
    3470:	20 91 a3 05 	lds	r18, 0x05A3	; 0x8005a3 <g_event_start_epoch>
    3474:	30 91 a4 05 	lds	r19, 0x05A4	; 0x8005a4 <g_event_start_epoch+0x1>
    3478:	40 91 a5 05 	lds	r20, 0x05A5	; 0x8005a5 <g_event_start_epoch+0x2>
    347c:	50 91 a6 05 	lds	r21, 0x05A6	; 0x8005a6 <g_event_start_epoch+0x3>
    3480:	60 91 a7 05 	lds	r22, 0x05A7	; 0x8005a7 <g_current_epoch>
    3484:	70 91 a8 05 	lds	r23, 0x05A8	; 0x8005a8 <g_current_epoch+0x1>
    3488:	80 91 a9 05 	lds	r24, 0x05A9	; 0x8005a9 <g_current_epoch+0x2>
    348c:	90 91 aa 05 	lds	r25, 0x05AA	; 0x8005aa <g_current_epoch+0x3>
    3490:	e1 2c       	mov	r14, r1
    3492:	f1 2c       	mov	r15, r1
    3494:	0a e7       	ldi	r16, 0x7A	; 122
    3496:	11 e0       	ldi	r17, 0x01	; 1
    3498:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <_Z14reportTimeTillmmPKcS0_>
						sprintf(g_tempStr, "UNIX Time:%lu\n", g_current_epoch);
    349c:	80 91 a7 05 	lds	r24, 0x05A7	; 0x8005a7 <g_current_epoch>
    34a0:	90 91 a8 05 	lds	r25, 0x05A8	; 0x8005a8 <g_current_epoch+0x1>
    34a4:	a0 91 a9 05 	lds	r26, 0x05A9	; 0x8005a9 <g_current_epoch+0x2>
    34a8:	b0 91 aa 05 	lds	r27, 0x05AA	; 0x8005aa <g_current_epoch+0x3>
    34ac:	bf 93       	push	r27
    34ae:	af 93       	push	r26
    34b0:	9f 93       	push	r25
    34b2:	8f 93       	push	r24
    34b4:	80 ee       	ldi	r24, 0xE0	; 224
    34b6:	91 e0       	ldi	r25, 0x01	; 1
    34b8:	9f 93       	push	r25
    34ba:	8f 93       	push	r24
    34bc:	bf 92       	push	r11
    34be:	af 92       	push	r10
    34c0:	0e 94 46 2e 	call	0x5c8c	; 0x5c8c <sprintf>
    34c4:	0f b6       	in	r0, 0x3f	; 63
    34c6:	f8 94       	cli
    34c8:	de bf       	out	0x3e, r29	; 62
    34ca:	0f be       	out	0x3f, r0	; 63
    34cc:	cd bf       	out	0x3d, r28	; 61
    34ce:	56 c2       	rjmp	.+1196   	; 0x397c <_Z17handleLinkBusMsgsv+0xbb2>
					}

					doprint = true;
				}
				else if(lb_buff->fields[FIELD1][0] == 'S')  /* Event start time */
    34d0:	83 35       	cpi	r24, 0x53	; 83
    34d2:	09 f0       	breq	.+2      	; 0x34d6 <_Z17handleLinkBusMsgsv+0x70c>
    34d4:	a2 c0       	rjmp	.+324    	; 0x361a <_Z17handleLinkBusMsgsv+0x850>
				{
					strcpy(g_tempStr, lb_buff->fields[FIELD2]);
    34d6:	b6 01       	movw	r22, r12
    34d8:	69 5e       	subi	r22, 0xE9	; 233
    34da:	7f 4f       	sbci	r23, 0xFF	; 255
    34dc:	c5 01       	movw	r24, r10
    34de:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <strcpy>
					time_t s = validateTimeString(g_tempStr, (time_t*)&g_event_start_epoch, -g_utc_offset);
    34e2:	40 91 9e 05 	lds	r20, 0x059E	; 0x80059e <g_utc_offset>
    34e6:	41 95       	neg	r20
    34e8:	63 ea       	ldi	r22, 0xA3	; 163
    34ea:	75 e0       	ldi	r23, 0x05	; 5
    34ec:	c5 01       	movw	r24, r10
    34ee:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <_Z18validateTimeStringPcPma>

					if(s)
    34f2:	61 15       	cp	r22, r1
    34f4:	71 05       	cpc	r23, r1
    34f6:	81 05       	cpc	r24, r1
    34f8:	91 05       	cpc	r25, r1
    34fa:	09 f4       	brne	.+2      	; 0x34fe <_Z17handleLinkBusMsgsv+0x734>
    34fc:	74 c0       	rjmp	.+232    	; 0x35e6 <_Z17handleLinkBusMsgsv+0x81c>
					{
						g_event_start_epoch = s;
    34fe:	60 93 a3 05 	sts	0x05A3, r22	; 0x8005a3 <g_event_start_epoch>
    3502:	70 93 a4 05 	sts	0x05A4, r23	; 0x8005a4 <g_event_start_epoch+0x1>
    3506:	80 93 a5 05 	sts	0x05A5, r24	; 0x8005a5 <g_event_start_epoch+0x2>
    350a:	90 93 a6 05 	sts	0x05A6, r25	; 0x8005a6 <g_event_start_epoch+0x3>
						ee_mgr.updateEEPROMVar(Event_start_epoch, (void*)&g_event_start_epoch);
    350e:	43 ea       	ldi	r20, 0xA3	; 163
    3510:	55 e0       	ldi	r21, 0x05	; 5
    3512:	67 e1       	ldi	r22, 0x17	; 23
    3514:	85 eb       	ldi	r24, 0xB5	; 181
    3516:	95 e0       	ldi	r25, 0x05	; 5
    3518:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						g_event_finish_epoch = MAX(g_event_finish_epoch, (g_event_start_epoch + SECONDS_24H));
    351c:	80 91 9f 05 	lds	r24, 0x059F	; 0x80059f <g_event_finish_epoch>
    3520:	90 91 a0 05 	lds	r25, 0x05A0	; 0x8005a0 <g_event_finish_epoch+0x1>
    3524:	a0 91 a1 05 	lds	r26, 0x05A1	; 0x8005a1 <g_event_finish_epoch+0x2>
    3528:	b0 91 a2 05 	lds	r27, 0x05A2	; 0x8005a2 <g_event_finish_epoch+0x3>
    352c:	8d 83       	std	Y+5, r24	; 0x05
    352e:	9e 83       	std	Y+6, r25	; 0x06
    3530:	af 83       	std	Y+7, r26	; 0x07
    3532:	b8 87       	std	Y+8, r27	; 0x08
    3534:	80 91 a3 05 	lds	r24, 0x05A3	; 0x8005a3 <g_event_start_epoch>
    3538:	90 91 a4 05 	lds	r25, 0x05A4	; 0x8005a4 <g_event_start_epoch+0x1>
    353c:	a0 91 a5 05 	lds	r26, 0x05A5	; 0x8005a5 <g_event_start_epoch+0x2>
    3540:	b0 91 a6 05 	lds	r27, 0x05A6	; 0x8005a6 <g_event_start_epoch+0x3>
    3544:	80 58       	subi	r24, 0x80	; 128
    3546:	9e 4a       	sbci	r25, 0xAE	; 174
    3548:	ae 4f       	sbci	r26, 0xFE	; 254
    354a:	bf 4f       	sbci	r27, 0xFF	; 255
    354c:	89 83       	std	Y+1, r24	; 0x01
    354e:	9a 83       	std	Y+2, r25	; 0x02
    3550:	ab 83       	std	Y+3, r26	; 0x03
    3552:	bc 83       	std	Y+4, r27	; 0x04
    3554:	4d 81       	ldd	r20, Y+5	; 0x05
    3556:	5e 81       	ldd	r21, Y+6	; 0x06
    3558:	6f 81       	ldd	r22, Y+7	; 0x07
    355a:	78 85       	ldd	r23, Y+8	; 0x08
    355c:	48 17       	cp	r20, r24
    355e:	59 07       	cpc	r21, r25
    3560:	6a 07       	cpc	r22, r26
    3562:	7b 07       	cpc	r23, r27
    3564:	28 f4       	brcc	.+10     	; 0x3570 <_Z17handleLinkBusMsgsv+0x7a6>
    3566:	89 81       	ldd	r24, Y+1	; 0x01
    3568:	9a 81       	ldd	r25, Y+2	; 0x02
    356a:	ab 81       	ldd	r26, Y+3	; 0x03
    356c:	bc 81       	ldd	r27, Y+4	; 0x04
    356e:	04 c0       	rjmp	.+8      	; 0x3578 <_Z17handleLinkBusMsgsv+0x7ae>
    3570:	8d 81       	ldd	r24, Y+5	; 0x05
    3572:	9e 81       	ldd	r25, Y+6	; 0x06
    3574:	af 81       	ldd	r26, Y+7	; 0x07
    3576:	b8 85       	ldd	r27, Y+8	; 0x08
    3578:	80 93 9f 05 	sts	0x059F, r24	; 0x80059f <g_event_finish_epoch>
    357c:	90 93 a0 05 	sts	0x05A0, r25	; 0x8005a0 <g_event_finish_epoch+0x1>
    3580:	a0 93 a1 05 	sts	0x05A1, r26	; 0x8005a1 <g_event_finish_epoch+0x2>
    3584:	b0 93 a2 05 	sts	0x05A2, r27	; 0x8005a2 <g_event_finish_epoch+0x3>
						ee_mgr.updateEEPROMVar(Event_finish_epoch, (void*)&g_event_finish_epoch);
    3588:	4f e9       	ldi	r20, 0x9F	; 159
    358a:	55 e0       	ldi	r21, 0x05	; 5
    358c:	68 e1       	ldi	r22, 0x18	; 24
    358e:	85 eb       	ldi	r24, 0xB5	; 181
    3590:	95 e0       	ldi	r25, 0x05	; 5
    3592:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						sprintf(g_tempStr, "Start:%lu\n", g_event_start_epoch);
    3596:	80 91 a3 05 	lds	r24, 0x05A3	; 0x8005a3 <g_event_start_epoch>
    359a:	90 91 a4 05 	lds	r25, 0x05A4	; 0x8005a4 <g_event_start_epoch+0x1>
    359e:	a0 91 a5 05 	lds	r26, 0x05A5	; 0x8005a5 <g_event_start_epoch+0x2>
    35a2:	b0 91 a6 05 	lds	r27, 0x05A6	; 0x8005a6 <g_event_start_epoch+0x3>
    35a6:	bf 93       	push	r27
    35a8:	af 93       	push	r26
    35aa:	9f 93       	push	r25
    35ac:	8f 93       	push	r24
    35ae:	8f ee       	ldi	r24, 0xEF	; 239
    35b0:	91 e0       	ldi	r25, 0x01	; 1
    35b2:	9f 93       	push	r25
    35b4:	8f 93       	push	r24
    35b6:	bf 92       	push	r11
    35b8:	af 92       	push	r10
    35ba:	0e 94 46 2e 	call	0x5c8c	; 0x5c8c <sprintf>
						g_use_rtc_to_start = !clockConfigurationError() && g_transmissions_disabled;
    35be:	0e 94 b6 0c 	call	0x196c	; 0x196c <_Z23clockConfigurationErrorv>
    35c2:	0f b6       	in	r0, 0x3f	; 63
    35c4:	f8 94       	cli
    35c6:	de bf       	out	0x3e, r29	; 62
    35c8:	0f be       	out	0x3f, r0	; 63
    35ca:	cd bf       	out	0x3d, r28	; 61
    35cc:	81 11       	cpse	r24, r1
    35ce:	07 c0       	rjmp	.+14     	; 0x35de <_Z17handleLinkBusMsgsv+0x814>
    35d0:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <g_transmissions_disabled>
    35d4:	81 e0       	ldi	r24, 0x01	; 1
    35d6:	91 11       	cpse	r25, r1
    35d8:	03 c0       	rjmp	.+6      	; 0x35e0 <_Z17handleLinkBusMsgsv+0x816>
    35da:	80 e0       	ldi	r24, 0x00	; 0
    35dc:	01 c0       	rjmp	.+2      	; 0x35e0 <_Z17handleLinkBusMsgsv+0x816>
    35de:	80 e0       	ldi	r24, 0x00	; 0
    35e0:	80 93 5d 05 	sts	0x055D, r24	; 0x80055d <g_use_rtc_to_start>
    35e4:	cb c1       	rjmp	.+918    	; 0x397c <_Z17handleLinkBusMsgsv+0xbb2>
					}
					else
					{
						sprintf(g_tempStr, "Start:%lu\n", g_event_start_epoch);
    35e6:	80 91 a3 05 	lds	r24, 0x05A3	; 0x8005a3 <g_event_start_epoch>
    35ea:	90 91 a4 05 	lds	r25, 0x05A4	; 0x8005a4 <g_event_start_epoch+0x1>
    35ee:	a0 91 a5 05 	lds	r26, 0x05A5	; 0x8005a5 <g_event_start_epoch+0x2>
    35f2:	b0 91 a6 05 	lds	r27, 0x05A6	; 0x8005a6 <g_event_start_epoch+0x3>
    35f6:	bf 93       	push	r27
    35f8:	af 93       	push	r26
    35fa:	9f 93       	push	r25
    35fc:	8f 93       	push	r24
    35fe:	8f ee       	ldi	r24, 0xEF	; 239
    3600:	91 e0       	ldi	r25, 0x01	; 1
    3602:	9f 93       	push	r25
    3604:	8f 93       	push	r24
    3606:	bf 92       	push	r11
    3608:	af 92       	push	r10
    360a:	0e 94 46 2e 	call	0x5c8c	; 0x5c8c <sprintf>
    360e:	0f b6       	in	r0, 0x3f	; 63
    3610:	f8 94       	cli
    3612:	de bf       	out	0x3e, r29	; 62
    3614:	0f be       	out	0x3f, r0	; 63
    3616:	cd bf       	out	0x3d, r28	; 61
    3618:	b1 c1       	rjmp	.+866    	; 0x397c <_Z17handleLinkBusMsgsv+0xbb2>
					}

					doprint = true;
				}
				else if(lb_buff->fields[FIELD1][0] == 'F')  /* Event finish time */
    361a:	86 34       	cpi	r24, 0x46	; 70
    361c:	09 f0       	breq	.+2      	; 0x3620 <_Z17handleLinkBusMsgsv+0x856>
    361e:	7b c0       	rjmp	.+246    	; 0x3716 <_Z17handleLinkBusMsgsv+0x94c>
				{
					strcpy(g_tempStr, lb_buff->fields[FIELD2]);
    3620:	b6 01       	movw	r22, r12
    3622:	69 5e       	subi	r22, 0xE9	; 233
    3624:	7f 4f       	sbci	r23, 0xFF	; 255
    3626:	c5 01       	movw	r24, r10
    3628:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <strcpy>
					time_t f = validateTimeString(g_tempStr, (time_t*)&g_event_finish_epoch, -g_utc_offset);
    362c:	40 91 9e 05 	lds	r20, 0x059E	; 0x80059e <g_utc_offset>
    3630:	41 95       	neg	r20
    3632:	6f e9       	ldi	r22, 0x9F	; 159
    3634:	75 e0       	ldi	r23, 0x05	; 5
    3636:	c5 01       	movw	r24, r10
    3638:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <_Z18validateTimeStringPcPma>

					if(f)
    363c:	61 15       	cp	r22, r1
    363e:	71 05       	cpc	r23, r1
    3640:	81 05       	cpc	r24, r1
    3642:	91 05       	cpc	r25, r1
    3644:	09 f4       	brne	.+2      	; 0x3648 <_Z17handleLinkBusMsgsv+0x87e>
    3646:	4d c0       	rjmp	.+154    	; 0x36e2 <_Z17handleLinkBusMsgsv+0x918>
					{
						g_event_finish_epoch = f;
    3648:	60 93 9f 05 	sts	0x059F, r22	; 0x80059f <g_event_finish_epoch>
    364c:	70 93 a0 05 	sts	0x05A0, r23	; 0x8005a0 <g_event_finish_epoch+0x1>
    3650:	80 93 a1 05 	sts	0x05A1, r24	; 0x8005a1 <g_event_finish_epoch+0x2>
    3654:	90 93 a2 05 	sts	0x05A2, r25	; 0x8005a2 <g_event_finish_epoch+0x3>
						ee_mgr.updateEEPROMVar(Event_finish_epoch, (void*)&g_event_finish_epoch);
    3658:	4f e9       	ldi	r20, 0x9F	; 159
    365a:	55 e0       	ldi	r21, 0x05	; 5
    365c:	68 e1       	ldi	r22, 0x18	; 24
    365e:	85 eb       	ldi	r24, 0xB5	; 181
    3660:	95 e0       	ldi	r25, 0x05	; 5
    3662:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						reportTimeTill(g_event_start_epoch, g_event_finish_epoch, "Lasts: ", NULL);
    3666:	20 91 9f 05 	lds	r18, 0x059F	; 0x80059f <g_event_finish_epoch>
    366a:	30 91 a0 05 	lds	r19, 0x05A0	; 0x8005a0 <g_event_finish_epoch+0x1>
    366e:	40 91 a1 05 	lds	r20, 0x05A1	; 0x8005a1 <g_event_finish_epoch+0x2>
    3672:	50 91 a2 05 	lds	r21, 0x05A2	; 0x8005a2 <g_event_finish_epoch+0x3>
    3676:	60 91 a3 05 	lds	r22, 0x05A3	; 0x8005a3 <g_event_start_epoch>
    367a:	70 91 a4 05 	lds	r23, 0x05A4	; 0x8005a4 <g_event_start_epoch+0x1>
    367e:	80 91 a5 05 	lds	r24, 0x05A5	; 0x8005a5 <g_event_start_epoch+0x2>
    3682:	90 91 a6 05 	lds	r25, 0x05A6	; 0x8005a6 <g_event_start_epoch+0x3>
    3686:	e1 2c       	mov	r14, r1
    3688:	f1 2c       	mov	r15, r1
    368a:	06 e8       	ldi	r16, 0x86	; 134
    368c:	11 e0       	ldi	r17, 0x01	; 1
    368e:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <_Z14reportTimeTillmmPKcS0_>
						sprintf(g_tempStr, "Finish:%lu\n", g_event_finish_epoch);
    3692:	80 91 9f 05 	lds	r24, 0x059F	; 0x80059f <g_event_finish_epoch>
    3696:	90 91 a0 05 	lds	r25, 0x05A0	; 0x8005a0 <g_event_finish_epoch+0x1>
    369a:	a0 91 a1 05 	lds	r26, 0x05A1	; 0x8005a1 <g_event_finish_epoch+0x2>
    369e:	b0 91 a2 05 	lds	r27, 0x05A2	; 0x8005a2 <g_event_finish_epoch+0x3>
    36a2:	bf 93       	push	r27
    36a4:	af 93       	push	r26
    36a6:	9f 93       	push	r25
    36a8:	8f 93       	push	r24
    36aa:	8a ef       	ldi	r24, 0xFA	; 250
    36ac:	91 e0       	ldi	r25, 0x01	; 1
    36ae:	9f 93       	push	r25
    36b0:	8f 93       	push	r24
    36b2:	bf 92       	push	r11
    36b4:	af 92       	push	r10
    36b6:	0e 94 46 2e 	call	0x5c8c	; 0x5c8c <sprintf>
						g_use_rtc_to_start = !clockConfigurationError() && g_transmissions_disabled;
    36ba:	0e 94 b6 0c 	call	0x196c	; 0x196c <_Z23clockConfigurationErrorv>
    36be:	0f b6       	in	r0, 0x3f	; 63
    36c0:	f8 94       	cli
    36c2:	de bf       	out	0x3e, r29	; 62
    36c4:	0f be       	out	0x3f, r0	; 63
    36c6:	cd bf       	out	0x3d, r28	; 61
    36c8:	81 11       	cpse	r24, r1
    36ca:	07 c0       	rjmp	.+14     	; 0x36da <_Z17handleLinkBusMsgsv+0x910>
    36cc:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <g_transmissions_disabled>
    36d0:	81 e0       	ldi	r24, 0x01	; 1
    36d2:	91 11       	cpse	r25, r1
    36d4:	03 c0       	rjmp	.+6      	; 0x36dc <_Z17handleLinkBusMsgsv+0x912>
    36d6:	80 e0       	ldi	r24, 0x00	; 0
    36d8:	01 c0       	rjmp	.+2      	; 0x36dc <_Z17handleLinkBusMsgsv+0x912>
    36da:	80 e0       	ldi	r24, 0x00	; 0
    36dc:	80 93 5d 05 	sts	0x055D, r24	; 0x80055d <g_use_rtc_to_start>
    36e0:	4d c1       	rjmp	.+666    	; 0x397c <_Z17handleLinkBusMsgsv+0xbb2>
					}
					else
					{
						sprintf(g_tempStr, "Finish:%lu\n", g_event_finish_epoch);
    36e2:	80 91 9f 05 	lds	r24, 0x059F	; 0x80059f <g_event_finish_epoch>
    36e6:	90 91 a0 05 	lds	r25, 0x05A0	; 0x8005a0 <g_event_finish_epoch+0x1>
    36ea:	a0 91 a1 05 	lds	r26, 0x05A1	; 0x8005a1 <g_event_finish_epoch+0x2>
    36ee:	b0 91 a2 05 	lds	r27, 0x05A2	; 0x8005a2 <g_event_finish_epoch+0x3>
    36f2:	bf 93       	push	r27
    36f4:	af 93       	push	r26
    36f6:	9f 93       	push	r25
    36f8:	8f 93       	push	r24
    36fa:	8a ef       	ldi	r24, 0xFA	; 250
    36fc:	91 e0       	ldi	r25, 0x01	; 1
    36fe:	9f 93       	push	r25
    3700:	8f 93       	push	r24
    3702:	bf 92       	push	r11
    3704:	af 92       	push	r10
    3706:	0e 94 46 2e 	call	0x5c8c	; 0x5c8c <sprintf>
    370a:	0f b6       	in	r0, 0x3f	; 63
    370c:	f8 94       	cli
    370e:	de bf       	out	0x3e, r29	; 62
    3710:	0f be       	out	0x3f, r0	; 63
    3712:	cd bf       	out	0x3d, r28	; 61
    3714:	33 c1       	rjmp	.+614    	; 0x397c <_Z17handleLinkBusMsgsv+0xbb2>
					}

					doprint = true;
				}
				else if(lb_buff->fields[FIELD1][0] == 'O')
    3716:	8f 34       	cpi	r24, 0x4F	; 79
    3718:	b9 f5       	brne	.+110    	; 0x3788 <_Z17handleLinkBusMsgsv+0x9be>
				{
					if(lb_buff->fields[FIELD2][0])
    371a:	d6 01       	movw	r26, r12
    371c:	57 96       	adiw	r26, 0x17	; 23
    371e:	8c 91       	ld	r24, X
    3720:	88 23       	and	r24, r24
    3722:	d9 f0       	breq	.+54     	; 0x375a <_Z17handleLinkBusMsgsv+0x990>
					{
						int8_t offset = (uint16_t)atoi(lb_buff->fields[FIELD2]);
    3724:	c6 01       	movw	r24, r12
    3726:	47 96       	adiw	r24, 0x17	; 23
    3728:	0e 94 bb 2d 	call	0x5b76	; 0x5b76 <atoi>

						offset = CLAMP(-24, offset, 24);
    372c:	89 31       	cpi	r24, 0x19	; 25
    372e:	54 f4       	brge	.+20     	; 0x3744 <_Z17handleLinkBusMsgsv+0x97a>
    3730:	08 2e       	mov	r0, r24
    3732:	00 0c       	add	r0, r0
    3734:	99 0b       	sbc	r25, r25
    3736:	88 3e       	cpi	r24, 0xE8	; 232
    3738:	bf ef       	ldi	r27, 0xFF	; 255
    373a:	9b 07       	cpc	r25, r27
    373c:	2c f4       	brge	.+10     	; 0x3748 <_Z17handleLinkBusMsgsv+0x97e>
    373e:	88 ee       	ldi	r24, 0xE8	; 232
    3740:	9f ef       	ldi	r25, 0xFF	; 255
    3742:	02 c0       	rjmp	.+4      	; 0x3748 <_Z17handleLinkBusMsgsv+0x97e>
    3744:	88 e1       	ldi	r24, 0x18	; 24
    3746:	90 e0       	ldi	r25, 0x00	; 0

						g_utc_offset = offset;
    3748:	80 93 9e 05 	sts	0x059E, r24	; 0x80059e <g_utc_offset>
						ee_mgr.updateEEPROMVar(Utc_offset, (void*)&g_utc_offset);
    374c:	4e e9       	ldi	r20, 0x9E	; 158
    374e:	55 e0       	ldi	r21, 0x05	; 5
    3750:	69 e1       	ldi	r22, 0x19	; 25
    3752:	85 eb       	ldi	r24, 0xB5	; 181
    3754:	95 e0       	ldi	r25, 0x05	; 5
    3756:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
					}

					sprintf(g_tempStr, "Offset:%d\n", g_utc_offset);
    375a:	80 91 9e 05 	lds	r24, 0x059E	; 0x80059e <g_utc_offset>
    375e:	28 2f       	mov	r18, r24
    3760:	08 2e       	mov	r0, r24
    3762:	00 0c       	add	r0, r0
    3764:	33 0b       	sbc	r19, r19
    3766:	3f 93       	push	r19
    3768:	8f 93       	push	r24
    376a:	86 e0       	ldi	r24, 0x06	; 6
    376c:	92 e0       	ldi	r25, 0x02	; 2
    376e:	9f 93       	push	r25
    3770:	8f 93       	push	r24
    3772:	bf 92       	push	r11
    3774:	af 92       	push	r10
    3776:	0e 94 46 2e 	call	0x5c8c	; 0x5c8c <sprintf>
    377a:	0f 90       	pop	r0
    377c:	0f 90       	pop	r0
    377e:	0f 90       	pop	r0
    3780:	0f 90       	pop	r0
    3782:	0f 90       	pop	r0
    3784:	0f 90       	pop	r0
    3786:	fa c0       	rjmp	.+500    	; 0x397c <_Z17handleLinkBusMsgsv+0xbb2>
					doprint = TRUE;
				}
				else if(lb_buff->fields[FIELD1][0] == 'C')  /* Test only - Set RTC offset value */
    3788:	83 34       	cpi	r24, 0x43	; 67
    378a:	09 f5       	brne	.+66     	; 0x37ce <_Z17handleLinkBusMsgsv+0xa04>
				{
					if(lb_buff->fields[FIELD2][0])
    378c:	f6 01       	movw	r30, r12
    378e:	87 89       	ldd	r24, Z+23	; 0x17
    3790:	88 23       	and	r24, r24
    3792:	51 f0       	breq	.+20     	; 0x37a8 <_Z17handleLinkBusMsgsv+0x9de>
					{
						uint16_t c = (uint16_t)atoi(lb_buff->fields[FIELD2]);
    3794:	c6 01       	movw	r24, r12
    3796:	47 96       	adiw	r24, 0x17	; 23
    3798:	0e 94 bb 2d 	call	0x5b76	; 0x5b76 <atoi>

						if(c < 512)
    379c:	81 15       	cp	r24, r1
    379e:	f2 e0       	ldi	r31, 0x02	; 2
    37a0:	9f 07       	cpc	r25, r31
    37a2:	10 f4       	brcc	.+4      	; 0x37a8 <_Z17handleLinkBusMsgsv+0x9de>
						{
							rv3028_set_offset_RAM(c);
    37a4:	0e 94 48 28 	call	0x5090	; 0x5090 <_Z21rv3028_set_offset_RAMj>
						}
					}

					int a = rv3028_get_offset_RAM();
    37a8:	0e 94 a3 28 	call	0x5146	; 0x5146 <_Z21rv3028_get_offset_RAMv>
					sprintf(g_tempStr, "C=%d\n", a);
    37ac:	9f 93       	push	r25
    37ae:	8f 93       	push	r24
    37b0:	81 e1       	ldi	r24, 0x11	; 17
    37b2:	92 e0       	ldi	r25, 0x02	; 2
    37b4:	9f 93       	push	r25
    37b6:	8f 93       	push	r24
    37b8:	bf 92       	push	r11
    37ba:	af 92       	push	r10
    37bc:	0e 94 46 2e 	call	0x5c8c	; 0x5c8c <sprintf>
    37c0:	0f 90       	pop	r0
    37c2:	0f 90       	pop	r0
    37c4:	0f 90       	pop	r0
    37c6:	0f 90       	pop	r0
    37c8:	0f 90       	pop	r0
    37ca:	0f 90       	pop	r0
    37cc:	d7 c0       	rjmp	.+430    	; 0x397c <_Z17handleLinkBusMsgsv+0xbb2>
					doprint = true;
				}
				else
				{
					if(clockConfigurationError())
    37ce:	0e 94 b6 0c 	call	0x196c	; 0x196c <_Z23clockConfigurationErrorv>
    37d2:	88 23       	and	r24, r24
    37d4:	19 f0       	breq	.+6      	; 0x37dc <_Z17handleLinkBusMsgsv+0xa12>
					{
						reportConfigErrors();
    37d6:	0e 94 85 13 	call	0x270a	; 0x270a <_Z18reportConfigErrorsv>
    37da:	b1 c0       	rjmp	.+354    	; 0x393e <_Z17handleLinkBusMsgsv+0xb74>
					}
					else
					{
						reportTimeTill(g_current_epoch, g_event_start_epoch, "Starts in: ", "In progress\n");
    37dc:	20 91 a3 05 	lds	r18, 0x05A3	; 0x8005a3 <g_event_start_epoch>
    37e0:	30 91 a4 05 	lds	r19, 0x05A4	; 0x8005a4 <g_event_start_epoch+0x1>
    37e4:	40 91 a5 05 	lds	r20, 0x05A5	; 0x8005a5 <g_event_start_epoch+0x2>
    37e8:	50 91 a6 05 	lds	r21, 0x05A6	; 0x8005a6 <g_event_start_epoch+0x3>
    37ec:	60 91 a7 05 	lds	r22, 0x05A7	; 0x8005a7 <g_current_epoch>
    37f0:	70 91 a8 05 	lds	r23, 0x05A8	; 0x8005a8 <g_current_epoch+0x1>
    37f4:	80 91 a9 05 	lds	r24, 0x05A9	; 0x8005a9 <g_current_epoch+0x2>
    37f8:	90 91 aa 05 	lds	r25, 0x05AA	; 0x8005aa <g_current_epoch+0x3>
    37fc:	0f 2e       	mov	r0, r31
    37fe:	fd e6       	ldi	r31, 0x6D	; 109
    3800:	ef 2e       	mov	r14, r31
    3802:	f1 e0       	ldi	r31, 0x01	; 1
    3804:	ff 2e       	mov	r15, r31
    3806:	f0 2d       	mov	r31, r0
    3808:	0a e7       	ldi	r16, 0x7A	; 122
    380a:	11 e0       	ldi	r17, 0x01	; 1
    380c:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <_Z14reportTimeTillmmPKcS0_>
						reportTimeTill(g_event_start_epoch, g_event_finish_epoch, "Lasts: ", NULL);
    3810:	20 91 9f 05 	lds	r18, 0x059F	; 0x80059f <g_event_finish_epoch>
    3814:	30 91 a0 05 	lds	r19, 0x05A0	; 0x8005a0 <g_event_finish_epoch+0x1>
    3818:	40 91 a1 05 	lds	r20, 0x05A1	; 0x8005a1 <g_event_finish_epoch+0x2>
    381c:	50 91 a2 05 	lds	r21, 0x05A2	; 0x8005a2 <g_event_finish_epoch+0x3>
    3820:	60 91 a3 05 	lds	r22, 0x05A3	; 0x8005a3 <g_event_start_epoch>
    3824:	70 91 a4 05 	lds	r23, 0x05A4	; 0x8005a4 <g_event_start_epoch+0x1>
    3828:	80 91 a5 05 	lds	r24, 0x05A5	; 0x8005a5 <g_event_start_epoch+0x2>
    382c:	90 91 a6 05 	lds	r25, 0x05A6	; 0x8005a6 <g_event_start_epoch+0x3>
    3830:	e1 2c       	mov	r14, r1
    3832:	f1 2c       	mov	r15, r1
    3834:	06 e8       	ldi	r16, 0x86	; 134
    3836:	11 e0       	ldi	r17, 0x01	; 1
    3838:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <_Z14reportTimeTillmmPKcS0_>
						if(g_event_start_epoch < g_current_epoch)
    383c:	40 91 a3 05 	lds	r20, 0x05A3	; 0x8005a3 <g_event_start_epoch>
    3840:	50 91 a4 05 	lds	r21, 0x05A4	; 0x8005a4 <g_event_start_epoch+0x1>
    3844:	60 91 a5 05 	lds	r22, 0x05A5	; 0x8005a5 <g_event_start_epoch+0x2>
    3848:	70 91 a6 05 	lds	r23, 0x05A6	; 0x8005a6 <g_event_start_epoch+0x3>
    384c:	80 91 a7 05 	lds	r24, 0x05A7	; 0x8005a7 <g_current_epoch>
    3850:	90 91 a8 05 	lds	r25, 0x05A8	; 0x8005a8 <g_current_epoch+0x1>
    3854:	a0 91 a9 05 	lds	r26, 0x05A9	; 0x8005a9 <g_current_epoch+0x2>
    3858:	b0 91 aa 05 	lds	r27, 0x05AA	; 0x8005aa <g_current_epoch+0x3>
    385c:	48 17       	cp	r20, r24
    385e:	59 07       	cpc	r21, r25
    3860:	6a 07       	cpc	r22, r26
    3862:	7b 07       	cpc	r23, r27
    3864:	08 f0       	brcs	.+2      	; 0x3868 <_Z17handleLinkBusMsgsv+0xa9e>
    3866:	6b c0       	rjmp	.+214    	; 0x393e <_Z17handleLinkBusMsgsv+0xb74>
						{
							reportTimeTill(g_current_epoch, g_event_finish_epoch, "Time Remaining: ", NULL);
    3868:	20 91 9f 05 	lds	r18, 0x059F	; 0x80059f <g_event_finish_epoch>
    386c:	30 91 a0 05 	lds	r19, 0x05A0	; 0x8005a0 <g_event_finish_epoch+0x1>
    3870:	40 91 a1 05 	lds	r20, 0x05A1	; 0x8005a1 <g_event_finish_epoch+0x2>
    3874:	50 91 a2 05 	lds	r21, 0x05A2	; 0x8005a2 <g_event_finish_epoch+0x3>
    3878:	60 91 a7 05 	lds	r22, 0x05A7	; 0x8005a7 <g_current_epoch>
    387c:	70 91 a8 05 	lds	r23, 0x05A8	; 0x8005a8 <g_current_epoch+0x1>
    3880:	80 91 a9 05 	lds	r24, 0x05A9	; 0x8005a9 <g_current_epoch+0x2>
    3884:	90 91 aa 05 	lds	r25, 0x05AA	; 0x8005aa <g_current_epoch+0x3>
    3888:	0e e8       	ldi	r16, 0x8E	; 142
    388a:	11 e0       	ldi	r17, 0x01	; 1
    388c:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <_Z14reportTimeTillmmPKcS0_>
    3890:	56 c0       	rjmp	.+172    	; 0x393e <_Z17handleLinkBusMsgsv+0xb74>
			}
			break;

			case MESSAGE_TEMP:
			{
				if(lb_buff->fields[FIELD1][0] == 'C')
    3892:	d6 01       	movw	r26, r12
    3894:	13 96       	adiw	r26, 0x03	; 3
    3896:	8c 91       	ld	r24, X
    3898:	13 97       	sbiw	r26, 0x03	; 3
    389a:	83 34       	cpi	r24, 0x43	; 67
    389c:	89 f5       	brne	.+98     	; 0x3900 <_Z17handleLinkBusMsgsv+0xb36>
				{
					if(lb_buff->fields[FIELD2][0])
    389e:	57 96       	adiw	r26, 0x17	; 23
    38a0:	8c 91       	ld	r24, X
    38a2:	88 23       	and	r24, r24
    38a4:	a9 f0       	breq	.+42     	; 0x38d0 <_Z17handleLinkBusMsgsv+0xb06>
					{
						int16_t v = atoi(lb_buff->fields[FIELD2]);
    38a6:	c6 01       	movw	r24, r12
    38a8:	47 96       	adiw	r24, 0x17	; 23
    38aa:	0e 94 bb 2d 	call	0x5b76	; 0x5b76 <atoi>

						if((v > -2000) && (v < 2000))
    38ae:	9c 01       	movw	r18, r24
    38b0:	21 53       	subi	r18, 0x31	; 49
    38b2:	38 4f       	sbci	r19, 0xF8	; 248
    38b4:	2f 39       	cpi	r18, 0x9F	; 159
    38b6:	3f 40       	sbci	r19, 0x0F	; 15
    38b8:	58 f4       	brcc	.+22     	; 0x38d0 <_Z17handleLinkBusMsgsv+0xb06>
						{
							g_atmega_temp_calibration = v;
    38ba:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <g_atmega_temp_calibration+0x1>
    38be:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <g_atmega_temp_calibration>
							ee_mgr.updateEEPROMVar(Atmega_temp_calibration, (void*)&g_atmega_temp_calibration);
    38c2:	46 e1       	ldi	r20, 0x16	; 22
    38c4:	51 e0       	ldi	r21, 0x01	; 1
    38c6:	63 e1       	ldi	r22, 0x13	; 19
    38c8:	85 eb       	ldi	r24, 0xB5	; 181
    38ca:	95 e0       	ldi	r25, 0x05	; 5
    38cc:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						}
					}

					sprintf(g_tempStr, "T Cal= %d\n", g_atmega_temp_calibration);
    38d0:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <g_atmega_temp_calibration>
    38d4:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <g_atmega_temp_calibration+0x1>
    38d8:	9f 93       	push	r25
    38da:	8f 93       	push	r24
    38dc:	e7 e1       	ldi	r30, 0x17	; 23
    38de:	f2 e0       	ldi	r31, 0x02	; 2
    38e0:	ff 93       	push	r31
    38e2:	ef 93       	push	r30
    38e4:	bf 92       	push	r11
    38e6:	af 92       	push	r10
    38e8:	0e 94 46 2e 	call	0x5c8c	; 0x5c8c <sprintf>
					lb_send_string(g_tempStr, FALSE);
    38ec:	60 e0       	ldi	r22, 0x00	; 0
    38ee:	c5 01       	movw	r24, r10
    38f0:	0e 94 c6 09 	call	0x138c	; 0x138c <_Z14lb_send_stringPch>
    38f4:	0f 90       	pop	r0
    38f6:	0f 90       	pop	r0
    38f8:	0f 90       	pop	r0
    38fa:	0f 90       	pop	r0
    38fc:	0f 90       	pop	r0
    38fe:	0f 90       	pop	r0
				}

				sprintf(g_tempStr, "T=%d\n", g_temperature);
    3900:	80 91 5f 05 	lds	r24, 0x055F	; 0x80055f <g_temperature>
    3904:	28 2f       	mov	r18, r24
    3906:	08 2e       	mov	r0, r24
    3908:	00 0c       	add	r0, r0
    390a:	33 0b       	sbc	r19, r19
    390c:	3f 93       	push	r19
    390e:	8f 93       	push	r24
    3910:	82 e2       	ldi	r24, 0x22	; 34
    3912:	92 e0       	ldi	r25, 0x02	; 2
    3914:	9f 93       	push	r25
    3916:	8f 93       	push	r24
    3918:	bf 92       	push	r11
    391a:	af 92       	push	r10
    391c:	0e 94 46 2e 	call	0x5c8c	; 0x5c8c <sprintf>
				lb_send_string(g_tempStr, TRUE);
    3920:	61 e0       	ldi	r22, 0x01	; 1
    3922:	c5 01       	movw	r24, r10
    3924:	0e 94 c6 09 	call	0x138c	; 0x138c <_Z14lb_send_stringPch>
			}
			break;
    3928:	0f 90       	pop	r0
    392a:	0f 90       	pop	r0
    392c:	0f 90       	pop	r0
    392e:	0f 90       	pop	r0
    3930:	0f 90       	pop	r0
    3932:	0f 90       	pop	r0
    3934:	04 c0       	rjmp	.+8      	; 0x393e <_Z17handleLinkBusMsgsv+0xb74>

			default:
			{
				ee_mgr.send_Help();
    3936:	85 eb       	ldi	r24, 0xB5	; 181
    3938:	95 e0       	ldi	r25, 0x05	; 5
    393a:	0e 94 9f 04 	call	0x93e	; 0x93e <_ZN13EepromManager9send_HelpEv>
			}
			break;
		}

		lb_buff->id = (LBMessageID)MESSAGE_EMPTY;
    393e:	f6 01       	movw	r30, r12
    3940:	12 82       	std	Z+2, r1	; 0x02
    3942:	11 82       	std	Z+1, r1	; 0x01
		if(send_ack)
		{
			lb_send_NewPrompt();
    3944:	0e 94 a6 09 	call	0x134c	; 0x134c <_Z17lb_send_NewPromptv>
    3948:	78 ca       	rjmp	.-2832   	; 0x2e3a <_Z17handleLinkBusMsgsv+0x70>

				if(c)
				{
					if(c == 'B')
					{
						c = BEACON;
    394a:	80 e0       	ldi	r24, 0x00	; 0
    394c:	90 e0       	ldi	r25, 0x00	; 0
    394e:	56 cb       	rjmp	.-2388   	; 0x2ffc <_Z17handleLinkBusMsgsv+0x232>
					{
						char t = lb_buff->fields[FIELD2][0];

						if(t == 'S')
						{
							c = SPRINT_DEMO;
    3950:	83 e1       	ldi	r24, 0x13	; 19
    3952:	90 e0       	ldi	r25, 0x00	; 0
    3954:	53 cb       	rjmp	.-2394   	; 0x2ffc <_Z17handleLinkBusMsgsv+0x232>
							c = FOX_DEMO;
						}
					}
					else if(c == 'F')
					{
						c = FOXORING;
    3956:	87 e0       	ldi	r24, 0x07	; 7
    3958:	90 e0       	ldi	r25, 0x00	; 0
    395a:	50 cb       	rjmp	.-2400   	; 0x2ffc <_Z17handleLinkBusMsgsv+0x232>
					{
						char t = lb_buff->fields[FIELD2][0];

						if(t == '2')
						{
							c = NO_CODE_START_TONES_2M;
    395c:	84 e1       	ldi	r24, 0x14	; 20
    395e:	4e cb       	rjmp	.-2404   	; 0x2ffc <_Z17handleLinkBusMsgsv+0x232>
						}
						else if(t == '5')
						{
							c = NO_CODE_START_TONES_5M;
    3960:	85 e1       	ldi	r24, 0x15	; 21
    3962:	90 e0       	ldi	r25, 0x00	; 0
    3964:	4b cb       	rjmp	.-2410   	; 0x2ffc <_Z17handleLinkBusMsgsv+0x232>
					strncpy(g_tempStr, lb_buff->fields[FIELD1], MAX_UNLOCK_CODE_LENGTH);
					g_tempStr[MAX_UNLOCK_CODE_LENGTH] = '\0';   /* truncate to no more than max characters */

					if(only_digits(g_tempStr) && (strlen(g_tempStr) >= MIN_UNLOCK_CODE_LENGTH))
					{
						strcpy((char*)g_unlockCode, g_tempStr);
    3966:	b5 01       	movw	r22, r10
    3968:	c4 01       	movw	r24, r8
    396a:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <strcpy>
						ee_mgr.updateEEPROMVar(UnlockCode, (void*)g_unlockCode);
    396e:	a4 01       	movw	r20, r8
    3970:	6e e0       	ldi	r22, 0x0E	; 14
    3972:	85 eb       	ldi	r24, 0xB5	; 181
    3974:	95 e0       	ldi	r25, 0x05	; 5
    3976:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
    397a:	1e cd       	rjmp	.-1476   	; 0x33b8 <_Z17handleLinkBusMsgsv+0x5ee>
					}
				}

				if(doprint)
				{
					lb_send_string(g_tempStr, TRUE);
    397c:	61 e0       	ldi	r22, 0x01	; 1
    397e:	c5 01       	movw	r24, r10
    3980:	0e 94 c6 09 	call	0x138c	; 0x138c <_Z14lb_send_stringPch>
    3984:	dc cf       	rjmp	.-72     	; 0x393e <_Z17handleLinkBusMsgsv+0xb74>
		if(send_ack)
		{
			lb_send_NewPrompt();
		}
	}
}
    3986:	2c 96       	adiw	r28, 0x0c	; 12
    3988:	0f b6       	in	r0, 0x3f	; 63
    398a:	f8 94       	cli
    398c:	de bf       	out	0x3e, r29	; 62
    398e:	0f be       	out	0x3f, r0	; 63
    3990:	cd bf       	out	0x3d, r28	; 61
    3992:	df 91       	pop	r29
    3994:	cf 91       	pop	r28
    3996:	1f 91       	pop	r17
    3998:	0f 91       	pop	r16
    399a:	ff 90       	pop	r15
    399c:	ef 90       	pop	r14
    399e:	df 90       	pop	r13
    39a0:	cf 90       	pop	r12
    39a2:	bf 90       	pop	r11
    39a4:	af 90       	pop	r10
    39a6:	9f 90       	pop	r9
    39a8:	8f 90       	pop	r8
    39aa:	7f 90       	pop	r7
    39ac:	6f 90       	pop	r6
    39ae:	5f 90       	pop	r5
    39b0:	4f 90       	pop	r4
    39b2:	3f 90       	pop	r3
    39b4:	2f 90       	pop	r2
    39b6:	08 95       	ret

000039b8 <_Z10processKeyc>:
 *  *B nn # - Address the following command to only those foxes in the specified competition format (used in case more than one competition's foxes might be listening)
 *  *D c...c # - Unlock Arducon (re-enable DTMF commands) where c...c is the password
 *  *D# - Lock Arducon (disables all DTMF commands except *Dc...c#)
 */
	void processKey(char key)
	{
    39b8:	cf 92       	push	r12
    39ba:	df 92       	push	r13
    39bc:	ef 92       	push	r14
    39be:	ff 92       	push	r15
    39c0:	1f 93       	push	r17
    39c2:	cf 93       	push	r28
    39c4:	df 93       	push	r29
    39c6:	1f 92       	push	r1
    39c8:	cd b7       	in	r28, 0x3d	; 61
    39ca:	de b7       	in	r29, 0x3e	; 62
		static int value;
		static int stringLength;
		static char receivedString[MAX_PATTERN_TEXT_LENGTH + 1] = { '\0' };
		static BOOL setPasswordEnabled = FALSE;

		if(key == 'D')
    39cc:	84 34       	cpi	r24, 0x44	; 68
    39ce:	39 f4       	brne	.+14     	; 0x39de <_Z10processKeyc+0x26>
		{
			g_DTMF_unlocked = FALSE;
    39d0:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <g_DTMF_unlocked>
			state = STATE_SHUTDOWN;
    39d4:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    39d8:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
			return;
    39dc:	91 c3       	rjmp	.+1826   	; 0x4100 <_Z10processKeyc+0x748>
		}

		if(!g_DTMF_unlocked)
    39de:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <g_DTMF_unlocked>
    39e2:	91 11       	cpse	r25, r1
    39e4:	07 c0       	rjmp	.+14     	; 0x39f4 <_Z10processKeyc+0x3c>
		{
			state = STATE_CHECK_PASSWORD;
    39e6:	2f e0       	ldi	r18, 0x0F	; 15
    39e8:	30 e0       	ldi	r19, 0x00	; 0
    39ea:	30 93 09 01 	sts	0x0109, r19	; 0x800109 <_ZZ10processKeycE5state+0x1>
    39ee:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <_ZZ10processKeycE5state>
    39f2:	1b c3       	rjmp	.+1590   	; 0x402a <_Z10processKeyc+0x672>
    39f4:	18 2f       	mov	r17, r24
		}
		else
		{
			if(key == '*')
    39f6:	8a 32       	cpi	r24, 0x2A	; 42
    39f8:	b9 f4       	brne	.+46     	; 0x3a28 <_Z10processKeyc+0x70>
			{
				state = STATE_SENTENCE_START;
    39fa:	81 e0       	ldi	r24, 0x01	; 1
    39fc:	90 e0       	ldi	r25, 0x00	; 0
    39fe:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3a02:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
			}
			break;

			case STATE_SENTENCE_START:
			{
				stringLength = 0;
    3a06:	10 92 9a 04 	sts	0x049A, r1	; 0x80049a <_ZZ10processKeycE12stringLength+0x1>
    3a0a:	10 92 99 04 	sts	0x0499, r1	; 0x800499 <_ZZ10processKeycE12stringLength>
				value = 0;
    3a0e:	10 92 98 04 	sts	0x0498, r1	; 0x800498 <_ZZ10processKeycE5value+0x1>
    3a12:	10 92 97 04 	sts	0x0497, r1	; 0x800497 <_ZZ10processKeycE5value>
				digits = 0;
    3a16:	10 92 96 04 	sts	0x0496, r1	; 0x800496 <_ZZ10processKeycE6digits+0x1>
    3a1a:	10 92 95 04 	sts	0x0495, r1	; 0x800495 <_ZZ10processKeycE6digits>

				if(g_DTMF_unlocked)
    3a1e:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <g_DTMF_unlocked>
    3a22:	88 23       	and	r24, r24
    3a24:	c9 f1       	breq	.+114    	; 0x3a98 <_Z10processKeyc+0xe0>
    3a26:	6c c3       	rjmp	.+1752   	; 0x4100 <_Z10processKeyc+0x748>
			{
				state = STATE_SENTENCE_START;
			}
		}

		switch(state)
    3a28:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <_ZZ10processKeycE5state>
    3a2c:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3a30:	31 97       	sbiw	r30, 0x01	; 1
    3a32:	e0 31       	cpi	r30, 0x10	; 16
    3a34:	f1 05       	cpc	r31, r1
    3a36:	08 f0       	brcs	.+2      	; 0x3a3a <_Z10processKeyc+0x82>
    3a38:	63 c3       	rjmp	.+1734   	; 0x4100 <_Z10processKeyc+0x748>
    3a3a:	ea 56       	subi	r30, 0x6A	; 106
    3a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a3e:	0c 94 6b 2c 	jmp	0x58d6	; 0x58d6 <__tablejump2__>
			}
			break;

			case STATE_SENTENCE_START:
			{
				stringLength = 0;
    3a42:	10 92 9a 04 	sts	0x049A, r1	; 0x80049a <_ZZ10processKeycE12stringLength+0x1>
    3a46:	10 92 99 04 	sts	0x0499, r1	; 0x800499 <_ZZ10processKeycE12stringLength>
				value = 0;
    3a4a:	10 92 98 04 	sts	0x0498, r1	; 0x800498 <_ZZ10processKeycE5value+0x1>
    3a4e:	10 92 97 04 	sts	0x0497, r1	; 0x800497 <_ZZ10processKeycE5value>
				digits = 0;
    3a52:	10 92 96 04 	sts	0x0496, r1	; 0x800496 <_ZZ10processKeycE6digits+0x1>
    3a56:	10 92 95 04 	sts	0x0495, r1	; 0x800495 <_ZZ10processKeycE6digits>

				if(g_DTMF_unlocked)
    3a5a:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <g_DTMF_unlocked>
    3a5e:	88 23       	and	r24, r24
    3a60:	d9 f0       	breq	.+54     	; 0x3a98 <_Z10processKeyc+0xe0>
				{
					if(key == 'C')
    3a62:	13 34       	cpi	r17, 0x43	; 67
    3a64:	39 f4       	brne	.+14     	; 0x3a74 <_Z10processKeyc+0xbc>
					{
						state = STATE_C;
    3a66:	86 e0       	ldi	r24, 0x06	; 6
    3a68:	90 e0       	ldi	r25, 0x00	; 0
    3a6a:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3a6e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    3a72:	46 c3       	rjmp	.+1676   	; 0x4100 <_Z10processKeyc+0x748>
					}
					else if(key != '*')
    3a74:	1a 32       	cpi	r17, 0x2A	; 42
    3a76:	09 f4       	brne	.+2      	; 0x3a7a <_Z10processKeyc+0xc2>
    3a78:	43 c3       	rjmp	.+1670   	; 0x4100 <_Z10processKeyc+0x748>
					{
						value = key - '0';
    3a7a:	81 2f       	mov	r24, r17
    3a7c:	90 e0       	ldi	r25, 0x00	; 0
    3a7e:	c0 97       	sbiw	r24, 0x30	; 48
    3a80:	90 93 98 04 	sts	0x0498, r25	; 0x800498 <_ZZ10processKeycE5value+0x1>
    3a84:	80 93 97 04 	sts	0x0497, r24	; 0x800497 <_ZZ10processKeycE5value>
#if !INIT_EEPROM_ONLY
							setupPortsForF1975();
    3a88:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <_Z18setupPortsForF1975v>
#endif  /* !INIT_EEPROM_ONLY */
						state = STATE_TEST_ATTENUATOR;
    3a8c:	80 e1       	ldi	r24, 0x10	; 16
    3a8e:	90 e0       	ldi	r25, 0x00	; 0
    3a90:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3a94:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
					}
				}

				if(key == 'A')
    3a98:	11 34       	cpi	r17, 0x41	; 65
    3a9a:	09 f0       	breq	.+2      	; 0x3a9e <_Z10processKeyc+0xe6>
    3a9c:	31 c3       	rjmp	.+1634   	; 0x4100 <_Z10processKeyc+0x748>
				{
					state = STATE_A;
    3a9e:	82 e0       	ldi	r24, 0x02	; 2
    3aa0:	90 e0       	ldi	r25, 0x00	; 0
    3aa2:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3aa6:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    3aaa:	2a c3       	rjmp	.+1620   	; 0x4100 <_Z10processKeyc+0x748>
			}
			break;

			case STATE_A:
			{
				if(g_DTMF_unlocked)
    3aac:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <g_DTMF_unlocked>
    3ab0:	88 23       	and	r24, r24
    3ab2:	09 f4       	brne	.+2      	; 0x3ab6 <_Z10processKeyc+0xfe>
    3ab4:	25 c3       	rjmp	.+1610   	; 0x4100 <_Z10processKeyc+0x748>
				{
					if(key == '0')
    3ab6:	10 33       	cpi	r17, 0x30	; 48
    3ab8:	39 f4       	brne	.+14     	; 0x3ac8 <_Z10processKeyc+0x110>
					{
						state = STATE_PAUSE_TRANSMISSIONS;
    3aba:	83 e0       	ldi	r24, 0x03	; 3
    3abc:	90 e0       	ldi	r25, 0x00	; 0
    3abe:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3ac2:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    3ac6:	1c c3       	rjmp	.+1592   	; 0x4100 <_Z10processKeyc+0x748>
					}
					else if(key == '1')
    3ac8:	11 33       	cpi	r17, 0x31	; 49
    3aca:	39 f4       	brne	.+14     	; 0x3ada <_Z10processKeyc+0x122>
					{
						state = STATE_START_TRANSMISSIONS;
    3acc:	84 e0       	ldi	r24, 0x04	; 4
    3ace:	90 e0       	ldi	r25, 0x00	; 0
    3ad0:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3ad4:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    3ad8:	13 c3       	rjmp	.+1574   	; 0x4100 <_Z10processKeyc+0x748>
					}
					else if(key == '2')
    3ada:	12 33       	cpi	r17, 0x32	; 50
    3adc:	39 f4       	brne	.+14     	; 0x3aec <_Z10processKeyc+0x134>
					{
						state = STATE_START_TRANSMISSIONS_WITH_RTC;
    3ade:	85 e0       	ldi	r24, 0x05	; 5
    3ae0:	90 e0       	ldi	r25, 0x00	; 0
    3ae2:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3ae6:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    3aea:	0a c3       	rjmp	.+1556   	; 0x4100 <_Z10processKeyc+0x748>
					}
					else if((key == '8') && setPasswordEnabled)
    3aec:	18 33       	cpi	r17, 0x38	; 56
    3aee:	09 f0       	breq	.+2      	; 0x3af2 <_Z10processKeyc+0x13a>
    3af0:	07 c3       	rjmp	.+1550   	; 0x4100 <_Z10processKeyc+0x748>
    3af2:	80 91 94 04 	lds	r24, 0x0494	; 0x800494 <_ZZ10processKeycE18setPasswordEnabled>
    3af6:	88 23       	and	r24, r24
    3af8:	09 f4       	brne	.+2      	; 0x3afc <_Z10processKeyc+0x144>
    3afa:	02 c3       	rjmp	.+1540   	; 0x4100 <_Z10processKeyc+0x748>
					{
						state = STATE_SET_PASSWORD;
    3afc:	8e e0       	ldi	r24, 0x0E	; 14
    3afe:	90 e0       	ldi	r25, 0x00	; 0
    3b00:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3b04:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    3b08:	fb c2       	rjmp	.+1526   	; 0x4100 <_Z10processKeyc+0x748>
			}
			break;

			case STATE_PAUSE_TRANSMISSIONS:
			{
				if(key == '#')
    3b0a:	83 32       	cpi	r24, 0x23	; 35
    3b0c:	09 f0       	breq	.+2      	; 0x3b10 <_Z10processKeyc+0x158>
    3b0e:	f8 c2       	rjmp	.+1520   	; 0x4100 <_Z10processKeyc+0x748>
				{
					stopEventNow();
    3b10:	0e 94 23 13 	call	0x2646	; 0x2646 <_Z12stopEventNowv>
					state = STATE_SHUTDOWN;
    3b14:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3b18:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    3b1c:	f1 c2       	rjmp	.+1506   	; 0x4100 <_Z10processKeyc+0x748>
			}
			break;

			case STATE_START_TRANSMISSIONS:
			{
				if(key == '#')
    3b1e:	83 32       	cpi	r24, 0x23	; 35
    3b20:	09 f0       	breq	.+2      	; 0x3b24 <_Z10processKeyc+0x16c>
    3b22:	ee c2       	rjmp	.+1500   	; 0x4100 <_Z10processKeyc+0x748>
				{
					startEventNow();
    3b24:	0e 94 13 13 	call	0x2626	; 0x2626 <_Z13startEventNowv>
					state = STATE_SHUTDOWN;
    3b28:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3b2c:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    3b30:	e7 c2       	rjmp	.+1486   	; 0x4100 <_Z10processKeyc+0x748>
			}
			break;

			case STATE_START_TRANSMISSIONS_WITH_RTC:
			{
				if(key == '#')
    3b32:	83 32       	cpi	r24, 0x23	; 35
    3b34:	09 f0       	breq	.+2      	; 0x3b38 <_Z10processKeyc+0x180>
    3b36:	e4 c2       	rjmp	.+1480   	; 0x4100 <_Z10processKeyc+0x748>
				{
					startEventUsingRTC();
    3b38:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <_Z18startEventUsingRTCv>
					state = STATE_SHUTDOWN;
    3b3c:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3b40:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    3b44:	dd c2       	rjmp	.+1466   	; 0x4100 <_Z10processKeyc+0x748>
			}
			break;

			case STATE_C:
			{
				if(key == '1')
    3b46:	81 33       	cpi	r24, 0x31	; 49
    3b48:	39 f4       	brne	.+14     	; 0x3b58 <_Z10processKeyc+0x1a0>
				{
					state = STATE_RECEIVING_CALLSIGN;
    3b4a:	87 e0       	ldi	r24, 0x07	; 7
    3b4c:	90 e0       	ldi	r25, 0x00	; 0
    3b4e:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3b52:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    3b56:	d4 c2       	rjmp	.+1448   	; 0x4100 <_Z10processKeyc+0x748>
				}
				else if(key == '2')
    3b58:	82 33       	cpi	r24, 0x32	; 50
    3b5a:	39 f4       	brne	.+14     	; 0x3b6a <_Z10processKeyc+0x1b2>
				{
					state = STATE_RECEIVING_FOXFORMATANDID;
    3b5c:	88 e0       	ldi	r24, 0x08	; 8
    3b5e:	90 e0       	ldi	r25, 0x00	; 0
    3b60:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3b64:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    3b68:	cb c2       	rjmp	.+1430   	; 0x4100 <_Z10processKeyc+0x748>
				}
				else if(key == '3') /* *C7YYMMDDhhmmss# Set RTC to this time and date */
    3b6a:	83 33       	cpi	r24, 0x33	; 51
    3b6c:	39 f4       	brne	.+14     	; 0x3b7c <_Z10processKeyc+0x1c4>
				{
					state = STATE_RECEIVING_SET_CLOCK;
    3b6e:	8c e0       	ldi	r24, 0x0C	; 12
    3b70:	90 e0       	ldi	r25, 0x00	; 0
    3b72:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3b76:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    3b7a:	c2 c2       	rjmp	.+1412   	; 0x4100 <_Z10processKeyc+0x748>
				}
				else if(key == '4')
    3b7c:	84 33       	cpi	r24, 0x34	; 52
    3b7e:	39 f4       	brne	.+14     	; 0x3b8e <_Z10processKeyc+0x1d6>
				{
					state = STATE_RECEIVING_START_TIME;
    3b80:	89 e0       	ldi	r24, 0x09	; 9
    3b82:	90 e0       	ldi	r25, 0x00	; 0
    3b84:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3b88:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    3b8c:	b9 c2       	rjmp	.+1394   	; 0x4100 <_Z10processKeyc+0x748>
				}
				else if(key == '5')
    3b8e:	85 33       	cpi	r24, 0x35	; 53
    3b90:	39 f4       	brne	.+14     	; 0x3ba0 <_Z10processKeyc+0x1e8>
				{
					state = STATE_RECEIVING_FINISH_TIME;
    3b92:	8a e0       	ldi	r24, 0x0A	; 10
    3b94:	90 e0       	ldi	r25, 0x00	; 0
    3b96:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3b9a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    3b9e:	b0 c2       	rjmp	.+1376   	; 0x4100 <_Z10processKeyc+0x748>
				}
				else if(key == '6')
    3ba0:	86 33       	cpi	r24, 0x36	; 54
    3ba2:	69 f4       	brne	.+26     	; 0x3bbe <_Z10processKeyc+0x206>
				{
					state = STATE_RECEIVING_UTC_OFFSET;
    3ba4:	8b e0       	ldi	r24, 0x0B	; 11
    3ba6:	90 e0       	ldi	r25, 0x00	; 0
    3ba8:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3bac:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
					digits = 1;
    3bb0:	81 e0       	ldi	r24, 0x01	; 1
    3bb2:	90 e0       	ldi	r25, 0x00	; 0
    3bb4:	90 93 96 04 	sts	0x0496, r25	; 0x800496 <_ZZ10processKeycE6digits+0x1>
    3bb8:	80 93 95 04 	sts	0x0495, r24	; 0x800495 <_ZZ10processKeycE6digits>
    3bbc:	a1 c2       	rjmp	.+1346   	; 0x4100 <_Z10processKeyc+0x748>
				}
				else if(key == '9')
    3bbe:	89 33       	cpi	r24, 0x39	; 57
    3bc0:	39 f4       	brne	.+14     	; 0x3bd0 <_Z10processKeyc+0x218>
				{
					state = STATE_SET_AM_TONE_FREQUENCY;
    3bc2:	8d e0       	ldi	r24, 0x0D	; 13
    3bc4:	90 e0       	ldi	r25, 0x00	; 0
    3bc6:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3bca:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10processKeycE5state>
    3bce:	98 c2       	rjmp	.+1328   	; 0x4100 <_Z10processKeyc+0x748>
				}
				else
				{
					state = STATE_SHUTDOWN;
    3bd0:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3bd4:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    3bd8:	93 c2       	rjmp	.+1318   	; 0x4100 <_Z10processKeyc+0x748>
			}
			break;

			case STATE_SET_PASSWORD:
			{
				if(key == '#')
    3bda:	83 32       	cpi	r24, 0x23	; 35
    3bdc:	c1 f4       	brne	.+48     	; 0x3c0e <_Z10processKeyc+0x256>
				{
					if(stringLength >= MIN_UNLOCK_CODE_LENGTH)
    3bde:	80 91 99 04 	lds	r24, 0x0499	; 0x800499 <_ZZ10processKeycE12stringLength>
    3be2:	90 91 9a 04 	lds	r25, 0x049A	; 0x80049a <_ZZ10processKeycE12stringLength+0x1>
    3be6:	04 97       	sbiw	r24, 0x04	; 4
    3be8:	6c f0       	brlt	.+26     	; 0x3c04 <_Z10processKeyc+0x24c>
					{
						strcpy((char*)g_unlockCode, receivedString);
    3bea:	6f e7       	ldi	r22, 0x7F	; 127
    3bec:	74 e0       	ldi	r23, 0x04	; 4
    3bee:	80 e6       	ldi	r24, 0x60	; 96
    3bf0:	95 e0       	ldi	r25, 0x05	; 5
    3bf2:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <strcpy>
						ee_mgr.updateEEPROMVar(UnlockCode, (void*)g_unlockCode);
    3bf6:	40 e6       	ldi	r20, 0x60	; 96
    3bf8:	55 e0       	ldi	r21, 0x05	; 5
    3bfa:	6e e0       	ldi	r22, 0x0E	; 14
    3bfc:	85 eb       	ldi	r24, 0xB5	; 181
    3bfe:	95 e0       	ldi	r25, 0x05	; 5
    3c00:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
					}

					state = STATE_SHUTDOWN;
    3c04:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3c08:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    3c0c:	79 c2       	rjmp	.+1266   	; 0x4100 <_Z10processKeyc+0x748>
				}
				else if((key >= '0') && (key <= '9'))
    3c0e:	80 ed       	ldi	r24, 0xD0	; 208
    3c10:	81 0f       	add	r24, r17
    3c12:	8a 30       	cpi	r24, 0x0A	; 10
    3c14:	08 f0       	brcs	.+2      	; 0x3c18 <_Z10processKeyc+0x260>
    3c16:	74 c2       	rjmp	.+1256   	; 0x4100 <_Z10processKeyc+0x748>
				{
					if(stringLength <= MAX_UNLOCK_CODE_LENGTH)
    3c18:	80 91 99 04 	lds	r24, 0x0499	; 0x800499 <_ZZ10processKeycE12stringLength>
    3c1c:	90 91 9a 04 	lds	r25, 0x049A	; 0x80049a <_ZZ10processKeycE12stringLength+0x1>
    3c20:	89 30       	cpi	r24, 0x09	; 9
    3c22:	91 05       	cpc	r25, r1
    3c24:	0c f0       	brlt	.+2      	; 0x3c28 <_Z10processKeyc+0x270>
    3c26:	6c c2       	rjmp	.+1240   	; 0x4100 <_Z10processKeyc+0x748>
					{
						receivedString[stringLength++] = key;
    3c28:	9c 01       	movw	r18, r24
    3c2a:	2f 5f       	subi	r18, 0xFF	; 255
    3c2c:	3f 4f       	sbci	r19, 0xFF	; 255
    3c2e:	30 93 9a 04 	sts	0x049A, r19	; 0x80049a <_ZZ10processKeycE12stringLength+0x1>
    3c32:	20 93 99 04 	sts	0x0499, r18	; 0x800499 <_ZZ10processKeycE12stringLength>
    3c36:	fc 01       	movw	r30, r24
    3c38:	e1 58       	subi	r30, 0x81	; 129
    3c3a:	fb 4f       	sbci	r31, 0xFB	; 251
    3c3c:	10 83       	st	Z, r17
						receivedString[stringLength] = '\0';
    3c3e:	f9 01       	movw	r30, r18
    3c40:	e1 58       	subi	r30, 0x81	; 129
    3c42:	fb 4f       	sbci	r31, 0xFB	; 251
    3c44:	10 82       	st	Z, r1
    3c46:	5c c2       	rjmp	.+1208   	; 0x4100 <_Z10processKeyc+0x748>
			}
			break;

			case STATE_RECEIVING_CALLSIGN:
			{
				if(key == '#')
    3c48:	83 32       	cpi	r24, 0x23	; 35
    3c4a:	e1 f4       	brne	.+56     	; 0x3c84 <_Z10processKeyc+0x2cc>
				{
					if(strlen(receivedString) <= MAX_PATTERN_TEXT_LENGTH)
    3c4c:	ef e7       	ldi	r30, 0x7F	; 127
    3c4e:	f4 e0       	ldi	r31, 0x04	; 4
    3c50:	01 90       	ld	r0, Z+
    3c52:	00 20       	and	r0, r0
    3c54:	e9 f7       	brne	.-6      	; 0x3c50 <_Z10processKeyc+0x298>
    3c56:	31 97       	sbiw	r30, 0x01	; 1
    3c58:	ef 57       	subi	r30, 0x7F	; 127
    3c5a:	f4 40       	sbci	r31, 0x04	; 4
    3c5c:	75 97       	sbiw	r30, 0x15	; 21
    3c5e:	68 f4       	brcc	.+26     	; 0x3c7a <_Z10processKeyc+0x2c2>
					{
						strcpy(g_messages_text[STATION_ID], receivedString);
    3c60:	6f e7       	ldi	r22, 0x7F	; 127
    3c62:	74 e0       	ldi	r23, 0x04	; 4
    3c64:	88 e4       	ldi	r24, 0x48	; 72
    3c66:	95 e0       	ldi	r25, 0x05	; 5
    3c68:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <strcpy>
						ee_mgr.updateEEPROMVar(StationID_text, (void*)g_messages_text[STATION_ID]);
    3c6c:	48 e4       	ldi	r20, 0x48	; 72
    3c6e:	55 e0       	ldi	r21, 0x05	; 5
    3c70:	6b e0       	ldi	r22, 0x0B	; 11
    3c72:	85 eb       	ldi	r24, 0xB5	; 181
    3c74:	95 e0       	ldi	r25, 0x05	; 5
    3c76:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
					}

					state = STATE_SHUTDOWN;
    3c7a:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3c7e:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    3c82:	3e c2       	rjmp	.+1148   	; 0x4100 <_Z10processKeyc+0x748>
				}
				else if((key >= '0') && (key <= '9'))
    3c84:	80 ed       	ldi	r24, 0xD0	; 208
    3c86:	81 0f       	add	r24, r17
    3c88:	8a 30       	cpi	r24, 0x0A	; 10
    3c8a:	08 f0       	brcs	.+2      	; 0x3c8e <_Z10processKeyc+0x2d6>
    3c8c:	39 c2       	rjmp	.+1138   	; 0x4100 <_Z10processKeyc+0x748>
				{
					if(digits)
    3c8e:	80 91 95 04 	lds	r24, 0x0495	; 0x800495 <_ZZ10processKeycE6digits>
    3c92:	90 91 96 04 	lds	r25, 0x0496	; 0x800496 <_ZZ10processKeycE6digits+0x1>
    3c96:	89 2b       	or	r24, r25
    3c98:	c9 f1       	breq	.+114    	; 0x3d0c <_Z10processKeyc+0x354>
					{
						value = value * 10 + (key - '0');
    3c9a:	80 91 97 04 	lds	r24, 0x0497	; 0x800497 <_ZZ10processKeycE5value>
    3c9e:	90 91 98 04 	lds	r25, 0x0498	; 0x800498 <_ZZ10processKeycE5value+0x1>
    3ca2:	9c 01       	movw	r18, r24
    3ca4:	22 0f       	add	r18, r18
    3ca6:	33 1f       	adc	r19, r19
    3ca8:	88 0f       	add	r24, r24
    3caa:	99 1f       	adc	r25, r25
    3cac:	88 0f       	add	r24, r24
    3cae:	99 1f       	adc	r25, r25
    3cb0:	88 0f       	add	r24, r24
    3cb2:	99 1f       	adc	r25, r25
    3cb4:	82 0f       	add	r24, r18
    3cb6:	93 1f       	adc	r25, r19
    3cb8:	21 2f       	mov	r18, r17
    3cba:	30 e0       	ldi	r19, 0x00	; 0
    3cbc:	20 53       	subi	r18, 0x30	; 48
    3cbe:	31 09       	sbc	r19, r1
    3cc0:	28 0f       	add	r18, r24
    3cc2:	39 1f       	adc	r19, r25
    3cc4:	30 93 98 04 	sts	0x0498, r19	; 0x800498 <_ZZ10processKeycE5value+0x1>
    3cc8:	20 93 97 04 	sts	0x0497, r18	; 0x800497 <_ZZ10processKeycE5value>
						if((value < numMorseChars) && (stringLength < MAX_PATTERN_TEXT_LENGTH))
    3ccc:	27 32       	cpi	r18, 0x27	; 39
    3cce:	31 05       	cpc	r19, r1
    3cd0:	c4 f4       	brge	.+48     	; 0x3d02 <_Z10processKeyc+0x34a>
    3cd2:	80 91 99 04 	lds	r24, 0x0499	; 0x800499 <_ZZ10processKeycE12stringLength>
    3cd6:	90 91 9a 04 	lds	r25, 0x049A	; 0x80049a <_ZZ10processKeycE12stringLength+0x1>
    3cda:	84 31       	cpi	r24, 0x14	; 20
    3cdc:	91 05       	cpc	r25, r1
    3cde:	8c f4       	brge	.+34     	; 0x3d02 <_Z10processKeyc+0x34a>
						{
							receivedString[stringLength] = keyMorse[value];
    3ce0:	fc 01       	movw	r30, r24
    3ce2:	e1 58       	subi	r30, 0x81	; 129
    3ce4:	fb 4f       	sbci	r31, 0xFB	; 251
    3ce6:	d9 01       	movw	r26, r18
    3ce8:	ac 5a       	subi	r26, 0xAC	; 172
    3cea:	bd 4f       	sbci	r27, 0xFD	; 253
    3cec:	2c 91       	ld	r18, X
    3cee:	20 83       	st	Z, r18
							stringLength++;
    3cf0:	01 96       	adiw	r24, 0x01	; 1
    3cf2:	90 93 9a 04 	sts	0x049A, r25	; 0x80049a <_ZZ10processKeycE12stringLength+0x1>
    3cf6:	80 93 99 04 	sts	0x0499, r24	; 0x800499 <_ZZ10processKeycE12stringLength>
							receivedString[stringLength] = '\0';
    3cfa:	fc 01       	movw	r30, r24
    3cfc:	e1 58       	subi	r30, 0x81	; 129
    3cfe:	fb 4f       	sbci	r31, 0xFB	; 251
    3d00:	10 82       	st	Z, r1
						}

						digits = 0;
    3d02:	10 92 96 04 	sts	0x0496, r1	; 0x800496 <_ZZ10processKeycE6digits+0x1>
    3d06:	10 92 95 04 	sts	0x0495, r1	; 0x800495 <_ZZ10processKeycE6digits>
    3d0a:	fa c1       	rjmp	.+1012   	; 0x4100 <_Z10processKeyc+0x748>
					}
					else
					{
						value = key - '0';
    3d0c:	21 2f       	mov	r18, r17
    3d0e:	30 e0       	ldi	r19, 0x00	; 0
    3d10:	20 53       	subi	r18, 0x30	; 48
    3d12:	31 09       	sbc	r19, r1
    3d14:	30 93 98 04 	sts	0x0498, r19	; 0x800498 <_ZZ10processKeycE5value+0x1>
    3d18:	20 93 97 04 	sts	0x0497, r18	; 0x800497 <_ZZ10processKeycE5value>
						digits = 1;
    3d1c:	81 e0       	ldi	r24, 0x01	; 1
    3d1e:	90 e0       	ldi	r25, 0x00	; 0
    3d20:	90 93 96 04 	sts	0x0496, r25	; 0x800496 <_ZZ10processKeycE6digits+0x1>
    3d24:	80 93 95 04 	sts	0x0495, r24	; 0x800495 <_ZZ10processKeycE6digits>
    3d28:	eb c1       	rjmp	.+982    	; 0x4100 <_Z10processKeyc+0x748>
			}
			break;

			case STATE_RECEIVING_FOXFORMATANDID:
			{
				if(key == '#')
    3d2a:	83 32       	cpi	r24, 0x23	; 35
    3d2c:	f1 f4       	brne	.+60     	; 0x3d6a <_Z10processKeyc+0x3b2>
				{
					if((value >= BEACON) && (value < INVALID_FOX))
    3d2e:	80 91 97 04 	lds	r24, 0x0497	; 0x800497 <_ZZ10processKeycE5value>
    3d32:	90 91 98 04 	lds	r25, 0x0498	; 0x800498 <_ZZ10processKeycE5value+0x1>
    3d36:	86 31       	cpi	r24, 0x16	; 22
    3d38:	91 05       	cpc	r25, r1
    3d3a:	90 f4       	brcc	.+36     	; 0x3d60 <_Z10processKeyc+0x3a8>
					{
						Fox_t holdFox = (Fox_t)value;
    3d3c:	89 83       	std	Y+1, r24	; 0x01
						ee_mgr.updateEEPROMVar(Fox_setting, (void*)&holdFox);
    3d3e:	ae 01       	movw	r20, r28
    3d40:	4f 5f       	subi	r20, 0xFF	; 255
    3d42:	5f 4f       	sbci	r21, 0xFF	; 255
    3d44:	60 e1       	ldi	r22, 0x10	; 16
    3d46:	85 eb       	ldi	r24, 0xB5	; 181
    3d48:	95 e0       	ldi	r25, 0x05	; 5
    3d4a:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						if(holdFox != g_fox)
    3d4e:	80 91 b0 05 	lds	r24, 0x05B0	; 0x8005b0 <g_fox>
    3d52:	99 81       	ldd	r25, Y+1	; 0x01
    3d54:	98 17       	cp	r25, r24
    3d56:	21 f0       	breq	.+8      	; 0x3d60 <_Z10processKeyc+0x3a8>
						{
							setupForFox(&holdFox);
    3d58:	ce 01       	movw	r24, r28
    3d5a:	01 96       	adiw	r24, 0x01	; 1
    3d5c:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <_Z11setupForFoxP5Fox_t>
						}
					}
					state = STATE_SHUTDOWN;
    3d60:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3d64:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    3d68:	cb c1       	rjmp	.+918    	; 0x4100 <_Z10processKeyc+0x748>
				}
				else if((key >= '0') && (key <= '9'))
    3d6a:	80 ed       	ldi	r24, 0xD0	; 208
    3d6c:	81 0f       	add	r24, r17
    3d6e:	8a 30       	cpi	r24, 0x0A	; 10
    3d70:	08 f0       	brcs	.+2      	; 0x3d74 <_Z10processKeyc+0x3bc>
    3d72:	c6 c1       	rjmp	.+908    	; 0x4100 <_Z10processKeyc+0x748>
				{
					value *= 10;
					value += key - '0';
    3d74:	80 91 97 04 	lds	r24, 0x0497	; 0x800497 <_ZZ10processKeycE5value>
    3d78:	90 91 98 04 	lds	r25, 0x0498	; 0x800498 <_ZZ10processKeycE5value+0x1>
    3d7c:	9c 01       	movw	r18, r24
    3d7e:	22 0f       	add	r18, r18
    3d80:	33 1f       	adc	r19, r19
    3d82:	88 0f       	add	r24, r24
    3d84:	99 1f       	adc	r25, r25
    3d86:	88 0f       	add	r24, r24
    3d88:	99 1f       	adc	r25, r25
    3d8a:	88 0f       	add	r24, r24
    3d8c:	99 1f       	adc	r25, r25
    3d8e:	82 0f       	add	r24, r18
    3d90:	93 1f       	adc	r25, r19
    3d92:	21 2f       	mov	r18, r17
    3d94:	30 e0       	ldi	r19, 0x00	; 0
    3d96:	20 53       	subi	r18, 0x30	; 48
    3d98:	31 09       	sbc	r19, r1
    3d9a:	82 0f       	add	r24, r18
    3d9c:	93 1f       	adc	r25, r19
    3d9e:	90 93 98 04 	sts	0x0498, r25	; 0x800498 <_ZZ10processKeycE5value+0x1>
    3da2:	80 93 97 04 	sts	0x0497, r24	; 0x800497 <_ZZ10processKeycE5value>
    3da6:	ac c1       	rjmp	.+856    	; 0x4100 <_Z10processKeyc+0x748>
			}
			break;

			case STATE_RECEIVING_SET_CLOCK:
			{
				if(key == '#')
    3da8:	83 32       	cpi	r24, 0x23	; 35
    3daa:	f9 f4       	brne	.+62     	; 0x3dea <_Z10processKeyc+0x432>
				{
					time_t t = validateTimeString(receivedString, (time_t*)&g_current_epoch, -g_utc_offset);
    3dac:	40 91 9e 05 	lds	r20, 0x059E	; 0x80059e <g_utc_offset>
    3db0:	41 95       	neg	r20
    3db2:	67 ea       	ldi	r22, 0xA7	; 167
    3db4:	75 e0       	ldi	r23, 0x05	; 5
    3db6:	8f e7       	ldi	r24, 0x7F	; 127
    3db8:	94 e0       	ldi	r25, 0x04	; 4
    3dba:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <_Z18validateTimeStringPcPma>
    3dbe:	6b 01       	movw	r12, r22
    3dc0:	7c 01       	movw	r14, r24

					if(t)
    3dc2:	61 15       	cp	r22, r1
    3dc4:	71 05       	cpc	r23, r1
    3dc6:	81 05       	cpc	r24, r1
    3dc8:	91 05       	cpc	r25, r1
    3dca:	51 f0       	breq	.+20     	; 0x3de0 <_Z10processKeyc+0x428>
					{
						rv3028_set_epoch(t);
    3dcc:	0e 94 0f 27 	call	0x4e1e	; 0x4e1e <_Z16rv3028_set_epochm>
						g_current_epoch = t;
    3dd0:	c0 92 a7 05 	sts	0x05A7, r12	; 0x8005a7 <g_current_epoch>
    3dd4:	d0 92 a8 05 	sts	0x05A8, r13	; 0x8005a8 <g_current_epoch+0x1>
    3dd8:	e0 92 a9 05 	sts	0x05A9, r14	; 0x8005a9 <g_current_epoch+0x2>
    3ddc:	f0 92 aa 05 	sts	0x05AA, r15	; 0x8005aa <g_current_epoch+0x3>
					}

					state = STATE_SHUTDOWN;
    3de0:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3de4:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    3de8:	8b c1       	rjmp	.+790    	; 0x4100 <_Z10processKeyc+0x748>
				}
				else if((key >= '0') && (key <= '9'))
    3dea:	80 ed       	ldi	r24, 0xD0	; 208
    3dec:	81 0f       	add	r24, r17
    3dee:	8a 30       	cpi	r24, 0x0A	; 10
    3df0:	08 f0       	brcs	.+2      	; 0x3df4 <_Z10processKeyc+0x43c>
    3df2:	86 c1       	rjmp	.+780    	; 0x4100 <_Z10processKeyc+0x748>
				{
					if(stringLength < MAX_DTMF_ARG_LENGTH)
    3df4:	80 91 99 04 	lds	r24, 0x0499	; 0x800499 <_ZZ10processKeycE12stringLength>
    3df8:	90 91 9a 04 	lds	r25, 0x049A	; 0x80049a <_ZZ10processKeycE12stringLength+0x1>
    3dfc:	88 32       	cpi	r24, 0x28	; 40
    3dfe:	91 05       	cpc	r25, r1
    3e00:	0c f0       	brlt	.+2      	; 0x3e04 <_Z10processKeyc+0x44c>
    3e02:	7e c1       	rjmp	.+764    	; 0x4100 <_Z10processKeyc+0x748>
					{
						receivedString[stringLength] = key;
    3e04:	fc 01       	movw	r30, r24
    3e06:	e1 58       	subi	r30, 0x81	; 129
    3e08:	fb 4f       	sbci	r31, 0xFB	; 251
    3e0a:	10 83       	st	Z, r17
						stringLength++;
    3e0c:	01 96       	adiw	r24, 0x01	; 1
    3e0e:	90 93 9a 04 	sts	0x049A, r25	; 0x80049a <_ZZ10processKeycE12stringLength+0x1>
    3e12:	80 93 99 04 	sts	0x0499, r24	; 0x800499 <_ZZ10processKeycE12stringLength>
						receivedString[stringLength] = '\0';
    3e16:	fc 01       	movw	r30, r24
    3e18:	e1 58       	subi	r30, 0x81	; 129
    3e1a:	fb 4f       	sbci	r31, 0xFB	; 251
    3e1c:	10 82       	st	Z, r1
    3e1e:	70 c1       	rjmp	.+736    	; 0x4100 <_Z10processKeyc+0x748>
			}
			break;

			case STATE_RECEIVING_START_TIME:
			{
				if(key == '#')
    3e20:	83 32       	cpi	r24, 0x23	; 35
    3e22:	81 f5       	brne	.+96     	; 0x3e84 <_Z10processKeyc+0x4cc>
				{
					time_t s = validateTimeString(receivedString, (time_t*)&g_event_start_epoch, -g_utc_offset);
    3e24:	40 91 9e 05 	lds	r20, 0x059E	; 0x80059e <g_utc_offset>
    3e28:	41 95       	neg	r20
    3e2a:	63 ea       	ldi	r22, 0xA3	; 163
    3e2c:	75 e0       	ldi	r23, 0x05	; 5
    3e2e:	8f e7       	ldi	r24, 0x7F	; 127
    3e30:	94 e0       	ldi	r25, 0x04	; 4
    3e32:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <_Z18validateTimeStringPcPma>

					if(s)
    3e36:	61 15       	cp	r22, r1
    3e38:	71 05       	cpc	r23, r1
    3e3a:	81 05       	cpc	r24, r1
    3e3c:	91 05       	cpc	r25, r1
    3e3e:	e9 f0       	breq	.+58     	; 0x3e7a <_Z10processKeyc+0x4c2>
					{
						g_event_start_epoch = s;
    3e40:	60 93 a3 05 	sts	0x05A3, r22	; 0x8005a3 <g_event_start_epoch>
    3e44:	70 93 a4 05 	sts	0x05A4, r23	; 0x8005a4 <g_event_start_epoch+0x1>
    3e48:	80 93 a5 05 	sts	0x05A5, r24	; 0x8005a5 <g_event_start_epoch+0x2>
    3e4c:	90 93 a6 05 	sts	0x05A6, r25	; 0x8005a6 <g_event_start_epoch+0x3>
						ee_mgr.updateEEPROMVar(Event_start_epoch, (void*)&g_event_start_epoch);
    3e50:	43 ea       	ldi	r20, 0xA3	; 163
    3e52:	55 e0       	ldi	r21, 0x05	; 5
    3e54:	67 e1       	ldi	r22, 0x17	; 23
    3e56:	85 eb       	ldi	r24, 0xB5	; 181
    3e58:	95 e0       	ldi	r25, 0x05	; 5
    3e5a:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						/*						reportTimeTill(g_event_start_epoch, g_event_finish_epoch, "Lasts: ", NULL);
						 *						sprintf(g_tempStr, "Start:%lu\n", g_event_start_epoch); */
						g_use_rtc_to_start = !clockConfigurationError() && g_transmissions_disabled;
    3e5e:	0e 94 b6 0c 	call	0x196c	; 0x196c <_Z23clockConfigurationErrorv>
    3e62:	81 11       	cpse	r24, r1
    3e64:	07 c0       	rjmp	.+14     	; 0x3e74 <_Z10processKeyc+0x4bc>
    3e66:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <g_transmissions_disabled>
    3e6a:	81 e0       	ldi	r24, 0x01	; 1
    3e6c:	91 11       	cpse	r25, r1
    3e6e:	03 c0       	rjmp	.+6      	; 0x3e76 <_Z10processKeyc+0x4be>
    3e70:	80 e0       	ldi	r24, 0x00	; 0
    3e72:	01 c0       	rjmp	.+2      	; 0x3e76 <_Z10processKeyc+0x4be>
    3e74:	80 e0       	ldi	r24, 0x00	; 0
    3e76:	80 93 5d 05 	sts	0x055D, r24	; 0x80055d <g_use_rtc_to_start>
					}

					state = STATE_SHUTDOWN;
    3e7a:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3e7e:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    3e82:	3e c1       	rjmp	.+636    	; 0x4100 <_Z10processKeyc+0x748>
				}
				else if((key >= '0') && (key <= '9'))
    3e84:	80 ed       	ldi	r24, 0xD0	; 208
    3e86:	81 0f       	add	r24, r17
    3e88:	8a 30       	cpi	r24, 0x0A	; 10
    3e8a:	08 f0       	brcs	.+2      	; 0x3e8e <_Z10processKeyc+0x4d6>
    3e8c:	39 c1       	rjmp	.+626    	; 0x4100 <_Z10processKeyc+0x748>
				{
					if(stringLength < MAX_DTMF_ARG_LENGTH)
    3e8e:	80 91 99 04 	lds	r24, 0x0499	; 0x800499 <_ZZ10processKeycE12stringLength>
    3e92:	90 91 9a 04 	lds	r25, 0x049A	; 0x80049a <_ZZ10processKeycE12stringLength+0x1>
    3e96:	88 32       	cpi	r24, 0x28	; 40
    3e98:	91 05       	cpc	r25, r1
    3e9a:	0c f0       	brlt	.+2      	; 0x3e9e <_Z10processKeyc+0x4e6>
    3e9c:	31 c1       	rjmp	.+610    	; 0x4100 <_Z10processKeyc+0x748>
					{
						receivedString[stringLength] = key;
    3e9e:	fc 01       	movw	r30, r24
    3ea0:	e1 58       	subi	r30, 0x81	; 129
    3ea2:	fb 4f       	sbci	r31, 0xFB	; 251
    3ea4:	10 83       	st	Z, r17
						stringLength++;
    3ea6:	01 96       	adiw	r24, 0x01	; 1
    3ea8:	90 93 9a 04 	sts	0x049A, r25	; 0x80049a <_ZZ10processKeycE12stringLength+0x1>
    3eac:	80 93 99 04 	sts	0x0499, r24	; 0x800499 <_ZZ10processKeycE12stringLength>
						receivedString[stringLength] = '\0';
    3eb0:	fc 01       	movw	r30, r24
    3eb2:	e1 58       	subi	r30, 0x81	; 129
    3eb4:	fb 4f       	sbci	r31, 0xFB	; 251
    3eb6:	10 82       	st	Z, r1
    3eb8:	23 c1       	rjmp	.+582    	; 0x4100 <_Z10processKeyc+0x748>
			}
			break;

			case STATE_RECEIVING_FINISH_TIME:
			{
				if(key == '#')
    3eba:	83 32       	cpi	r24, 0x23	; 35
    3ebc:	81 f5       	brne	.+96     	; 0x3f1e <_Z10processKeyc+0x566>
				{
					time_t f = validateTimeString(receivedString, (time_t*)&g_event_finish_epoch, -g_utc_offset);
    3ebe:	40 91 9e 05 	lds	r20, 0x059E	; 0x80059e <g_utc_offset>
    3ec2:	41 95       	neg	r20
    3ec4:	6f e9       	ldi	r22, 0x9F	; 159
    3ec6:	75 e0       	ldi	r23, 0x05	; 5
    3ec8:	8f e7       	ldi	r24, 0x7F	; 127
    3eca:	94 e0       	ldi	r25, 0x04	; 4
    3ecc:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <_Z18validateTimeStringPcPma>

					if(f)
    3ed0:	61 15       	cp	r22, r1
    3ed2:	71 05       	cpc	r23, r1
    3ed4:	81 05       	cpc	r24, r1
    3ed6:	91 05       	cpc	r25, r1
    3ed8:	e9 f0       	breq	.+58     	; 0x3f14 <_Z10processKeyc+0x55c>
					{
						g_event_finish_epoch = f;
    3eda:	60 93 9f 05 	sts	0x059F, r22	; 0x80059f <g_event_finish_epoch>
    3ede:	70 93 a0 05 	sts	0x05A0, r23	; 0x8005a0 <g_event_finish_epoch+0x1>
    3ee2:	80 93 a1 05 	sts	0x05A1, r24	; 0x8005a1 <g_event_finish_epoch+0x2>
    3ee6:	90 93 a2 05 	sts	0x05A2, r25	; 0x8005a2 <g_event_finish_epoch+0x3>
						ee_mgr.updateEEPROMVar(Event_finish_epoch, (void*)&g_event_finish_epoch);
    3eea:	4f e9       	ldi	r20, 0x9F	; 159
    3eec:	55 e0       	ldi	r21, 0x05	; 5
    3eee:	68 e1       	ldi	r22, 0x18	; 24
    3ef0:	85 eb       	ldi	r24, 0xB5	; 181
    3ef2:	95 e0       	ldi	r25, 0x05	; 5
    3ef4:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						g_use_rtc_to_start = !clockConfigurationError() && g_transmissions_disabled;
    3ef8:	0e 94 b6 0c 	call	0x196c	; 0x196c <_Z23clockConfigurationErrorv>
    3efc:	81 11       	cpse	r24, r1
    3efe:	07 c0       	rjmp	.+14     	; 0x3f0e <_Z10processKeyc+0x556>
    3f00:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <g_transmissions_disabled>
    3f04:	81 e0       	ldi	r24, 0x01	; 1
    3f06:	91 11       	cpse	r25, r1
    3f08:	03 c0       	rjmp	.+6      	; 0x3f10 <_Z10processKeyc+0x558>
    3f0a:	80 e0       	ldi	r24, 0x00	; 0
    3f0c:	01 c0       	rjmp	.+2      	; 0x3f10 <_Z10processKeyc+0x558>
    3f0e:	80 e0       	ldi	r24, 0x00	; 0
    3f10:	80 93 5d 05 	sts	0x055D, r24	; 0x80055d <g_use_rtc_to_start>
					}

					state = STATE_SHUTDOWN;
    3f14:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3f18:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    3f1c:	f1 c0       	rjmp	.+482    	; 0x4100 <_Z10processKeyc+0x748>
				}
				else if((key >= '0') && (key <= '9'))
    3f1e:	80 ed       	ldi	r24, 0xD0	; 208
    3f20:	81 0f       	add	r24, r17
    3f22:	8a 30       	cpi	r24, 0x0A	; 10
    3f24:	08 f0       	brcs	.+2      	; 0x3f28 <_Z10processKeyc+0x570>
    3f26:	ec c0       	rjmp	.+472    	; 0x4100 <_Z10processKeyc+0x748>
				{
					if(stringLength < MAX_DTMF_ARG_LENGTH)
    3f28:	80 91 99 04 	lds	r24, 0x0499	; 0x800499 <_ZZ10processKeycE12stringLength>
    3f2c:	90 91 9a 04 	lds	r25, 0x049A	; 0x80049a <_ZZ10processKeycE12stringLength+0x1>
    3f30:	88 32       	cpi	r24, 0x28	; 40
    3f32:	91 05       	cpc	r25, r1
    3f34:	0c f0       	brlt	.+2      	; 0x3f38 <_Z10processKeyc+0x580>
    3f36:	e4 c0       	rjmp	.+456    	; 0x4100 <_Z10processKeyc+0x748>
					{
						receivedString[stringLength] = key;
    3f38:	fc 01       	movw	r30, r24
    3f3a:	e1 58       	subi	r30, 0x81	; 129
    3f3c:	fb 4f       	sbci	r31, 0xFB	; 251
    3f3e:	10 83       	st	Z, r17
						stringLength++;
    3f40:	01 96       	adiw	r24, 0x01	; 1
    3f42:	90 93 9a 04 	sts	0x049A, r25	; 0x80049a <_ZZ10processKeycE12stringLength+0x1>
    3f46:	80 93 99 04 	sts	0x0499, r24	; 0x800499 <_ZZ10processKeycE12stringLength>
						receivedString[stringLength] = '\0';
    3f4a:	fc 01       	movw	r30, r24
    3f4c:	e1 58       	subi	r30, 0x81	; 129
    3f4e:	fb 4f       	sbci	r31, 0xFB	; 251
    3f50:	10 82       	st	Z, r1
    3f52:	d6 c0       	rjmp	.+428    	; 0x4100 <_Z10processKeyc+0x748>
			}
			break;

			case STATE_RECEIVING_UTC_OFFSET:
			{
				if(key == '#')
    3f54:	83 32       	cpi	r24, 0x23	; 35
    3f56:	e9 f4       	brne	.+58     	; 0x3f92 <_Z10processKeyc+0x5da>
				{
					if((value >= 0) && (value < 24))
    3f58:	80 91 97 04 	lds	r24, 0x0497	; 0x800497 <_ZZ10processKeycE5value>
    3f5c:	90 91 98 04 	lds	r25, 0x0498	; 0x800498 <_ZZ10processKeycE5value+0x1>
    3f60:	88 31       	cpi	r24, 0x18	; 24
    3f62:	91 05       	cpc	r25, r1
    3f64:	88 f4       	brcc	.+34     	; 0x3f88 <_Z10processKeyc+0x5d0>
					{
						int8_t hold = value * digits;
    3f66:	90 91 95 04 	lds	r25, 0x0495	; 0x800495 <_ZZ10processKeycE6digits>
    3f6a:	98 9f       	mul	r25, r24
    3f6c:	80 2d       	mov	r24, r0
    3f6e:	11 24       	eor	r1, r1
    3f70:	89 83       	std	Y+1, r24	; 0x01
						ee_mgr.updateEEPROMVar(Utc_offset, (void*)&hold);
    3f72:	ae 01       	movw	r20, r28
    3f74:	4f 5f       	subi	r20, 0xFF	; 255
    3f76:	5f 4f       	sbci	r21, 0xFF	; 255
    3f78:	69 e1       	ldi	r22, 0x19	; 25
    3f7a:	85 eb       	ldi	r24, 0xB5	; 181
    3f7c:	95 e0       	ldi	r25, 0x05	; 5
    3f7e:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>
						g_utc_offset = hold;
    3f82:	89 81       	ldd	r24, Y+1	; 0x01
    3f84:	80 93 9e 05 	sts	0x059E, r24	; 0x80059e <g_utc_offset>
					}
					state = STATE_SHUTDOWN;
    3f88:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    3f8c:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    3f90:	b7 c0       	rjmp	.+366    	; 0x4100 <_Z10processKeyc+0x748>
				}
				else if((key >= '0') && (key <= '9'))
    3f92:	80 ed       	ldi	r24, 0xD0	; 208
    3f94:	81 0f       	add	r24, r17
    3f96:	8a 30       	cpi	r24, 0x0A	; 10
    3f98:	d0 f4       	brcc	.+52     	; 0x3fce <_Z10processKeyc+0x616>
				{
					value *= 10;
					value += key - '0';
    3f9a:	80 91 97 04 	lds	r24, 0x0497	; 0x800497 <_ZZ10processKeycE5value>
    3f9e:	90 91 98 04 	lds	r25, 0x0498	; 0x800498 <_ZZ10processKeycE5value+0x1>
    3fa2:	9c 01       	movw	r18, r24
    3fa4:	22 0f       	add	r18, r18
    3fa6:	33 1f       	adc	r19, r19
    3fa8:	88 0f       	add	r24, r24
    3faa:	99 1f       	adc	r25, r25
    3fac:	88 0f       	add	r24, r24
    3fae:	99 1f       	adc	r25, r25
    3fb0:	88 0f       	add	r24, r24
    3fb2:	99 1f       	adc	r25, r25
    3fb4:	82 0f       	add	r24, r18
    3fb6:	93 1f       	adc	r25, r19
    3fb8:	21 2f       	mov	r18, r17
    3fba:	30 e0       	ldi	r19, 0x00	; 0
    3fbc:	20 53       	subi	r18, 0x30	; 48
    3fbe:	31 09       	sbc	r19, r1
    3fc0:	82 0f       	add	r24, r18
    3fc2:	93 1f       	adc	r25, r19
    3fc4:	90 93 98 04 	sts	0x0498, r25	; 0x800498 <_ZZ10processKeycE5value+0x1>
    3fc8:	80 93 97 04 	sts	0x0497, r24	; 0x800497 <_ZZ10processKeycE5value>
    3fcc:	99 c0       	rjmp	.+306    	; 0x4100 <_Z10processKeyc+0x748>
				}
				else if(key == 'B')
    3fce:	12 34       	cpi	r17, 0x42	; 66
    3fd0:	09 f0       	breq	.+2      	; 0x3fd4 <_Z10processKeyc+0x61c>
    3fd2:	96 c0       	rjmp	.+300    	; 0x4100 <_Z10processKeyc+0x748>
				{
					digits = -1;
    3fd4:	8f ef       	ldi	r24, 0xFF	; 255
    3fd6:	9f ef       	ldi	r25, 0xFF	; 255
    3fd8:	90 93 96 04 	sts	0x0496, r25	; 0x800496 <_ZZ10processKeycE6digits+0x1>
    3fdc:	80 93 95 04 	sts	0x0495, r24	; 0x800495 <_ZZ10processKeycE6digits>
    3fe0:	8f c0       	rjmp	.+286    	; 0x4100 <_Z10processKeyc+0x748>
			}
			break;

			case STATE_SET_AM_TONE_FREQUENCY:
			{
				if(key == '#')
    3fe2:	83 32       	cpi	r24, 0x23	; 35
    3fe4:	a1 f4       	brne	.+40     	; 0x400e <_Z10processKeyc+0x656>
				{
					g_AM_audio_frequency = value;
    3fe6:	80 91 97 04 	lds	r24, 0x0497	; 0x800497 <_ZZ10processKeycE5value>
    3fea:	80 93 9c 05 	sts	0x059C, r24	; 0x80059c <g_AM_audio_frequency>
					setAMToneFrequency(g_AM_audio_frequency);
    3fee:	80 91 9c 05 	lds	r24, 0x059C	; 0x80059c <g_AM_audio_frequency>
    3ff2:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <_Z18setAMToneFrequencyh>
					ee_mgr.updateEEPROMVar(Am_audio_frequency, (void*)&g_AM_audio_frequency);
    3ff6:	4c e9       	ldi	r20, 0x9C	; 156
    3ff8:	55 e0       	ldi	r21, 0x05	; 5
    3ffa:	61 e1       	ldi	r22, 0x11	; 17
    3ffc:	85 eb       	ldi	r24, 0xB5	; 181
    3ffe:	95 e0       	ldi	r25, 0x05	; 5
    4000:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_ZN13EepromManager15updateEEPROMVarE8EE_var_tPv>

					state = STATE_SHUTDOWN;
    4004:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    4008:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    400c:	79 c0       	rjmp	.+242    	; 0x4100 <_Z10processKeyc+0x748>
				}
				else if((key >= '1') && (key <= '6'))
    400e:	8f ec       	ldi	r24, 0xCF	; 207
    4010:	81 0f       	add	r24, r17
    4012:	86 30       	cpi	r24, 0x06	; 6
    4014:	08 f0       	brcs	.+2      	; 0x4018 <_Z10processKeyc+0x660>
    4016:	74 c0       	rjmp	.+232    	; 0x4100 <_Z10processKeyc+0x748>
				{
					value = key - '0';
    4018:	21 2f       	mov	r18, r17
    401a:	30 e0       	ldi	r19, 0x00	; 0
    401c:	20 53       	subi	r18, 0x30	; 48
    401e:	31 09       	sbc	r19, r1
    4020:	30 93 98 04 	sts	0x0498, r19	; 0x800498 <_ZZ10processKeycE5value+0x1>
    4024:	20 93 97 04 	sts	0x0497, r18	; 0x800497 <_ZZ10processKeycE5value>
    4028:	6b c0       	rjmp	.+214    	; 0x4100 <_Z10processKeyc+0x748>
			}
			break;

			case STATE_CHECK_PASSWORD:
			{
				if(g_unlockCode[digits++] == key)
    402a:	20 91 95 04 	lds	r18, 0x0495	; 0x800495 <_ZZ10processKeycE6digits>
    402e:	30 91 96 04 	lds	r19, 0x0496	; 0x800496 <_ZZ10processKeycE6digits+0x1>
    4032:	a9 01       	movw	r20, r18
    4034:	4f 5f       	subi	r20, 0xFF	; 255
    4036:	5f 4f       	sbci	r21, 0xFF	; 255
    4038:	50 93 96 04 	sts	0x0496, r21	; 0x800496 <_ZZ10processKeycE6digits+0x1>
    403c:	40 93 95 04 	sts	0x0495, r20	; 0x800495 <_ZZ10processKeycE6digits>
    4040:	f9 01       	movw	r30, r18
    4042:	e0 5a       	subi	r30, 0xA0	; 160
    4044:	fa 4f       	sbci	r31, 0xFA	; 250
    4046:	90 81       	ld	r25, Z
    4048:	89 13       	cpse	r24, r25
    404a:	12 c0       	rjmp	.+36     	; 0x4070 <_Z10processKeyc+0x6b8>
				{
					if((size_t)digits == strlen((char*)g_unlockCode))
    404c:	e0 e6       	ldi	r30, 0x60	; 96
    404e:	f5 e0       	ldi	r31, 0x05	; 5
    4050:	01 90       	ld	r0, Z+
    4052:	00 20       	and	r0, r0
    4054:	e9 f7       	brne	.-6      	; 0x4050 <_Z10processKeyc+0x698>
    4056:	31 97       	sbiw	r30, 0x01	; 1
    4058:	e0 56       	subi	r30, 0x60	; 96
    405a:	f5 40       	sbci	r31, 0x05	; 5
    405c:	e4 17       	cp	r30, r20
    405e:	f5 07       	cpc	r31, r21
    4060:	09 f0       	breq	.+2      	; 0x4064 <_Z10processKeyc+0x6ac>
    4062:	4e c0       	rjmp	.+156    	; 0x4100 <_Z10processKeyc+0x748>
					{
						g_DTMF_unlocked = TRUE;
    4064:	81 e0       	ldi	r24, 0x01	; 1
    4066:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <g_DTMF_unlocked>
						setPasswordEnabled = TRUE;
    406a:	80 93 94 04 	sts	0x0494, r24	; 0x800494 <_ZZ10processKeycE18setPasswordEnabled>
    406e:	48 c0       	rjmp	.+144    	; 0x4100 <_Z10processKeyc+0x748>
					}
				}
				else
				{
					digits = 0;
    4070:	10 92 96 04 	sts	0x0496, r1	; 0x800496 <_ZZ10processKeycE6digits+0x1>
    4074:	10 92 95 04 	sts	0x0495, r1	; 0x800495 <_ZZ10processKeycE6digits>
					state = STATE_SHUTDOWN;
    4078:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    407c:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    4080:	3f c0       	rjmp	.+126    	; 0x4100 <_Z10processKeyc+0x748>
			}
			break;

			case STATE_TEST_ATTENUATOR:
			{
				if(key == '#')
    4082:	83 32       	cpi	r24, 0x23	; 35
    4084:	01 f5       	brne	.+64     	; 0x40c6 <_Z10processKeyc+0x70e>
				{
					if(value == 0)
    4086:	80 91 97 04 	lds	r24, 0x0497	; 0x800497 <_ZZ10processKeycE5value>
    408a:	90 91 98 04 	lds	r25, 0x0498	; 0x800498 <_ZZ10processKeycE5value+0x1>
    408e:	00 97       	sbiw	r24, 0x00	; 0
    4090:	41 f4       	brne	.+16     	; 0x40a2 <_Z10processKeyc+0x6ea>
					{
						setAtten(0);
    4092:	80 e0       	ldi	r24, 0x00	; 0
    4094:	90 e0       	ldi	r25, 0x00	; 0
    4096:	0e 94 bb 04 	call	0x976	; 0x976 <_Z8setAttenj>
						/* TIMSK1 |= (1 << OCIE1A); / * start timer 1 interrupts * / */
						g_sendAMmodulationConstantly = TRUE;
    409a:	81 e0       	ldi	r24, 0x01	; 1
    409c:	80 93 9b 05 	sts	0x059B, r24	; 0x80059b <g_sendAMmodulationConstantly>
    40a0:	0d c0       	rjmp	.+26     	; 0x40bc <_Z10processKeyc+0x704>
					}
					else if(value > 315)
    40a2:	8c 33       	cpi	r24, 0x3C	; 60
    40a4:	21 e0       	ldi	r18, 0x01	; 1
    40a6:	92 07       	cpc	r25, r18
    40a8:	3c f0       	brlt	.+14     	; 0x40b8 <_Z10processKeyc+0x700>
					{
						g_sendAMmodulationConstantly = FALSE;
    40aa:	10 92 9b 05 	sts	0x059B, r1	; 0x80059b <g_sendAMmodulationConstantly>
						/* TIMSK1 &= ~(1 << OCIE1A); / * stop timer 1 interrupts * / */
						setAtten(315);
    40ae:	8b e3       	ldi	r24, 0x3B	; 59
    40b0:	91 e0       	ldi	r25, 0x01	; 1
    40b2:	0e 94 bb 04 	call	0x976	; 0x976 <_Z8setAttenj>
    40b6:	02 c0       	rjmp	.+4      	; 0x40bc <_Z10processKeyc+0x704>
					}
					else
					{
						setAtten(value);
    40b8:	0e 94 bb 04 	call	0x976	; 0x976 <_Z8setAttenj>
					}

					state = STATE_SHUTDOWN;
    40bc:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10processKeycE5state+0x1>
    40c0:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10processKeycE5state>
    40c4:	1d c0       	rjmp	.+58     	; 0x4100 <_Z10processKeyc+0x748>
				}
				else if((key >= '0') && (key <= '9'))
    40c6:	80 ed       	ldi	r24, 0xD0	; 208
    40c8:	81 0f       	add	r24, r17
    40ca:	8a 30       	cpi	r24, 0x0A	; 10
    40cc:	c8 f4       	brcc	.+50     	; 0x4100 <_Z10processKeyc+0x748>
				{
					value *= 10;
					value += key - '0';
    40ce:	20 91 97 04 	lds	r18, 0x0497	; 0x800497 <_ZZ10processKeycE5value>
    40d2:	30 91 98 04 	lds	r19, 0x0498	; 0x800498 <_ZZ10processKeycE5value+0x1>
    40d6:	c9 01       	movw	r24, r18
    40d8:	88 0f       	add	r24, r24
    40da:	99 1f       	adc	r25, r25
    40dc:	22 0f       	add	r18, r18
    40de:	33 1f       	adc	r19, r19
    40e0:	22 0f       	add	r18, r18
    40e2:	33 1f       	adc	r19, r19
    40e4:	22 0f       	add	r18, r18
    40e6:	33 1f       	adc	r19, r19
    40e8:	82 0f       	add	r24, r18
    40ea:	93 1f       	adc	r25, r19
    40ec:	21 2f       	mov	r18, r17
    40ee:	30 e0       	ldi	r19, 0x00	; 0
    40f0:	20 53       	subi	r18, 0x30	; 48
    40f2:	31 09       	sbc	r19, r1
    40f4:	82 0f       	add	r24, r18
    40f6:	93 1f       	adc	r25, r19
    40f8:	90 93 98 04 	sts	0x0498, r25	; 0x800498 <_ZZ10processKeycE5value+0x1>
    40fc:	80 93 97 04 	sts	0x0497, r24	; 0x800497 <_ZZ10processKeycE5value>
				}
			}
			break;
		}
	}
    4100:	0f 90       	pop	r0
    4102:	df 91       	pop	r29
    4104:	cf 91       	pop	r28
    4106:	1f 91       	pop	r17
    4108:	ff 90       	pop	r15
    410a:	ef 90       	pop	r14
    410c:	df 90       	pop	r13
    410e:	cf 90       	pop	r12
    4110:	08 95       	ret

00004112 <_Z4loopv>:

/***********************************************************************
 *  Here is the main loop
 ************************************************************************/
void loop()
{
    4112:	2f 92       	push	r2
    4114:	3f 92       	push	r3
    4116:	4f 92       	push	r4
    4118:	5f 92       	push	r5
    411a:	6f 92       	push	r6
    411c:	7f 92       	push	r7
    411e:	8f 92       	push	r8
    4120:	9f 92       	push	r9
    4122:	af 92       	push	r10
    4124:	bf 92       	push	r11
    4126:	cf 92       	push	r12
    4128:	df 92       	push	r13
    412a:	ef 92       	push	r14
    412c:	ff 92       	push	r15
    412e:	0f 93       	push	r16
    4130:	1f 93       	push	r17
    4132:	cf 93       	push	r28
    4134:	df 93       	push	r29
    4136:	1f 92       	push	r1
    4138:	cd b7       	in	r28, 0x3d	; 61
    413a:	de b7       	in	r29, 0x3e	; 62
		static int time_for_id = 99;
		static BOOL id_set = TRUE;
		static BOOL proceed = FALSE;
#endif  /* !INIT_EEPROM_ONLY */

	handleLinkBusMsgs();
    413c:	0e 94 e5 16 	call	0x2dca	; 0x2dca <_Z17handleLinkBusMsgsv>

#if !INIT_EEPROM_ONLY
		if(!g_on_the_air || proceed)
    4140:	80 91 af 05 	lds	r24, 0x05AF	; 0x8005af <g_on_the_air>
    4144:	88 23       	and	r24, r24
    4146:	29 f0       	breq	.+10     	; 0x4152 <_Z4loopv+0x40>
    4148:	80 91 9e 04 	lds	r24, 0x049E	; 0x80049e <_ZZ4loopvE7proceed>
    414c:	88 23       	and	r24, r24
    414e:	09 f4       	brne	.+2      	; 0x4152 <_Z4loopv+0x40>
    4150:	d7 c0       	rjmp	.+430    	; 0x4300 <_Z4loopv+0x1ee>
		{
			/* At the appropriate time set the pattern to be sent and start transmissions */
			if(!g_transmissions_disabled)
    4152:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <g_transmissions_disabled>
    4156:	81 11       	cpse	r24, r1
    4158:	29 c1       	rjmp	.+594    	; 0x43ac <_Z4loopv+0x29a>
			{
				proceed = FALSE;
    415a:	10 92 9e 04 	sts	0x049E, r1	; 0x80049e <_ZZ4loopvE7proceed>

				/* Choose the appropriate Morse pattern to be sent */
				if(g_fox == FOX_DEMO)
    415e:	80 91 b0 05 	lds	r24, 0x05B0	; 0x8005b0 <g_fox>
    4162:	86 30       	cpi	r24, 0x06	; 6
    4164:	91 f4       	brne	.+36     	; 0x418a <_Z4loopv+0x78>
				{
					strcpy(g_messages_text[PATTERN_TEXT], g_morsePatterns[g_fox_counter]);
    4166:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <g_fox_counter>
    416a:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <g_fox_counter+0x1>
    416e:	bc 01       	movw	r22, r24
    4170:	66 0f       	add	r22, r22
    4172:	77 1f       	adc	r23, r23
    4174:	66 0f       	add	r22, r22
    4176:	77 1f       	adc	r23, r23
    4178:	68 0f       	add	r22, r24
    417a:	79 1f       	adc	r23, r25
    417c:	65 55       	subi	r22, 0x55	; 85
    417e:	7d 4f       	sbci	r23, 0xFD	; 253
    4180:	83 e3       	ldi	r24, 0x33	; 51
    4182:	95 e0       	ldi	r25, 0x05	; 5
    4184:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <strcpy>
    4188:	27 c0       	rjmp	.+78     	; 0x41d8 <_Z4loopv+0xc6>
				}
				else if(g_fox == SPRINT_DEMO)
    418a:	80 91 b0 05 	lds	r24, 0x05B0	; 0x8005b0 <g_fox>
    418e:	83 31       	cpi	r24, 0x13	; 19
    4190:	99 f4       	brne	.+38     	; 0x41b8 <_Z4loopv+0xa6>
				{
					strcpy(g_messages_text[PATTERN_TEXT], g_morsePatterns[g_fox_counter + 8]);
    4192:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <g_fox_counter>
    4196:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <g_fox_counter+0x1>
    419a:	08 96       	adiw	r24, 0x08	; 8
    419c:	bc 01       	movw	r22, r24
    419e:	66 0f       	add	r22, r22
    41a0:	77 1f       	adc	r23, r23
    41a2:	66 0f       	add	r22, r22
    41a4:	77 1f       	adc	r23, r23
    41a6:	68 0f       	add	r22, r24
    41a8:	79 1f       	adc	r23, r25
    41aa:	65 55       	subi	r22, 0x55	; 85
    41ac:	7d 4f       	sbci	r23, 0xFD	; 253
    41ae:	83 e3       	ldi	r24, 0x33	; 51
    41b0:	95 e0       	ldi	r25, 0x05	; 5
    41b2:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <strcpy>
    41b6:	10 c0       	rjmp	.+32     	; 0x41d8 <_Z4loopv+0xc6>
				}
				else
				{
					strcpy(g_messages_text[PATTERN_TEXT], g_morsePatterns[g_fox]);
    41b8:	80 91 b0 05 	lds	r24, 0x05B0	; 0x8005b0 <g_fox>
    41bc:	90 e0       	ldi	r25, 0x00	; 0
    41be:	bc 01       	movw	r22, r24
    41c0:	66 0f       	add	r22, r22
    41c2:	77 1f       	adc	r23, r23
    41c4:	66 0f       	add	r22, r22
    41c6:	77 1f       	adc	r23, r23
    41c8:	68 0f       	add	r22, r24
    41ca:	79 1f       	adc	r23, r25
    41cc:	65 55       	subi	r22, 0x55	; 85
    41ce:	7d 4f       	sbci	r23, 0xFD	; 253
    41d0:	83 e3       	ldi	r24, 0x33	; 51
    41d2:	95 e0       	ldi	r25, 0x05	; 5
    41d4:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <strcpy>
				}

				if((g_fox == FOX_DEMO) || (g_fox == SPRINT_DEMO) || (g_fox == BEACON) || (g_fox == FOXORING) || (g_fox == SPECTATOR) || (g_fox == (g_fox_counter + g_fox_id_offset)))
    41d8:	80 91 b0 05 	lds	r24, 0x05B0	; 0x8005b0 <g_fox>
    41dc:	86 30       	cpi	r24, 0x06	; 6
    41de:	09 f1       	breq	.+66     	; 0x4222 <_Z4loopv+0x110>
    41e0:	80 91 b0 05 	lds	r24, 0x05B0	; 0x8005b0 <g_fox>
    41e4:	83 31       	cpi	r24, 0x13	; 19
    41e6:	e9 f0       	breq	.+58     	; 0x4222 <_Z4loopv+0x110>
    41e8:	80 91 b0 05 	lds	r24, 0x05B0	; 0x8005b0 <g_fox>
    41ec:	88 23       	and	r24, r24
    41ee:	c9 f0       	breq	.+50     	; 0x4222 <_Z4loopv+0x110>
    41f0:	80 91 b0 05 	lds	r24, 0x05B0	; 0x8005b0 <g_fox>
    41f4:	87 30       	cpi	r24, 0x07	; 7
    41f6:	a9 f0       	breq	.+42     	; 0x4222 <_Z4loopv+0x110>
    41f8:	80 91 b0 05 	lds	r24, 0x05B0	; 0x8005b0 <g_fox>
    41fc:	88 30       	cpi	r24, 0x08	; 8
    41fe:	89 f0       	breq	.+34     	; 0x4222 <_Z4loopv+0x110>
    4200:	20 91 b0 05 	lds	r18, 0x05B0	; 0x8005b0 <g_fox>
    4204:	40 91 20 01 	lds	r20, 0x0120	; 0x800120 <g_fox_counter>
    4208:	50 91 21 01 	lds	r21, 0x0121	; 0x800121 <g_fox_counter+0x1>
    420c:	80 91 72 05 	lds	r24, 0x0572	; 0x800572 <g_fox_id_offset>
    4210:	90 91 73 05 	lds	r25, 0x0573	; 0x800573 <g_fox_id_offset+0x1>
    4214:	30 e0       	ldi	r19, 0x00	; 0
    4216:	84 0f       	add	r24, r20
    4218:	95 1f       	adc	r25, r21
    421a:	28 17       	cp	r18, r24
    421c:	39 07       	cpc	r19, r25
    421e:	09 f0       	breq	.+2      	; 0x4222 <_Z4loopv+0x110>
    4220:	c5 c0       	rjmp	.+394    	; 0x43ac <_Z4loopv+0x29a>
				{
					BOOL repeat = TRUE;
    4222:	81 e0       	ldi	r24, 0x01	; 1
    4224:	89 83       	std	Y+1, r24	; 0x01
					g_code_throttle = THROTTLE_VAL_FROM_WPM(g_pattern_codespeed);
    4226:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <g_pattern_codespeed>
    422a:	70 e0       	ldi	r23, 0x00	; 0
    422c:	82 e8       	ldi	r24, 0x82	; 130
    422e:	9b e1       	ldi	r25, 0x1B	; 27
    4230:	0e 94 16 2c 	call	0x582c	; 0x582c <__divmodhi4>
    4234:	cb 01       	movw	r24, r22
    4236:	6a e0       	ldi	r22, 0x0A	; 10
    4238:	70 e0       	ldi	r23, 0x00	; 0
    423a:	0e 94 16 2c 	call	0x582c	; 0x582c <__divmodhi4>
    423e:	66 0f       	add	r22, r22
    4240:	77 1f       	adc	r23, r23
    4242:	70 93 ae 05 	sts	0x05AE, r23	; 0x8005ae <g_code_throttle+0x1>
    4246:	60 93 ad 05 	sts	0x05AD, r22	; 0x8005ad <g_code_throttle>
					makeMorse(g_messages_text[PATTERN_TEXT], &repeat, NULL);
    424a:	40 e0       	ldi	r20, 0x00	; 0
    424c:	50 e0       	ldi	r21, 0x00	; 0
    424e:	be 01       	movw	r22, r28
    4250:	6f 5f       	subi	r22, 0xFF	; 255
    4252:	7f 4f       	sbci	r23, 0xFF	; 255
    4254:	83 e3       	ldi	r24, 0x33	; 51
    4256:	95 e0       	ldi	r25, 0x05	; 5
    4258:	0e 94 c5 25 	call	0x4b8a	; 0x4b8a <_Z9makeMorsePcPhS0_>

					if(g_time_to_ID || (g_id_interval <= g_on_air_interval))
    425c:	80 91 6f 05 	lds	r24, 0x056F	; 0x80056f <g_time_to_ID>
    4260:	81 11       	cpse	r24, r1
    4262:	0b c0       	rjmp	.+22     	; 0x427a <_Z4loopv+0x168>
    4264:	20 91 70 05 	lds	r18, 0x0570	; 0x800570 <g_id_interval>
    4268:	30 91 71 05 	lds	r19, 0x0571	; 0x800571 <g_id_interval+0x1>
    426c:	80 91 79 05 	lds	r24, 0x0579	; 0x800579 <g_on_air_interval>
    4270:	90 91 7a 05 	lds	r25, 0x057A	; 0x80057a <g_on_air_interval+0x1>
    4274:	82 17       	cp	r24, r18
    4276:	93 07       	cpc	r25, r19
    4278:	3c f1       	brlt	.+78     	; 0x42c8 <_Z4loopv+0x1b6>
					{
						time_for_id = g_on_air_interval - (500 + timeRequiredToSendStrAtWPM(g_messages_text[STATION_ID], g_id_codespeed)) / 1000;
    427a:	00 91 79 05 	lds	r16, 0x0579	; 0x800579 <g_on_air_interval>
    427e:	10 91 7a 05 	lds	r17, 0x057A	; 0x80057a <g_on_air_interval+0x1>
    4282:	60 91 19 01 	lds	r22, 0x0119	; 0x800119 <g_id_codespeed>
    4286:	70 e0       	ldi	r23, 0x00	; 0
    4288:	88 e4       	ldi	r24, 0x48	; 72
    428a:	95 e0       	ldi	r25, 0x05	; 5
    428c:	0e 94 c3 26 	call	0x4d86	; 0x4d86 <_Z26timeRequiredToSendStrAtWPMPcj>
    4290:	8c 50       	subi	r24, 0x0C	; 12
    4292:	9e 4f       	sbci	r25, 0xFE	; 254
    4294:	9c 01       	movw	r18, r24
    4296:	36 95       	lsr	r19
    4298:	27 95       	ror	r18
    429a:	36 95       	lsr	r19
    429c:	27 95       	ror	r18
    429e:	36 95       	lsr	r19
    42a0:	27 95       	ror	r18
    42a2:	a5 ec       	ldi	r26, 0xC5	; 197
    42a4:	b0 e2       	ldi	r27, 0x20	; 32
    42a6:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <__umulhisi3>
    42aa:	92 95       	swap	r25
    42ac:	82 95       	swap	r24
    42ae:	8f 70       	andi	r24, 0x0F	; 15
    42b0:	89 27       	eor	r24, r25
    42b2:	9f 70       	andi	r25, 0x0F	; 15
    42b4:	89 27       	eor	r24, r25
    42b6:	08 1b       	sub	r16, r24
    42b8:	19 0b       	sbc	r17, r25
    42ba:	10 93 0e 01 	sts	0x010E, r17	; 0x80010e <_ZZ4loopvE11time_for_id+0x1>
    42be:	00 93 0d 01 	sts	0x010D, r16	; 0x80010d <_ZZ4loopvE11time_for_id>
						g_time_to_ID = FALSE;
    42c2:	10 92 6f 05 	sts	0x056F, r1	; 0x80056f <g_time_to_ID>
    42c6:	0a c0       	rjmp	.+20     	; 0x42dc <_Z4loopv+0x1ca>
					}
					else
					{
						time_for_id = g_on_air_interval + 99;   /* prevent sending ID */
    42c8:	80 91 79 05 	lds	r24, 0x0579	; 0x800579 <g_on_air_interval>
    42cc:	90 91 7a 05 	lds	r25, 0x057A	; 0x80057a <g_on_air_interval+0x1>
    42d0:	8d 59       	subi	r24, 0x9D	; 157
    42d2:	9f 4f       	sbci	r25, 0xFF	; 255
    42d4:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <_ZZ4loopvE11time_for_id+0x1>
    42d8:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <_ZZ4loopvE11time_for_id>
					}

					id_set = FALSE;
    42dc:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <_ZZ4loopvE6id_set>
					g_on_the_air = TRUE;
    42e0:	81 e0       	ldi	r24, 0x01	; 1
    42e2:	80 93 af 05 	sts	0x05AF, r24	; 0x8005af <g_on_the_air>
					g_callsign_sent = FALSE;
    42e6:	10 92 ac 05 	sts	0x05AC, r1	; 0x8005ac <g_callsign_sent>
					g_fox_transition = FALSE;
    42ea:	10 92 74 05 	sts	0x0574, r1	; 0x800574 <g_fox_transition>
					g_fox_tone_offset = g_fox_counter;
    42ee:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <g_fox_counter>
    42f2:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <g_fox_counter+0x1>
    42f6:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <g_fox_tone_offset+0x1>
    42fa:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <g_fox_tone_offset>
    42fe:	56 c0       	rjmp	.+172    	; 0x43ac <_Z4loopv+0x29a>
				}
			}
		}
		else
		{
			if(!id_set && (g_fox_seconds_into_interval == time_for_id)) /* Send the call sign at the right time */
    4300:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <_ZZ4loopvE6id_set>
    4304:	81 11       	cpse	r24, r1
    4306:	9e c1       	rjmp	.+828    	; 0x4644 <_Z4loopv+0x532>
    4308:	20 91 77 05 	lds	r18, 0x0577	; 0x800577 <g_fox_seconds_into_interval>
    430c:	30 91 78 05 	lds	r19, 0x0578	; 0x800578 <g_fox_seconds_into_interval+0x1>
    4310:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <_ZZ4loopvE11time_for_id>
    4314:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <_ZZ4loopvE11time_for_id+0x1>
    4318:	28 17       	cp	r18, r24
    431a:	39 07       	cpc	r19, r25
    431c:	09 f0       	breq	.+2      	; 0x4320 <_Z4loopv+0x20e>
    431e:	92 c1       	rjmp	.+804    	; 0x4644 <_Z4loopv+0x532>
    4320:	6f c1       	rjmp	.+734    	; 0x4600 <_Z4loopv+0x4ee>
				BOOL repeat = FALSE;
				makeMorse(g_messages_text[STATION_ID], &repeat, NULL);
				id_set = TRUE;
				g_callsign_sent = FALSE;
			}
			else if((g_fox >= SPRINT_S1) && (g_fox <= SPRINT_DEMO))
    4322:	80 91 b0 05 	lds	r24, 0x05B0	; 0x8005b0 <g_fox>
    4326:	84 31       	cpi	r24, 0x14	; 20
    4328:	08 f4       	brcc	.+2      	; 0x432c <_Z4loopv+0x21a>
    432a:	92 c1       	rjmp	.+804    	; 0x4650 <_Z4loopv+0x53e>
    432c:	07 c0       	rjmp	.+14     	; 0x433c <_Z4loopv+0x22a>
			{
				if(g_fox_transition)
				{
					g_fox_transition = FALSE;
    432e:	10 92 74 05 	sts	0x0574, r1	; 0x800574 <g_fox_transition>
					g_on_the_air = FALSE;
    4332:	10 92 af 05 	sts	0x05AF, r1	; 0x8005af <g_on_the_air>
					proceed = TRUE;
    4336:	81 e0       	ldi	r24, 0x01	; 1
    4338:	80 93 9e 04 	sts	0x049E, r24	; 0x80049e <_ZZ4loopvE7proceed>
				}
			}

			if((g_fox == FOX_DEMO) || (g_fox == SPRINT_DEMO))
    433c:	80 91 b0 05 	lds	r24, 0x05B0	; 0x8005b0 <g_fox>
    4340:	86 30       	cpi	r24, 0x06	; 6
    4342:	21 f0       	breq	.+8      	; 0x434c <_Z4loopv+0x23a>
    4344:	80 91 b0 05 	lds	r24, 0x05B0	; 0x8005b0 <g_fox>
    4348:	83 31       	cpi	r24, 0x13	; 19
    434a:	49 f4       	brne	.+18     	; 0x435e <_Z4loopv+0x24c>
			{
				if((g_callsign_sent) && g_fox_transition)   /* Ensure we've begun the next minute before proceeding */
    434c:	80 91 ac 05 	lds	r24, 0x05AC	; 0x8005ac <g_callsign_sent>
    4350:	88 23       	and	r24, r24
    4352:	61 f1       	breq	.+88     	; 0x43ac <_Z4loopv+0x29a>
    4354:	80 91 74 05 	lds	r24, 0x0574	; 0x800574 <g_fox_transition>
    4358:	81 11       	cpse	r24, r1
    435a:	7f c1       	rjmp	.+766    	; 0x465a <_Z4loopv+0x548>
    435c:	27 c0       	rjmp	.+78     	; 0x43ac <_Z4loopv+0x29a>
				{
					proceed = TRUE;
				}
			}
			else if((g_fox == BEACON) || (g_fox == FOXORING) || (g_fox == SPECTATOR))   /* Proceed as soon as the callsign has been sent */
    435e:	80 91 b0 05 	lds	r24, 0x05B0	; 0x8005b0 <g_fox>
    4362:	88 23       	and	r24, r24
    4364:	41 f0       	breq	.+16     	; 0x4376 <_Z4loopv+0x264>
    4366:	80 91 b0 05 	lds	r24, 0x05B0	; 0x8005b0 <g_fox>
    436a:	87 30       	cpi	r24, 0x07	; 7
    436c:	21 f0       	breq	.+8      	; 0x4376 <_Z4loopv+0x264>
    436e:	80 91 b0 05 	lds	r24, 0x05B0	; 0x8005b0 <g_fox>
    4372:	88 30       	cpi	r24, 0x08	; 8
    4374:	41 f4       	brne	.+16     	; 0x4386 <_Z4loopv+0x274>
			{
				if(g_callsign_sent)
    4376:	80 91 ac 05 	lds	r24, 0x05AC	; 0x8005ac <g_callsign_sent>
    437a:	88 23       	and	r24, r24
    437c:	b9 f0       	breq	.+46     	; 0x43ac <_Z4loopv+0x29a>
				{
					proceed = TRUE;
    437e:	81 e0       	ldi	r24, 0x01	; 1
    4380:	80 93 9e 04 	sts	0x049E, r24	; 0x80049e <_ZZ4loopvE7proceed>
    4384:	13 c0       	rjmp	.+38     	; 0x43ac <_Z4loopv+0x29a>
				}
			}
			else if((g_fox >= SPRINT_S1) && (g_fox <= SPRINT_F5) && g_callsign_sent)
    4386:	80 91 b0 05 	lds	r24, 0x05B0	; 0x8005b0 <g_fox>
    438a:	89 30       	cpi	r24, 0x09	; 9
    438c:	08 f4       	brcc	.+2      	; 0x4390 <_Z4loopv+0x27e>
    438e:	6c c1       	rjmp	.+728    	; 0x4668 <_Z4loopv+0x556>
    4390:	80 91 b0 05 	lds	r24, 0x05B0	; 0x8005b0 <g_fox>
    4394:	83 31       	cpi	r24, 0x13	; 19
    4396:	08 f0       	brcs	.+2      	; 0x439a <_Z4loopv+0x288>
    4398:	67 c1       	rjmp	.+718    	; 0x4668 <_Z4loopv+0x556>
    439a:	80 91 ac 05 	lds	r24, 0x05AC	; 0x8005ac <g_callsign_sent>
    439e:	81 11       	cpse	r24, r1
    43a0:	60 c1       	rjmp	.+704    	; 0x4662 <_Z4loopv+0x550>
    43a2:	62 c1       	rjmp	.+708    	; 0x4668 <_Z4loopv+0x556>
			{
				g_on_the_air = FALSE;
			}
			else if((g_fox != g_fox_counter) && g_callsign_sent)    /* Turn off transmissions during minutes when this fox should be silent */
    43a4:	80 91 ac 05 	lds	r24, 0x05AC	; 0x8005ac <g_callsign_sent>
    43a8:	81 11       	cpse	r24, r1
    43aa:	6a c1       	rjmp	.+724    	; 0x4680 <_Z4loopv+0x56e>
				g_on_the_air = FALSE;
			}
		}


		if(g_goertzel.SamplesReady())
    43ac:	82 e2       	ldi	r24, 0x22	; 34
    43ae:	95 e0       	ldi	r25, 0x05	; 5
    43b0:	0e 94 5e 06 	call	0xcbc	; 0xcbc <_ZN8Goertzel12SamplesReadyEv>
    43b4:	88 23       	and	r24, r24
    43b6:	09 f4       	brne	.+2      	; 0x43ba <_Z4loopv+0x2a8>
    43b8:	18 c1       	rjmp	.+560    	; 0x45ea <_Z4loopv+0x4d8>
			static char lastKey = '\0';
			static int checkCount = 10;                                                                                                                                                                                                              /* Set above the threshold to prevent an initial false key detect */
			static int quietCount = 0;
			int x = -1, y = -1;

			if(!g_temperature_check_countdown)
    43ba:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <g_temperature_check_countdown>
    43be:	81 11       	cpse	r24, r1
    43c0:	62 c1       	rjmp	.+708    	; 0x4686 <_Z4loopv+0x574>
			{

				setUpTemp();
    43c2:	0e 94 77 12 	call	0x24ee	; 0x24ee <_Z9setUpTempv>
				int8_t temp = (int8_t)getTemp();
    43c6:	0e 94 87 12 	call	0x250e	; 0x250e <_Z7getTempv>
    43ca:	0e 94 d1 29 	call	0x53a2	; 0x53a2 <__fixsfsi>
				if(temp != g_temperature)
    43ce:	80 91 5f 05 	lds	r24, 0x055F	; 0x80055f <g_temperature>
    43d2:	68 17       	cp	r22, r24
    43d4:	e1 f0       	breq	.+56     	; 0x440e <_Z4loopv+0x2fc>
				{
					g_temperature = temp;
    43d6:	60 93 5f 05 	sts	0x055F, r22	; 0x80055f <g_temperature>
					int8_t delta25 = temp > 25 ? temp - 25 : 25 - temp;
    43da:	6a 31       	cpi	r22, 0x1A	; 26
    43dc:	14 f0       	brlt	.+4      	; 0x43e2 <_Z4loopv+0x2d0>
    43de:	69 51       	subi	r22, 0x19	; 25
    43e0:	03 c0       	rjmp	.+6      	; 0x43e8 <_Z4loopv+0x2d6>
    43e2:	89 e1       	ldi	r24, 0x19	; 25
    43e4:	86 1b       	sub	r24, r22
    43e6:	68 2f       	mov	r22, r24
					int8_t adj = ee_mgr.readTemperatureTable(delta25);
    43e8:	06 2e       	mov	r0, r22
    43ea:	00 0c       	add	r0, r0
    43ec:	77 0b       	sbc	r23, r23
    43ee:	85 eb       	ldi	r24, 0xB5	; 181
    43f0:	95 e0       	ldi	r25, 0x05	; 5
    43f2:	0e 94 b3 04 	call	0x966	; 0x966 <_ZN13EepromManager20readTemperatureTableEi>
					rv3028_set_offset_RAM(g_rv3028_offset + adj);
    43f6:	20 91 2c 05 	lds	r18, 0x052C	; 0x80052c <g_rv3028_offset>
    43fa:	30 91 2d 05 	lds	r19, 0x052D	; 0x80052d <g_rv3028_offset+0x1>
    43fe:	a9 01       	movw	r20, r18
    4400:	48 0f       	add	r20, r24
    4402:	51 1d       	adc	r21, r1
    4404:	87 fd       	sbrc	r24, 7
    4406:	5a 95       	dec	r21
    4408:	ca 01       	movw	r24, r20
    440a:	0e 94 48 28 	call	0x5090	; 0x5090 <_Z21rv3028_set_offset_RAMj>
				}

				setUpAudioSampling(false);
    440e:	80 e0       	ldi	r24, 0x00	; 0
    4410:	0e 94 df 12 	call	0x25be	; 0x25be <_Z18setUpAudioSamplingh>
				g_temperature_check_countdown = 60;
    4414:	8c e3       	ldi	r24, 0x3C	; 60
    4416:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <g_temperature_check_countdown>
    441a:	35 c1       	rjmp	.+618    	; 0x4686 <_Z4loopv+0x574>
			}

			for(int i = 0; i < 4; i++)
			{
				g_goertzel.SetTargetFrequency(y_frequencies[i]);    /*initialize library function with the given sampling frequency no of samples and target freq */
    441c:	f5 01       	movw	r30, r10
    441e:	41 91       	ld	r20, Z+
    4420:	51 91       	ld	r21, Z+
    4422:	61 91       	ld	r22, Z+
    4424:	71 91       	ld	r23, Z+
    4426:	5f 01       	movw	r10, r30
    4428:	82 e2       	ldi	r24, 0x22	; 34
    442a:	95 e0       	ldi	r25, 0x05	; 5
    442c:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <_ZN8Goertzel18SetTargetFrequencyEf>
				magnitudeY = g_goertzel.Magnitude2();               /*check them for target_freq */
    4430:	82 e2       	ldi	r24, 0x22	; 34
    4432:	95 e0       	ldi	r25, 0x05	; 5
    4434:	0e 94 61 06 	call	0xcc2	; 0xcc2 <_ZN8Goertzel10Magnitude2Ev>
    4438:	e6 2e       	mov	r14, r22
    443a:	f7 2e       	mov	r15, r23
    443c:	d8 2e       	mov	r13, r24
    443e:	c9 2e       	mov	r12, r25

				if(magnitudeY > largestY)                           /*if you're getting false hits or no hits adjust the threshold */
    4440:	27 2d       	mov	r18, r7
    4442:	36 2d       	mov	r19, r6
    4444:	45 2d       	mov	r20, r5
    4446:	54 2d       	mov	r21, r4
    4448:	0e 94 f8 2a 	call	0x55f0	; 0x55f0 <__gesf2>
    444c:	18 16       	cp	r1, r24
    444e:	b4 f4       	brge	.+44     	; 0x447c <_Z4loopv+0x36a>
				{
					largestY = magnitudeY;
					if(magnitudeY > threshold)
    4450:	20 e0       	ldi	r18, 0x00	; 0
    4452:	34 e2       	ldi	r19, 0x24	; 36
    4454:	44 e7       	ldi	r20, 0x74	; 116
    4456:	59 e4       	ldi	r21, 0x49	; 73
    4458:	6e 2d       	mov	r22, r14
    445a:	7f 2d       	mov	r23, r15
    445c:	8d 2d       	mov	r24, r13
    445e:	9c 2d       	mov	r25, r12
    4460:	0e 94 f8 2a 	call	0x55f0	; 0x55f0 <__gesf2>
    4464:	18 16       	cp	r1, r24
    4466:	34 f4       	brge	.+12     	; 0x4474 <_Z4loopv+0x362>
    4468:	48 01       	movw	r8, r16
				g_goertzel.SetTargetFrequency(y_frequencies[i]);    /*initialize library function with the given sampling frequency no of samples and target freq */
				magnitudeY = g_goertzel.Magnitude2();               /*check them for target_freq */

				if(magnitudeY > largestY)                           /*if you're getting false hits or no hits adjust the threshold */
				{
					largestY = magnitudeY;
    446a:	7e 2c       	mov	r7, r14
    446c:	6f 2c       	mov	r6, r15
    446e:	5d 2c       	mov	r5, r13
    4470:	4c 2c       	mov	r4, r12
    4472:	04 c0       	rjmp	.+8      	; 0x447c <_Z4loopv+0x36a>
    4474:	7e 2c       	mov	r7, r14
    4476:	6f 2c       	mov	r6, r15
    4478:	5d 2c       	mov	r5, r13
    447a:	4c 2c       	mov	r4, r12

				setUpAudioSampling(false);
				g_temperature_check_countdown = 60;
			}

			for(int i = 0; i < 4; i++)
    447c:	0f 5f       	subi	r16, 0xFF	; 255
    447e:	1f 4f       	sbci	r17, 0xFF	; 255
    4480:	04 30       	cpi	r16, 0x04	; 4
    4482:	11 05       	cpc	r17, r1
    4484:	59 f6       	brne	.-106    	; 0x441c <_Z4loopv+0x30a>
    4486:	0f c1       	rjmp	.+542    	; 0x46a6 <_Z4loopv+0x594>

			if(y >= 0)
			{
				for(int i = 0; i < 4; i++)
				{
					g_goertzel.SetTargetFrequency(x_frequencies[i]);    /*initialize library function with the given sampling frequency no of samples and target freq */
    4488:	f5 01       	movw	r30, r10
    448a:	41 91       	ld	r20, Z+
    448c:	51 91       	ld	r21, Z+
    448e:	61 91       	ld	r22, Z+
    4490:	71 91       	ld	r23, Z+
    4492:	5f 01       	movw	r10, r30
    4494:	82 e2       	ldi	r24, 0x22	; 34
    4496:	95 e0       	ldi	r25, 0x05	; 5
    4498:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <_ZN8Goertzel18SetTargetFrequencyEf>
					magnitudeX = g_goertzel.Magnitude2();               /*check them for target_freq */
    449c:	82 e2       	ldi	r24, 0x22	; 34
    449e:	95 e0       	ldi	r25, 0x05	; 5
    44a0:	0e 94 61 06 	call	0xcc2	; 0xcc2 <_ZN8Goertzel10Magnitude2Ev>
    44a4:	e6 2e       	mov	r14, r22
    44a6:	f7 2e       	mov	r15, r23
    44a8:	d8 2e       	mov	r13, r24
    44aa:	c9 2e       	mov	r12, r25

					if(magnitudeX > largestX)                           /*if you're getting false hits or no hits adjust the threshold */
    44ac:	25 2d       	mov	r18, r5
    44ae:	34 2d       	mov	r19, r4
    44b0:	43 2d       	mov	r20, r3
    44b2:	52 2d       	mov	r21, r2
    44b4:	0e 94 f8 2a 	call	0x55f0	; 0x55f0 <__gesf2>
    44b8:	18 16       	cp	r1, r24
    44ba:	b4 f4       	brge	.+44     	; 0x44e8 <_Z4loopv+0x3d6>
					{
						largestX = magnitudeX;
						if(magnitudeX > threshold)
    44bc:	20 e0       	ldi	r18, 0x00	; 0
    44be:	34 e2       	ldi	r19, 0x24	; 36
    44c0:	44 e7       	ldi	r20, 0x74	; 116
    44c2:	59 e4       	ldi	r21, 0x49	; 73
    44c4:	6e 2d       	mov	r22, r14
    44c6:	7f 2d       	mov	r23, r15
    44c8:	8d 2d       	mov	r24, r13
    44ca:	9c 2d       	mov	r25, r12
    44cc:	0e 94 f8 2a 	call	0x55f0	; 0x55f0 <__gesf2>
    44d0:	18 16       	cp	r1, r24
    44d2:	34 f4       	brge	.+12     	; 0x44e0 <_Z4loopv+0x3ce>
    44d4:	38 01       	movw	r6, r16
					g_goertzel.SetTargetFrequency(x_frequencies[i]);    /*initialize library function with the given sampling frequency no of samples and target freq */
					magnitudeX = g_goertzel.Magnitude2();               /*check them for target_freq */

					if(magnitudeX > largestX)                           /*if you're getting false hits or no hits adjust the threshold */
					{
						largestX = magnitudeX;
    44d6:	5e 2c       	mov	r5, r14
    44d8:	4f 2c       	mov	r4, r15
    44da:	3d 2c       	mov	r3, r13
    44dc:	2c 2c       	mov	r2, r12
    44de:	04 c0       	rjmp	.+8      	; 0x44e8 <_Z4loopv+0x3d6>
    44e0:	5e 2c       	mov	r5, r14
    44e2:	4f 2c       	mov	r4, r15
    44e4:	3d 2c       	mov	r3, r13
    44e6:	2c 2c       	mov	r2, r12
#endif  /* DEBUG_DTMF */
			}

			if(y >= 0)
			{
				for(int i = 0; i < 4; i++)
    44e8:	0f 5f       	subi	r16, 0xFF	; 255
    44ea:	1f 4f       	sbci	r17, 0xFF	; 255
    44ec:	04 30       	cpi	r16, 0x04	; 4
    44ee:	11 05       	cpc	r17, r1
    44f0:	59 f6       	brne	.-106    	; 0x4488 <_Z4loopv+0x376>
							lb_send_string(g_tempStr, TRUE);
						}
#endif  /* DEBUG_DTMF */
				}

				if(x >= 0)
    44f2:	77 20       	and	r7, r7
    44f4:	0c f4       	brge	.+2      	; 0x44f8 <_Z4loopv+0x3e6>
    44f6:	71 c0       	rjmp	.+226    	; 0x45da <_Z4loopv+0x4c8>
				{
					char newKey = key[4 * y + x];
    44f8:	c4 01       	movw	r24, r8
    44fa:	88 0f       	add	r24, r24
    44fc:	99 1f       	adc	r25, r25
    44fe:	88 0f       	add	r24, r24
    4500:	99 1f       	adc	r25, r25
    4502:	85 58       	subi	r24, 0x85	; 133
    4504:	9d 4f       	sbci	r25, 0xFD	; 253
    4506:	fc 01       	movw	r30, r24
    4508:	e6 0d       	add	r30, r6
    450a:	f7 1d       	adc	r31, r7
    450c:	10 81       	ld	r17, Z

					if(lastKey == newKey)
    450e:	80 91 9d 04 	lds	r24, 0x049D	; 0x80049d <_ZZ4loopvE7lastKey>
    4512:	18 13       	cpse	r17, r24
    4514:	17 c0       	rjmp	.+46     	; 0x4544 <_Z4loopv+0x432>
					{
						checkCount++;
    4516:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_ZZ4loopvE10checkCount>
    451a:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <_ZZ4loopvE10checkCount+0x1>
    451e:	01 96       	adiw	r24, 0x01	; 1
    4520:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <_ZZ4loopvE10checkCount+0x1>
    4524:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_ZZ4loopvE10checkCount>

						if(checkCount == 3)
    4528:	03 97       	sbiw	r24, 0x03	; 3
    452a:	61 f4       	brne	.+24     	; 0x4544 <_Z4loopv+0x432>
						{
							g_dtmf_detected = TRUE;
    452c:	81 e0       	ldi	r24, 0x01	; 1
    452e:	80 93 69 05 	sts	0x0569, r24	; 0x800569 <g_dtmf_detected>
							quietCount = 0;
    4532:	10 92 9c 04 	sts	0x049C, r1	; 0x80049c <_ZZ4loopvE10quietCount+0x1>
    4536:	10 92 9b 04 	sts	0x049B, r1	; 0x80049b <_ZZ4loopvE10quietCount>
							g_lastKey = newKey;
    453a:	10 93 2b 05 	sts	0x052B, r17	; 0x80052b <g_lastKey>
									sprintf(g_tempStr, "\"%c\"\n", g_lastKey);
									lb_send_string(g_tempStr, TRUE);
								}
#endif  /* DEBUG_DTMF */

							processKey(newKey);
    453e:	81 2f       	mov	r24, r17
    4540:	0e 94 dc 1c 	call	0x39b8	; 0x39b8 <_Z10processKeyc>
								}
#endif  /* DEBUG_DTMF */
						}
					}

					lastKey = newKey;
    4544:	10 93 9d 04 	sts	0x049D, r17	; 0x80049d <_ZZ4loopvE7lastKey>
    4548:	48 c0       	rjmp	.+144    	; 0x45da <_Z4loopv+0x4c8>
				}
			}
			else    /* Quiet detected */
			{
				unsigned long delta = g_tick_count - g_last;
    454a:	c0 90 23 05 	lds	r12, 0x0523	; 0x800523 <g_tick_count>
    454e:	d0 90 24 05 	lds	r13, 0x0524	; 0x800524 <g_tick_count+0x1>
    4552:	e0 90 25 05 	lds	r14, 0x0525	; 0x800525 <g_tick_count+0x2>
    4556:	f0 90 26 05 	lds	r15, 0x0526	; 0x800526 <g_tick_count+0x3>
    455a:	80 90 27 05 	lds	r8, 0x0527	; 0x800527 <g_last>
    455e:	90 90 28 05 	lds	r9, 0x0528	; 0x800528 <g_last+0x1>
    4562:	a0 90 29 05 	lds	r10, 0x0529	; 0x800529 <g_last+0x2>
    4566:	b0 90 2a 05 	lds	r11, 0x052A	; 0x80052a <g_last+0x3>

				/* Quieting must be detected at least 3 times in less than 5 seconds before another key can be accepted */
				if(quietCount++ > 2)
    456a:	80 91 9b 04 	lds	r24, 0x049B	; 0x80049b <_ZZ4loopvE10quietCount>
    456e:	90 91 9c 04 	lds	r25, 0x049C	; 0x80049c <_ZZ4loopvE10quietCount+0x1>
    4572:	9c 01       	movw	r18, r24
    4574:	2f 5f       	subi	r18, 0xFF	; 255
    4576:	3f 4f       	sbci	r19, 0xFF	; 255
    4578:	30 93 9c 04 	sts	0x049C, r19	; 0x80049c <_ZZ4loopvE10quietCount+0x1>
    457c:	20 93 9b 04 	sts	0x049B, r18	; 0x80049b <_ZZ4loopvE10quietCount>
    4580:	03 97       	sbiw	r24, 0x03	; 3
    4582:	5c f1       	brlt	.+86     	; 0x45da <_Z4loopv+0x4c8>
				{
					g_dtmf_detected = FALSE;
    4584:	10 92 69 05 	sts	0x0569, r1	; 0x800569 <g_dtmf_detected>
					digitalWrite(PIN_LED1, OFF);
    4588:	60 e0       	ldi	r22, 0x00	; 0
    458a:	8d e0       	ldi	r24, 0x0D	; 13
    458c:	0e 94 6f 02 	call	0x4de	; 0x4de <_Z12digitalWritehh>

					if(delta < 1500)
    4590:	c8 18       	sub	r12, r8
    4592:	d9 08       	sbc	r13, r9
    4594:	ea 08       	sbc	r14, r10
    4596:	fb 08       	sbc	r15, r11
    4598:	fc ed       	ldi	r31, 0xDC	; 220
    459a:	cf 16       	cp	r12, r31
    459c:	f5 e0       	ldi	r31, 0x05	; 5
    459e:	df 06       	cpc	r13, r31
    45a0:	e1 04       	cpc	r14, r1
    45a2:	f1 04       	cpc	r15, r1
    45a4:	20 f4       	brcc	.+8      	; 0x45ae <_Z4loopv+0x49c>
					{
						checkCount = 0;
    45a6:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <_ZZ4loopvE10checkCount+0x1>
    45aa:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <_ZZ4loopvE10checkCount>
					}

					quietCount = 0;
    45ae:	10 92 9c 04 	sts	0x049C, r1	; 0x80049c <_ZZ4loopvE10quietCount+0x1>
    45b2:	10 92 9b 04 	sts	0x049B, r1	; 0x80049b <_ZZ4loopvE10quietCount>
					g_last = g_tick_count;
    45b6:	80 91 23 05 	lds	r24, 0x0523	; 0x800523 <g_tick_count>
    45ba:	90 91 24 05 	lds	r25, 0x0524	; 0x800524 <g_tick_count+0x1>
    45be:	a0 91 25 05 	lds	r26, 0x0525	; 0x800525 <g_tick_count+0x2>
    45c2:	b0 91 26 05 	lds	r27, 0x0526	; 0x800526 <g_tick_count+0x3>
    45c6:	80 93 27 05 	sts	0x0527, r24	; 0x800527 <g_last>
    45ca:	90 93 28 05 	sts	0x0528, r25	; 0x800528 <g_last+0x1>
    45ce:	a0 93 29 05 	sts	0x0529, r26	; 0x800529 <g_last+0x2>
    45d2:	b0 93 2a 05 	sts	0x052A, r27	; 0x80052a <g_last+0x3>
					lastKey = '\0';
    45d6:	10 92 9d 04 	sts	0x049D, r1	; 0x80049d <_ZZ4loopvE7lastKey>
				}
			}

			ADCSRA |= (1 << ADIE);  /* enable interrupts when measurement complete */
    45da:	ea e7       	ldi	r30, 0x7A	; 122
    45dc:	f0 e0       	ldi	r31, 0x00	; 0
    45de:	80 81       	ld	r24, Z
    45e0:	88 60       	ori	r24, 0x08	; 8
    45e2:	80 83       	st	Z, r24
			ADCSRA |= (1 << ADSC);  /* start ADC measurements */
    45e4:	80 81       	ld	r24, Z
    45e6:	80 64       	ori	r24, 0x40	; 64
    45e8:	80 83       	st	Z, r24
		}
#endif  /* !INIT_EEPROM_ONLY */

	BOOL hold_config_err = g_config_error;
    45ea:	10 91 5e 05 	lds	r17, 0x055E	; 0x80055e <g_config_error>
	if(!(g_config_error = clockConfigurationError()) && hold_config_err)
    45ee:	0e 94 b6 0c 	call	0x196c	; 0x196c <_Z23clockConfigurationErrorv>
    45f2:	80 93 5e 05 	sts	0x055E, r24	; 0x80055e <g_config_error>
    45f6:	81 11       	cpse	r24, r1
    45f8:	6d c0       	rjmp	.+218    	; 0x46d4 <_Z4loopv+0x5c2>
    45fa:	11 11       	cpse	r17, r1
    45fc:	67 c0       	rjmp	.+206    	; 0x46cc <_Z4loopv+0x5ba>
    45fe:	6a c0       	rjmp	.+212    	; 0x46d4 <_Z4loopv+0x5c2>
		}
		else
		{
			if(!id_set && (g_fox_seconds_into_interval == time_for_id)) /* Send the call sign at the right time */
			{
				g_code_throttle = THROTTLE_VAL_FROM_WPM(g_id_codespeed);
    4600:	60 91 19 01 	lds	r22, 0x0119	; 0x800119 <g_id_codespeed>
    4604:	70 e0       	ldi	r23, 0x00	; 0
    4606:	82 e8       	ldi	r24, 0x82	; 130
    4608:	9b e1       	ldi	r25, 0x1B	; 27
    460a:	0e 94 16 2c 	call	0x582c	; 0x582c <__divmodhi4>
    460e:	cb 01       	movw	r24, r22
    4610:	6a e0       	ldi	r22, 0x0A	; 10
    4612:	70 e0       	ldi	r23, 0x00	; 0
    4614:	0e 94 16 2c 	call	0x582c	; 0x582c <__divmodhi4>
    4618:	66 0f       	add	r22, r22
    461a:	77 1f       	adc	r23, r23
    461c:	70 93 ae 05 	sts	0x05AE, r23	; 0x8005ae <g_code_throttle+0x1>
    4620:	60 93 ad 05 	sts	0x05AD, r22	; 0x8005ad <g_code_throttle>
				BOOL repeat = FALSE;
    4624:	19 82       	std	Y+1, r1	; 0x01
				makeMorse(g_messages_text[STATION_ID], &repeat, NULL);
    4626:	40 e0       	ldi	r20, 0x00	; 0
    4628:	50 e0       	ldi	r21, 0x00	; 0
    462a:	be 01       	movw	r22, r28
    462c:	6f 5f       	subi	r22, 0xFF	; 255
    462e:	7f 4f       	sbci	r23, 0xFF	; 255
    4630:	88 e4       	ldi	r24, 0x48	; 72
    4632:	95 e0       	ldi	r25, 0x05	; 5
    4634:	0e 94 c5 25 	call	0x4b8a	; 0x4b8a <_Z9makeMorsePcPhS0_>
				id_set = TRUE;
    4638:	81 e0       	ldi	r24, 0x01	; 1
    463a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <_ZZ4loopvE6id_set>
				g_callsign_sent = FALSE;
    463e:	10 92 ac 05 	sts	0x05AC, r1	; 0x8005ac <g_callsign_sent>
    4642:	7c ce       	rjmp	.-776    	; 0x433c <_Z4loopv+0x22a>
			}
			else if((g_fox >= SPRINT_S1) && (g_fox <= SPRINT_DEMO))
    4644:	80 91 b0 05 	lds	r24, 0x05B0	; 0x8005b0 <g_fox>
    4648:	89 30       	cpi	r24, 0x09	; 9
    464a:	08 f0       	brcs	.+2      	; 0x464e <_Z4loopv+0x53c>
    464c:	6a ce       	rjmp	.-812    	; 0x4322 <_Z4loopv+0x210>
    464e:	76 ce       	rjmp	.-788    	; 0x433c <_Z4loopv+0x22a>
			{
				if(g_fox_transition)
    4650:	80 91 74 05 	lds	r24, 0x0574	; 0x800574 <g_fox_transition>
    4654:	81 11       	cpse	r24, r1
    4656:	6b ce       	rjmp	.-810    	; 0x432e <_Z4loopv+0x21c>
    4658:	71 ce       	rjmp	.-798    	; 0x433c <_Z4loopv+0x22a>

			if((g_fox == FOX_DEMO) || (g_fox == SPRINT_DEMO))
			{
				if((g_callsign_sent) && g_fox_transition)   /* Ensure we've begun the next minute before proceeding */
				{
					proceed = TRUE;
    465a:	81 e0       	ldi	r24, 0x01	; 1
    465c:	80 93 9e 04 	sts	0x049E, r24	; 0x80049e <_ZZ4loopvE7proceed>
    4660:	a5 ce       	rjmp	.-694    	; 0x43ac <_Z4loopv+0x29a>
					proceed = TRUE;
				}
			}
			else if((g_fox >= SPRINT_S1) && (g_fox <= SPRINT_F5) && g_callsign_sent)
			{
				g_on_the_air = FALSE;
    4662:	10 92 af 05 	sts	0x05AF, r1	; 0x8005af <g_on_the_air>
    4666:	a2 ce       	rjmp	.-700    	; 0x43ac <_Z4loopv+0x29a>
			}
			else if((g_fox != g_fox_counter) && g_callsign_sent)    /* Turn off transmissions during minutes when this fox should be silent */
    4668:	80 91 b0 05 	lds	r24, 0x05B0	; 0x8005b0 <g_fox>
    466c:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <g_fox_counter>
    4670:	30 91 21 01 	lds	r19, 0x0121	; 0x800121 <g_fox_counter+0x1>
    4674:	90 e0       	ldi	r25, 0x00	; 0
    4676:	82 17       	cp	r24, r18
    4678:	93 07       	cpc	r25, r19
    467a:	09 f0       	breq	.+2      	; 0x467e <_Z4loopv+0x56c>
    467c:	93 ce       	rjmp	.-730    	; 0x43a4 <_Z4loopv+0x292>
    467e:	96 ce       	rjmp	.-724    	; 0x43ac <_Z4loopv+0x29a>
			{
				g_on_the_air = FALSE;
    4680:	10 92 af 05 	sts	0x05AF, r1	; 0x8005af <g_on_the_air>
    4684:	93 ce       	rjmp	.-730    	; 0x43ac <_Z4loopv+0x29a>
    4686:	0f 2e       	mov	r0, r31
    4688:	fb e8       	ldi	r31, 0x8B	; 139
    468a:	af 2e       	mov	r10, r31
    468c:	f2 e0       	ldi	r31, 0x02	; 2
    468e:	bf 2e       	mov	r11, r31
    4690:	f0 2d       	mov	r31, r0

/***********************************************************************
 *  Here is the main loop
 ************************************************************************/
void loop()
{
    4692:	00 e0       	ldi	r16, 0x00	; 0
    4694:	10 e0       	ldi	r17, 0x00	; 0
    4696:	88 24       	eor	r8, r8
    4698:	8a 94       	dec	r8
    469a:	98 2c       	mov	r9, r8
    469c:	71 2c       	mov	r7, r1
    469e:	61 2c       	mov	r6, r1
    46a0:	51 2c       	mov	r5, r1
    46a2:	41 2c       	mov	r4, r1
    46a4:	bb ce       	rjmp	.-650    	; 0x441c <_Z4loopv+0x30a>
						lb_send_string(g_tempStr, TRUE);
					}
#endif  /* DEBUG_DTMF */
			}

			if(y >= 0)
    46a6:	99 20       	and	r9, r9
    46a8:	0c f4       	brge	.+2      	; 0x46ac <_Z4loopv+0x59a>
    46aa:	4f cf       	rjmp	.-354    	; 0x454a <_Z4loopv+0x438>
    46ac:	0f 2e       	mov	r0, r31
    46ae:	fb e9       	ldi	r31, 0x9B	; 155
    46b0:	af 2e       	mov	r10, r31
    46b2:	f2 e0       	ldi	r31, 0x02	; 2
    46b4:	bf 2e       	mov	r11, r31
    46b6:	f0 2d       	mov	r31, r0
    46b8:	00 e0       	ldi	r16, 0x00	; 0
    46ba:	10 e0       	ldi	r17, 0x00	; 0
    46bc:	66 24       	eor	r6, r6
    46be:	6a 94       	dec	r6
    46c0:	76 2c       	mov	r7, r6
    46c2:	51 2c       	mov	r5, r1
    46c4:	41 2c       	mov	r4, r1
    46c6:	31 2c       	mov	r3, r1
    46c8:	21 2c       	mov	r2, r1
    46ca:	de ce       	rjmp	.-580    	; 0x4488 <_Z4loopv+0x376>
#endif  /* !INIT_EEPROM_ONLY */

	BOOL hold_config_err = g_config_error;
	if(!(g_config_error = clockConfigurationError()) && hold_config_err)
	{
		digitalWrite(PIN_LED2, OFF);    /* ensure LED is off */
    46cc:	60 e0       	ldi	r22, 0x00	; 0
    46ce:	87 e0       	ldi	r24, 0x07	; 7
    46d0:	0e 94 6f 02 	call	0x4de	; 0x4de <_Z12digitalWritehh>
	}
}
    46d4:	0f 90       	pop	r0
    46d6:	df 91       	pop	r29
    46d8:	cf 91       	pop	r28
    46da:	1f 91       	pop	r17
    46dc:	0f 91       	pop	r16
    46de:	ff 90       	pop	r15
    46e0:	ef 90       	pop	r14
    46e2:	df 90       	pop	r13
    46e4:	cf 90       	pop	r12
    46e6:	bf 90       	pop	r11
    46e8:	af 90       	pop	r10
    46ea:	9f 90       	pop	r9
    46ec:	8f 90       	pop	r8
    46ee:	7f 90       	pop	r7
    46f0:	6f 90       	pop	r6
    46f2:	5f 90       	pop	r5
    46f4:	4f 90       	pop	r4
    46f6:	3f 90       	pop	r3
    46f8:	2f 90       	pop	r2
    46fa:	08 95       	ret

000046fc <main>:
	int main(void)
#else
	void setup()
#endif  /* COMPILE_FOR_ATMELSTUDIO7 */
{
	pinMode(PIN_LED1, OUTPUT);                                                                  /* The amber LED: This led blinks when off cycle and blinks with code when on cycle. */
    46fc:	61 e0       	ldi	r22, 0x01	; 1
    46fe:	8d e0       	ldi	r24, 0x0D	; 13
    4700:	0e 94 5f 01 	call	0x2be	; 0x2be <_Z7pinModehh>
	digitalWrite(PIN_LED1, OFF);
    4704:	60 e0       	ldi	r22, 0x00	; 0
    4706:	8d e0       	ldi	r24, 0x0D	; 13
    4708:	0e 94 6f 02 	call	0x4de	; 0x4de <_Z12digitalWritehh>

	pinMode(PIN_LED2, OUTPUT);
    470c:	61 e0       	ldi	r22, 0x01	; 1
    470e:	87 e0       	ldi	r24, 0x07	; 7
    4710:	0e 94 5f 01 	call	0x2be	; 0x2be <_Z7pinModehh>
	digitalWrite(PIN_LED2, OFF);
    4714:	60 e0       	ldi	r22, 0x00	; 0
    4716:	87 e0       	ldi	r24, 0x07	; 7
    4718:	0e 94 6f 02 	call	0x4de	; 0x4de <_Z12digitalWritehh>

	pinMode(PIN_CW_KEY_LOGIC, OUTPUT);  /* This pin is used to control the KEY line to the transmitter only active on cycle. */
    471c:	61 e0       	ldi	r22, 0x01	; 1
    471e:	8a e0       	ldi	r24, 0x0A	; 10
    4720:	0e 94 5f 01 	call	0x2be	; 0x2be <_Z7pinModehh>
	digitalWrite(PIN_CW_KEY_LOGIC, OFF);
    4724:	60 e0       	ldi	r22, 0x00	; 0
    4726:	8a e0       	ldi	r24, 0x0A	; 10
    4728:	0e 94 6f 02 	call	0x4de	; 0x4de <_Z12digitalWritehh>

	pinMode(PIN_CW_TONE_LOGIC, OUTPUT);
    472c:	61 e0       	ldi	r22, 0x01	; 1
    472e:	89 e0       	ldi	r24, 0x09	; 9
    4730:	0e 94 5f 01 	call	0x2be	; 0x2be <_Z7pinModehh>
	digitalWrite(PIN_CW_TONE_LOGIC, OFF);
    4734:	60 e0       	ldi	r22, 0x00	; 0
    4736:	89 e0       	ldi	r24, 0x09	; 9
    4738:	0e 94 6f 02 	call	0x4de	; 0x4de <_Z12digitalWritehh>

	pinMode(PIN_PTT_LOGIC, OUTPUT);
    473c:	61 e0       	ldi	r22, 0x01	; 1
    473e:	88 e0       	ldi	r24, 0x08	; 8
    4740:	0e 94 5f 01 	call	0x2be	; 0x2be <_Z7pinModehh>
	digitalWrite(PIN_PTT_LOGIC, OFF);
    4744:	60 e0       	ldi	r22, 0x00	; 0
    4746:	88 e0       	ldi	r24, 0x08	; 8
    4748:	0e 94 6f 02 	call	0x4de	; 0x4de <_Z12digitalWritehh>

	pinMode(PIN_AUDIO_INPUT, INPUT);    /* Receiver Audio sampling */
    474c:	60 e0       	ldi	r22, 0x00	; 0
    474e:	84 e1       	ldi	r24, 0x14	; 20
    4750:	0e 94 5f 01 	call	0x2be	; 0x2be <_Z7pinModehh>
	pinMode(PIN_BATTERY_LEVEL, INPUT);  /* Battery voltage level */
    4754:	60 e0       	ldi	r22, 0x00	; 0
    4756:	85 e1       	ldi	r24, 0x15	; 21
    4758:	0e 94 5f 01 	call	0x2be	; 0x2be <_Z7pinModehh>

	pinMode(PIN_MISO, INPUT_PULLUP);
    475c:	63 e0       	ldi	r22, 0x03	; 3
    475e:	8c e0       	ldi	r24, 0x0C	; 12
    4760:	0e 94 5f 01 	call	0x2be	; 0x2be <_Z7pinModehh>
	pinMode(PIN_MOSI, OUTPUT);
    4764:	61 e0       	ldi	r22, 0x01	; 1
    4766:	8b e0       	ldi	r24, 0x0B	; 11
    4768:	0e 94 5f 01 	call	0x2be	; 0x2be <_Z7pinModehh>
	digitalWrite(PIN_MOSI, OFF);
    476c:	60 e0       	ldi	r22, 0x00	; 0
    476e:	8b e0       	ldi	r24, 0x0B	; 11
    4770:	0e 94 6f 02 	call	0x4de	; 0x4de <_Z12digitalWritehh>

	pinMode(PIN_SYNC, INPUT_PULLUP);
    4774:	63 e0       	ldi	r22, 0x03	; 3
    4776:	84 e0       	ldi	r24, 0x04	; 4
    4778:	0e 94 5f 01 	call	0x2be	; 0x2be <_Z7pinModehh>

	pinMode(PIN_D0, OUTPUT);
    477c:	61 e0       	ldi	r22, 0x01	; 1
    477e:	8e e0       	ldi	r24, 0x0E	; 14
    4780:	0e 94 5f 01 	call	0x2be	; 0x2be <_Z7pinModehh>
	pinMode(PIN_D1, OUTPUT);
    4784:	61 e0       	ldi	r22, 0x01	; 1
    4786:	8f e0       	ldi	r24, 0x0F	; 15
    4788:	0e 94 5f 01 	call	0x2be	; 0x2be <_Z7pinModehh>
	pinMode(PIN_D2, OUTPUT);
    478c:	61 e0       	ldi	r22, 0x01	; 1
    478e:	80 e1       	ldi	r24, 0x10	; 16
    4790:	0e 94 5f 01 	call	0x2be	; 0x2be <_Z7pinModehh>
	pinMode(PIN_D3, OUTPUT);
    4794:	61 e0       	ldi	r22, 0x01	; 1
    4796:	81 e1       	ldi	r24, 0x11	; 17
    4798:	0e 94 5f 01 	call	0x2be	; 0x2be <_Z7pinModehh>
	pinMode(PIN_D4, OUTPUT);    /* Also RXD */
    479c:	61 e0       	ldi	r22, 0x01	; 1
    479e:	80 e0       	ldi	r24, 0x00	; 0
    47a0:	0e 94 5f 01 	call	0x2be	; 0x2be <_Z7pinModehh>
	pinMode(PIN_D5, OUTPUT);    /* Also TXD */
    47a4:	61 e0       	ldi	r22, 0x01	; 1
    47a6:	81 e0       	ldi	r24, 0x01	; 1
    47a8:	0e 94 5f 01 	call	0x2be	; 0x2be <_Z7pinModehh>

	pinMode(PIN_PWDN, OUTPUT);
    47ac:	61 e0       	ldi	r22, 0x01	; 1
    47ae:	86 e0       	ldi	r24, 0x06	; 6
    47b0:	0e 94 5f 01 	call	0x2be	; 0x2be <_Z7pinModehh>
	digitalWrite(PIN_PWDN, ON);
    47b4:	61 e0       	ldi	r22, 0x01	; 1
    47b6:	86 e0       	ldi	r24, 0x06	; 6
    47b8:	0e 94 6f 02 	call	0x4de	; 0x4de <_Z12digitalWritehh>

	/* Set unused pins as inputs pulled high */
	pinMode(A4, INPUT_PULLUP);
    47bc:	63 e0       	ldi	r22, 0x03	; 3
    47be:	82 e1       	ldi	r24, 0x12	; 18
    47c0:	0e 94 5f 01 	call	0x2be	; 0x2be <_Z7pinModehh>
	pinMode(A5, INPUT_PULLUP);
    47c4:	63 e0       	ldi	r22, 0x03	; 3
    47c6:	83 e1       	ldi	r24, 0x13	; 19
    47c8:	0e 94 5f 01 	call	0x2be	; 0x2be <_Z7pinModehh>

#if INIT_EEPROM_ONLY
		BOOL eepromErr = ee_mgr.initializeEEPROMVars(); /* Must happen after pins are configured due to I2C access */
#else
		i2c_init();
    47cc:	0e 94 e5 06 	call	0xdca	; 0xdca <_Z8i2c_initv>
		BOOL eepromErr = ee_mgr.readNonVols();
    47d0:	85 eb       	ldi	r24, 0xB5	; 181
    47d2:	95 e0       	ldi	r25, 0x05	; 5
    47d4:	0e 94 af 03 	call	0x75e	; 0x75e <_ZN13EepromManager11readNonVolsEv>
    47d8:	18 2f       	mov	r17, r24
		setUpAudioSampling(true);
    47da:	81 e0       	ldi	r24, 0x01	; 1
    47dc:	0e 94 df 12 	call	0x25be	; 0x25be <_Z18setUpAudioSamplingh>
#endif

	/*******************************************************************
	 * INT0 is for external 1-second interrupts                         */
	EICRA  |= (1 << ISC01); /* Configure INT0 falling edge for RTC 1-second interrupts */
    47e0:	e9 e6       	ldi	r30, 0x69	; 105
    47e2:	f0 e0       	ldi	r31, 0x00	; 0
    47e4:	80 81       	ld	r24, Z
    47e6:	82 60       	ori	r24, 0x02	; 2
    47e8:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0);   /* Enable INT0 interrupts */
    47ea:	e8 9a       	sbi	0x1d, 0	; 29


	/*******************************************************************
	 * TIMER2 is for periodic interrupts to drive Morse code generation
	 * Reset control registers */
	TCCR2A = 0;
    47ec:	a0 eb       	ldi	r26, 0xB0	; 176
    47ee:	b0 e0       	ldi	r27, 0x00	; 0
    47f0:	1c 92       	st	X, r1
	TCCR2B = 0;
    47f2:	e1 eb       	ldi	r30, 0xB1	; 177
    47f4:	f0 e0       	ldi	r31, 0x00	; 0
    47f6:	10 82       	st	Z, r1
	TCCR2A |= (1 << WGM21);                             /* set Clear Timer on Compare Match (CTC) mode with OCR2A setting the top */
    47f8:	8c 91       	ld	r24, X
    47fa:	82 60       	ori	r24, 0x02	; 2
    47fc:	8c 93       	st	X, r24
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);  /* 1024 Prescaler */
    47fe:	80 81       	ld	r24, Z
    4800:	87 60       	ori	r24, 0x07	; 7
    4802:	80 83       	st	Z, r24

	OCR2A = 0x0C;                                       /* set frequency to ~300 Hz (0x0c) */
    4804:	8c e0       	ldi	r24, 0x0C	; 12
    4806:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	OCR2B = 0x00;
    480a:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
	/* Use system clock for Timer/Counter2 */
	ASSR &= ~(1 << AS2);
    480e:	e6 eb       	ldi	r30, 0xB6	; 182
    4810:	f0 e0       	ldi	r31, 0x00	; 0
    4812:	80 81       	ld	r24, Z
    4814:	8f 7d       	andi	r24, 0xDF	; 223
    4816:	80 83       	st	Z, r24
	/* Reset Timer/Counter2 Interrupt Mask Register */
	TIMSK2 = 0;
    4818:	e0 e7       	ldi	r30, 0x70	; 112
    481a:	f0 e0       	ldi	r31, 0x00	; 0
    481c:	10 82       	st	Z, r1
	TIMSK2 |= (1 << OCIE2B);                    /* Output Compare Match B Interrupt Enable */
    481e:	80 81       	ld	r24, Z
    4820:	84 60       	ori	r24, 0x04	; 4
    4822:	80 83       	st	Z, r24

	/*******************************************************************
	 * Timer 1 is used for controlling the attenuator for AM generation
	 * set timer1 interrupt at 16 kHz */

	TCCR1A = 0;                                 /* set entire TCCR1A register to 0 */
    4824:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = 0;                                 /* same for TCCR1B */
    4828:	c1 e8       	ldi	r28, 0x81	; 129
    482a:	d0 e0       	ldi	r29, 0x00	; 0
    482c:	18 82       	st	Y, r1
	TCNT1 = 0;                                  /* initialize counter value to 0 */
    482e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    4832:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	setAMToneFrequency(g_AM_audio_frequency);   /* For attenuator tone output */
    4836:	80 91 9c 05 	lds	r24, 0x059C	; 0x80059c <g_AM_audio_frequency>
    483a:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <_Z18setAMToneFrequencyh>
/* turn on CTC mode */
	TCCR1B |= (1 << WGM12);
    483e:	88 81       	ld	r24, Y
    4840:	88 60       	ori	r24, 0x08	; 8
    4842:	88 83       	st	Y, r24
/* Set CS10 bit for no prescaling */
	TCCR1B |= (1 << CS10);
    4844:	88 81       	ld	r24, Y
    4846:	81 60       	ori	r24, 0x01	; 1
    4848:	88 83       	st	Y, r24


	/********************************************************************/
	/* Timer 0 is for audio Start tone generation and control
	 * Note: Do not use millis() or DELAY() after TIMER0 has been reconfigured here! */
	TCCR0A = 0x00;
    484a:	14 bc       	out	0x24, r1	; 36
	TCCR0A |= (1 << WGM01); /* Set CTC mode */
    484c:	84 b5       	in	r24, 0x24	; 36
    484e:	82 60       	ori	r24, 0x02	; 2
    4850:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0x00;
    4852:	15 bc       	out	0x25, r1	; 37
	TCCR0B |= (1 << CS02);  /* Prescale 256 */
    4854:	85 b5       	in	r24, 0x25	; 37
    4856:	84 60       	ori	r24, 0x04	; 4
    4858:	85 bd       	out	0x25, r24	; 37
	OCR0A = DEFAULT_TONE_FREQUENCY;
    485a:	8f e2       	ldi	r24, 0x2F	; 47
    485c:	87 bd       	out	0x27, r24	; 39
	TIMSK0 = 0x00;
    485e:	ee e6       	ldi	r30, 0x6E	; 110
    4860:	f0 e0       	ldi	r31, 0x00	; 0
    4862:	10 82       	st	Z, r1
	TIMSK0 |= (1 << OCIE0A);
    4864:	80 81       	ld	r24, Z
    4866:	82 60       	ori	r24, 0x02	; 2
    4868:	80 83       	st	Z, r24

	/*******************************************************************
	 * Sync button pin change interrupt */
	PCMSK2 = 0x00;
    486a:	ed e6       	ldi	r30, 0x6D	; 109
    486c:	f0 e0       	ldi	r31, 0x00	; 0
    486e:	10 82       	st	Z, r1
	PCMSK2 = (1 << PCINT20);    /* Enable PCINT20 */
    4870:	80 e1       	ldi	r24, 0x10	; 16
    4872:	80 83       	st	Z, r24
	PCICR = 0x00;
    4874:	e8 e6       	ldi	r30, 0x68	; 104
    4876:	f0 e0       	ldi	r31, 0x00	; 0
    4878:	10 82       	st	Z, r1
	PCICR = (1 << PCIE2);       /* Enable pin change interrupt 2 */
    487a:	84 e0       	ldi	r24, 0x04	; 4
    487c:	80 83       	st	Z, r24
	sei();                      /* Enable interrupts */
    487e:	78 94       	sei

	linkbus_init(BAUD);         /* Start the Link Bus serial comms */
    4880:	60 e0       	ldi	r22, 0x00	; 0
    4882:	71 ee       	ldi	r23, 0xE1	; 225
    4884:	80 e0       	ldi	r24, 0x00	; 0
    4886:	90 e0       	ldi	r25, 0x00	; 0
    4888:	0e 94 2b 09 	call	0x1256	; 0x1256 <_Z12linkbus_initm>
			lb_send_string((char*)"EEPROM Erase Error!\n", TRUE);
		}
		ee_mgr.dumpEEPROMVars();
		rv3028_1s_sqw();
#else
		if(eepromErr)
    488c:	11 23       	and	r17, r17
    488e:	29 f0       	breq	.+10     	; 0x489a <main+0x19e>
		{
			lb_send_string((char*)"EEPROM Error!\n", TRUE);
    4890:	61 e0       	ldi	r22, 0x01	; 1
    4892:	88 e2       	ldi	r24, 0x28	; 40
    4894:	92 e0       	ldi	r25, 0x02	; 2
    4896:	0e 94 c6 09 	call	0x138c	; 0x138c <_Z14lb_send_stringPch>
		}
		uint8_t result = rv3028_1s_sqw();
    489a:	0e 94 bf 28 	call	0x517e	; 0x517e <_Z13rv3028_1s_sqwv>
    489e:	c8 2f       	mov	r28, r24
#endif  /* !INIT_EEPROM_ONLY */

	/*g_current_epoch = rv3028_get_epoch(NULL, NULL); */
	g_current_epoch = rv3028_get_epoch();
    48a0:	0e 94 2f 27 	call	0x4e5e	; 0x4e5e <_Z16rv3028_get_epochv>
    48a4:	60 93 a7 05 	sts	0x05A7, r22	; 0x8005a7 <g_current_epoch>
    48a8:	70 93 a8 05 	sts	0x05A8, r23	; 0x8005a8 <g_current_epoch+0x1>
    48ac:	80 93 a9 05 	sts	0x05A9, r24	; 0x8005a9 <g_current_epoch+0x2>
    48b0:	90 93 aa 05 	sts	0x05AA, r25	; 0x8005aa <g_current_epoch+0x3>

#if !INIT_EEPROM_ONLY
		ee_mgr.send_Help();
    48b4:	85 eb       	ldi	r24, 0xB5	; 181
    48b6:	95 e0       	ldi	r25, 0x05	; 5
    48b8:	0e 94 9f 04 	call	0x93e	; 0x93e <_ZN13EepromManager9send_HelpEv>

		if(result & (1 << RTC_STATUS_I2C_ERROR))
    48bc:	cc 23       	and	r28, r28
    48be:	54 f4       	brge	.+20     	; 0x48d4 <main+0x1d8>
		{
			sprintf(g_tempStr, "Err 1\n");
    48c0:	87 e0       	ldi	r24, 0x07	; 7
    48c2:	e7 e3       	ldi	r30, 0x37	; 55
    48c4:	f2 e0       	ldi	r31, 0x02	; 2
    48c6:	aa ef       	ldi	r26, 0xFA	; 250
    48c8:	b4 e0       	ldi	r27, 0x04	; 4
    48ca:	01 90       	ld	r0, Z+
    48cc:	0d 92       	st	X+, r0
    48ce:	8a 95       	dec	r24
    48d0:	e1 f7       	brne	.-8      	; 0x48ca <main+0x1ce>
    48d2:	23 c0       	rjmp	.+70     	; 0x491a <main+0x21e>
		}
		else if(result & (1 << RTC_STATUS_CLOCK_CORRUPT))   /* Power off occurred with no backup power */
    48d4:	c0 ff       	sbrs	r28, 0
    48d6:	0a c0       	rjmp	.+20     	; 0x48ec <main+0x1f0>
		{
			sprintf(g_tempStr, "Err 2\n");
    48d8:	87 e0       	ldi	r24, 0x07	; 7
    48da:	ee e3       	ldi	r30, 0x3E	; 62
    48dc:	f2 e0       	ldi	r31, 0x02	; 2
    48de:	aa ef       	ldi	r26, 0xFA	; 250
    48e0:	b4 e0       	ldi	r27, 0x04	; 4
    48e2:	01 90       	ld	r0, Z+
    48e4:	0d 92       	st	X+, r0
    48e6:	8a 95       	dec	r24
    48e8:	e1 f7       	brne	.-8      	; 0x48e2 <main+0x1e6>
    48ea:	17 c0       	rjmp	.+46     	; 0x491a <main+0x21e>
		}
		else if(result & (1 << RTC_STATUS_EVF_OCCURRED))
    48ec:	c1 ff       	sbrs	r28, 1
    48ee:	0a c0       	rjmp	.+20     	; 0x4904 <main+0x208>
		{
			sprintf(g_tempStr, "Err 3\n");
    48f0:	87 e0       	ldi	r24, 0x07	; 7
    48f2:	e5 e4       	ldi	r30, 0x45	; 69
    48f4:	f2 e0       	ldi	r31, 0x02	; 2
    48f6:	aa ef       	ldi	r26, 0xFA	; 250
    48f8:	b4 e0       	ldi	r27, 0x04	; 4
    48fa:	01 90       	ld	r0, Z+
    48fc:	0d 92       	st	X+, r0
    48fe:	8a 95       	dec	r24
    4900:	e1 f7       	brne	.-8      	; 0x48fa <main+0x1fe>
    4902:	0b c0       	rjmp	.+22     	; 0x491a <main+0x21e>
		}
		else if(result & (1 << RTC_STATUS_BACKUP_SWITCHOVER_OCCURRED))
    4904:	c5 ff       	sbrs	r28, 5
    4906:	09 c0       	rjmp	.+18     	; 0x491a <main+0x21e>
		{
			sprintf(g_tempStr, "RTC OK\n");
    4908:	88 e0       	ldi	r24, 0x08	; 8
    490a:	ec e4       	ldi	r30, 0x4C	; 76
    490c:	f2 e0       	ldi	r31, 0x02	; 2
    490e:	aa ef       	ldi	r26, 0xFA	; 250
    4910:	b4 e0       	ldi	r27, 0x04	; 4
    4912:	01 90       	ld	r0, Z+
    4914:	0d 92       	st	X+, r0
    4916:	8a 95       	dec	r24
    4918:	e1 f7       	brne	.-8      	; 0x4912 <main+0x216>
		}

		if(strlen(g_tempStr))
    491a:	80 91 fa 04 	lds	r24, 0x04FA	; 0x8004fa <g_tempStr>
    491e:	88 23       	and	r24, r24
    4920:	29 f0       	breq	.+10     	; 0x492c <main+0x230>
		{
			lb_send_string(g_tempStr, TRUE);
    4922:	61 e0       	ldi	r22, 0x01	; 1
    4924:	8a ef       	ldi	r24, 0xFA	; 250
    4926:	94 e0       	ldi	r25, 0x04	; 4
    4928:	0e 94 c6 09 	call	0x138c	; 0x138c <_Z14lb_send_stringPch>
		}

		reportConfigErrors();
    492c:	0e 94 85 13 	call	0x270a	; 0x270a <_Z18reportConfigErrorsv>
		lb_send_NewPrompt();
    4930:	0e 94 a6 09 	call	0x134c	; 0x134c <_Z17lb_send_NewPromptv>
		TIMSK1 |= (1 << OCIE1A);    /* start timer 1 interrupts */
    4934:	ef e6       	ldi	r30, 0x6F	; 111
    4936:	f0 e0       	ldi	r31, 0x00	; 0
    4938:	80 81       	ld	r24, Z
    493a:	82 60       	ori	r24, 0x02	; 2
    493c:	80 83       	st	Z, r24

#endif  /* #if INIT_EEPROM_ONLY */

	setupForFox(NULL);
    493e:	80 e0       	ldi	r24, 0x00	; 0
    4940:	90 e0       	ldi	r25, 0x00	; 0
    4942:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <_Z11setupForFoxP5Fox_t>
	g_use_rtc_to_start = !clockConfigurationError() && g_transmissions_disabled;
    4946:	0e 94 b6 0c 	call	0x196c	; 0x196c <_Z23clockConfigurationErrorv>
    494a:	81 11       	cpse	r24, r1
    494c:	07 c0       	rjmp	.+14     	; 0x495c <main+0x260>
    494e:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <g_transmissions_disabled>
    4952:	81 e0       	ldi	r24, 0x01	; 1
    4954:	91 11       	cpse	r25, r1
    4956:	03 c0       	rjmp	.+6      	; 0x495e <main+0x262>
    4958:	80 e0       	ldi	r24, 0x00	; 0
    495a:	01 c0       	rjmp	.+2      	; 0x495e <main+0x262>
    495c:	80 e0       	ldi	r24, 0x00	; 0
    495e:	80 93 5d 05 	sts	0x055D, r24	; 0x80055d <g_use_rtc_to_start>

#if COMPILE_FOR_ATMELSTUDIO7
		while(1)
		{
			loop();
    4962:	0e 94 89 20 	call	0x4112	; 0x4112 <_Z4loopv>
    4966:	fd cf       	rjmp	.-6      	; 0x4962 <main+0x266>

00004968 <_GLOBAL__sub_I_ee_mgr>:
			value = 1;
			OCR1A = 500;    /* For ~1000 Hz tone output */
		}
		break;
	}
}
    4968:	0f 93       	push	r16
    496a:	1f 93       	push	r17
#include <stdlib.h>
#include <math.h>
#include "ardooweeno.h"
#endif  /* COMPILE_FOR_ATMELSTUDIO7 */

EepromManager ee_mgr;
    496c:	85 eb       	ldi	r24, 0xB5	; 181
    496e:	95 e0       	ldi	r25, 0x05	; 5
    4970:	0e 94 ce 02 	call	0x59c	; 0x59c <_ZN13EepromManagerC1Ev>
char g_lastKey = '\0';
unsigned long g_last = 0;
unsigned long g_tick_count = 0;

#if !INIT_EEPROM_ONLY
	Goertzel g_goertzel(N, sampling_freq);
    4974:	00 e0       	ldi	r16, 0x00	; 0
    4976:	18 e7       	ldi	r17, 0x78	; 120
    4978:	26 e9       	ldi	r18, 0x96	; 150
    497a:	36 e4       	ldi	r19, 0x46	; 70
    497c:	40 e0       	ldi	r20, 0x00	; 0
    497e:	50 e0       	ldi	r21, 0x00	; 0
    4980:	69 e4       	ldi	r22, 0x49	; 73
    4982:	73 e4       	ldi	r23, 0x43	; 67
    4984:	82 e2       	ldi	r24, 0x22	; 34
    4986:	95 e0       	ldi	r25, 0x05	; 5
    4988:	0e 94 13 05 	call	0xa26	; 0xa26 <_ZN8GoertzelC1Eff>
			value = 1;
			OCR1A = 500;    /* For ~1000 Hz tone output */
		}
		break;
	}
}
    498c:	1f 91       	pop	r17
    498e:	0f 91       	pop	r16
    4990:	08 95       	ret

00004992 <_GLOBAL__sub_D_ee_mgr>:
char g_lastKey = '\0';
unsigned long g_last = 0;
unsigned long g_tick_count = 0;

#if !INIT_EEPROM_ONLY
	Goertzel g_goertzel(N, sampling_freq);
    4992:	82 e2       	ldi	r24, 0x22	; 34
    4994:	95 e0       	ldi	r25, 0x05	; 5
    4996:	0e 94 61 05 	call	0xac2	; 0xac2 <_ZN8GoertzelD1Ev>
#include <stdlib.h>
#include <math.h>
#include "ardooweeno.h"
#endif  /* COMPILE_FOR_ATMELSTUDIO7 */

EepromManager ee_mgr;
    499a:	85 eb       	ldi	r24, 0xB5	; 181
    499c:	95 e0       	ldi	r25, 0x05	; 5
    499e:	0e 94 cf 02 	call	0x59e	; 0x59e <_ZN13EepromManagerD1Ev>
    49a2:	08 95       	ret

000049a4 <_Z12getMorseCharc>:
 */
MorseCharacter getMorseChar(char c)
{
	MorseCharacter morse;

	switch( c )
    49a4:	90 e0       	ldi	r25, 0x00	; 0
    49a6:	fc 01       	movw	r30, r24
    49a8:	b0 97       	sbiw	r30, 0x20	; 32
    49aa:	ed 35       	cpi	r30, 0x5D	; 93
    49ac:	f1 05       	cpc	r31, r1
    49ae:	08 f0       	brcs	.+2      	; 0x49b2 <_Z12getMorseCharc+0xe>
    49b0:	e4 c0       	rjmp	.+456    	; 0x4b7a <_Z12getMorseCharc+0x1d6>
    49b2:	ea 55       	subi	r30, 0x5A	; 90
    49b4:	ff 4f       	sbci	r31, 0xFF	; 255
    49b6:	0c 94 6b 2c 	jmp	0x58d6	; 0x58d6 <__tablejump2__>

		case 'B':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
    49ba:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'B':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 4;
    49bc:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'B':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    49be:	61 e0       	ldi	r22, 0x01	; 1
    49c0:	08 95       	ret

		case 'C':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
    49c2:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'C':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
			morse.lengthInSymbols = 4;
    49c4:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'C':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
    49c6:	65 e0       	ldi	r22, 0x05	; 5
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
		}
		break;
    49c8:	08 95       	ret

		case 'D':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
    49ca:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'D':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 3;
    49cc:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'D':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    49ce:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
		}
		break;
    49d0:	08 95       	ret

		case 'E':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 1;
			morse.lengthInElements = 1;
    49d2:	81 e0       	ldi	r24, 0x01	; 1
		break;

		case 'E':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 1;
    49d4:	71 e0       	ldi	r23, 0x01	; 1
		}
		break;

		case 'E':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    49d6:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 1;
			morse.lengthInElements = 1;
		}
		break;
    49d8:	08 95       	ret

		case 'F':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
    49da:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'F':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
			morse.lengthInSymbols = 4;
    49dc:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'F':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
    49de:	64 e0       	ldi	r22, 0x04	; 4
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
		}
		break;
    49e0:	08 95       	ret

		case 'G':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
    49e2:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'G':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 3;
    49e4:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'G':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    49e6:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
		}
		break;
    49e8:	08 95       	ret

		case 'H':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 7;
    49ea:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'H':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 4;
    49ec:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'H':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    49ee:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 7;
		}
		break;
    49f0:	08 95       	ret

		case 'I':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 3;
    49f2:	83 e0       	ldi	r24, 0x03	; 3
		break;

		case 'I':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 2;
    49f4:	72 e0       	ldi	r23, 0x02	; 2
		}
		break;

		case 'I':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    49f6:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 3;
		}
		break;
    49f8:	08 95       	ret

		case 'J':
		{
			morse.pattern = 0x0e;   /* 0000 1110; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
    49fa:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case 'J':
		{
			morse.pattern = 0x0e;   /* 0000 1110; */
			morse.lengthInSymbols = 4;
    49fc:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'J':
		{
			morse.pattern = 0x0e;   /* 0000 1110; */
    49fe:	6e e0       	ldi	r22, 0x0E	; 14
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
		}
		break;
    4a00:	08 95       	ret

		case 'K':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
    4a02:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'K':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
			morse.lengthInSymbols = 3;
    4a04:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'K':
		{
			morse.pattern = 0x05;   /* 0000 0101; */
    4a06:	65 e0       	ldi	r22, 0x05	; 5
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
		}
		break;
    4a08:	08 95       	ret

		case 'L':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
    4a0a:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'L':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 4;
    4a0c:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'L':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    4a0e:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
		}
		break;
    4a10:	08 95       	ret

		case 'M':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 7;
    4a12:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'M':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 2;
    4a14:	72 e0       	ldi	r23, 0x02	; 2
		}
		break;

		case 'M':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    4a16:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 7;
		}
		break;
    4a18:	08 95       	ret

		case 'N':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 5;
    4a1a:	85 e0       	ldi	r24, 0x05	; 5
		break;

		case 'N':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 2;
    4a1c:	72 e0       	ldi	r23, 0x02	; 2
		}
		break;

		case 'N':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    4a1e:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 5;
		}
		break;
    4a20:	08 95       	ret

		case 'O':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 11;
    4a22:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'O':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 3;
    4a24:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'O':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    4a26:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 11;
		}
		break;
    4a28:	08 95       	ret

		case 'P':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
    4a2a:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'P':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
			morse.lengthInSymbols = 4;
    4a2c:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'P':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
    4a2e:	66 e0       	ldi	r22, 0x06	; 6
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
		}
		break;
    4a30:	08 95       	ret

		case 'Q':
		{
			morse.pattern = 0x0b;   /* 0000 1011; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
    4a32:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case 'Q':
		{
			morse.pattern = 0x0b;   /* 0000 1011; */
			morse.lengthInSymbols = 4;
    4a34:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'Q':
		{
			morse.pattern = 0x0b;   /* 0000 1011; */
    4a36:	6b e0       	ldi	r22, 0x0B	; 11
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
		}
		break;
    4a38:	08 95       	ret

		case 'R':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
    4a3a:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'R':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 3;
    4a3c:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'R':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    4a3e:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
		}
		break;
    4a40:	08 95       	ret

		case 'S':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 5;
    4a42:	85 e0       	ldi	r24, 0x05	; 5
		break;

		case 'S':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 3;
    4a44:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'S':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    4a46:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 5;
		}
		break;
    4a48:	08 95       	ret

		case 'T':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 1;
			morse.lengthInElements = 3;
    4a4a:	83 e0       	ldi	r24, 0x03	; 3
		break;

		case 'T':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 1;
    4a4c:	71 e0       	ldi	r23, 0x01	; 1
		}
		break;

		case 'T':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    4a4e:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 1;
			morse.lengthInElements = 3;
		}
		break;
    4a50:	08 95       	ret

		case 'U':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
    4a52:	87 e0       	ldi	r24, 0x07	; 7
		break;

		case 'U':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
			morse.lengthInSymbols = 3;
    4a54:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'U':
		{
			morse.pattern = 0x04;   /* 0000 0100; */
    4a56:	64 e0       	ldi	r22, 0x04	; 4
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 7;
		}
		break;
    4a58:	08 95       	ret

		case 'V':
		{
			morse.pattern = 0x08;   /* 0000 1000; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
    4a5a:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'V':
		{
			morse.pattern = 0x08;   /* 0000 1000; */
			morse.lengthInSymbols = 4;
    4a5c:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'V':
		{
			morse.pattern = 0x08;   /* 0000 1000; */
    4a5e:	68 e0       	ldi	r22, 0x08	; 8
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 9;
		}
		break;
    4a60:	08 95       	ret

		case 'W':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
    4a62:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case 'W':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
			morse.lengthInSymbols = 3;
    4a64:	73 e0       	ldi	r23, 0x03	; 3
		}
		break;

		case 'W':
		{
			morse.pattern = 0x06;   /* 0000 0110; */
    4a66:	66 e0       	ldi	r22, 0x06	; 6
			morse.lengthInSymbols = 3;
			morse.lengthInElements = 9;
		}
		break;
    4a68:	08 95       	ret

		case 'X':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
    4a6a:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'X':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
			morse.lengthInSymbols = 4;
    4a6c:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'X':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
    4a6e:	69 e0       	ldi	r22, 0x09	; 9
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
		}
		break;
    4a70:	08 95       	ret

		case 'Y':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
    4a72:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case 'Y':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
			morse.lengthInSymbols = 4;
    4a74:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'Y':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
    4a76:	6d e0       	ldi	r22, 0x0D	; 13
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 13;
		}
		break;
    4a78:	08 95       	ret

		case 'Z':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
    4a7a:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case 'Z':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 4;
    4a7c:	74 e0       	ldi	r23, 0x04	; 4
		}
		break;

		case 'Z':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    4a7e:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 4;
			morse.lengthInElements = 11;
		}
		break;
    4a80:	08 95       	ret

		case '0':
		{
			morse.pattern = 0x1f;   /* 0001 1111; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 19;
    4a82:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case '0':
		{
			morse.pattern = 0x1f;   /* 0001 1111; */
			morse.lengthInSymbols = 5;
    4a84:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '0':
		{
			morse.pattern = 0x1f;   /* 0001 1111; */
    4a86:	6f e1       	ldi	r22, 0x1F	; 31
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 19;
		}
		break;
    4a88:	08 95       	ret

		case '1':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 17;
    4a8a:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '1':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
			morse.lengthInSymbols = 5;
    4a8c:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '1':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
    4a8e:	6e e1       	ldi	r22, 0x1E	; 30
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 17;
		}
		break;
    4a90:	08 95       	ret

		case '2':
		{
			morse.pattern = 0x1c;   /* 0001 1100; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
    4a92:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '2':
		{
			morse.pattern = 0x1c;   /* 0001 1100; */
			morse.lengthInSymbols = 5;
    4a94:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '2':
		{
			morse.pattern = 0x1c;   /* 0001 1100; */
    4a96:	6c e1       	ldi	r22, 0x1C	; 28
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
		}
		break;
    4a98:	08 95       	ret

		case '3':
		{
			morse.pattern = 0x18;   /* 0001 1000; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    4a9a:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '3':
		{
			morse.pattern = 0x18;   /* 0001 1000; */
			morse.lengthInSymbols = 5;
    4a9c:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '3':
		{
			morse.pattern = 0x18;   /* 0001 1000; */
    4a9e:	68 e1       	ldi	r22, 0x18	; 24
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    4aa0:	08 95       	ret

		case '4':
		{
			morse.pattern = 0x10;   /* 0001 0000; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
    4aa2:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case '4':
		{
			morse.pattern = 0x10;   /* 0001 0000; */
			morse.lengthInSymbols = 5;
    4aa4:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '4':
		{
			morse.pattern = 0x10;   /* 0001 0000; */
    4aa6:	60 e1       	ldi	r22, 0x10	; 16
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
		}
		break;
    4aa8:	08 95       	ret

		case '5':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 9;
    4aaa:	89 e0       	ldi	r24, 0x09	; 9
		break;

		case '5':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
			morse.lengthInSymbols = 5;
    4aac:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '5':
		{
			morse.pattern = 0x00;   /* 0000 0000; */
    4aae:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 9;
		}
		break;
    4ab0:	08 95       	ret

		case '6':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
    4ab2:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case '6':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
			morse.lengthInSymbols = 5;
    4ab4:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '6':
		{
			morse.pattern = 0x01;   /* 0000 0001; */
    4ab6:	61 e0       	ldi	r22, 0x01	; 1
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
		}
		break;
    4ab8:	08 95       	ret

		case '7':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    4aba:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '7':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
			morse.lengthInSymbols = 5;
    4abc:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '7':
		{
			morse.pattern = 0x03;   /* 0000 0011; */
    4abe:	63 e0       	ldi	r22, 0x03	; 3
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    4ac0:	08 95       	ret

		case '8':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
    4ac2:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '8':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 5;
    4ac4:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '8':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    4ac6:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
		}
		break;
    4ac8:	08 95       	ret

		case '9':
		{
			morse.pattern = 0x0f;   /* 0000 1111; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 17;
    4aca:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '9':
		{
			morse.pattern = 0x0f;   /* 0000 1111; */
			morse.lengthInSymbols = 5;
    4acc:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '9':
		{
			morse.pattern = 0x0f;   /* 0000 1111; */
    4ace:	6f e0       	ldi	r22, 0x0F	; 15
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 17;
		}
		break;
    4ad0:	08 95       	ret

		case '.':
		{
			morse.pattern = 0x2a;   /* 0010 1010; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
    4ad2:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '.':
		{
			morse.pattern = 0x2a;   /* 0010 1010; */
			morse.lengthInSymbols = 6;
    4ad4:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '.':
		{
			morse.pattern = 0x2a;   /* 0010 1010; */
    4ad6:	6a e2       	ldi	r22, 0x2A	; 42
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
		}
		break;
    4ad8:	08 95       	ret

		case ',':
		{
			morse.pattern = 0x33;   /* 0011 0011; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
    4ada:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case ',':
		{
			morse.pattern = 0x33;   /* 0011 0011; */
			morse.lengthInSymbols = 6;
    4adc:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case ',':
		{
			morse.pattern = 0x33;   /* 0011 0011; */
    4ade:	63 e3       	ldi	r22, 0x33	; 51
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
		}
		break;
    4ae0:	08 95       	ret

		case '?':
		{
			morse.pattern = 0x0c;   /* 0000 1100; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
    4ae2:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '?':
		{
			morse.pattern = 0x0c;   /* 0000 1100; */
			morse.lengthInSymbols = 6;
    4ae4:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '?':
		{
			morse.pattern = 0x0c;   /* 0000 1100; */
    4ae6:	6c e0       	ldi	r22, 0x0C	; 12
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
		}
		break;
    4ae8:	08 95       	ret

		case '\'':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
    4aea:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case '\'':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
			morse.lengthInSymbols = 6;
    4aec:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '\'':
		{
			morse.pattern = 0x1e;   /* 0001 1110; */
    4aee:	6e e1       	ldi	r22, 0x1E	; 30
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
		}
		break;
    4af0:	08 95       	ret

		case '!':
		{
			morse.pattern = 0x35;   /* 0011 0101; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
    4af2:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case '!':
		{
			morse.pattern = 0x35;   /* 0011 0101; */
			morse.lengthInSymbols = 6;
    4af4:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '!':
		{
			morse.pattern = 0x35;   /* 0011 0101; */
    4af6:	65 e3       	ldi	r22, 0x35	; 53
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
		}
		break;
    4af8:	08 95       	ret

		case '/':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    4afa:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '/':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
			morse.lengthInSymbols = 5;
    4afc:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '/':
		{
			morse.pattern = 0x09;   /* 0000 1001; */
    4afe:	69 e0       	ldi	r22, 0x09	; 9
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    4b00:	08 95       	ret

		case '(':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
    4b02:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '(':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
			morse.lengthInSymbols = 5;
    4b04:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '(':
		{
			morse.pattern = 0x0d;   /* 0000 1101; */
    4b06:	6d e0       	ldi	r22, 0x0D	; 13
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 15;
		}
		break;
    4b08:	08 95       	ret

		case ')':
		{
			morse.pattern = 0x2d;   /* 0010 1101; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
    4b0a:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case ')':
		{
			morse.pattern = 0x2d;   /* 0010 1101; */
			morse.lengthInSymbols = 6;
    4b0c:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case ')':
		{
			morse.pattern = 0x2d;   /* 0010 1101; */
    4b0e:	6d e2       	ldi	r22, 0x2D	; 45
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 19;
		}
		break;
    4b10:	08 95       	ret

		case '&':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
    4b12:	8b e0       	ldi	r24, 0x0B	; 11
		break;

		case '&':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 5;
    4b14:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '&':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    4b16:	62 e0       	ldi	r22, 0x02	; 2
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 11;
		}
		break;
    4b18:	08 95       	ret

		case ':':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
    4b1a:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case ':':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
			morse.lengthInSymbols = 6;
    4b1c:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case ':':
		{
			morse.pattern = 0x07;   /* 0000 0111; */
    4b1e:	67 e0       	ldi	r22, 0x07	; 7
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
		}
		break;
    4b20:	08 95       	ret

		case ';':
		{
			morse.pattern = 0x15;   /* 0001 0101; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 12;
    4b22:	8c e0       	ldi	r24, 0x0C	; 12
		break;

		case ';':
		{
			morse.pattern = 0x15;   /* 0001 0101; */
			morse.lengthInSymbols = 6;
    4b24:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case ';':
		{
			morse.pattern = 0x15;   /* 0001 0101; */
    4b26:	65 e1       	ldi	r22, 0x15	; 21
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 12;
		}
		break;
    4b28:	08 95       	ret

		case '=':
		{
			morse.pattern = 0x11;   /* 0001 0001; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    4b2a:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '=':
		{
			morse.pattern = 0x11;   /* 0001 0001; */
			morse.lengthInSymbols = 5;
    4b2c:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '=':
		{
			morse.pattern = 0x11;   /* 0001 0001; */
    4b2e:	61 e1       	ldi	r22, 0x11	; 17
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    4b30:	08 95       	ret

		case '+':
		{
			morse.pattern = 0x0a;   /* 0000 1010; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
    4b32:	8d e0       	ldi	r24, 0x0D	; 13
		break;

		case '+':
		{
			morse.pattern = 0x0a;   /* 0000 1010; */
			morse.lengthInSymbols = 5;
    4b34:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '+':
		{
			morse.pattern = 0x0a;   /* 0000 1010; */
    4b36:	6a e0       	ldi	r22, 0x0A	; 10
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 13;
		}
		break;
    4b38:	08 95       	ret

		case '-':
		{
			morse.pattern = 0x21;   /* 0010 0001; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
    4b3a:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '-':
		{
			morse.pattern = 0x21;   /* 0010 0001; */
			morse.lengthInSymbols = 6;
    4b3c:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '-':
		{
			morse.pattern = 0x21;   /* 0010 0001; */
    4b3e:	61 e2       	ldi	r22, 0x21	; 33
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
		}
		break;
    4b40:	08 95       	ret

		case '_':
		{
			morse.pattern = 0x2c;   /* 0010 1100; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
    4b42:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '_':
		{
			morse.pattern = 0x2c;   /* 0010 1100; */
			morse.lengthInSymbols = 6;
    4b44:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '_':
		{
			morse.pattern = 0x2c;   /* 0010 1100; */
    4b46:	6c e2       	ldi	r22, 0x2C	; 44
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
		}
		break;
    4b48:	08 95       	ret

		case '"':
		{
			morse.pattern = 0x12;   /* 0001 0010; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
    4b4a:	8f e0       	ldi	r24, 0x0F	; 15
		break;

		case '"':
		{
			morse.pattern = 0x12;   /* 0001 0010; */
			morse.lengthInSymbols = 6;
    4b4c:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '"':
		{
			morse.pattern = 0x12;   /* 0001 0010; */
    4b4e:	62 e1       	ldi	r22, 0x12	; 18
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 15;
		}
		break;
    4b50:	08 95       	ret

		case '$':
		{
			morse.pattern = 0x48;   /* 0100 1000; */
			morse.lengthInSymbols = 7;
			morse.lengthInElements = 17;
    4b52:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '$':
		{
			morse.pattern = 0x48;   /* 0100 1000; */
			morse.lengthInSymbols = 7;
    4b54:	77 e0       	ldi	r23, 0x07	; 7
		}
		break;

		case '$':
		{
			morse.pattern = 0x48;   /* 0100 1000; */
    4b56:	68 e4       	ldi	r22, 0x48	; 72
			morse.lengthInSymbols = 7;
			morse.lengthInElements = 17;
		}
		break;
    4b58:	08 95       	ret

		case '@':
		{
			morse.pattern = 0x16;   /* 0001 0110; */
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
    4b5a:	81 e1       	ldi	r24, 0x11	; 17
		break;

		case '@':
		{
			morse.pattern = 0x16;   /* 0001 0110; */
			morse.lengthInSymbols = 6;
    4b5c:	76 e0       	ldi	r23, 0x06	; 6
		}
		break;

		case '@':
		{
			morse.pattern = 0x16;   /* 0001 0110; */
    4b5e:	66 e1       	ldi	r22, 0x16	; 22
			morse.lengthInSymbols = 6;
			morse.lengthInElements = 17;
		}
		break;
    4b60:	08 95       	ret

		case '|':                       /* inter-word space */
		{ morse.pattern = 0xff;         /* 1000 0000; */
		  morse.lengthInSymbols = 7;
		  morse.lengthInElements = 4;   /* adjusted by -3 to account for inter-character space */
    4b62:	84 e0       	ldi	r24, 0x04	; 4
		}
		break;

		case '|':                       /* inter-word space */
		{ morse.pattern = 0xff;         /* 1000 0000; */
		  morse.lengthInSymbols = 7;
    4b64:	77 e0       	ldi	r23, 0x07	; 7
			morse.lengthInElements = 17;
		}
		break;

		case '|':                       /* inter-word space */
		{ morse.pattern = 0xff;         /* 1000 0000; */
    4b66:	6f ef       	ldi	r22, 0xFF	; 255
		  morse.lengthInSymbols = 7;
		  morse.lengthInElements = 4;   /* adjusted by -3 to account for inter-character space */
		}
		break;
    4b68:	08 95       	ret

		case ' ':                       /* inter-word space */
		{ morse.pattern = 0xfe;         /* 1000 0000; */
		  morse.lengthInSymbols = 7;
		  morse.lengthInElements = 7;   /* 4 + 3 (character space) = 7 */
    4b6a:	87 e0       	ldi	r24, 0x07	; 7
		}
		break;

		case ' ':                       /* inter-word space */
		{ morse.pattern = 0xfe;         /* 1000 0000; */
		  morse.lengthInSymbols = 7;
    4b6c:	77 e0       	ldi	r23, 0x07	; 7
		  morse.lengthInElements = 4;   /* adjusted by -3 to account for inter-character space */
		}
		break;

		case ' ':                       /* inter-word space */
		{ morse.pattern = 0xfe;         /* 1000 0000; */
    4b6e:	6e ef       	ldi	r22, 0xFE	; 254
		  morse.lengthInSymbols = 7;
		  morse.lengthInElements = 7;   /* 4 + 3 (character space) = 7 */
		}
		break;
    4b70:	08 95       	ret

		case '<':                       /* long keydown */
		{
			morse.pattern = 0x1f;       /* 0001 1111; */
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 19;
    4b72:	83 e1       	ldi	r24, 0x13	; 19
		break;

		case '<':                       /* long keydown */
		{
			morse.pattern = 0x1f;       /* 0001 1111; */
			morse.lengthInSymbols = 5;
    4b74:	75 e0       	ldi	r23, 0x05	; 5
		}
		break;

		case '<':                       /* long keydown */
		{
			morse.pattern = 0x1f;       /* 0001 1111; */
    4b76:	6f e1       	ldi	r22, 0x1F	; 31
			morse.lengthInSymbols = 5;
			morse.lengthInElements = 19;
		}
		break;
    4b78:	08 95       	ret

		default:
		{
			morse.pattern = 0x0000; /* 0000 0000; */
			morse.lengthInSymbols = 0;
			morse.lengthInElements = 0;
    4b7a:	80 e0       	ldi	r24, 0x00	; 0
		break;

		default:
		{
			morse.pattern = 0x0000; /* 0000 0000; */
			morse.lengthInSymbols = 0;
    4b7c:	70 e0       	ldi	r23, 0x00	; 0
		}
		break;

		default:
		{
			morse.pattern = 0x0000; /* 0000 0000; */
    4b7e:	60 e0       	ldi	r22, 0x00	; 0
			morse.lengthInSymbols = 0;
			morse.lengthInElements = 0;
		}
		break;
    4b80:	08 95       	ret
	{
		case 'A':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 2;
			morse.lengthInElements = 5;
    4b82:	85 e0       	ldi	r24, 0x05	; 5
	switch( c )
	{
		case 'A':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
			morse.lengthInSymbols = 2;
    4b84:	72 e0       	ldi	r23, 0x02	; 2

	switch( c )
	{
		case 'A':
		{
			morse.pattern = 0x02;   /* 0000 0010; */
    4b86:	62 e0       	ldi	r22, 0x02	; 2
		}
		break;
	}

	return( morse);
}
    4b88:	08 95       	ret

00004b8a <_Z9makeMorsePcPhS0_>:
 *  Call this function with a NULL argument at intervals of 1 element of time to generate Morse code.
 *  Once loaded with a string each call to this function returns a BOOL indicating whether a CW carrier should be sent
 *  Pass in a pointer to a BOOL in the second and third arguments:
 */
BOOL makeMorse(char* s, BOOL* repeating, BOOL* finished)
{
    4b8a:	cf 93       	push	r28
    4b8c:	df 93       	push	r29
    4b8e:	ea 01       	movw	r28, r20
	static uint8_t addedSpace;      /* adds additional time to make an inter-character space */
	static BOOL completedString = FALSE;
	static BOOL carrierOn = FALSE;
	static BOOL holdKeyDown = FALSE;

	if(s)   /* load a new NULL-terminated string to send */
    4b90:	00 97       	sbiw	r24, 0x00	; 0
    4b92:	b1 f1       	breq	.+108    	; 0x4c00 <_Z9makeMorsePcPhS0_+0x76>
	{
		holdKeyDown = FALSE;
    4b94:	10 92 c1 05 	sts	0x05C1, r1	; 0x8005c1 <_ZZ9makeMorsePcPhS0_E11holdKeyDown>

		if(repeating)
    4b98:	61 15       	cp	r22, r1
    4b9a:	71 05       	cpc	r23, r1
    4b9c:	21 f0       	breq	.+8      	; 0x4ba6 <_Z9makeMorsePcPhS0_+0x1c>
		{
			repeat = *repeating;
    4b9e:	db 01       	movw	r26, r22
    4ba0:	2c 91       	ld	r18, X
    4ba2:	20 93 24 01 	sts	0x0124, r18	; 0x800124 <_ZZ9makeMorsePcPhS0_E6repeat>
		}

		if(*s)
    4ba6:	fc 01       	movw	r30, r24
    4ba8:	20 81       	ld	r18, Z
    4baa:	22 23       	and	r18, r18
    4bac:	d9 f0       	breq	.+54     	; 0x4be4 <_Z9makeMorsePcPhS0_+0x5a>
		{
			str = s;
    4bae:	90 93 c0 05 	sts	0x05C0, r25	; 0x8005c0 <_ZZ9makeMorsePcPhS0_E3str+0x1>
    4bb2:	80 93 bf 05 	sts	0x05BF, r24	; 0x8005bf <_ZZ9makeMorsePcPhS0_E3str>
			c = ' ';
    4bb6:	80 e2       	ldi	r24, 0x20	; 32
    4bb8:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <_ZZ9makeMorsePcPhS0_E1c>
			morseInProgress = getMorseChar(*str);
    4bbc:	82 2f       	mov	r24, r18
    4bbe:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z12getMorseCharc>
    4bc2:	60 93 bc 05 	sts	0x05BC, r22	; 0x8005bc <_ZZ9makeMorsePcPhS0_E15morseInProgress>
    4bc6:	70 93 bd 05 	sts	0x05BD, r23	; 0x8005bd <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
    4bca:	80 93 be 05 	sts	0x05BE, r24	; 0x8005be <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x2>
			charIndex = 0;
    4bce:	10 92 bb 05 	sts	0x05BB, r1	; 0x8005bb <_ZZ9makeMorsePcPhS0_E9charIndex>
			symbolIndex = 0;
    4bd2:	10 92 ba 05 	sts	0x05BA, r1	; 0x8005ba <_ZZ9makeMorsePcPhS0_E11symbolIndex>
			elementIndex = 0;
    4bd6:	10 92 b9 05 	sts	0x05B9, r1	; 0x8005b9 <_ZZ9makeMorsePcPhS0_E12elementIndex>
			addedSpace = 0;
    4bda:	10 92 b8 05 	sts	0x05B8, r1	; 0x8005b8 <_ZZ9makeMorsePcPhS0_E10addedSpace>
			completedString = FALSE;
    4bde:	10 92 b7 05 	sts	0x05B7, r1	; 0x8005b7 <_ZZ9makeMorsePcPhS0_E15completedString>
    4be2:	0a c0       	rjmp	.+20     	; 0x4bf8 <_Z9makeMorsePcPhS0_+0x6e>
		}
		else    /* a zero-length string shuts down makeMorse */
		{
			str = NULL;
    4be4:	10 92 c0 05 	sts	0x05C0, r1	; 0x8005c0 <_ZZ9makeMorsePcPhS0_E3str+0x1>
    4be8:	10 92 bf 05 	sts	0x05BF, r1	; 0x8005bf <_ZZ9makeMorsePcPhS0_E3str>
			completedString = TRUE;
    4bec:	81 e0       	ldi	r24, 0x01	; 1
    4bee:	80 93 b7 05 	sts	0x05B7, r24	; 0x8005b7 <_ZZ9makeMorsePcPhS0_E15completedString>
			if(finished)
    4bf2:	20 97       	sbiw	r28, 0x00	; 0
    4bf4:	09 f0       	breq	.+2      	; 0x4bf8 <_Z9makeMorsePcPhS0_+0x6e>
			{
				*finished = TRUE;
    4bf6:	88 83       	st	Y, r24
			}
		}

		carrierOn = OFF;
    4bf8:	10 92 b6 05 	sts	0x05B6, r1	; 0x8005b6 <_ZZ9makeMorsePcPhS0_E9carrierOn>
		return( OFF);
    4bfc:	80 e0       	ldi	r24, 0x00	; 0
    4bfe:	c0 c0       	rjmp	.+384    	; 0x4d80 <_Z9makeMorsePcPhS0_+0x1f6>
	}
	else if(str)
    4c00:	e0 91 bf 05 	lds	r30, 0x05BF	; 0x8005bf <_ZZ9makeMorsePcPhS0_E3str>
    4c04:	f0 91 c0 05 	lds	r31, 0x05C0	; 0x8005c0 <_ZZ9makeMorsePcPhS0_E3str+0x1>
    4c08:	30 97       	sbiw	r30, 0x00	; 0
    4c0a:	09 f4       	brne	.+2      	; 0x4c0e <_Z9makeMorsePcPhS0_+0x84>
    4c0c:	aa c0       	rjmp	.+340    	; 0x4d62 <_Z9makeMorsePcPhS0_+0x1d8>
	{
		if(repeating)
    4c0e:	61 15       	cp	r22, r1
    4c10:	71 05       	cpc	r23, r1
    4c12:	21 f0       	breq	.+8      	; 0x4c1c <_Z9makeMorsePcPhS0_+0x92>
		{
			*repeating = repeat;
    4c14:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <_ZZ9makeMorsePcPhS0_E6repeat>
    4c18:	db 01       	movw	r26, r22
    4c1a:	8c 93       	st	X, r24
		}

		if(completedString)
    4c1c:	80 91 b7 05 	lds	r24, 0x05B7	; 0x8005b7 <_ZZ9makeMorsePcPhS0_E15completedString>
    4c20:	88 23       	and	r24, r24
    4c22:	49 f0       	breq	.+18     	; 0x4c36 <_Z9makeMorsePcPhS0_+0xac>
		{
			if(finished)
    4c24:	20 97       	sbiw	r28, 0x00	; 0
    4c26:	09 f4       	brne	.+2      	; 0x4c2a <_Z9makeMorsePcPhS0_+0xa0>
    4c28:	a8 c0       	rjmp	.+336    	; 0x4d7a <_Z9makeMorsePcPhS0_+0x1f0>
			{
				*finished = TRUE;
    4c2a:	81 e0       	ldi	r24, 0x01	; 1
    4c2c:	88 83       	st	Y, r24
				holdKeyDown = FALSE;
    4c2e:	10 92 c1 05 	sts	0x05C1, r1	; 0x8005c1 <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
			}
			return( OFF);
    4c32:	80 e0       	ldi	r24, 0x00	; 0
    4c34:	a5 c0       	rjmp	.+330    	; 0x4d80 <_Z9makeMorsePcPhS0_+0x1f6>
		}

		if(elementIndex)
    4c36:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <_ZZ9makeMorsePcPhS0_E12elementIndex>
    4c3a:	88 23       	and	r24, r24
    4c3c:	21 f0       	breq	.+8      	; 0x4c46 <_Z9makeMorsePcPhS0_+0xbc>
		{
			elementIndex--;
    4c3e:	81 50       	subi	r24, 0x01	; 1
    4c40:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <_ZZ9makeMorsePcPhS0_E12elementIndex>
    4c44:	7f c0       	rjmp	.+254    	; 0x4d44 <_Z9makeMorsePcPhS0_+0x1ba>
		}
		else if(carrierOn && !holdKeyDown)  /* carrier is on, so turn it off and wait appropriate amount of space */
    4c46:	80 91 b6 05 	lds	r24, 0x05B6	; 0x8005b6 <_ZZ9makeMorsePcPhS0_E9carrierOn>
    4c4a:	88 23       	and	r24, r24
    4c4c:	81 f0       	breq	.+32     	; 0x4c6e <_Z9makeMorsePcPhS0_+0xe4>
    4c4e:	80 91 c1 05 	lds	r24, 0x05C1	; 0x8005c1 <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
    4c52:	81 11       	cpse	r24, r1
    4c54:	0c c0       	rjmp	.+24     	; 0x4c6e <_Z9makeMorsePcPhS0_+0xe4>
		{
			carrierOn = FALSE;
    4c56:	10 92 b6 05 	sts	0x05B6, r1	; 0x8005b6 <_ZZ9makeMorsePcPhS0_E9carrierOn>
			/* wait one element = inter-symbol space */
			if(addedSpace)
    4c5a:	80 91 b8 05 	lds	r24, 0x05B8	; 0x8005b8 <_ZZ9makeMorsePcPhS0_E10addedSpace>
    4c5e:	88 23       	and	r24, r24
    4c60:	09 f4       	brne	.+2      	; 0x4c64 <_Z9makeMorsePcPhS0_+0xda>
    4c62:	70 c0       	rjmp	.+224    	; 0x4d44 <_Z9makeMorsePcPhS0_+0x1ba>
			{
				elementIndex = addedSpace;
    4c64:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <_ZZ9makeMorsePcPhS0_E12elementIndex>
				addedSpace = 0;
    4c68:	10 92 b8 05 	sts	0x05B8, r1	; 0x8005b8 <_ZZ9makeMorsePcPhS0_E10addedSpace>
    4c6c:	6b c0       	rjmp	.+214    	; 0x4d44 <_Z9makeMorsePcPhS0_+0x1ba>
			}
			/* wait inter-character space */
		}
		else    /* carrier is off, so turn it on and get next symbol */
		{
			if(symbolIndex >= morseInProgress.lengthInSymbols)
    4c6e:	90 91 bd 05 	lds	r25, 0x05BD	; 0x8005bd <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
    4c72:	80 91 ba 05 	lds	r24, 0x05BA	; 0x8005ba <_ZZ9makeMorsePcPhS0_E11symbolIndex>
    4c76:	89 17       	cp	r24, r25
    4c78:	90 f1       	brcs	.+100    	; 0x4cde <_Z9makeMorsePcPhS0_+0x154>
			{
				c = (*(str + ++charIndex));
    4c7a:	80 91 bb 05 	lds	r24, 0x05BB	; 0x8005bb <_ZZ9makeMorsePcPhS0_E9charIndex>
    4c7e:	8f 5f       	subi	r24, 0xFF	; 255
    4c80:	80 93 bb 05 	sts	0x05BB, r24	; 0x8005bb <_ZZ9makeMorsePcPhS0_E9charIndex>
    4c84:	df 01       	movw	r26, r30
    4c86:	a8 0f       	add	r26, r24
    4c88:	b1 1d       	adc	r27, r1
    4c8a:	8c 91       	ld	r24, X
    4c8c:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <_ZZ9makeMorsePcPhS0_E1c>

				if(!c)  /* wrap to beginning of text */
    4c90:	81 11       	cpse	r24, r1
    4c92:	19 c0       	rjmp	.+50     	; 0x4cc6 <_Z9makeMorsePcPhS0_+0x13c>
				{
					if(repeat)
    4c94:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <_ZZ9makeMorsePcPhS0_E6repeat>
    4c98:	88 23       	and	r24, r24
    4c9a:	31 f0       	breq	.+12     	; 0x4ca8 <_Z9makeMorsePcPhS0_+0x11e>
					{
						c = *str;
    4c9c:	80 81       	ld	r24, Z
    4c9e:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <_ZZ9makeMorsePcPhS0_E1c>
						charIndex = 0;
    4ca2:	10 92 bb 05 	sts	0x05BB, r1	; 0x8005bb <_ZZ9makeMorsePcPhS0_E9charIndex>
    4ca6:	0f c0       	rjmp	.+30     	; 0x4cc6 <_Z9makeMorsePcPhS0_+0x13c>
					}
					else
					{
						str = NULL;
    4ca8:	10 92 c0 05 	sts	0x05C0, r1	; 0x8005c0 <_ZZ9makeMorsePcPhS0_E3str+0x1>
    4cac:	10 92 bf 05 	sts	0x05BF, r1	; 0x8005bf <_ZZ9makeMorsePcPhS0_E3str>
						carrierOn = OFF;
    4cb0:	10 92 b6 05 	sts	0x05B6, r1	; 0x8005b6 <_ZZ9makeMorsePcPhS0_E9carrierOn>
						completedString = TRUE;
    4cb4:	91 e0       	ldi	r25, 0x01	; 1
    4cb6:	90 93 b7 05 	sts	0x05B7, r25	; 0x8005b7 <_ZZ9makeMorsePcPhS0_E15completedString>
						if(finished)
    4cba:	20 97       	sbiw	r28, 0x00	; 0
    4cbc:	09 f0       	breq	.+2      	; 0x4cc0 <_Z9makeMorsePcPhS0_+0x136>
						{
							*finished = TRUE;
    4cbe:	98 83       	st	Y, r25
						}
						holdKeyDown = FALSE;
    4cc0:	10 92 c1 05 	sts	0x05C1, r1	; 0x8005c1 <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
						return( OFF );
    4cc4:	5d c0       	rjmp	.+186    	; 0x4d80 <_Z9makeMorsePcPhS0_+0x1f6>
					}
				}

				morseInProgress = getMorseChar(c);
    4cc6:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <_ZZ9makeMorsePcPhS0_E1c>
    4cca:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z12getMorseCharc>
    4cce:	60 93 bc 05 	sts	0x05BC, r22	; 0x8005bc <_ZZ9makeMorsePcPhS0_E15morseInProgress>
    4cd2:	70 93 bd 05 	sts	0x05BD, r23	; 0x8005bd <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
    4cd6:	80 93 be 05 	sts	0x05BE, r24	; 0x8005be <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x2>
				symbolIndex = 0;
    4cda:	10 92 ba 05 	sts	0x05BA, r1	; 0x8005ba <_ZZ9makeMorsePcPhS0_E11symbolIndex>
			}

			if(morseInProgress.pattern < INTER_WORD_SPACE)
    4cde:	20 91 bc 05 	lds	r18, 0x05BC	; 0x8005bc <_ZZ9makeMorsePcPhS0_E15morseInProgress>
    4ce2:	2d 3f       	cpi	r18, 0xFD	; 253
    4ce4:	00 f5       	brcc	.+64     	; 0x4d26 <_Z9makeMorsePcPhS0_+0x19c>
			{
				BOOL isDah = morseInProgress.pattern & (1 << symbolIndex++);
    4ce6:	40 91 ba 05 	lds	r20, 0x05BA	; 0x8005ba <_ZZ9makeMorsePcPhS0_E11symbolIndex>
    4cea:	31 e0       	ldi	r19, 0x01	; 1
    4cec:	34 0f       	add	r19, r20
    4cee:	30 93 ba 05 	sts	0x05BA, r19	; 0x8005ba <_ZZ9makeMorsePcPhS0_E11symbolIndex>

				if(isDah)
    4cf2:	81 e0       	ldi	r24, 0x01	; 1
    4cf4:	90 e0       	ldi	r25, 0x00	; 0
    4cf6:	02 c0       	rjmp	.+4      	; 0x4cfc <_Z9makeMorsePcPhS0_+0x172>
    4cf8:	88 0f       	add	r24, r24
    4cfa:	99 1f       	adc	r25, r25
    4cfc:	4a 95       	dec	r20
    4cfe:	e2 f7       	brpl	.-8      	; 0x4cf8 <_Z9makeMorsePcPhS0_+0x16e>
    4d00:	82 23       	and	r24, r18
    4d02:	21 f0       	breq	.+8      	; 0x4d0c <_Z9makeMorsePcPhS0_+0x182>
				{
					elementIndex = 2;
    4d04:	82 e0       	ldi	r24, 0x02	; 2
    4d06:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <_ZZ9makeMorsePcPhS0_E12elementIndex>
    4d0a:	02 c0       	rjmp	.+4      	; 0x4d10 <_Z9makeMorsePcPhS0_+0x186>
				}
				else
				{
					elementIndex = 0;
    4d0c:	10 92 b9 05 	sts	0x05B9, r1	; 0x8005b9 <_ZZ9makeMorsePcPhS0_E12elementIndex>
				}

				carrierOn = TRUE;
    4d10:	81 e0       	ldi	r24, 0x01	; 1
    4d12:	80 93 b6 05 	sts	0x05B6, r24	; 0x8005b6 <_ZZ9makeMorsePcPhS0_E9carrierOn>

				if(symbolIndex >= morseInProgress.lengthInSymbols)
    4d16:	80 91 bd 05 	lds	r24, 0x05BD	; 0x8005bd <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
    4d1a:	38 17       	cp	r19, r24
    4d1c:	98 f0       	brcs	.+38     	; 0x4d44 <_Z9makeMorsePcPhS0_+0x1ba>
				{
					addedSpace = 2;
    4d1e:	82 e0       	ldi	r24, 0x02	; 2
    4d20:	80 93 b8 05 	sts	0x05B8, r24	; 0x8005b8 <_ZZ9makeMorsePcPhS0_E10addedSpace>
    4d24:	0f c0       	rjmp	.+30     	; 0x4d44 <_Z9makeMorsePcPhS0_+0x1ba>
				}
			}
			else
			{
				uint8_t sym = morseInProgress.lengthInSymbols;
    4d26:	80 91 bd 05 	lds	r24, 0x05BD	; 0x8005bd <_ZZ9makeMorsePcPhS0_E15morseInProgress+0x1>
				symbolIndex = 255;  /* ensure the next character gets read */
    4d2a:	9f ef       	ldi	r25, 0xFF	; 255
    4d2c:	90 93 ba 05 	sts	0x05BA, r25	; 0x8005ba <_ZZ9makeMorsePcPhS0_E11symbolIndex>
				carrierOn = FALSE;
    4d30:	10 92 b6 05 	sts	0x05B6, r1	; 0x8005b6 <_ZZ9makeMorsePcPhS0_E9carrierOn>
				if(sym >= 4 )
    4d34:	84 30       	cpi	r24, 0x04	; 4
    4d36:	20 f0       	brcs	.+8      	; 0x4d40 <_Z9makeMorsePcPhS0_+0x1b6>
				{
					elementIndex = morseInProgress.lengthInSymbols - 4;
    4d38:	84 50       	subi	r24, 0x04	; 4
    4d3a:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <_ZZ9makeMorsePcPhS0_E12elementIndex>
    4d3e:	02 c0       	rjmp	.+4      	; 0x4d44 <_Z9makeMorsePcPhS0_+0x1ba>
				}
				else
				{
					elementIndex = 0;
    4d40:	10 92 b9 05 	sts	0x05B9, r1	; 0x8005b9 <_ZZ9makeMorsePcPhS0_E12elementIndex>
				}
			}
		}

		/* Overrides for key on and key off special characters */
		if(c == '<')    /* constant tone */
    4d44:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <_ZZ9makeMorsePcPhS0_E1c>
    4d48:	8c 33       	cpi	r24, 0x3C	; 60
    4d4a:	31 f4       	brne	.+12     	; 0x4d58 <_Z9makeMorsePcPhS0_+0x1ce>
		{
			holdKeyDown = TRUE;
    4d4c:	81 e0       	ldi	r24, 0x01	; 1
    4d4e:	80 93 c1 05 	sts	0x05C1, r24	; 0x8005c1 <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
		{
			holdKeyDown = FALSE;
		}
	}

	if(finished)
    4d52:	20 97       	sbiw	r28, 0x00	; 0
    4d54:	41 f4       	brne	.+16     	; 0x4d66 <_Z9makeMorsePcPhS0_+0x1dc>
    4d56:	14 c0       	rjmp	.+40     	; 0x4d80 <_Z9makeMorsePcPhS0_+0x1f6>
		{
			holdKeyDown = TRUE;
		}
		else
		{
			holdKeyDown = FALSE;
    4d58:	10 92 c1 05 	sts	0x05C1, r1	; 0x8005c1 <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
		}
	}

	if(finished)
    4d5c:	20 97       	sbiw	r28, 0x00	; 0
    4d5e:	19 f4       	brne	.+6      	; 0x4d66 <_Z9makeMorsePcPhS0_+0x1dc>
    4d60:	09 c0       	rjmp	.+18     	; 0x4d74 <_Z9makeMorsePcPhS0_+0x1ea>
    4d62:	20 97       	sbiw	r28, 0x00	; 0
    4d64:	19 f0       	breq	.+6      	; 0x4d6c <_Z9makeMorsePcPhS0_+0x1e2>
	{
		*finished = completedString;
    4d66:	80 91 b7 05 	lds	r24, 0x05B7	; 0x8005b7 <_ZZ9makeMorsePcPhS0_E15completedString>
    4d6a:	88 83       	st	Y, r24
	}

	if(holdKeyDown)
    4d6c:	80 91 c1 05 	lds	r24, 0x05C1	; 0x8005c1 <_ZZ9makeMorsePcPhS0_E11holdKeyDown>
    4d70:	81 11       	cpse	r24, r1
    4d72:	05 c0       	rjmp	.+10     	; 0x4d7e <_Z9makeMorsePcPhS0_+0x1f4>
	{
		return(TRUE);
	}
	else
	{
		return( carrierOn);
    4d74:	80 91 b6 05 	lds	r24, 0x05B6	; 0x8005b6 <_ZZ9makeMorsePcPhS0_E9carrierOn>
    4d78:	03 c0       	rjmp	.+6      	; 0x4d80 <_Z9makeMorsePcPhS0_+0x1f6>
			if(finished)
			{
				*finished = TRUE;
				holdKeyDown = FALSE;
			}
			return( OFF);
    4d7a:	80 e0       	ldi	r24, 0x00	; 0
    4d7c:	01 c0       	rjmp	.+2      	; 0x4d80 <_Z9makeMorsePcPhS0_+0x1f6>
		*finished = completedString;
	}

	if(holdKeyDown)
	{
		return(TRUE);
    4d7e:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
	{
		return( carrierOn);
	}
}
    4d80:	df 91       	pop	r29
    4d82:	cf 91       	pop	r28
    4d84:	08 95       	ret

00004d86 <_Z26timeRequiredToSendStrAtWPMPcj>:
/**
 *  Returns the number of milliseconds required to send the string pointed to by the first argument at the WPM code speed
 *  passed in the second argument.
 */
uint16_t timeRequiredToSendStrAtWPM(char* str, uint16_t spd)
{
    4d86:	cf 92       	push	r12
    4d88:	df 92       	push	r13
    4d8a:	ef 92       	push	r14
    4d8c:	ff 92       	push	r15
    4d8e:	0f 93       	push	r16
    4d90:	1f 93       	push	r17
    4d92:	cf 93       	push	r28
    4d94:	fc 01       	movw	r30, r24
    4d96:	6b 01       	movw	r12, r22
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
	{
		c = str[i];
    4d98:	80 81       	ld	r24, Z
		if(!c)
    4d9a:	88 23       	and	r24, r24
    4d9c:	c1 f0       	breq	.+48     	; 0x4dce <_Z26timeRequiredToSendStrAtWPMPcj+0x48>
    4d9e:	8f 01       	movw	r16, r30
    4da0:	0f 5f       	subi	r16, 0xFF	; 255
    4da2:	1f 4f       	sbci	r17, 0xFF	; 255
    4da4:	7f 01       	movw	r14, r30
    4da6:	94 e1       	ldi	r25, 0x14	; 20
    4da8:	e9 0e       	add	r14, r25
    4daa:	f1 1c       	adc	r15, r1
    4dac:	c0 e0       	ldi	r28, 0x00	; 0
    4dae:	05 c0       	rjmp	.+10     	; 0x4dba <_Z26timeRequiredToSendStrAtWPMPcj+0x34>
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
	{
		c = str[i];
    4db0:	f8 01       	movw	r30, r16
    4db2:	81 91       	ld	r24, Z+
    4db4:	8f 01       	movw	r16, r30
		if(!c)
    4db6:	88 23       	and	r24, r24
    4db8:	59 f0       	breq	.+22     	; 0x4dd0 <_Z26timeRequiredToSendStrAtWPMPcj+0x4a>
		{
			break;
		}
		m = getMorseChar(c);
    4dba:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z12getMorseCharc>
		if(m.pattern < INTER_WORD_SPACE)
    4dbe:	6d 3f       	cpi	r22, 0xFD	; 253
    4dc0:	08 f4       	brcc	.+2      	; 0x4dc4 <_Z26timeRequiredToSendStrAtWPMPcj+0x3e>
		{
			elements += 3;
    4dc2:	cd 5f       	subi	r28, 0xFD	; 253
		}
		elements += m.lengthInElements;
    4dc4:	c8 0f       	add	r28, r24
{
	uint8_t elements = 0;
	MorseCharacter m;
	char c;

	for(int i = 0; i < 20; i++)
    4dc6:	0e 15       	cp	r16, r14
    4dc8:	1f 05       	cpc	r17, r15
    4dca:	91 f7       	brne	.-28     	; 0x4db0 <_Z26timeRequiredToSendStrAtWPMPcj+0x2a>
    4dcc:	01 c0       	rjmp	.+2      	; 0x4dd0 <_Z26timeRequiredToSendStrAtWPMPcj+0x4a>
 *  Returns the number of milliseconds required to send the string pointed to by the first argument at the WPM code speed
 *  passed in the second argument.
 */
uint16_t timeRequiredToSendStrAtWPM(char* str, uint16_t spd)
{
	uint8_t elements = 0;
    4dce:	c0 e0       	ldi	r28, 0x00	; 0
			elements += 3;
		}
		elements += m.lengthInElements;
	}

	return(elements * WPM_TO_MS_PER_DOT(spd));
    4dd0:	80 eb       	ldi	r24, 0xB0	; 176
    4dd2:	94 e0       	ldi	r25, 0x04	; 4
    4dd4:	b6 01       	movw	r22, r12
    4dd6:	0e 94 02 2c 	call	0x5804	; 0x5804 <__udivmodhi4>
}
    4dda:	c6 9f       	mul	r28, r22
    4ddc:	c0 01       	movw	r24, r0
    4dde:	c7 9f       	mul	r28, r23
    4de0:	90 0d       	add	r25, r0
    4de2:	11 24       	eor	r1, r1
    4de4:	cf 91       	pop	r28
    4de6:	1f 91       	pop	r17
    4de8:	0f 91       	pop	r16
    4dea:	ff 90       	pop	r15
    4dec:	ef 90       	pop	r14
    4dee:	df 90       	pop	r13
    4df0:	cf 90       	pop	r12
    4df2:	08 95       	ret

00004df4 <_Z7bcd2dech>:

		/* Read the value from RAM */
		i2c_device_read(RV3028_I2C_SLAVE_ADDR, rtc_ee_addr, val, 1);

		return(0);
	}
    4df4:	98 2f       	mov	r25, r24
    4df6:	96 95       	lsr	r25
    4df8:	96 95       	lsr	r25
    4dfa:	96 95       	lsr	r25
    4dfc:	9e 71       	andi	r25, 0x1E	; 30
    4dfe:	29 2f       	mov	r18, r25
    4e00:	22 0f       	add	r18, r18
    4e02:	22 0f       	add	r18, r18
    4e04:	92 0f       	add	r25, r18
    4e06:	8f 70       	andi	r24, 0x0F	; 15
    4e08:	89 0f       	add	r24, r25
    4e0a:	08 95       	ret

00004e0c <_Z8char2bcdPc>:
    4e0c:	fc 01       	movw	r30, r24
    4e0e:	20 81       	ld	r18, Z
    4e10:	81 81       	ldd	r24, Z+1	; 0x01
    4e12:	80 53       	subi	r24, 0x30	; 48
    4e14:	f0 e1       	ldi	r31, 0x10	; 16
    4e16:	2f 9f       	mul	r18, r31
    4e18:	80 0d       	add	r24, r0
    4e1a:	11 24       	eor	r1, r1
    4e1c:	08 95       	ret

00004e1e <_Z16rv3028_set_epochm>:
    4e1e:	cf 93       	push	r28
    4e20:	df 93       	push	r29
    4e22:	00 d0       	rcall	.+0      	; 0x4e24 <_Z16rv3028_set_epochm+0x6>
    4e24:	00 d0       	rcall	.+0      	; 0x4e26 <_Z16rv3028_set_epochm+0x8>
    4e26:	1f 92       	push	r1
    4e28:	cd b7       	in	r28, 0x3d	; 61
    4e2a:	de b7       	in	r29, 0x3e	; 62
    4e2c:	ae 01       	movw	r20, r28
    4e2e:	4f 5f       	subi	r20, 0xFF	; 255
    4e30:	5f 4f       	sbci	r21, 0xFF	; 255
    4e32:	25 e0       	ldi	r18, 0x05	; 5
    4e34:	fa 01       	movw	r30, r20
    4e36:	11 92       	st	Z+, r1
    4e38:	2a 95       	dec	r18
    4e3a:	e9 f7       	brne	.-6      	; 0x4e36 <_Z16rv3028_set_epochm+0x18>
    4e3c:	9c 83       	std	Y+4, r25	; 0x04
    4e3e:	8b 83       	std	Y+3, r24	; 0x03
    4e40:	7a 83       	std	Y+2, r23	; 0x02
    4e42:	69 83       	std	Y+1, r22	; 0x01
    4e44:	24 e0       	ldi	r18, 0x04	; 4
    4e46:	6b e1       	ldi	r22, 0x1B	; 27
    4e48:	84 ea       	ldi	r24, 0xA4	; 164
    4e4a:	0e 94 5e 07 	call	0xebc	; 0xebc <_Z16i2c_device_writehhPhh>
    4e4e:	0f 90       	pop	r0
    4e50:	0f 90       	pop	r0
    4e52:	0f 90       	pop	r0
    4e54:	0f 90       	pop	r0
    4e56:	0f 90       	pop	r0
    4e58:	df 91       	pop	r29
    4e5a:	cf 91       	pop	r28
    4e5c:	08 95       	ret

00004e5e <_Z16rv3028_get_epochv>:
    4e5e:	cf 93       	push	r28
    4e60:	df 93       	push	r29
    4e62:	00 d0       	rcall	.+0      	; 0x4e64 <_Z16rv3028_get_epochv+0x6>
    4e64:	00 d0       	rcall	.+0      	; 0x4e66 <_Z16rv3028_get_epochv+0x8>
    4e66:	cd b7       	in	r28, 0x3d	; 61
    4e68:	de b7       	in	r29, 0x3e	; 62
    4e6a:	19 82       	std	Y+1, r1	; 0x01
    4e6c:	1a 82       	std	Y+2, r1	; 0x02
    4e6e:	1b 82       	std	Y+3, r1	; 0x03
    4e70:	1c 82       	std	Y+4, r1	; 0x04
    4e72:	24 e0       	ldi	r18, 0x04	; 4
    4e74:	ae 01       	movw	r20, r28
    4e76:	4f 5f       	subi	r20, 0xFF	; 255
    4e78:	5f 4f       	sbci	r21, 0xFF	; 255
    4e7a:	6b e1       	ldi	r22, 0x1B	; 27
    4e7c:	84 ea       	ldi	r24, 0xA4	; 164
    4e7e:	0e 94 c1 07 	call	0xf82	; 0xf82 <_Z15i2c_device_readhhPhh>
    4e82:	81 11       	cpse	r24, r1
    4e84:	11 c0       	rjmp	.+34     	; 0x4ea8 <_Z16rv3028_get_epochv+0x4a>
    4e86:	2a 81       	ldd	r18, Y+2	; 0x02
    4e88:	6b 81       	ldd	r22, Y+3	; 0x03
    4e8a:	86 2f       	mov	r24, r22
    4e8c:	90 e0       	ldi	r25, 0x00	; 0
    4e8e:	a0 e0       	ldi	r26, 0x00	; 0
    4e90:	b0 e0       	ldi	r27, 0x00	; 0
    4e92:	dc 01       	movw	r26, r24
    4e94:	99 27       	eor	r25, r25
    4e96:	88 27       	eor	r24, r24
    4e98:	92 2b       	or	r25, r18
    4e9a:	29 81       	ldd	r18, Y+1	; 0x01
    4e9c:	82 2b       	or	r24, r18
    4e9e:	2c 81       	ldd	r18, Y+4	; 0x04
    4ea0:	bc 01       	movw	r22, r24
    4ea2:	cd 01       	movw	r24, r26
    4ea4:	92 2b       	or	r25, r18
    4ea6:	03 c0       	rjmp	.+6      	; 0x4eae <_Z16rv3028_get_epochv+0x50>
    4ea8:	60 e0       	ldi	r22, 0x00	; 0
    4eaa:	70 e0       	ldi	r23, 0x00	; 0
    4eac:	cb 01       	movw	r24, r22
    4eae:	0f 90       	pop	r0
    4eb0:	0f 90       	pop	r0
    4eb2:	0f 90       	pop	r0
    4eb4:	0f 90       	pop	r0
    4eb6:	df 91       	pop	r29
    4eb8:	cf 91       	pop	r28
    4eba:	08 95       	ret

00004ebc <_Z16rv3028_get_epochPbPc>:
    4ebc:	6f 92       	push	r6
    4ebe:	7f 92       	push	r7
    4ec0:	8f 92       	push	r8
    4ec2:	9f 92       	push	r9
    4ec4:	af 92       	push	r10
    4ec6:	bf 92       	push	r11
    4ec8:	cf 92       	push	r12
    4eca:	df 92       	push	r13
    4ecc:	ef 92       	push	r14
    4ece:	ff 92       	push	r15
    4ed0:	0f 93       	push	r16
    4ed2:	1f 93       	push	r17
    4ed4:	cf 93       	push	r28
    4ed6:	df 93       	push	r29
    4ed8:	6c 01       	movw	r12, r24
    4eda:	eb 01       	movw	r28, r22
    4edc:	20 97       	sbiw	r28, 0x00	; 0
    4ede:	09 f4       	brne	.+2      	; 0x4ee2 <_Z16rv3028_get_epochPbPc+0x26>
    4ee0:	b6 c0       	rjmp	.+364    	; 0x504e <_Z16rv3028_get_epochPbPc+0x192>
    4ee2:	cb 01       	movw	r24, r22
    4ee4:	0a 96       	adiw	r24, 0x0a	; 10
    4ee6:	0e 94 06 27 	call	0x4e0c	; 0x4e0c <_Z8char2bcdPc>
    4eea:	88 2e       	mov	r8, r24
    4eec:	ce 01       	movw	r24, r28
    4eee:	08 96       	adiw	r24, 0x08	; 8
    4ef0:	0e 94 06 27 	call	0x4e0c	; 0x4e0c <_Z8char2bcdPc>
    4ef4:	78 2e       	mov	r7, r24
    4ef6:	ce 01       	movw	r24, r28
    4ef8:	06 96       	adiw	r24, 0x06	; 6
    4efa:	0e 94 06 27 	call	0x4e0c	; 0x4e0c <_Z8char2bcdPc>
    4efe:	98 2e       	mov	r9, r24
    4f00:	ce 01       	movw	r24, r28
    4f02:	04 96       	adiw	r24, 0x04	; 4
    4f04:	0e 94 06 27 	call	0x4e0c	; 0x4e0c <_Z8char2bcdPc>
    4f08:	18 2f       	mov	r17, r24
    4f0a:	ce 01       	movw	r24, r28
    4f0c:	02 96       	adiw	r24, 0x02	; 2
    4f0e:	0e 94 06 27 	call	0x4e0c	; 0x4e0c <_Z8char2bcdPc>
    4f12:	08 2f       	mov	r16, r24
    4f14:	ce 01       	movw	r24, r28
    4f16:	0e 94 06 27 	call	0x4e0c	; 0x4e0c <_Z8char2bcdPc>
    4f1a:	0e 94 fa 26 	call	0x4df4	; 0x4df4 <_Z7bcd2dech>
    4f1e:	e8 2e       	mov	r14, r24
    4f20:	f1 2c       	mov	r15, r1
    4f22:	57 01       	movw	r10, r14
    4f24:	80 e3       	ldi	r24, 0x30	; 48
    4f26:	a8 1a       	sub	r10, r24
    4f28:	88 ef       	ldi	r24, 0xF8	; 248
    4f2a:	b8 0a       	sbc	r11, r24
    4f2c:	80 2f       	mov	r24, r16
    4f2e:	0e 94 fa 26 	call	0x4df4	; 0x4df4 <_Z7bcd2dech>
    4f32:	d8 2f       	mov	r29, r24
    4f34:	81 2f       	mov	r24, r17
    4f36:	0e 94 fa 26 	call	0x4df4	; 0x4df4 <_Z7bcd2dech>
    4f3a:	68 2e       	mov	r6, r24
    4f3c:	d2 30       	cpi	r29, 0x02	; 2
    4f3e:	68 f0       	brcs	.+26     	; 0x4f5a <_Z16rv3028_get_epochPbPc+0x9e>
    4f40:	00 e0       	ldi	r16, 0x00	; 0
    4f42:	10 e0       	ldi	r17, 0x00	; 0
    4f44:	c1 e0       	ldi	r28, 0x01	; 1
    4f46:	6c 2f       	mov	r22, r28
    4f48:	c5 01       	movw	r24, r10
    4f4a:	0e 94 3e 01 	call	0x27c	; 0x27c <month_length>
    4f4e:	08 0f       	add	r16, r24
    4f50:	11 1d       	adc	r17, r1
    4f52:	cf 5f       	subi	r28, 0xFF	; 255
    4f54:	dc 13       	cpse	r29, r28
    4f56:	f7 cf       	rjmp	.-18     	; 0x4f46 <_Z16rv3028_get_epochPbPc+0x8a>
    4f58:	02 c0       	rjmp	.+4      	; 0x4f5e <_Z16rv3028_get_epochPbPc+0xa2>
    4f5a:	00 e0       	ldi	r16, 0x00	; 0
    4f5c:	10 e0       	ldi	r17, 0x00	; 0
    4f5e:	86 2d       	mov	r24, r6
    4f60:	66 0c       	add	r6, r6
    4f62:	99 0b       	sbc	r25, r25
    4f64:	01 97       	sbiw	r24, 0x01	; 1
    4f66:	08 0f       	add	r16, r24
    4f68:	19 1f       	adc	r17, r25
    4f6a:	88 2d       	mov	r24, r8
    4f6c:	0e 94 fa 26 	call	0x4df4	; 0x4df4 <_Z7bcd2dech>
    4f70:	88 2e       	mov	r8, r24
    4f72:	87 2d       	mov	r24, r7
    4f74:	0e 94 fa 26 	call	0x4df4	; 0x4df4 <_Z7bcd2dech>
    4f78:	c8 2f       	mov	r28, r24
    4f7a:	89 2d       	mov	r24, r9
    4f7c:	0e 94 fa 26 	call	0x4df4	; 0x4df4 <_Z7bcd2dech>
    4f80:	08 2c       	mov	r0, r8
    4f82:	00 0c       	add	r0, r0
    4f84:	99 08       	sbc	r9, r9
    4f86:	9c e3       	ldi	r25, 0x3C	; 60
    4f88:	c9 02       	muls	r28, r25
    4f8a:	80 0c       	add	r8, r0
    4f8c:	91 1c       	adc	r9, r1
    4f8e:	11 24       	eor	r1, r1
    4f90:	09 2c       	mov	r0, r9
    4f92:	00 0c       	add	r0, r0
    4f94:	aa 08       	sbc	r10, r10
    4f96:	bb 08       	sbc	r11, r11
    4f98:	a8 2f       	mov	r26, r24
    4f9a:	88 0f       	add	r24, r24
    4f9c:	bb 0b       	sbc	r27, r27
    4f9e:	20 e1       	ldi	r18, 0x10	; 16
    4fa0:	3e e0       	ldi	r19, 0x0E	; 14
    4fa2:	0e 94 80 2c 	call	0x5900	; 0x5900 <__usmulhisi3>
    4fa6:	86 0e       	add	r8, r22
    4fa8:	97 1e       	adc	r9, r23
    4faa:	a8 1e       	adc	r10, r24
    4fac:	b9 1e       	adc	r11, r25
    4fae:	d8 01       	movw	r26, r16
    4fb0:	20 e8       	ldi	r18, 0x80	; 128
    4fb2:	31 e5       	ldi	r19, 0x51	; 81
    4fb4:	41 e0       	ldi	r20, 0x01	; 1
    4fb6:	50 e0       	ldi	r21, 0x00	; 0
    4fb8:	0e 94 92 2c 	call	0x5924	; 0x5924 <__mulshisi3>
    4fbc:	86 0e       	add	r8, r22
    4fbe:	97 1e       	adc	r9, r23
    4fc0:	a8 1e       	adc	r10, r24
    4fc2:	b9 1e       	adc	r11, r25
    4fc4:	d7 01       	movw	r26, r14
    4fc6:	5e 96       	adiw	r26, 0x1e	; 30
    4fc8:	20 e8       	ldi	r18, 0x80	; 128
    4fca:	33 e3       	ldi	r19, 0x33	; 51
    4fcc:	41 ee       	ldi	r20, 0xE1	; 225
    4fce:	51 e0       	ldi	r21, 0x01	; 1
    4fd0:	0e 94 92 2c 	call	0x5924	; 0x5924 <__mulshisi3>
    4fd4:	86 0e       	add	r8, r22
    4fd6:	97 1e       	adc	r9, r23
    4fd8:	a8 1e       	adc	r10, r24
    4fda:	b9 1e       	adc	r11, r25
    4fdc:	c7 01       	movw	r24, r14
    4fde:	4f 96       	adiw	r24, 0x1f	; 31
    4fe0:	dc 01       	movw	r26, r24
    4fe2:	0a f4       	brpl	.+2      	; 0x4fe6 <_Z16rv3028_get_epochPbPc+0x12a>
    4fe4:	13 96       	adiw	r26, 0x03	; 3
    4fe6:	b5 95       	asr	r27
    4fe8:	a7 95       	ror	r26
    4fea:	b5 95       	asr	r27
    4fec:	a7 95       	ror	r26
    4fee:	20 e8       	ldi	r18, 0x80	; 128
    4ff0:	31 e5       	ldi	r19, 0x51	; 81
    4ff2:	41 e0       	ldi	r20, 0x01	; 1
    4ff4:	50 e0       	ldi	r21, 0x00	; 0
    4ff6:	0e 94 92 2c 	call	0x5924	; 0x5924 <__mulshisi3>
    4ffa:	86 0e       	add	r8, r22
    4ffc:	97 1e       	adc	r9, r23
    4ffe:	a8 1e       	adc	r10, r24
    5000:	b9 1e       	adc	r11, r25
    5002:	c7 01       	movw	r24, r14
    5004:	8d 59       	subi	r24, 0x9D	; 157
    5006:	9f 4f       	sbci	r25, 0xFF	; 255
    5008:	64 e6       	ldi	r22, 0x64	; 100
    500a:	70 e0       	ldi	r23, 0x00	; 0
    500c:	0e 94 16 2c 	call	0x582c	; 0x582c <__divmodhi4>
    5010:	db 01       	movw	r26, r22
    5012:	20 e8       	ldi	r18, 0x80	; 128
    5014:	3e ea       	ldi	r19, 0xAE	; 174
    5016:	4e ef       	ldi	r20, 0xFE	; 254
    5018:	5f ef       	ldi	r21, 0xFF	; 255
    501a:	0e 94 92 2c 	call	0x5924	; 0x5924 <__mulshisi3>
    501e:	86 0e       	add	r8, r22
    5020:	97 1e       	adc	r9, r23
    5022:	a8 1e       	adc	r10, r24
    5024:	b9 1e       	adc	r11, r25
    5026:	c7 01       	movw	r24, r14
    5028:	81 57       	subi	r24, 0x71	; 113
    502a:	9e 4f       	sbci	r25, 0xFE	; 254
    502c:	60 e9       	ldi	r22, 0x90	; 144
    502e:	71 e0       	ldi	r23, 0x01	; 1
    5030:	0e 94 16 2c 	call	0x582c	; 0x582c <__divmodhi4>
    5034:	db 01       	movw	r26, r22
    5036:	20 e8       	ldi	r18, 0x80	; 128
    5038:	31 e5       	ldi	r19, 0x51	; 81
    503a:	41 e0       	ldi	r20, 0x01	; 1
    503c:	50 e0       	ldi	r21, 0x00	; 0
    503e:	0e 94 92 2c 	call	0x5924	; 0x5924 <__mulshisi3>
    5042:	68 0d       	add	r22, r8
    5044:	79 1d       	adc	r23, r9
    5046:	8a 1d       	adc	r24, r10
    5048:	9b 1d       	adc	r25, r11
    504a:	30 e0       	ldi	r19, 0x00	; 0
    504c:	09 c0       	rjmp	.+18     	; 0x5060 <_Z16rv3028_get_epochPbPc+0x1a4>
    504e:	0e 94 2f 27 	call	0x4e5e	; 0x4e5e <_Z16rv3028_get_epochv>
    5052:	31 e0       	ldi	r19, 0x01	; 1
    5054:	61 15       	cp	r22, r1
    5056:	71 05       	cpc	r23, r1
    5058:	81 05       	cpc	r24, r1
    505a:	91 05       	cpc	r25, r1
    505c:	09 f0       	breq	.+2      	; 0x5060 <_Z16rv3028_get_epochPbPc+0x1a4>
    505e:	30 e0       	ldi	r19, 0x00	; 0
    5060:	c1 14       	cp	r12, r1
    5062:	d1 04       	cpc	r13, r1
    5064:	31 f0       	breq	.+12     	; 0x5072 <_Z16rv3028_get_epochPbPc+0x1b6>
    5066:	21 e0       	ldi	r18, 0x01	; 1
    5068:	31 11       	cpse	r19, r1
    506a:	01 c0       	rjmp	.+2      	; 0x506e <_Z16rv3028_get_epochPbPc+0x1b2>
    506c:	20 e0       	ldi	r18, 0x00	; 0
    506e:	f6 01       	movw	r30, r12
    5070:	20 83       	st	Z, r18
    5072:	df 91       	pop	r29
    5074:	cf 91       	pop	r28
    5076:	1f 91       	pop	r17
    5078:	0f 91       	pop	r16
    507a:	ff 90       	pop	r15
    507c:	ef 90       	pop	r14
    507e:	df 90       	pop	r13
    5080:	cf 90       	pop	r12
    5082:	bf 90       	pop	r11
    5084:	af 90       	pop	r10
    5086:	9f 90       	pop	r9
    5088:	8f 90       	pop	r8
    508a:	7f 90       	pop	r7
    508c:	6f 90       	pop	r6
    508e:	08 95       	ret

00005090 <_Z21rv3028_set_offset_RAMj>:
    5090:	cf 93       	push	r28
    5092:	df 93       	push	r29
    5094:	00 d0       	rcall	.+0      	; 0x5096 <_Z21rv3028_set_offset_RAMj+0x6>
    5096:	cd b7       	in	r28, 0x3d	; 61
    5098:	de b7       	in	r29, 0x3e	; 62
    509a:	20 e1       	ldi	r18, 0x10	; 16
    509c:	2a 83       	std	Y+2, r18	; 0x02
    509e:	9c 01       	movw	r18, r24
    50a0:	36 95       	lsr	r19
    50a2:	27 95       	ror	r18
    50a4:	29 83       	std	Y+1, r18	; 0x01
    50a6:	80 ff       	sbrs	r24, 0
    50a8:	02 c0       	rjmp	.+4      	; 0x50ae <_Z21rv3028_set_offset_RAMj+0x1e>
    50aa:	80 e9       	ldi	r24, 0x90	; 144
    50ac:	8a 83       	std	Y+2, r24	; 0x02
    50ae:	22 e0       	ldi	r18, 0x02	; 2
    50b0:	ae 01       	movw	r20, r28
    50b2:	4f 5f       	subi	r20, 0xFF	; 255
    50b4:	5f 4f       	sbci	r21, 0xFF	; 255
    50b6:	66 e3       	ldi	r22, 0x36	; 54
    50b8:	84 ea       	ldi	r24, 0xA4	; 164
    50ba:	0e 94 5e 07 	call	0xebc	; 0xebc <_Z16i2c_device_writehhPhh>
    50be:	0f 90       	pop	r0
    50c0:	0f 90       	pop	r0
    50c2:	df 91       	pop	r29
    50c4:	cf 91       	pop	r28
    50c6:	08 95       	ret

000050c8 <_Z18waitForEEPROMReadyv>:
    50c8:	cf 93       	push	r28
    50ca:	df 93       	push	r29
    50cc:	1f 92       	push	r1
    50ce:	cd b7       	in	r28, 0x3d	; 61
    50d0:	de b7       	in	r29, 0x3e	; 62
    50d2:	81 e0       	ldi	r24, 0x01	; 1
    50d4:	89 83       	std	Y+1, r24	; 0x01
    50d6:	21 e0       	ldi	r18, 0x01	; 1
    50d8:	ae 01       	movw	r20, r28
    50da:	4f 5f       	subi	r20, 0xFF	; 255
    50dc:	5f 4f       	sbci	r21, 0xFF	; 255
    50de:	6e e0       	ldi	r22, 0x0E	; 14
    50e0:	84 ea       	ldi	r24, 0xA4	; 164
    50e2:	0e 94 c1 07 	call	0xf82	; 0xf82 <_Z15i2c_device_readhhPhh>
    50e6:	81 11       	cpse	r24, r1
    50e8:	07 c0       	rjmp	.+14     	; 0x50f8 <_Z18waitForEEPROMReadyv+0x30>
    50ea:	89 81       	ldd	r24, Y+1	; 0x01
    50ec:	80 78       	andi	r24, 0x80	; 128
    50ee:	89 83       	std	Y+1, r24	; 0x01
    50f0:	81 11       	cpse	r24, r1
    50f2:	f1 cf       	rjmp	.-30     	; 0x50d6 <_Z18waitForEEPROMReadyv+0xe>
    50f4:	80 e0       	ldi	r24, 0x00	; 0
    50f6:	03 c0       	rjmp	.+6      	; 0x50fe <_Z18waitForEEPROMReadyv+0x36>
    50f8:	89 81       	ldd	r24, Y+1	; 0x01
    50fa:	88 23       	and	r24, r24
    50fc:	d9 f3       	breq	.-10     	; 0x50f4 <_Z18waitForEEPROMReadyv+0x2c>
    50fe:	0f 90       	pop	r0
    5100:	df 91       	pop	r29
    5102:	cf 91       	pop	r28
    5104:	08 95       	ret

00005106 <_Z20refreshRAMfromEEPROMv>:
// 		return( fail);
// 	}


	void refreshRAMfromEEPROM(void)
	{
    5106:	cf 93       	push	r28
    5108:	df 93       	push	r29
    510a:	1f 92       	push	r1
    510c:	cd b7       	in	r28, 0x3d	; 61
    510e:	de b7       	in	r29, 0x3e	; 62
		uint8_t status = FALSE;
		uint8_t temp = 0;
    5110:	19 82       	std	Y+1, r1	; 0x01
		status = i2c_device_write(RV3028_I2C_SLAVE_ADDR, RTC_EE_COMMAND, &temp, 1);
    5112:	21 e0       	ldi	r18, 0x01	; 1
    5114:	ae 01       	movw	r20, r28
    5116:	4f 5f       	subi	r20, 0xFF	; 255
    5118:	5f 4f       	sbci	r21, 0xFF	; 255
    511a:	67 e2       	ldi	r22, 0x27	; 39
    511c:	84 ea       	ldi	r24, 0xA4	; 164
    511e:	0e 94 5e 07 	call	0xebc	; 0xebc <_Z16i2c_device_writehhPhh>
		waitForEEPROMReady();
    5122:	0e 94 64 28 	call	0x50c8	; 0x50c8 <_Z18waitForEEPROMReadyv>
		temp = 0x12;    /* Refresh RAM from EEPROM */
    5126:	82 e1       	ldi	r24, 0x12	; 18
    5128:	89 83       	std	Y+1, r24	; 0x01
		status |= i2c_device_write(RV3028_I2C_SLAVE_ADDR, RTC_EE_COMMAND, &temp, 1);
    512a:	21 e0       	ldi	r18, 0x01	; 1
    512c:	ae 01       	movw	r20, r28
    512e:	4f 5f       	subi	r20, 0xFF	; 255
    5130:	5f 4f       	sbci	r21, 0xFF	; 255
    5132:	67 e2       	ldi	r22, 0x27	; 39
    5134:	84 ea       	ldi	r24, 0xA4	; 164
    5136:	0e 94 5e 07 	call	0xebc	; 0xebc <_Z16i2c_device_writehhPhh>
		waitForEEPROMReady();
    513a:	0e 94 64 28 	call	0x50c8	; 0x50c8 <_Z18waitForEEPROMReadyv>
	}
    513e:	0f 90       	pop	r0
    5140:	df 91       	pop	r29
    5142:	cf 91       	pop	r28
    5144:	08 95       	ret

00005146 <_Z21rv3028_get_offset_RAMv>:

	int16_t rv3028_get_offset_RAM()
	{
    5146:	cf 93       	push	r28
    5148:	df 93       	push	r29
    514a:	00 d0       	rcall	.+0      	; 0x514c <_Z21rv3028_get_offset_RAMv+0x6>
    514c:	cd b7       	in	r28, 0x3d	; 61
    514e:	de b7       	in	r29, 0x3e	; 62
		uint8_t data[2];
		int16_t result;

		refreshRAMfromEEPROM(); /* Ensure we never return an altered RAM value */
    5150:	0e 94 83 28 	call	0x5106	; 0x5106 <_Z20refreshRAMfromEEPROMv>
		i2c_device_read(RV3028_I2C_SLAVE_ADDR, RTC_EEPROM_OFFSET, (uint8_t*)data, 2);
    5154:	22 e0       	ldi	r18, 0x02	; 2
    5156:	ae 01       	movw	r20, r28
    5158:	4f 5f       	subi	r20, 0xFF	; 255
    515a:	5f 4f       	sbci	r21, 0xFF	; 255
    515c:	66 e3       	ldi	r22, 0x36	; 54
    515e:	84 ea       	ldi	r24, 0xA4	; 164
    5160:	0e 94 c1 07 	call	0xf82	; 0xf82 <_Z15i2c_device_readhhPhh>
		result = data[0] << 1;
    5164:	89 81       	ldd	r24, Y+1	; 0x01
    5166:	90 e0       	ldi	r25, 0x00	; 0
    5168:	88 0f       	add	r24, r24
    516a:	99 1f       	adc	r25, r25
		if(data[1] & 0x80)
    516c:	2a 81       	ldd	r18, Y+2	; 0x02
    516e:	22 23       	and	r18, r18
    5170:	0c f4       	brge	.+2      	; 0x5174 <_Z21rv3028_get_offset_RAMv+0x2e>
		{
			result++;
    5172:	01 96       	adiw	r24, 0x01	; 1
		}
		return(result);
	}
    5174:	0f 90       	pop	r0
    5176:	0f 90       	pop	r0
    5178:	df 91       	pop	r29
    517a:	cf 91       	pop	r28
    517c:	08 95       	ret

0000517e <_Z13rv3028_1s_sqwv>:
 #define RTC_EE_DATA                     0x26
 #define RTC_EE_COMMAND                  0x27
 #define RTC_STATUS                      0x0E
 */
		uint8_t rv3028_1s_sqw(void)
		{
    517e:	cf 93       	push	r28
    5180:	df 93       	push	r29
    5182:	00 d0       	rcall	.+0      	; 0x5184 <_Z13rv3028_1s_sqwv+0x6>
    5184:	cd b7       	in	r28, 0x3d	; 61
    5186:	de b7       	in	r29, 0x3e	; 62
			uint8_t status = FALSE;
    5188:	19 82       	std	Y+1, r1	; 0x01
			uint8_t temp = 0;
    518a:	1a 82       	std	Y+2, r1	; 0x02
			{
				return( 1);
			}
#endif // INIT_EEPROM_ONLY

			refreshRAMfromEEPROM();
    518c:	0e 94 83 28 	call	0x5106	; 0x5106 <_Z20refreshRAMfromEEPROMv>

			g_tempStr[0] = '\0';
#endif // INIT_EEPROM_ONLY
/* End debugging */

			if(!status)
    5190:	89 81       	ldd	r24, Y+1	; 0x01
    5192:	81 11       	cpse	r24, r1
    5194:	0c c0       	rjmp	.+24     	; 0x51ae <_Z13rv3028_1s_sqwv+0x30>
			{
				temp = i2c_device_read(RV3028_I2C_SLAVE_ADDR, RTC_STATUS, &status, 1);
    5196:	21 e0       	ldi	r18, 0x01	; 1
    5198:	ae 01       	movw	r20, r28
    519a:	4f 5f       	subi	r20, 0xFF	; 255
    519c:	5f 4f       	sbci	r21, 0xFF	; 255
    519e:	6e e0       	ldi	r22, 0x0E	; 14
    51a0:	84 ea       	ldi	r24, 0xA4	; 164
    51a2:	0e 94 c1 07 	call	0xf82	; 0xf82 <_Z15i2c_device_readhhPhh>
				status &= 0x6F; /* Mask off relevant flags: 01101111 */
    51a6:	89 81       	ldd	r24, Y+1	; 0x01
    51a8:	8f 76       	andi	r24, 0x6F	; 111
    51aa:	89 83       	std	Y+1, r24	; 0x01
    51ac:	02 c0       	rjmp	.+4      	; 0x51b2 <_Z13rv3028_1s_sqwv+0x34>
			}
			else
			{
				status = 1 << RTC_STATUS_I2C_ERROR;
    51ae:	80 e8       	ldi	r24, 0x80	; 128
    51b0:	89 83       	std	Y+1, r24	; 0x01
			}

			temp = 0x00;    /* Clear status flags */
    51b2:	1a 82       	std	Y+2, r1	; 0x02
			i2c_device_write(RV3028_I2C_SLAVE_ADDR, RTC_STATUS, &temp, 1);
    51b4:	21 e0       	ldi	r18, 0x01	; 1
    51b6:	ae 01       	movw	r20, r28
    51b8:	4e 5f       	subi	r20, 0xFE	; 254
    51ba:	5f 4f       	sbci	r21, 0xFF	; 255
    51bc:	6e e0       	ldi	r22, 0x0E	; 14
    51be:	84 ea       	ldi	r24, 0xA4	; 164
    51c0:	0e 94 5e 07 	call	0xebc	; 0xebc <_Z16i2c_device_writehhPhh>

			return(status);
		}
    51c4:	89 81       	ldd	r24, Y+1	; 0x01
    51c6:	0f 90       	pop	r0
    51c8:	0f 90       	pop	r0
    51ca:	df 91       	pop	r29
    51cc:	cf 91       	pop	r28
    51ce:	08 95       	ret

000051d0 <__subsf3>:
    51d0:	50 58       	subi	r21, 0x80	; 128

000051d2 <__addsf3>:
    51d2:	bb 27       	eor	r27, r27
    51d4:	aa 27       	eor	r26, r26
    51d6:	0e 94 00 29 	call	0x5200	; 0x5200 <__addsf3x>
    51da:	0c 94 aa 2a 	jmp	0x5554	; 0x5554 <__fp_round>
    51de:	0e 94 71 2a 	call	0x54e2	; 0x54e2 <__fp_pscA>
    51e2:	38 f0       	brcs	.+14     	; 0x51f2 <__addsf3+0x20>
    51e4:	0e 94 78 2a 	call	0x54f0	; 0x54f0 <__fp_pscB>
    51e8:	20 f0       	brcs	.+8      	; 0x51f2 <__addsf3+0x20>
    51ea:	39 f4       	brne	.+14     	; 0x51fa <__addsf3+0x28>
    51ec:	9f 3f       	cpi	r25, 0xFF	; 255
    51ee:	19 f4       	brne	.+6      	; 0x51f6 <__addsf3+0x24>
    51f0:	26 f4       	brtc	.+8      	; 0x51fa <__addsf3+0x28>
    51f2:	0c 94 6e 2a 	jmp	0x54dc	; 0x54dc <__fp_nan>
    51f6:	0e f4       	brtc	.+2      	; 0x51fa <__addsf3+0x28>
    51f8:	e0 95       	com	r30
    51fa:	e7 fb       	bst	r30, 7
    51fc:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__fp_inf>

00005200 <__addsf3x>:
    5200:	e9 2f       	mov	r30, r25
    5202:	0e 94 cf 2a 	call	0x559e	; 0x559e <__fp_split3>
    5206:	58 f3       	brcs	.-42     	; 0x51de <__addsf3+0xc>
    5208:	ba 17       	cp	r27, r26
    520a:	62 07       	cpc	r22, r18
    520c:	73 07       	cpc	r23, r19
    520e:	84 07       	cpc	r24, r20
    5210:	95 07       	cpc	r25, r21
    5212:	20 f0       	brcs	.+8      	; 0x521c <__addsf3x+0x1c>
    5214:	79 f4       	brne	.+30     	; 0x5234 <__addsf3x+0x34>
    5216:	a6 f5       	brtc	.+104    	; 0x5280 <__addsf3x+0x80>
    5218:	0c 94 f1 2a 	jmp	0x55e2	; 0x55e2 <__fp_zero>
    521c:	0e f4       	brtc	.+2      	; 0x5220 <__addsf3x+0x20>
    521e:	e0 95       	com	r30
    5220:	0b 2e       	mov	r0, r27
    5222:	ba 2f       	mov	r27, r26
    5224:	a0 2d       	mov	r26, r0
    5226:	0b 01       	movw	r0, r22
    5228:	b9 01       	movw	r22, r18
    522a:	90 01       	movw	r18, r0
    522c:	0c 01       	movw	r0, r24
    522e:	ca 01       	movw	r24, r20
    5230:	a0 01       	movw	r20, r0
    5232:	11 24       	eor	r1, r1
    5234:	ff 27       	eor	r31, r31
    5236:	59 1b       	sub	r21, r25
    5238:	99 f0       	breq	.+38     	; 0x5260 <__addsf3x+0x60>
    523a:	59 3f       	cpi	r21, 0xF9	; 249
    523c:	50 f4       	brcc	.+20     	; 0x5252 <__addsf3x+0x52>
    523e:	50 3e       	cpi	r21, 0xE0	; 224
    5240:	68 f1       	brcs	.+90     	; 0x529c <__addsf3x+0x9c>
    5242:	1a 16       	cp	r1, r26
    5244:	f0 40       	sbci	r31, 0x00	; 0
    5246:	a2 2f       	mov	r26, r18
    5248:	23 2f       	mov	r18, r19
    524a:	34 2f       	mov	r19, r20
    524c:	44 27       	eor	r20, r20
    524e:	58 5f       	subi	r21, 0xF8	; 248
    5250:	f3 cf       	rjmp	.-26     	; 0x5238 <__addsf3x+0x38>
    5252:	46 95       	lsr	r20
    5254:	37 95       	ror	r19
    5256:	27 95       	ror	r18
    5258:	a7 95       	ror	r26
    525a:	f0 40       	sbci	r31, 0x00	; 0
    525c:	53 95       	inc	r21
    525e:	c9 f7       	brne	.-14     	; 0x5252 <__addsf3x+0x52>
    5260:	7e f4       	brtc	.+30     	; 0x5280 <__addsf3x+0x80>
    5262:	1f 16       	cp	r1, r31
    5264:	ba 0b       	sbc	r27, r26
    5266:	62 0b       	sbc	r22, r18
    5268:	73 0b       	sbc	r23, r19
    526a:	84 0b       	sbc	r24, r20
    526c:	ba f0       	brmi	.+46     	; 0x529c <__addsf3x+0x9c>
    526e:	91 50       	subi	r25, 0x01	; 1
    5270:	a1 f0       	breq	.+40     	; 0x529a <__addsf3x+0x9a>
    5272:	ff 0f       	add	r31, r31
    5274:	bb 1f       	adc	r27, r27
    5276:	66 1f       	adc	r22, r22
    5278:	77 1f       	adc	r23, r23
    527a:	88 1f       	adc	r24, r24
    527c:	c2 f7       	brpl	.-16     	; 0x526e <__addsf3x+0x6e>
    527e:	0e c0       	rjmp	.+28     	; 0x529c <__addsf3x+0x9c>
    5280:	ba 0f       	add	r27, r26
    5282:	62 1f       	adc	r22, r18
    5284:	73 1f       	adc	r23, r19
    5286:	84 1f       	adc	r24, r20
    5288:	48 f4       	brcc	.+18     	; 0x529c <__addsf3x+0x9c>
    528a:	87 95       	ror	r24
    528c:	77 95       	ror	r23
    528e:	67 95       	ror	r22
    5290:	b7 95       	ror	r27
    5292:	f7 95       	ror	r31
    5294:	9e 3f       	cpi	r25, 0xFE	; 254
    5296:	08 f0       	brcs	.+2      	; 0x529a <__addsf3x+0x9a>
    5298:	b0 cf       	rjmp	.-160    	; 0x51fa <__addsf3+0x28>
    529a:	93 95       	inc	r25
    529c:	88 0f       	add	r24, r24
    529e:	08 f0       	brcs	.+2      	; 0x52a2 <__addsf3x+0xa2>
    52a0:	99 27       	eor	r25, r25
    52a2:	ee 0f       	add	r30, r30
    52a4:	97 95       	ror	r25
    52a6:	87 95       	ror	r24
    52a8:	08 95       	ret

000052aa <__cmpsf2>:
    52aa:	0e 94 44 2a 	call	0x5488	; 0x5488 <__fp_cmp>
    52ae:	08 f4       	brcc	.+2      	; 0x52b2 <__cmpsf2+0x8>
    52b0:	81 e0       	ldi	r24, 0x01	; 1
    52b2:	08 95       	ret

000052b4 <cos>:
    52b4:	0e 94 81 2a 	call	0x5502	; 0x5502 <__fp_rempio2>
    52b8:	e3 95       	inc	r30
    52ba:	0c 94 bb 2a 	jmp	0x5576	; 0x5576 <__fp_sinus>

000052be <__divsf3>:
    52be:	0e 94 73 29 	call	0x52e6	; 0x52e6 <__divsf3x>
    52c2:	0c 94 aa 2a 	jmp	0x5554	; 0x5554 <__fp_round>
    52c6:	0e 94 78 2a 	call	0x54f0	; 0x54f0 <__fp_pscB>
    52ca:	58 f0       	brcs	.+22     	; 0x52e2 <__divsf3+0x24>
    52cc:	0e 94 71 2a 	call	0x54e2	; 0x54e2 <__fp_pscA>
    52d0:	40 f0       	brcs	.+16     	; 0x52e2 <__divsf3+0x24>
    52d2:	29 f4       	brne	.+10     	; 0x52de <__divsf3+0x20>
    52d4:	5f 3f       	cpi	r21, 0xFF	; 255
    52d6:	29 f0       	breq	.+10     	; 0x52e2 <__divsf3+0x24>
    52d8:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__fp_inf>
    52dc:	51 11       	cpse	r21, r1
    52de:	0c 94 f2 2a 	jmp	0x55e4	; 0x55e4 <__fp_szero>
    52e2:	0c 94 6e 2a 	jmp	0x54dc	; 0x54dc <__fp_nan>

000052e6 <__divsf3x>:
    52e6:	0e 94 cf 2a 	call	0x559e	; 0x559e <__fp_split3>
    52ea:	68 f3       	brcs	.-38     	; 0x52c6 <__divsf3+0x8>

000052ec <__divsf3_pse>:
    52ec:	99 23       	and	r25, r25
    52ee:	b1 f3       	breq	.-20     	; 0x52dc <__divsf3+0x1e>
    52f0:	55 23       	and	r21, r21
    52f2:	91 f3       	breq	.-28     	; 0x52d8 <__divsf3+0x1a>
    52f4:	95 1b       	sub	r25, r21
    52f6:	55 0b       	sbc	r21, r21
    52f8:	bb 27       	eor	r27, r27
    52fa:	aa 27       	eor	r26, r26
    52fc:	62 17       	cp	r22, r18
    52fe:	73 07       	cpc	r23, r19
    5300:	84 07       	cpc	r24, r20
    5302:	38 f0       	brcs	.+14     	; 0x5312 <__divsf3_pse+0x26>
    5304:	9f 5f       	subi	r25, 0xFF	; 255
    5306:	5f 4f       	sbci	r21, 0xFF	; 255
    5308:	22 0f       	add	r18, r18
    530a:	33 1f       	adc	r19, r19
    530c:	44 1f       	adc	r20, r20
    530e:	aa 1f       	adc	r26, r26
    5310:	a9 f3       	breq	.-22     	; 0x52fc <__divsf3_pse+0x10>
    5312:	35 d0       	rcall	.+106    	; 0x537e <__divsf3_pse+0x92>
    5314:	0e 2e       	mov	r0, r30
    5316:	3a f0       	brmi	.+14     	; 0x5326 <__divsf3_pse+0x3a>
    5318:	e0 e8       	ldi	r30, 0x80	; 128
    531a:	32 d0       	rcall	.+100    	; 0x5380 <__divsf3_pse+0x94>
    531c:	91 50       	subi	r25, 0x01	; 1
    531e:	50 40       	sbci	r21, 0x00	; 0
    5320:	e6 95       	lsr	r30
    5322:	00 1c       	adc	r0, r0
    5324:	ca f7       	brpl	.-14     	; 0x5318 <__divsf3_pse+0x2c>
    5326:	2b d0       	rcall	.+86     	; 0x537e <__divsf3_pse+0x92>
    5328:	fe 2f       	mov	r31, r30
    532a:	29 d0       	rcall	.+82     	; 0x537e <__divsf3_pse+0x92>
    532c:	66 0f       	add	r22, r22
    532e:	77 1f       	adc	r23, r23
    5330:	88 1f       	adc	r24, r24
    5332:	bb 1f       	adc	r27, r27
    5334:	26 17       	cp	r18, r22
    5336:	37 07       	cpc	r19, r23
    5338:	48 07       	cpc	r20, r24
    533a:	ab 07       	cpc	r26, r27
    533c:	b0 e8       	ldi	r27, 0x80	; 128
    533e:	09 f0       	breq	.+2      	; 0x5342 <__divsf3_pse+0x56>
    5340:	bb 0b       	sbc	r27, r27
    5342:	80 2d       	mov	r24, r0
    5344:	bf 01       	movw	r22, r30
    5346:	ff 27       	eor	r31, r31
    5348:	93 58       	subi	r25, 0x83	; 131
    534a:	5f 4f       	sbci	r21, 0xFF	; 255
    534c:	3a f0       	brmi	.+14     	; 0x535c <__divsf3_pse+0x70>
    534e:	9e 3f       	cpi	r25, 0xFE	; 254
    5350:	51 05       	cpc	r21, r1
    5352:	78 f0       	brcs	.+30     	; 0x5372 <__divsf3_pse+0x86>
    5354:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__fp_inf>
    5358:	0c 94 f2 2a 	jmp	0x55e4	; 0x55e4 <__fp_szero>
    535c:	5f 3f       	cpi	r21, 0xFF	; 255
    535e:	e4 f3       	brlt	.-8      	; 0x5358 <__divsf3_pse+0x6c>
    5360:	98 3e       	cpi	r25, 0xE8	; 232
    5362:	d4 f3       	brlt	.-12     	; 0x5358 <__divsf3_pse+0x6c>
    5364:	86 95       	lsr	r24
    5366:	77 95       	ror	r23
    5368:	67 95       	ror	r22
    536a:	b7 95       	ror	r27
    536c:	f7 95       	ror	r31
    536e:	9f 5f       	subi	r25, 0xFF	; 255
    5370:	c9 f7       	brne	.-14     	; 0x5364 <__divsf3_pse+0x78>
    5372:	88 0f       	add	r24, r24
    5374:	91 1d       	adc	r25, r1
    5376:	96 95       	lsr	r25
    5378:	87 95       	ror	r24
    537a:	97 f9       	bld	r25, 7
    537c:	08 95       	ret
    537e:	e1 e0       	ldi	r30, 0x01	; 1
    5380:	66 0f       	add	r22, r22
    5382:	77 1f       	adc	r23, r23
    5384:	88 1f       	adc	r24, r24
    5386:	bb 1f       	adc	r27, r27
    5388:	62 17       	cp	r22, r18
    538a:	73 07       	cpc	r23, r19
    538c:	84 07       	cpc	r24, r20
    538e:	ba 07       	cpc	r27, r26
    5390:	20 f0       	brcs	.+8      	; 0x539a <__divsf3_pse+0xae>
    5392:	62 1b       	sub	r22, r18
    5394:	73 0b       	sbc	r23, r19
    5396:	84 0b       	sbc	r24, r20
    5398:	ba 0b       	sbc	r27, r26
    539a:	ee 1f       	adc	r30, r30
    539c:	88 f7       	brcc	.-30     	; 0x5380 <__divsf3_pse+0x94>
    539e:	e0 95       	com	r30
    53a0:	08 95       	ret

000053a2 <__fixsfsi>:
    53a2:	0e 94 d8 29 	call	0x53b0	; 0x53b0 <__fixunssfsi>
    53a6:	68 94       	set
    53a8:	b1 11       	cpse	r27, r1
    53aa:	0c 94 f2 2a 	jmp	0x55e4	; 0x55e4 <__fp_szero>
    53ae:	08 95       	ret

000053b0 <__fixunssfsi>:
    53b0:	0e 94 d7 2a 	call	0x55ae	; 0x55ae <__fp_splitA>
    53b4:	88 f0       	brcs	.+34     	; 0x53d8 <__fixunssfsi+0x28>
    53b6:	9f 57       	subi	r25, 0x7F	; 127
    53b8:	98 f0       	brcs	.+38     	; 0x53e0 <__fixunssfsi+0x30>
    53ba:	b9 2f       	mov	r27, r25
    53bc:	99 27       	eor	r25, r25
    53be:	b7 51       	subi	r27, 0x17	; 23
    53c0:	b0 f0       	brcs	.+44     	; 0x53ee <__fixunssfsi+0x3e>
    53c2:	e1 f0       	breq	.+56     	; 0x53fc <__fixunssfsi+0x4c>
    53c4:	66 0f       	add	r22, r22
    53c6:	77 1f       	adc	r23, r23
    53c8:	88 1f       	adc	r24, r24
    53ca:	99 1f       	adc	r25, r25
    53cc:	1a f0       	brmi	.+6      	; 0x53d4 <__fixunssfsi+0x24>
    53ce:	ba 95       	dec	r27
    53d0:	c9 f7       	brne	.-14     	; 0x53c4 <__fixunssfsi+0x14>
    53d2:	14 c0       	rjmp	.+40     	; 0x53fc <__fixunssfsi+0x4c>
    53d4:	b1 30       	cpi	r27, 0x01	; 1
    53d6:	91 f0       	breq	.+36     	; 0x53fc <__fixunssfsi+0x4c>
    53d8:	0e 94 f1 2a 	call	0x55e2	; 0x55e2 <__fp_zero>
    53dc:	b1 e0       	ldi	r27, 0x01	; 1
    53de:	08 95       	ret
    53e0:	0c 94 f1 2a 	jmp	0x55e2	; 0x55e2 <__fp_zero>
    53e4:	67 2f       	mov	r22, r23
    53e6:	78 2f       	mov	r23, r24
    53e8:	88 27       	eor	r24, r24
    53ea:	b8 5f       	subi	r27, 0xF8	; 248
    53ec:	39 f0       	breq	.+14     	; 0x53fc <__fixunssfsi+0x4c>
    53ee:	b9 3f       	cpi	r27, 0xF9	; 249
    53f0:	cc f3       	brlt	.-14     	; 0x53e4 <__fixunssfsi+0x34>
    53f2:	86 95       	lsr	r24
    53f4:	77 95       	ror	r23
    53f6:	67 95       	ror	r22
    53f8:	b3 95       	inc	r27
    53fa:	d9 f7       	brne	.-10     	; 0x53f2 <__fixunssfsi+0x42>
    53fc:	3e f4       	brtc	.+14     	; 0x540c <__fixunssfsi+0x5c>
    53fe:	90 95       	com	r25
    5400:	80 95       	com	r24
    5402:	70 95       	com	r23
    5404:	61 95       	neg	r22
    5406:	7f 4f       	sbci	r23, 0xFF	; 255
    5408:	8f 4f       	sbci	r24, 0xFF	; 255
    540a:	9f 4f       	sbci	r25, 0xFF	; 255
    540c:	08 95       	ret

0000540e <__floatunsisf>:
    540e:	e8 94       	clt
    5410:	09 c0       	rjmp	.+18     	; 0x5424 <__floatsisf+0x12>

00005412 <__floatsisf>:
    5412:	97 fb       	bst	r25, 7
    5414:	3e f4       	brtc	.+14     	; 0x5424 <__floatsisf+0x12>
    5416:	90 95       	com	r25
    5418:	80 95       	com	r24
    541a:	70 95       	com	r23
    541c:	61 95       	neg	r22
    541e:	7f 4f       	sbci	r23, 0xFF	; 255
    5420:	8f 4f       	sbci	r24, 0xFF	; 255
    5422:	9f 4f       	sbci	r25, 0xFF	; 255
    5424:	99 23       	and	r25, r25
    5426:	a9 f0       	breq	.+42     	; 0x5452 <__floatsisf+0x40>
    5428:	f9 2f       	mov	r31, r25
    542a:	96 e9       	ldi	r25, 0x96	; 150
    542c:	bb 27       	eor	r27, r27
    542e:	93 95       	inc	r25
    5430:	f6 95       	lsr	r31
    5432:	87 95       	ror	r24
    5434:	77 95       	ror	r23
    5436:	67 95       	ror	r22
    5438:	b7 95       	ror	r27
    543a:	f1 11       	cpse	r31, r1
    543c:	f8 cf       	rjmp	.-16     	; 0x542e <__floatsisf+0x1c>
    543e:	fa f4       	brpl	.+62     	; 0x547e <__floatsisf+0x6c>
    5440:	bb 0f       	add	r27, r27
    5442:	11 f4       	brne	.+4      	; 0x5448 <__floatsisf+0x36>
    5444:	60 ff       	sbrs	r22, 0
    5446:	1b c0       	rjmp	.+54     	; 0x547e <__floatsisf+0x6c>
    5448:	6f 5f       	subi	r22, 0xFF	; 255
    544a:	7f 4f       	sbci	r23, 0xFF	; 255
    544c:	8f 4f       	sbci	r24, 0xFF	; 255
    544e:	9f 4f       	sbci	r25, 0xFF	; 255
    5450:	16 c0       	rjmp	.+44     	; 0x547e <__floatsisf+0x6c>
    5452:	88 23       	and	r24, r24
    5454:	11 f0       	breq	.+4      	; 0x545a <__floatsisf+0x48>
    5456:	96 e9       	ldi	r25, 0x96	; 150
    5458:	11 c0       	rjmp	.+34     	; 0x547c <__floatsisf+0x6a>
    545a:	77 23       	and	r23, r23
    545c:	21 f0       	breq	.+8      	; 0x5466 <__floatsisf+0x54>
    545e:	9e e8       	ldi	r25, 0x8E	; 142
    5460:	87 2f       	mov	r24, r23
    5462:	76 2f       	mov	r23, r22
    5464:	05 c0       	rjmp	.+10     	; 0x5470 <__floatsisf+0x5e>
    5466:	66 23       	and	r22, r22
    5468:	71 f0       	breq	.+28     	; 0x5486 <__floatsisf+0x74>
    546a:	96 e8       	ldi	r25, 0x86	; 134
    546c:	86 2f       	mov	r24, r22
    546e:	70 e0       	ldi	r23, 0x00	; 0
    5470:	60 e0       	ldi	r22, 0x00	; 0
    5472:	2a f0       	brmi	.+10     	; 0x547e <__floatsisf+0x6c>
    5474:	9a 95       	dec	r25
    5476:	66 0f       	add	r22, r22
    5478:	77 1f       	adc	r23, r23
    547a:	88 1f       	adc	r24, r24
    547c:	da f7       	brpl	.-10     	; 0x5474 <__floatsisf+0x62>
    547e:	88 0f       	add	r24, r24
    5480:	96 95       	lsr	r25
    5482:	87 95       	ror	r24
    5484:	97 f9       	bld	r25, 7
    5486:	08 95       	ret

00005488 <__fp_cmp>:
    5488:	99 0f       	add	r25, r25
    548a:	00 08       	sbc	r0, r0
    548c:	55 0f       	add	r21, r21
    548e:	aa 0b       	sbc	r26, r26
    5490:	e0 e8       	ldi	r30, 0x80	; 128
    5492:	fe ef       	ldi	r31, 0xFE	; 254
    5494:	16 16       	cp	r1, r22
    5496:	17 06       	cpc	r1, r23
    5498:	e8 07       	cpc	r30, r24
    549a:	f9 07       	cpc	r31, r25
    549c:	c0 f0       	brcs	.+48     	; 0x54ce <__fp_cmp+0x46>
    549e:	12 16       	cp	r1, r18
    54a0:	13 06       	cpc	r1, r19
    54a2:	e4 07       	cpc	r30, r20
    54a4:	f5 07       	cpc	r31, r21
    54a6:	98 f0       	brcs	.+38     	; 0x54ce <__fp_cmp+0x46>
    54a8:	62 1b       	sub	r22, r18
    54aa:	73 0b       	sbc	r23, r19
    54ac:	84 0b       	sbc	r24, r20
    54ae:	95 0b       	sbc	r25, r21
    54b0:	39 f4       	brne	.+14     	; 0x54c0 <__fp_cmp+0x38>
    54b2:	0a 26       	eor	r0, r26
    54b4:	61 f0       	breq	.+24     	; 0x54ce <__fp_cmp+0x46>
    54b6:	23 2b       	or	r18, r19
    54b8:	24 2b       	or	r18, r20
    54ba:	25 2b       	or	r18, r21
    54bc:	21 f4       	brne	.+8      	; 0x54c6 <__fp_cmp+0x3e>
    54be:	08 95       	ret
    54c0:	0a 26       	eor	r0, r26
    54c2:	09 f4       	brne	.+2      	; 0x54c6 <__fp_cmp+0x3e>
    54c4:	a1 40       	sbci	r26, 0x01	; 1
    54c6:	a6 95       	lsr	r26
    54c8:	8f ef       	ldi	r24, 0xFF	; 255
    54ca:	81 1d       	adc	r24, r1
    54cc:	81 1d       	adc	r24, r1
    54ce:	08 95       	ret

000054d0 <__fp_inf>:
    54d0:	97 f9       	bld	r25, 7
    54d2:	9f 67       	ori	r25, 0x7F	; 127
    54d4:	80 e8       	ldi	r24, 0x80	; 128
    54d6:	70 e0       	ldi	r23, 0x00	; 0
    54d8:	60 e0       	ldi	r22, 0x00	; 0
    54da:	08 95       	ret

000054dc <__fp_nan>:
    54dc:	9f ef       	ldi	r25, 0xFF	; 255
    54de:	80 ec       	ldi	r24, 0xC0	; 192
    54e0:	08 95       	ret

000054e2 <__fp_pscA>:
    54e2:	00 24       	eor	r0, r0
    54e4:	0a 94       	dec	r0
    54e6:	16 16       	cp	r1, r22
    54e8:	17 06       	cpc	r1, r23
    54ea:	18 06       	cpc	r1, r24
    54ec:	09 06       	cpc	r0, r25
    54ee:	08 95       	ret

000054f0 <__fp_pscB>:
    54f0:	00 24       	eor	r0, r0
    54f2:	0a 94       	dec	r0
    54f4:	12 16       	cp	r1, r18
    54f6:	13 06       	cpc	r1, r19
    54f8:	14 06       	cpc	r1, r20
    54fa:	05 06       	cpc	r0, r21
    54fc:	08 95       	ret
    54fe:	0c 94 6e 2a 	jmp	0x54dc	; 0x54dc <__fp_nan>

00005502 <__fp_rempio2>:
    5502:	0e 94 d7 2a 	call	0x55ae	; 0x55ae <__fp_splitA>
    5506:	d8 f3       	brcs	.-10     	; 0x54fe <__fp_pscB+0xe>
    5508:	e8 94       	clt
    550a:	e0 e0       	ldi	r30, 0x00	; 0
    550c:	bb 27       	eor	r27, r27
    550e:	9f 57       	subi	r25, 0x7F	; 127
    5510:	f0 f0       	brcs	.+60     	; 0x554e <__fp_rempio2+0x4c>
    5512:	2a ed       	ldi	r18, 0xDA	; 218
    5514:	3f e0       	ldi	r19, 0x0F	; 15
    5516:	49 ec       	ldi	r20, 0xC9	; 201
    5518:	06 c0       	rjmp	.+12     	; 0x5526 <__fp_rempio2+0x24>
    551a:	ee 0f       	add	r30, r30
    551c:	bb 0f       	add	r27, r27
    551e:	66 1f       	adc	r22, r22
    5520:	77 1f       	adc	r23, r23
    5522:	88 1f       	adc	r24, r24
    5524:	28 f0       	brcs	.+10     	; 0x5530 <__fp_rempio2+0x2e>
    5526:	b2 3a       	cpi	r27, 0xA2	; 162
    5528:	62 07       	cpc	r22, r18
    552a:	73 07       	cpc	r23, r19
    552c:	84 07       	cpc	r24, r20
    552e:	28 f0       	brcs	.+10     	; 0x553a <__fp_rempio2+0x38>
    5530:	b2 5a       	subi	r27, 0xA2	; 162
    5532:	62 0b       	sbc	r22, r18
    5534:	73 0b       	sbc	r23, r19
    5536:	84 0b       	sbc	r24, r20
    5538:	e3 95       	inc	r30
    553a:	9a 95       	dec	r25
    553c:	72 f7       	brpl	.-36     	; 0x551a <__fp_rempio2+0x18>
    553e:	80 38       	cpi	r24, 0x80	; 128
    5540:	30 f4       	brcc	.+12     	; 0x554e <__fp_rempio2+0x4c>
    5542:	9a 95       	dec	r25
    5544:	bb 0f       	add	r27, r27
    5546:	66 1f       	adc	r22, r22
    5548:	77 1f       	adc	r23, r23
    554a:	88 1f       	adc	r24, r24
    554c:	d2 f7       	brpl	.-12     	; 0x5542 <__fp_rempio2+0x40>
    554e:	90 48       	sbci	r25, 0x80	; 128
    5550:	0c 94 ab 2b 	jmp	0x5756	; 0x5756 <__fp_mpack_finite>

00005554 <__fp_round>:
    5554:	09 2e       	mov	r0, r25
    5556:	03 94       	inc	r0
    5558:	00 0c       	add	r0, r0
    555a:	11 f4       	brne	.+4      	; 0x5560 <__fp_round+0xc>
    555c:	88 23       	and	r24, r24
    555e:	52 f0       	brmi	.+20     	; 0x5574 <__fp_round+0x20>
    5560:	bb 0f       	add	r27, r27
    5562:	40 f4       	brcc	.+16     	; 0x5574 <__fp_round+0x20>
    5564:	bf 2b       	or	r27, r31
    5566:	11 f4       	brne	.+4      	; 0x556c <__fp_round+0x18>
    5568:	60 ff       	sbrs	r22, 0
    556a:	04 c0       	rjmp	.+8      	; 0x5574 <__fp_round+0x20>
    556c:	6f 5f       	subi	r22, 0xFF	; 255
    556e:	7f 4f       	sbci	r23, 0xFF	; 255
    5570:	8f 4f       	sbci	r24, 0xFF	; 255
    5572:	9f 4f       	sbci	r25, 0xFF	; 255
    5574:	08 95       	ret

00005576 <__fp_sinus>:
    5576:	ef 93       	push	r30
    5578:	e0 ff       	sbrs	r30, 0
    557a:	07 c0       	rjmp	.+14     	; 0x558a <__fp_sinus+0x14>
    557c:	a2 ea       	ldi	r26, 0xA2	; 162
    557e:	2a ed       	ldi	r18, 0xDA	; 218
    5580:	3f e0       	ldi	r19, 0x0F	; 15
    5582:	49 ec       	ldi	r20, 0xC9	; 201
    5584:	5f eb       	ldi	r21, 0xBF	; 191
    5586:	0e 94 00 29 	call	0x5200	; 0x5200 <__addsf3x>
    558a:	0e 94 aa 2a 	call	0x5554	; 0x5554 <__fp_round>
    558e:	0f 90       	pop	r0
    5590:	03 94       	inc	r0
    5592:	01 fc       	sbrc	r0, 1
    5594:	90 58       	subi	r25, 0x80	; 128
    5596:	e6 e0       	ldi	r30, 0x06	; 6
    5598:	f2 e0       	ldi	r31, 0x02	; 2
    559a:	0c 94 b7 2b 	jmp	0x576e	; 0x576e <__fp_powsodd>

0000559e <__fp_split3>:
    559e:	57 fd       	sbrc	r21, 7
    55a0:	90 58       	subi	r25, 0x80	; 128
    55a2:	44 0f       	add	r20, r20
    55a4:	55 1f       	adc	r21, r21
    55a6:	59 f0       	breq	.+22     	; 0x55be <__fp_splitA+0x10>
    55a8:	5f 3f       	cpi	r21, 0xFF	; 255
    55aa:	71 f0       	breq	.+28     	; 0x55c8 <__fp_splitA+0x1a>
    55ac:	47 95       	ror	r20

000055ae <__fp_splitA>:
    55ae:	88 0f       	add	r24, r24
    55b0:	97 fb       	bst	r25, 7
    55b2:	99 1f       	adc	r25, r25
    55b4:	61 f0       	breq	.+24     	; 0x55ce <__fp_splitA+0x20>
    55b6:	9f 3f       	cpi	r25, 0xFF	; 255
    55b8:	79 f0       	breq	.+30     	; 0x55d8 <__fp_splitA+0x2a>
    55ba:	87 95       	ror	r24
    55bc:	08 95       	ret
    55be:	12 16       	cp	r1, r18
    55c0:	13 06       	cpc	r1, r19
    55c2:	14 06       	cpc	r1, r20
    55c4:	55 1f       	adc	r21, r21
    55c6:	f2 cf       	rjmp	.-28     	; 0x55ac <__fp_split3+0xe>
    55c8:	46 95       	lsr	r20
    55ca:	f1 df       	rcall	.-30     	; 0x55ae <__fp_splitA>
    55cc:	08 c0       	rjmp	.+16     	; 0x55de <__fp_splitA+0x30>
    55ce:	16 16       	cp	r1, r22
    55d0:	17 06       	cpc	r1, r23
    55d2:	18 06       	cpc	r1, r24
    55d4:	99 1f       	adc	r25, r25
    55d6:	f1 cf       	rjmp	.-30     	; 0x55ba <__fp_splitA+0xc>
    55d8:	86 95       	lsr	r24
    55da:	71 05       	cpc	r23, r1
    55dc:	61 05       	cpc	r22, r1
    55de:	08 94       	sec
    55e0:	08 95       	ret

000055e2 <__fp_zero>:
    55e2:	e8 94       	clt

000055e4 <__fp_szero>:
    55e4:	bb 27       	eor	r27, r27
    55e6:	66 27       	eor	r22, r22
    55e8:	77 27       	eor	r23, r23
    55ea:	cb 01       	movw	r24, r22
    55ec:	97 f9       	bld	r25, 7
    55ee:	08 95       	ret

000055f0 <__gesf2>:
    55f0:	0e 94 44 2a 	call	0x5488	; 0x5488 <__fp_cmp>
    55f4:	08 f4       	brcc	.+2      	; 0x55f8 <__gesf2+0x8>
    55f6:	8f ef       	ldi	r24, 0xFF	; 255
    55f8:	08 95       	ret

000055fa <__mulsf3>:
    55fa:	0e 94 10 2b 	call	0x5620	; 0x5620 <__mulsf3x>
    55fe:	0c 94 aa 2a 	jmp	0x5554	; 0x5554 <__fp_round>
    5602:	0e 94 71 2a 	call	0x54e2	; 0x54e2 <__fp_pscA>
    5606:	38 f0       	brcs	.+14     	; 0x5616 <__mulsf3+0x1c>
    5608:	0e 94 78 2a 	call	0x54f0	; 0x54f0 <__fp_pscB>
    560c:	20 f0       	brcs	.+8      	; 0x5616 <__mulsf3+0x1c>
    560e:	95 23       	and	r25, r21
    5610:	11 f0       	breq	.+4      	; 0x5616 <__mulsf3+0x1c>
    5612:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__fp_inf>
    5616:	0c 94 6e 2a 	jmp	0x54dc	; 0x54dc <__fp_nan>
    561a:	11 24       	eor	r1, r1
    561c:	0c 94 f2 2a 	jmp	0x55e4	; 0x55e4 <__fp_szero>

00005620 <__mulsf3x>:
    5620:	0e 94 cf 2a 	call	0x559e	; 0x559e <__fp_split3>
    5624:	70 f3       	brcs	.-36     	; 0x5602 <__mulsf3+0x8>

00005626 <__mulsf3_pse>:
    5626:	95 9f       	mul	r25, r21
    5628:	c1 f3       	breq	.-16     	; 0x561a <__mulsf3+0x20>
    562a:	95 0f       	add	r25, r21
    562c:	50 e0       	ldi	r21, 0x00	; 0
    562e:	55 1f       	adc	r21, r21
    5630:	62 9f       	mul	r22, r18
    5632:	f0 01       	movw	r30, r0
    5634:	72 9f       	mul	r23, r18
    5636:	bb 27       	eor	r27, r27
    5638:	f0 0d       	add	r31, r0
    563a:	b1 1d       	adc	r27, r1
    563c:	63 9f       	mul	r22, r19
    563e:	aa 27       	eor	r26, r26
    5640:	f0 0d       	add	r31, r0
    5642:	b1 1d       	adc	r27, r1
    5644:	aa 1f       	adc	r26, r26
    5646:	64 9f       	mul	r22, r20
    5648:	66 27       	eor	r22, r22
    564a:	b0 0d       	add	r27, r0
    564c:	a1 1d       	adc	r26, r1
    564e:	66 1f       	adc	r22, r22
    5650:	82 9f       	mul	r24, r18
    5652:	22 27       	eor	r18, r18
    5654:	b0 0d       	add	r27, r0
    5656:	a1 1d       	adc	r26, r1
    5658:	62 1f       	adc	r22, r18
    565a:	73 9f       	mul	r23, r19
    565c:	b0 0d       	add	r27, r0
    565e:	a1 1d       	adc	r26, r1
    5660:	62 1f       	adc	r22, r18
    5662:	83 9f       	mul	r24, r19
    5664:	a0 0d       	add	r26, r0
    5666:	61 1d       	adc	r22, r1
    5668:	22 1f       	adc	r18, r18
    566a:	74 9f       	mul	r23, r20
    566c:	33 27       	eor	r19, r19
    566e:	a0 0d       	add	r26, r0
    5670:	61 1d       	adc	r22, r1
    5672:	23 1f       	adc	r18, r19
    5674:	84 9f       	mul	r24, r20
    5676:	60 0d       	add	r22, r0
    5678:	21 1d       	adc	r18, r1
    567a:	82 2f       	mov	r24, r18
    567c:	76 2f       	mov	r23, r22
    567e:	6a 2f       	mov	r22, r26
    5680:	11 24       	eor	r1, r1
    5682:	9f 57       	subi	r25, 0x7F	; 127
    5684:	50 40       	sbci	r21, 0x00	; 0
    5686:	9a f0       	brmi	.+38     	; 0x56ae <__mulsf3_pse+0x88>
    5688:	f1 f0       	breq	.+60     	; 0x56c6 <__mulsf3_pse+0xa0>
    568a:	88 23       	and	r24, r24
    568c:	4a f0       	brmi	.+18     	; 0x56a0 <__mulsf3_pse+0x7a>
    568e:	ee 0f       	add	r30, r30
    5690:	ff 1f       	adc	r31, r31
    5692:	bb 1f       	adc	r27, r27
    5694:	66 1f       	adc	r22, r22
    5696:	77 1f       	adc	r23, r23
    5698:	88 1f       	adc	r24, r24
    569a:	91 50       	subi	r25, 0x01	; 1
    569c:	50 40       	sbci	r21, 0x00	; 0
    569e:	a9 f7       	brne	.-22     	; 0x568a <__mulsf3_pse+0x64>
    56a0:	9e 3f       	cpi	r25, 0xFE	; 254
    56a2:	51 05       	cpc	r21, r1
    56a4:	80 f0       	brcs	.+32     	; 0x56c6 <__mulsf3_pse+0xa0>
    56a6:	0c 94 68 2a 	jmp	0x54d0	; 0x54d0 <__fp_inf>
    56aa:	0c 94 f2 2a 	jmp	0x55e4	; 0x55e4 <__fp_szero>
    56ae:	5f 3f       	cpi	r21, 0xFF	; 255
    56b0:	e4 f3       	brlt	.-8      	; 0x56aa <__mulsf3_pse+0x84>
    56b2:	98 3e       	cpi	r25, 0xE8	; 232
    56b4:	d4 f3       	brlt	.-12     	; 0x56aa <__mulsf3_pse+0x84>
    56b6:	86 95       	lsr	r24
    56b8:	77 95       	ror	r23
    56ba:	67 95       	ror	r22
    56bc:	b7 95       	ror	r27
    56be:	f7 95       	ror	r31
    56c0:	e7 95       	ror	r30
    56c2:	9f 5f       	subi	r25, 0xFF	; 255
    56c4:	c1 f7       	brne	.-16     	; 0x56b6 <__mulsf3_pse+0x90>
    56c6:	fe 2b       	or	r31, r30
    56c8:	88 0f       	add	r24, r24
    56ca:	91 1d       	adc	r25, r1
    56cc:	96 95       	lsr	r25
    56ce:	87 95       	ror	r24
    56d0:	97 f9       	bld	r25, 7
    56d2:	08 95       	ret

000056d4 <round>:
    56d4:	0e 94 d7 2a 	call	0x55ae	; 0x55ae <__fp_splitA>
    56d8:	e8 f0       	brcs	.+58     	; 0x5714 <round+0x40>
    56da:	9e 37       	cpi	r25, 0x7E	; 126
    56dc:	e8 f0       	brcs	.+58     	; 0x5718 <round+0x44>
    56de:	96 39       	cpi	r25, 0x96	; 150
    56e0:	b8 f4       	brcc	.+46     	; 0x5710 <round+0x3c>
    56e2:	9e 38       	cpi	r25, 0x8E	; 142
    56e4:	48 f4       	brcc	.+18     	; 0x56f8 <round+0x24>
    56e6:	67 2f       	mov	r22, r23
    56e8:	78 2f       	mov	r23, r24
    56ea:	88 27       	eor	r24, r24
    56ec:	98 5f       	subi	r25, 0xF8	; 248
    56ee:	f9 cf       	rjmp	.-14     	; 0x56e2 <round+0xe>
    56f0:	86 95       	lsr	r24
    56f2:	77 95       	ror	r23
    56f4:	67 95       	ror	r22
    56f6:	93 95       	inc	r25
    56f8:	95 39       	cpi	r25, 0x95	; 149
    56fa:	d0 f3       	brcs	.-12     	; 0x56f0 <round+0x1c>
    56fc:	b6 2f       	mov	r27, r22
    56fe:	b1 70       	andi	r27, 0x01	; 1
    5700:	6b 0f       	add	r22, r27
    5702:	71 1d       	adc	r23, r1
    5704:	81 1d       	adc	r24, r1
    5706:	20 f4       	brcc	.+8      	; 0x5710 <round+0x3c>
    5708:	87 95       	ror	r24
    570a:	77 95       	ror	r23
    570c:	67 95       	ror	r22
    570e:	93 95       	inc	r25
    5710:	0c 94 8e 2b 	jmp	0x571c	; 0x571c <__fp_mintl>
    5714:	0c 94 a9 2b 	jmp	0x5752	; 0x5752 <__fp_mpack>
    5718:	0c 94 f2 2a 	jmp	0x55e4	; 0x55e4 <__fp_szero>

0000571c <__fp_mintl>:
    571c:	88 23       	and	r24, r24
    571e:	71 f4       	brne	.+28     	; 0x573c <__fp_mintl+0x20>
    5720:	77 23       	and	r23, r23
    5722:	21 f0       	breq	.+8      	; 0x572c <__fp_mintl+0x10>
    5724:	98 50       	subi	r25, 0x08	; 8
    5726:	87 2b       	or	r24, r23
    5728:	76 2f       	mov	r23, r22
    572a:	07 c0       	rjmp	.+14     	; 0x573a <__fp_mintl+0x1e>
    572c:	66 23       	and	r22, r22
    572e:	11 f4       	brne	.+4      	; 0x5734 <__fp_mintl+0x18>
    5730:	99 27       	eor	r25, r25
    5732:	0d c0       	rjmp	.+26     	; 0x574e <__fp_mintl+0x32>
    5734:	90 51       	subi	r25, 0x10	; 16
    5736:	86 2b       	or	r24, r22
    5738:	70 e0       	ldi	r23, 0x00	; 0
    573a:	60 e0       	ldi	r22, 0x00	; 0
    573c:	2a f0       	brmi	.+10     	; 0x5748 <__fp_mintl+0x2c>
    573e:	9a 95       	dec	r25
    5740:	66 0f       	add	r22, r22
    5742:	77 1f       	adc	r23, r23
    5744:	88 1f       	adc	r24, r24
    5746:	da f7       	brpl	.-10     	; 0x573e <__fp_mintl+0x22>
    5748:	88 0f       	add	r24, r24
    574a:	96 95       	lsr	r25
    574c:	87 95       	ror	r24
    574e:	97 f9       	bld	r25, 7
    5750:	08 95       	ret

00005752 <__fp_mpack>:
    5752:	9f 3f       	cpi	r25, 0xFF	; 255
    5754:	31 f0       	breq	.+12     	; 0x5762 <__fp_mpack_finite+0xc>

00005756 <__fp_mpack_finite>:
    5756:	91 50       	subi	r25, 0x01	; 1
    5758:	20 f4       	brcc	.+8      	; 0x5762 <__fp_mpack_finite+0xc>
    575a:	87 95       	ror	r24
    575c:	77 95       	ror	r23
    575e:	67 95       	ror	r22
    5760:	b7 95       	ror	r27
    5762:	88 0f       	add	r24, r24
    5764:	91 1d       	adc	r25, r1
    5766:	96 95       	lsr	r25
    5768:	87 95       	ror	r24
    576a:	97 f9       	bld	r25, 7
    576c:	08 95       	ret

0000576e <__fp_powsodd>:
    576e:	9f 93       	push	r25
    5770:	8f 93       	push	r24
    5772:	7f 93       	push	r23
    5774:	6f 93       	push	r22
    5776:	ff 93       	push	r31
    5778:	ef 93       	push	r30
    577a:	9b 01       	movw	r18, r22
    577c:	ac 01       	movw	r20, r24
    577e:	0e 94 fd 2a 	call	0x55fa	; 0x55fa <__mulsf3>
    5782:	ef 91       	pop	r30
    5784:	ff 91       	pop	r31
    5786:	0e 94 cb 2b 	call	0x5796	; 0x5796 <__fp_powser>
    578a:	2f 91       	pop	r18
    578c:	3f 91       	pop	r19
    578e:	4f 91       	pop	r20
    5790:	5f 91       	pop	r21
    5792:	0c 94 fd 2a 	jmp	0x55fa	; 0x55fa <__mulsf3>

00005796 <__fp_powser>:
    5796:	df 93       	push	r29
    5798:	cf 93       	push	r28
    579a:	1f 93       	push	r17
    579c:	0f 93       	push	r16
    579e:	ff 92       	push	r15
    57a0:	ef 92       	push	r14
    57a2:	df 92       	push	r13
    57a4:	7b 01       	movw	r14, r22
    57a6:	8c 01       	movw	r16, r24
    57a8:	68 94       	set
    57aa:	06 c0       	rjmp	.+12     	; 0x57b8 <__fp_powser+0x22>
    57ac:	da 2e       	mov	r13, r26
    57ae:	ef 01       	movw	r28, r30
    57b0:	0e 94 10 2b 	call	0x5620	; 0x5620 <__mulsf3x>
    57b4:	fe 01       	movw	r30, r28
    57b6:	e8 94       	clt
    57b8:	a5 91       	lpm	r26, Z+
    57ba:	25 91       	lpm	r18, Z+
    57bc:	35 91       	lpm	r19, Z+
    57be:	45 91       	lpm	r20, Z+
    57c0:	55 91       	lpm	r21, Z+
    57c2:	a6 f3       	brts	.-24     	; 0x57ac <__fp_powser+0x16>
    57c4:	ef 01       	movw	r28, r30
    57c6:	0e 94 00 29 	call	0x5200	; 0x5200 <__addsf3x>
    57ca:	fe 01       	movw	r30, r28
    57cc:	97 01       	movw	r18, r14
    57ce:	a8 01       	movw	r20, r16
    57d0:	da 94       	dec	r13
    57d2:	69 f7       	brne	.-38     	; 0x57ae <__fp_powser+0x18>
    57d4:	df 90       	pop	r13
    57d6:	ef 90       	pop	r14
    57d8:	ff 90       	pop	r15
    57da:	0f 91       	pop	r16
    57dc:	1f 91       	pop	r17
    57de:	cf 91       	pop	r28
    57e0:	df 91       	pop	r29
    57e2:	08 95       	ret

000057e4 <__mulsi3>:
    57e4:	db 01       	movw	r26, r22
    57e6:	8f 93       	push	r24
    57e8:	9f 93       	push	r25
    57ea:	0e 94 87 2c 	call	0x590e	; 0x590e <__muluhisi3>
    57ee:	bf 91       	pop	r27
    57f0:	af 91       	pop	r26
    57f2:	a2 9f       	mul	r26, r18
    57f4:	80 0d       	add	r24, r0
    57f6:	91 1d       	adc	r25, r1
    57f8:	a3 9f       	mul	r26, r19
    57fa:	90 0d       	add	r25, r0
    57fc:	b2 9f       	mul	r27, r18
    57fe:	90 0d       	add	r25, r0
    5800:	11 24       	eor	r1, r1
    5802:	08 95       	ret

00005804 <__udivmodhi4>:
    5804:	aa 1b       	sub	r26, r26
    5806:	bb 1b       	sub	r27, r27
    5808:	51 e1       	ldi	r21, 0x11	; 17
    580a:	07 c0       	rjmp	.+14     	; 0x581a <__udivmodhi4_ep>

0000580c <__udivmodhi4_loop>:
    580c:	aa 1f       	adc	r26, r26
    580e:	bb 1f       	adc	r27, r27
    5810:	a6 17       	cp	r26, r22
    5812:	b7 07       	cpc	r27, r23
    5814:	10 f0       	brcs	.+4      	; 0x581a <__udivmodhi4_ep>
    5816:	a6 1b       	sub	r26, r22
    5818:	b7 0b       	sbc	r27, r23

0000581a <__udivmodhi4_ep>:
    581a:	88 1f       	adc	r24, r24
    581c:	99 1f       	adc	r25, r25
    581e:	5a 95       	dec	r21
    5820:	a9 f7       	brne	.-22     	; 0x580c <__udivmodhi4_loop>
    5822:	80 95       	com	r24
    5824:	90 95       	com	r25
    5826:	bc 01       	movw	r22, r24
    5828:	cd 01       	movw	r24, r26
    582a:	08 95       	ret

0000582c <__divmodhi4>:
    582c:	97 fb       	bst	r25, 7
    582e:	07 2e       	mov	r0, r23
    5830:	16 f4       	brtc	.+4      	; 0x5836 <__divmodhi4+0xa>
    5832:	00 94       	com	r0
    5834:	07 d0       	rcall	.+14     	; 0x5844 <__divmodhi4_neg1>
    5836:	77 fd       	sbrc	r23, 7
    5838:	09 d0       	rcall	.+18     	; 0x584c <__divmodhi4_neg2>
    583a:	0e 94 02 2c 	call	0x5804	; 0x5804 <__udivmodhi4>
    583e:	07 fc       	sbrc	r0, 7
    5840:	05 d0       	rcall	.+10     	; 0x584c <__divmodhi4_neg2>
    5842:	3e f4       	brtc	.+14     	; 0x5852 <__divmodhi4_exit>

00005844 <__divmodhi4_neg1>:
    5844:	90 95       	com	r25
    5846:	81 95       	neg	r24
    5848:	9f 4f       	sbci	r25, 0xFF	; 255
    584a:	08 95       	ret

0000584c <__divmodhi4_neg2>:
    584c:	70 95       	com	r23
    584e:	61 95       	neg	r22
    5850:	7f 4f       	sbci	r23, 0xFF	; 255

00005852 <__divmodhi4_exit>:
    5852:	08 95       	ret

00005854 <__udivmodsi4>:
    5854:	a1 e2       	ldi	r26, 0x21	; 33
    5856:	1a 2e       	mov	r1, r26
    5858:	aa 1b       	sub	r26, r26
    585a:	bb 1b       	sub	r27, r27
    585c:	fd 01       	movw	r30, r26
    585e:	0d c0       	rjmp	.+26     	; 0x587a <__udivmodsi4_ep>

00005860 <__udivmodsi4_loop>:
    5860:	aa 1f       	adc	r26, r26
    5862:	bb 1f       	adc	r27, r27
    5864:	ee 1f       	adc	r30, r30
    5866:	ff 1f       	adc	r31, r31
    5868:	a2 17       	cp	r26, r18
    586a:	b3 07       	cpc	r27, r19
    586c:	e4 07       	cpc	r30, r20
    586e:	f5 07       	cpc	r31, r21
    5870:	20 f0       	brcs	.+8      	; 0x587a <__udivmodsi4_ep>
    5872:	a2 1b       	sub	r26, r18
    5874:	b3 0b       	sbc	r27, r19
    5876:	e4 0b       	sbc	r30, r20
    5878:	f5 0b       	sbc	r31, r21

0000587a <__udivmodsi4_ep>:
    587a:	66 1f       	adc	r22, r22
    587c:	77 1f       	adc	r23, r23
    587e:	88 1f       	adc	r24, r24
    5880:	99 1f       	adc	r25, r25
    5882:	1a 94       	dec	r1
    5884:	69 f7       	brne	.-38     	; 0x5860 <__udivmodsi4_loop>
    5886:	60 95       	com	r22
    5888:	70 95       	com	r23
    588a:	80 95       	com	r24
    588c:	90 95       	com	r25
    588e:	9b 01       	movw	r18, r22
    5890:	ac 01       	movw	r20, r24
    5892:	bd 01       	movw	r22, r26
    5894:	cf 01       	movw	r24, r30
    5896:	08 95       	ret

00005898 <__divmodsi4>:
    5898:	05 2e       	mov	r0, r21
    589a:	97 fb       	bst	r25, 7
    589c:	1e f4       	brtc	.+6      	; 0x58a4 <__divmodsi4+0xc>
    589e:	00 94       	com	r0
    58a0:	0e 94 63 2c 	call	0x58c6	; 0x58c6 <__negsi2>
    58a4:	57 fd       	sbrc	r21, 7
    58a6:	07 d0       	rcall	.+14     	; 0x58b6 <__divmodsi4_neg2>
    58a8:	0e 94 2a 2c 	call	0x5854	; 0x5854 <__udivmodsi4>
    58ac:	07 fc       	sbrc	r0, 7
    58ae:	03 d0       	rcall	.+6      	; 0x58b6 <__divmodsi4_neg2>
    58b0:	4e f4       	brtc	.+18     	; 0x58c4 <__divmodsi4_exit>
    58b2:	0c 94 63 2c 	jmp	0x58c6	; 0x58c6 <__negsi2>

000058b6 <__divmodsi4_neg2>:
    58b6:	50 95       	com	r21
    58b8:	40 95       	com	r20
    58ba:	30 95       	com	r19
    58bc:	21 95       	neg	r18
    58be:	3f 4f       	sbci	r19, 0xFF	; 255
    58c0:	4f 4f       	sbci	r20, 0xFF	; 255
    58c2:	5f 4f       	sbci	r21, 0xFF	; 255

000058c4 <__divmodsi4_exit>:
    58c4:	08 95       	ret

000058c6 <__negsi2>:
    58c6:	90 95       	com	r25
    58c8:	80 95       	com	r24
    58ca:	70 95       	com	r23
    58cc:	61 95       	neg	r22
    58ce:	7f 4f       	sbci	r23, 0xFF	; 255
    58d0:	8f 4f       	sbci	r24, 0xFF	; 255
    58d2:	9f 4f       	sbci	r25, 0xFF	; 255
    58d4:	08 95       	ret

000058d6 <__tablejump2__>:
    58d6:	ee 0f       	add	r30, r30
    58d8:	ff 1f       	adc	r31, r31
    58da:	05 90       	lpm	r0, Z+
    58dc:	f4 91       	lpm	r31, Z
    58de:	e0 2d       	mov	r30, r0
    58e0:	09 94       	ijmp

000058e2 <__umulhisi3>:
    58e2:	a2 9f       	mul	r26, r18
    58e4:	b0 01       	movw	r22, r0
    58e6:	b3 9f       	mul	r27, r19
    58e8:	c0 01       	movw	r24, r0
    58ea:	a3 9f       	mul	r26, r19
    58ec:	70 0d       	add	r23, r0
    58ee:	81 1d       	adc	r24, r1
    58f0:	11 24       	eor	r1, r1
    58f2:	91 1d       	adc	r25, r1
    58f4:	b2 9f       	mul	r27, r18
    58f6:	70 0d       	add	r23, r0
    58f8:	81 1d       	adc	r24, r1
    58fa:	11 24       	eor	r1, r1
    58fc:	91 1d       	adc	r25, r1
    58fe:	08 95       	ret

00005900 <__usmulhisi3>:
    5900:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <__umulhisi3>

00005904 <__usmulhisi3_tail>:
    5904:	b7 ff       	sbrs	r27, 7
    5906:	08 95       	ret
    5908:	82 1b       	sub	r24, r18
    590a:	93 0b       	sbc	r25, r19
    590c:	08 95       	ret

0000590e <__muluhisi3>:
    590e:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <__umulhisi3>
    5912:	a5 9f       	mul	r26, r21
    5914:	90 0d       	add	r25, r0
    5916:	b4 9f       	mul	r27, r20
    5918:	90 0d       	add	r25, r0
    591a:	a4 9f       	mul	r26, r20
    591c:	80 0d       	add	r24, r0
    591e:	91 1d       	adc	r25, r1
    5920:	11 24       	eor	r1, r1
    5922:	08 95       	ret

00005924 <__mulshisi3>:
    5924:	b7 ff       	sbrs	r27, 7
    5926:	0c 94 87 2c 	jmp	0x590e	; 0x590e <__muluhisi3>

0000592a <__mulohisi3>:
    592a:	0e 94 87 2c 	call	0x590e	; 0x590e <__muluhisi3>
    592e:	82 1b       	sub	r24, r18
    5930:	93 0b       	sbc	r25, r19
    5932:	08 95       	ret

00005934 <malloc>:
    5934:	0f 93       	push	r16
    5936:	1f 93       	push	r17
    5938:	cf 93       	push	r28
    593a:	df 93       	push	r29
    593c:	82 30       	cpi	r24, 0x02	; 2
    593e:	91 05       	cpc	r25, r1
    5940:	10 f4       	brcc	.+4      	; 0x5946 <malloc+0x12>
    5942:	82 e0       	ldi	r24, 0x02	; 2
    5944:	90 e0       	ldi	r25, 0x00	; 0
    5946:	e0 91 c4 05 	lds	r30, 0x05C4	; 0x8005c4 <__flp>
    594a:	f0 91 c5 05 	lds	r31, 0x05C5	; 0x8005c5 <__flp+0x1>
    594e:	20 e0       	ldi	r18, 0x00	; 0
    5950:	30 e0       	ldi	r19, 0x00	; 0
    5952:	a0 e0       	ldi	r26, 0x00	; 0
    5954:	b0 e0       	ldi	r27, 0x00	; 0
    5956:	30 97       	sbiw	r30, 0x00	; 0
    5958:	19 f1       	breq	.+70     	; 0x59a0 <malloc+0x6c>
    595a:	40 81       	ld	r20, Z
    595c:	51 81       	ldd	r21, Z+1	; 0x01
    595e:	02 81       	ldd	r16, Z+2	; 0x02
    5960:	13 81       	ldd	r17, Z+3	; 0x03
    5962:	48 17       	cp	r20, r24
    5964:	59 07       	cpc	r21, r25
    5966:	c8 f0       	brcs	.+50     	; 0x599a <malloc+0x66>
    5968:	84 17       	cp	r24, r20
    596a:	95 07       	cpc	r25, r21
    596c:	69 f4       	brne	.+26     	; 0x5988 <malloc+0x54>
    596e:	10 97       	sbiw	r26, 0x00	; 0
    5970:	31 f0       	breq	.+12     	; 0x597e <malloc+0x4a>
    5972:	12 96       	adiw	r26, 0x02	; 2
    5974:	0c 93       	st	X, r16
    5976:	12 97       	sbiw	r26, 0x02	; 2
    5978:	13 96       	adiw	r26, 0x03	; 3
    597a:	1c 93       	st	X, r17
    597c:	27 c0       	rjmp	.+78     	; 0x59cc <malloc+0x98>
    597e:	00 93 c4 05 	sts	0x05C4, r16	; 0x8005c4 <__flp>
    5982:	10 93 c5 05 	sts	0x05C5, r17	; 0x8005c5 <__flp+0x1>
    5986:	22 c0       	rjmp	.+68     	; 0x59cc <malloc+0x98>
    5988:	21 15       	cp	r18, r1
    598a:	31 05       	cpc	r19, r1
    598c:	19 f0       	breq	.+6      	; 0x5994 <malloc+0x60>
    598e:	42 17       	cp	r20, r18
    5990:	53 07       	cpc	r21, r19
    5992:	18 f4       	brcc	.+6      	; 0x599a <malloc+0x66>
    5994:	9a 01       	movw	r18, r20
    5996:	bd 01       	movw	r22, r26
    5998:	ef 01       	movw	r28, r30
    599a:	df 01       	movw	r26, r30
    599c:	f8 01       	movw	r30, r16
    599e:	db cf       	rjmp	.-74     	; 0x5956 <malloc+0x22>
    59a0:	21 15       	cp	r18, r1
    59a2:	31 05       	cpc	r19, r1
    59a4:	f9 f0       	breq	.+62     	; 0x59e4 <malloc+0xb0>
    59a6:	28 1b       	sub	r18, r24
    59a8:	39 0b       	sbc	r19, r25
    59aa:	24 30       	cpi	r18, 0x04	; 4
    59ac:	31 05       	cpc	r19, r1
    59ae:	80 f4       	brcc	.+32     	; 0x59d0 <malloc+0x9c>
    59b0:	8a 81       	ldd	r24, Y+2	; 0x02
    59b2:	9b 81       	ldd	r25, Y+3	; 0x03
    59b4:	61 15       	cp	r22, r1
    59b6:	71 05       	cpc	r23, r1
    59b8:	21 f0       	breq	.+8      	; 0x59c2 <malloc+0x8e>
    59ba:	fb 01       	movw	r30, r22
    59bc:	93 83       	std	Z+3, r25	; 0x03
    59be:	82 83       	std	Z+2, r24	; 0x02
    59c0:	04 c0       	rjmp	.+8      	; 0x59ca <malloc+0x96>
    59c2:	90 93 c5 05 	sts	0x05C5, r25	; 0x8005c5 <__flp+0x1>
    59c6:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <__flp>
    59ca:	fe 01       	movw	r30, r28
    59cc:	32 96       	adiw	r30, 0x02	; 2
    59ce:	44 c0       	rjmp	.+136    	; 0x5a58 <malloc+0x124>
    59d0:	fe 01       	movw	r30, r28
    59d2:	e2 0f       	add	r30, r18
    59d4:	f3 1f       	adc	r31, r19
    59d6:	81 93       	st	Z+, r24
    59d8:	91 93       	st	Z+, r25
    59da:	22 50       	subi	r18, 0x02	; 2
    59dc:	31 09       	sbc	r19, r1
    59de:	39 83       	std	Y+1, r19	; 0x01
    59e0:	28 83       	st	Y, r18
    59e2:	3a c0       	rjmp	.+116    	; 0x5a58 <malloc+0x124>
    59e4:	20 91 c2 05 	lds	r18, 0x05C2	; 0x8005c2 <__brkval>
    59e8:	30 91 c3 05 	lds	r19, 0x05C3	; 0x8005c3 <__brkval+0x1>
    59ec:	23 2b       	or	r18, r19
    59ee:	41 f4       	brne	.+16     	; 0x5a00 <malloc+0xcc>
    59f0:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    59f4:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    59f8:	30 93 c3 05 	sts	0x05C3, r19	; 0x8005c3 <__brkval+0x1>
    59fc:	20 93 c2 05 	sts	0x05C2, r18	; 0x8005c2 <__brkval>
    5a00:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    5a04:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    5a08:	21 15       	cp	r18, r1
    5a0a:	31 05       	cpc	r19, r1
    5a0c:	41 f4       	brne	.+16     	; 0x5a1e <malloc+0xea>
    5a0e:	2d b7       	in	r18, 0x3d	; 61
    5a10:	3e b7       	in	r19, 0x3e	; 62
    5a12:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    5a16:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    5a1a:	24 1b       	sub	r18, r20
    5a1c:	35 0b       	sbc	r19, r21
    5a1e:	e0 91 c2 05 	lds	r30, 0x05C2	; 0x8005c2 <__brkval>
    5a22:	f0 91 c3 05 	lds	r31, 0x05C3	; 0x8005c3 <__brkval+0x1>
    5a26:	e2 17       	cp	r30, r18
    5a28:	f3 07       	cpc	r31, r19
    5a2a:	a0 f4       	brcc	.+40     	; 0x5a54 <malloc+0x120>
    5a2c:	2e 1b       	sub	r18, r30
    5a2e:	3f 0b       	sbc	r19, r31
    5a30:	28 17       	cp	r18, r24
    5a32:	39 07       	cpc	r19, r25
    5a34:	78 f0       	brcs	.+30     	; 0x5a54 <malloc+0x120>
    5a36:	ac 01       	movw	r20, r24
    5a38:	4e 5f       	subi	r20, 0xFE	; 254
    5a3a:	5f 4f       	sbci	r21, 0xFF	; 255
    5a3c:	24 17       	cp	r18, r20
    5a3e:	35 07       	cpc	r19, r21
    5a40:	48 f0       	brcs	.+18     	; 0x5a54 <malloc+0x120>
    5a42:	4e 0f       	add	r20, r30
    5a44:	5f 1f       	adc	r21, r31
    5a46:	50 93 c3 05 	sts	0x05C3, r21	; 0x8005c3 <__brkval+0x1>
    5a4a:	40 93 c2 05 	sts	0x05C2, r20	; 0x8005c2 <__brkval>
    5a4e:	81 93       	st	Z+, r24
    5a50:	91 93       	st	Z+, r25
    5a52:	02 c0       	rjmp	.+4      	; 0x5a58 <malloc+0x124>
    5a54:	e0 e0       	ldi	r30, 0x00	; 0
    5a56:	f0 e0       	ldi	r31, 0x00	; 0
    5a58:	cf 01       	movw	r24, r30
    5a5a:	df 91       	pop	r29
    5a5c:	cf 91       	pop	r28
    5a5e:	1f 91       	pop	r17
    5a60:	0f 91       	pop	r16
    5a62:	08 95       	ret

00005a64 <free>:
    5a64:	cf 93       	push	r28
    5a66:	df 93       	push	r29
    5a68:	00 97       	sbiw	r24, 0x00	; 0
    5a6a:	09 f4       	brne	.+2      	; 0x5a6e <free+0xa>
    5a6c:	81 c0       	rjmp	.+258    	; 0x5b70 <free+0x10c>
    5a6e:	fc 01       	movw	r30, r24
    5a70:	32 97       	sbiw	r30, 0x02	; 2
    5a72:	13 82       	std	Z+3, r1	; 0x03
    5a74:	12 82       	std	Z+2, r1	; 0x02
    5a76:	a0 91 c4 05 	lds	r26, 0x05C4	; 0x8005c4 <__flp>
    5a7a:	b0 91 c5 05 	lds	r27, 0x05C5	; 0x8005c5 <__flp+0x1>
    5a7e:	10 97       	sbiw	r26, 0x00	; 0
    5a80:	81 f4       	brne	.+32     	; 0x5aa2 <free+0x3e>
    5a82:	20 81       	ld	r18, Z
    5a84:	31 81       	ldd	r19, Z+1	; 0x01
    5a86:	82 0f       	add	r24, r18
    5a88:	93 1f       	adc	r25, r19
    5a8a:	20 91 c2 05 	lds	r18, 0x05C2	; 0x8005c2 <__brkval>
    5a8e:	30 91 c3 05 	lds	r19, 0x05C3	; 0x8005c3 <__brkval+0x1>
    5a92:	28 17       	cp	r18, r24
    5a94:	39 07       	cpc	r19, r25
    5a96:	51 f5       	brne	.+84     	; 0x5aec <free+0x88>
    5a98:	f0 93 c3 05 	sts	0x05C3, r31	; 0x8005c3 <__brkval+0x1>
    5a9c:	e0 93 c2 05 	sts	0x05C2, r30	; 0x8005c2 <__brkval>
    5aa0:	67 c0       	rjmp	.+206    	; 0x5b70 <free+0x10c>
    5aa2:	ed 01       	movw	r28, r26
    5aa4:	20 e0       	ldi	r18, 0x00	; 0
    5aa6:	30 e0       	ldi	r19, 0x00	; 0
    5aa8:	ce 17       	cp	r28, r30
    5aaa:	df 07       	cpc	r29, r31
    5aac:	40 f4       	brcc	.+16     	; 0x5abe <free+0x5a>
    5aae:	4a 81       	ldd	r20, Y+2	; 0x02
    5ab0:	5b 81       	ldd	r21, Y+3	; 0x03
    5ab2:	9e 01       	movw	r18, r28
    5ab4:	41 15       	cp	r20, r1
    5ab6:	51 05       	cpc	r21, r1
    5ab8:	f1 f0       	breq	.+60     	; 0x5af6 <free+0x92>
    5aba:	ea 01       	movw	r28, r20
    5abc:	f5 cf       	rjmp	.-22     	; 0x5aa8 <free+0x44>
    5abe:	d3 83       	std	Z+3, r29	; 0x03
    5ac0:	c2 83       	std	Z+2, r28	; 0x02
    5ac2:	40 81       	ld	r20, Z
    5ac4:	51 81       	ldd	r21, Z+1	; 0x01
    5ac6:	84 0f       	add	r24, r20
    5ac8:	95 1f       	adc	r25, r21
    5aca:	c8 17       	cp	r28, r24
    5acc:	d9 07       	cpc	r29, r25
    5ace:	59 f4       	brne	.+22     	; 0x5ae6 <free+0x82>
    5ad0:	88 81       	ld	r24, Y
    5ad2:	99 81       	ldd	r25, Y+1	; 0x01
    5ad4:	84 0f       	add	r24, r20
    5ad6:	95 1f       	adc	r25, r21
    5ad8:	02 96       	adiw	r24, 0x02	; 2
    5ada:	91 83       	std	Z+1, r25	; 0x01
    5adc:	80 83       	st	Z, r24
    5ade:	8a 81       	ldd	r24, Y+2	; 0x02
    5ae0:	9b 81       	ldd	r25, Y+3	; 0x03
    5ae2:	93 83       	std	Z+3, r25	; 0x03
    5ae4:	82 83       	std	Z+2, r24	; 0x02
    5ae6:	21 15       	cp	r18, r1
    5ae8:	31 05       	cpc	r19, r1
    5aea:	29 f4       	brne	.+10     	; 0x5af6 <free+0x92>
    5aec:	f0 93 c5 05 	sts	0x05C5, r31	; 0x8005c5 <__flp+0x1>
    5af0:	e0 93 c4 05 	sts	0x05C4, r30	; 0x8005c4 <__flp>
    5af4:	3d c0       	rjmp	.+122    	; 0x5b70 <free+0x10c>
    5af6:	e9 01       	movw	r28, r18
    5af8:	fb 83       	std	Y+3, r31	; 0x03
    5afa:	ea 83       	std	Y+2, r30	; 0x02
    5afc:	49 91       	ld	r20, Y+
    5afe:	59 91       	ld	r21, Y+
    5b00:	c4 0f       	add	r28, r20
    5b02:	d5 1f       	adc	r29, r21
    5b04:	ec 17       	cp	r30, r28
    5b06:	fd 07       	cpc	r31, r29
    5b08:	61 f4       	brne	.+24     	; 0x5b22 <free+0xbe>
    5b0a:	80 81       	ld	r24, Z
    5b0c:	91 81       	ldd	r25, Z+1	; 0x01
    5b0e:	84 0f       	add	r24, r20
    5b10:	95 1f       	adc	r25, r21
    5b12:	02 96       	adiw	r24, 0x02	; 2
    5b14:	e9 01       	movw	r28, r18
    5b16:	99 83       	std	Y+1, r25	; 0x01
    5b18:	88 83       	st	Y, r24
    5b1a:	82 81       	ldd	r24, Z+2	; 0x02
    5b1c:	93 81       	ldd	r25, Z+3	; 0x03
    5b1e:	9b 83       	std	Y+3, r25	; 0x03
    5b20:	8a 83       	std	Y+2, r24	; 0x02
    5b22:	e0 e0       	ldi	r30, 0x00	; 0
    5b24:	f0 e0       	ldi	r31, 0x00	; 0
    5b26:	12 96       	adiw	r26, 0x02	; 2
    5b28:	8d 91       	ld	r24, X+
    5b2a:	9c 91       	ld	r25, X
    5b2c:	13 97       	sbiw	r26, 0x03	; 3
    5b2e:	00 97       	sbiw	r24, 0x00	; 0
    5b30:	19 f0       	breq	.+6      	; 0x5b38 <free+0xd4>
    5b32:	fd 01       	movw	r30, r26
    5b34:	dc 01       	movw	r26, r24
    5b36:	f7 cf       	rjmp	.-18     	; 0x5b26 <free+0xc2>
    5b38:	8d 91       	ld	r24, X+
    5b3a:	9c 91       	ld	r25, X
    5b3c:	11 97       	sbiw	r26, 0x01	; 1
    5b3e:	9d 01       	movw	r18, r26
    5b40:	2e 5f       	subi	r18, 0xFE	; 254
    5b42:	3f 4f       	sbci	r19, 0xFF	; 255
    5b44:	82 0f       	add	r24, r18
    5b46:	93 1f       	adc	r25, r19
    5b48:	20 91 c2 05 	lds	r18, 0x05C2	; 0x8005c2 <__brkval>
    5b4c:	30 91 c3 05 	lds	r19, 0x05C3	; 0x8005c3 <__brkval+0x1>
    5b50:	28 17       	cp	r18, r24
    5b52:	39 07       	cpc	r19, r25
    5b54:	69 f4       	brne	.+26     	; 0x5b70 <free+0x10c>
    5b56:	30 97       	sbiw	r30, 0x00	; 0
    5b58:	29 f4       	brne	.+10     	; 0x5b64 <free+0x100>
    5b5a:	10 92 c5 05 	sts	0x05C5, r1	; 0x8005c5 <__flp+0x1>
    5b5e:	10 92 c4 05 	sts	0x05C4, r1	; 0x8005c4 <__flp>
    5b62:	02 c0       	rjmp	.+4      	; 0x5b68 <free+0x104>
    5b64:	13 82       	std	Z+3, r1	; 0x03
    5b66:	12 82       	std	Z+2, r1	; 0x02
    5b68:	b0 93 c3 05 	sts	0x05C3, r27	; 0x8005c3 <__brkval+0x1>
    5b6c:	a0 93 c2 05 	sts	0x05C2, r26	; 0x8005c2 <__brkval>
    5b70:	df 91       	pop	r29
    5b72:	cf 91       	pop	r28
    5b74:	08 95       	ret

00005b76 <atoi>:
    5b76:	fc 01       	movw	r30, r24
    5b78:	88 27       	eor	r24, r24
    5b7a:	99 27       	eor	r25, r25
    5b7c:	e8 94       	clt
    5b7e:	21 91       	ld	r18, Z+
    5b80:	20 32       	cpi	r18, 0x20	; 32
    5b82:	e9 f3       	breq	.-6      	; 0x5b7e <atoi+0x8>
    5b84:	29 30       	cpi	r18, 0x09	; 9
    5b86:	10 f0       	brcs	.+4      	; 0x5b8c <atoi+0x16>
    5b88:	2e 30       	cpi	r18, 0x0E	; 14
    5b8a:	c8 f3       	brcs	.-14     	; 0x5b7e <atoi+0x8>
    5b8c:	2b 32       	cpi	r18, 0x2B	; 43
    5b8e:	41 f0       	breq	.+16     	; 0x5ba0 <atoi+0x2a>
    5b90:	2d 32       	cpi	r18, 0x2D	; 45
    5b92:	39 f4       	brne	.+14     	; 0x5ba2 <atoi+0x2c>
    5b94:	68 94       	set
    5b96:	04 c0       	rjmp	.+8      	; 0x5ba0 <atoi+0x2a>
    5b98:	0e 94 3e 2e 	call	0x5c7c	; 0x5c7c <__mulhi_const_10>
    5b9c:	82 0f       	add	r24, r18
    5b9e:	91 1d       	adc	r25, r1
    5ba0:	21 91       	ld	r18, Z+
    5ba2:	20 53       	subi	r18, 0x30	; 48
    5ba4:	2a 30       	cpi	r18, 0x0A	; 10
    5ba6:	c0 f3       	brcs	.-16     	; 0x5b98 <atoi+0x22>
    5ba8:	1e f4       	brtc	.+6      	; 0x5bb0 <atoi+0x3a>
    5baa:	90 95       	com	r25
    5bac:	81 95       	neg	r24
    5bae:	9f 4f       	sbci	r25, 0xFF	; 255
    5bb0:	08 95       	ret

00005bb2 <atol>:
    5bb2:	1f 93       	push	r17
    5bb4:	fc 01       	movw	r30, r24
    5bb6:	99 27       	eor	r25, r25
    5bb8:	88 27       	eor	r24, r24
    5bba:	bc 01       	movw	r22, r24
    5bbc:	e8 94       	clt
    5bbe:	11 91       	ld	r17, Z+
    5bc0:	10 32       	cpi	r17, 0x20	; 32
    5bc2:	e9 f3       	breq	.-6      	; 0x5bbe <atol+0xc>
    5bc4:	19 30       	cpi	r17, 0x09	; 9
    5bc6:	10 f0       	brcs	.+4      	; 0x5bcc <atol+0x1a>
    5bc8:	1e 30       	cpi	r17, 0x0E	; 14
    5bca:	c8 f3       	brcs	.-14     	; 0x5bbe <atol+0xc>
    5bcc:	1b 32       	cpi	r17, 0x2B	; 43
    5bce:	51 f0       	breq	.+20     	; 0x5be4 <atol+0x32>
    5bd0:	1d 32       	cpi	r17, 0x2D	; 45
    5bd2:	49 f4       	brne	.+18     	; 0x5be6 <atol+0x34>
    5bd4:	68 94       	set
    5bd6:	06 c0       	rjmp	.+12     	; 0x5be4 <atol+0x32>
    5bd8:	0e 94 29 2e 	call	0x5c52	; 0x5c52 <__mulsi_const_10>
    5bdc:	61 0f       	add	r22, r17
    5bde:	71 1d       	adc	r23, r1
    5be0:	81 1d       	adc	r24, r1
    5be2:	91 1d       	adc	r25, r1
    5be4:	11 91       	ld	r17, Z+
    5be6:	10 53       	subi	r17, 0x30	; 48
    5be8:	1a 30       	cpi	r17, 0x0A	; 10
    5bea:	b0 f3       	brcs	.-20     	; 0x5bd8 <atol+0x26>
    5bec:	3e f4       	brtc	.+14     	; 0x5bfc <atol+0x4a>
    5bee:	90 95       	com	r25
    5bf0:	80 95       	com	r24
    5bf2:	70 95       	com	r23
    5bf4:	61 95       	neg	r22
    5bf6:	7f 4f       	sbci	r23, 0xFF	; 255
    5bf8:	8f 4f       	sbci	r24, 0xFF	; 255
    5bfa:	9f 4f       	sbci	r25, 0xFF	; 255
    5bfc:	1f 91       	pop	r17
    5bfe:	08 95       	ret

00005c00 <toupper>:
    5c00:	91 11       	cpse	r25, r1
    5c02:	08 95       	ret
    5c04:	81 56       	subi	r24, 0x61	; 97
    5c06:	8a 51       	subi	r24, 0x1A	; 26
    5c08:	08 f4       	brcc	.+2      	; 0x5c0c <toupper+0xc>
    5c0a:	80 52       	subi	r24, 0x20	; 32
    5c0c:	85 58       	subi	r24, 0x85	; 133
    5c0e:	08 95       	ret

00005c10 <strcat>:
    5c10:	fb 01       	movw	r30, r22
    5c12:	dc 01       	movw	r26, r24
    5c14:	0d 90       	ld	r0, X+
    5c16:	00 20       	and	r0, r0
    5c18:	e9 f7       	brne	.-6      	; 0x5c14 <strcat+0x4>
    5c1a:	11 97       	sbiw	r26, 0x01	; 1
    5c1c:	01 90       	ld	r0, Z+
    5c1e:	0d 92       	st	X+, r0
    5c20:	00 20       	and	r0, r0
    5c22:	e1 f7       	brne	.-8      	; 0x5c1c <strcat+0xc>
    5c24:	08 95       	ret

00005c26 <strcpy>:
    5c26:	fb 01       	movw	r30, r22
    5c28:	dc 01       	movw	r26, r24
    5c2a:	01 90       	ld	r0, Z+
    5c2c:	0d 92       	st	X+, r0
    5c2e:	00 20       	and	r0, r0
    5c30:	e1 f7       	brne	.-8      	; 0x5c2a <strcpy+0x4>
    5c32:	08 95       	ret

00005c34 <strncpy>:
    5c34:	fb 01       	movw	r30, r22
    5c36:	dc 01       	movw	r26, r24
    5c38:	41 50       	subi	r20, 0x01	; 1
    5c3a:	50 40       	sbci	r21, 0x00	; 0
    5c3c:	48 f0       	brcs	.+18     	; 0x5c50 <strncpy+0x1c>
    5c3e:	01 90       	ld	r0, Z+
    5c40:	0d 92       	st	X+, r0
    5c42:	00 20       	and	r0, r0
    5c44:	c9 f7       	brne	.-14     	; 0x5c38 <strncpy+0x4>
    5c46:	01 c0       	rjmp	.+2      	; 0x5c4a <strncpy+0x16>
    5c48:	1d 92       	st	X+, r1
    5c4a:	41 50       	subi	r20, 0x01	; 1
    5c4c:	50 40       	sbci	r21, 0x00	; 0
    5c4e:	e0 f7       	brcc	.-8      	; 0x5c48 <strncpy+0x14>
    5c50:	08 95       	ret

00005c52 <__mulsi_const_10>:
    5c52:	59 2f       	mov	r21, r25
    5c54:	48 2f       	mov	r20, r24
    5c56:	37 2f       	mov	r19, r23
    5c58:	26 2f       	mov	r18, r22
    5c5a:	66 0f       	add	r22, r22
    5c5c:	77 1f       	adc	r23, r23
    5c5e:	88 1f       	adc	r24, r24
    5c60:	99 1f       	adc	r25, r25
    5c62:	66 0f       	add	r22, r22
    5c64:	77 1f       	adc	r23, r23
    5c66:	88 1f       	adc	r24, r24
    5c68:	99 1f       	adc	r25, r25
    5c6a:	62 0f       	add	r22, r18
    5c6c:	73 1f       	adc	r23, r19
    5c6e:	84 1f       	adc	r24, r20
    5c70:	95 1f       	adc	r25, r21
    5c72:	66 0f       	add	r22, r22
    5c74:	77 1f       	adc	r23, r23
    5c76:	88 1f       	adc	r24, r24
    5c78:	99 1f       	adc	r25, r25
    5c7a:	08 95       	ret

00005c7c <__mulhi_const_10>:
    5c7c:	7a e0       	ldi	r23, 0x0A	; 10
    5c7e:	97 9f       	mul	r25, r23
    5c80:	90 2d       	mov	r25, r0
    5c82:	87 9f       	mul	r24, r23
    5c84:	80 2d       	mov	r24, r0
    5c86:	91 0d       	add	r25, r1
    5c88:	11 24       	eor	r1, r1
    5c8a:	08 95       	ret

00005c8c <sprintf>:
    5c8c:	ae e0       	ldi	r26, 0x0E	; 14
    5c8e:	b0 e0       	ldi	r27, 0x00	; 0
    5c90:	ec e4       	ldi	r30, 0x4C	; 76
    5c92:	fe e2       	ldi	r31, 0x2E	; 46
    5c94:	0c 94 4f 31 	jmp	0x629e	; 0x629e <__prologue_saves__+0x1c>
    5c98:	0d 89       	ldd	r16, Y+21	; 0x15
    5c9a:	1e 89       	ldd	r17, Y+22	; 0x16
    5c9c:	86 e0       	ldi	r24, 0x06	; 6
    5c9e:	8c 83       	std	Y+4, r24	; 0x04
    5ca0:	1a 83       	std	Y+2, r17	; 0x02
    5ca2:	09 83       	std	Y+1, r16	; 0x01
    5ca4:	8f ef       	ldi	r24, 0xFF	; 255
    5ca6:	9f e7       	ldi	r25, 0x7F	; 127
    5ca8:	9e 83       	std	Y+6, r25	; 0x06
    5caa:	8d 83       	std	Y+5, r24	; 0x05
    5cac:	ae 01       	movw	r20, r28
    5cae:	47 5e       	subi	r20, 0xE7	; 231
    5cb0:	5f 4f       	sbci	r21, 0xFF	; 255
    5cb2:	6f 89       	ldd	r22, Y+23	; 0x17
    5cb4:	78 8d       	ldd	r23, Y+24	; 0x18
    5cb6:	ce 01       	movw	r24, r28
    5cb8:	01 96       	adiw	r24, 0x01	; 1
    5cba:	0e 94 68 2e 	call	0x5cd0	; 0x5cd0 <vfprintf>
    5cbe:	ef 81       	ldd	r30, Y+7	; 0x07
    5cc0:	f8 85       	ldd	r31, Y+8	; 0x08
    5cc2:	e0 0f       	add	r30, r16
    5cc4:	f1 1f       	adc	r31, r17
    5cc6:	10 82       	st	Z, r1
    5cc8:	2e 96       	adiw	r28, 0x0e	; 14
    5cca:	e4 e0       	ldi	r30, 0x04	; 4
    5ccc:	0c 94 6b 31 	jmp	0x62d6	; 0x62d6 <__epilogue_restores__+0x1c>

00005cd0 <vfprintf>:
    5cd0:	ab e0       	ldi	r26, 0x0B	; 11
    5cd2:	b0 e0       	ldi	r27, 0x00	; 0
    5cd4:	ee e6       	ldi	r30, 0x6E	; 110
    5cd6:	fe e2       	ldi	r31, 0x2E	; 46
    5cd8:	0c 94 41 31 	jmp	0x6282	; 0x6282 <__prologue_saves__>
    5cdc:	6c 01       	movw	r12, r24
    5cde:	7b 01       	movw	r14, r22
    5ce0:	8a 01       	movw	r16, r20
    5ce2:	fc 01       	movw	r30, r24
    5ce4:	17 82       	std	Z+7, r1	; 0x07
    5ce6:	16 82       	std	Z+6, r1	; 0x06
    5ce8:	83 81       	ldd	r24, Z+3	; 0x03
    5cea:	81 ff       	sbrs	r24, 1
    5cec:	cc c1       	rjmp	.+920    	; 0x6086 <vfprintf+0x3b6>
    5cee:	ce 01       	movw	r24, r28
    5cf0:	01 96       	adiw	r24, 0x01	; 1
    5cf2:	3c 01       	movw	r6, r24
    5cf4:	f6 01       	movw	r30, r12
    5cf6:	93 81       	ldd	r25, Z+3	; 0x03
    5cf8:	f7 01       	movw	r30, r14
    5cfa:	93 fd       	sbrc	r25, 3
    5cfc:	85 91       	lpm	r24, Z+
    5cfe:	93 ff       	sbrs	r25, 3
    5d00:	81 91       	ld	r24, Z+
    5d02:	7f 01       	movw	r14, r30
    5d04:	88 23       	and	r24, r24
    5d06:	09 f4       	brne	.+2      	; 0x5d0a <vfprintf+0x3a>
    5d08:	ba c1       	rjmp	.+884    	; 0x607e <vfprintf+0x3ae>
    5d0a:	85 32       	cpi	r24, 0x25	; 37
    5d0c:	39 f4       	brne	.+14     	; 0x5d1c <vfprintf+0x4c>
    5d0e:	93 fd       	sbrc	r25, 3
    5d10:	85 91       	lpm	r24, Z+
    5d12:	93 ff       	sbrs	r25, 3
    5d14:	81 91       	ld	r24, Z+
    5d16:	7f 01       	movw	r14, r30
    5d18:	85 32       	cpi	r24, 0x25	; 37
    5d1a:	29 f4       	brne	.+10     	; 0x5d26 <vfprintf+0x56>
    5d1c:	b6 01       	movw	r22, r12
    5d1e:	90 e0       	ldi	r25, 0x00	; 0
    5d20:	0e 94 5f 30 	call	0x60be	; 0x60be <fputc>
    5d24:	e7 cf       	rjmp	.-50     	; 0x5cf4 <vfprintf+0x24>
    5d26:	91 2c       	mov	r9, r1
    5d28:	21 2c       	mov	r2, r1
    5d2a:	31 2c       	mov	r3, r1
    5d2c:	ff e1       	ldi	r31, 0x1F	; 31
    5d2e:	f3 15       	cp	r31, r3
    5d30:	d8 f0       	brcs	.+54     	; 0x5d68 <vfprintf+0x98>
    5d32:	8b 32       	cpi	r24, 0x2B	; 43
    5d34:	79 f0       	breq	.+30     	; 0x5d54 <vfprintf+0x84>
    5d36:	38 f4       	brcc	.+14     	; 0x5d46 <vfprintf+0x76>
    5d38:	80 32       	cpi	r24, 0x20	; 32
    5d3a:	79 f0       	breq	.+30     	; 0x5d5a <vfprintf+0x8a>
    5d3c:	83 32       	cpi	r24, 0x23	; 35
    5d3e:	a1 f4       	brne	.+40     	; 0x5d68 <vfprintf+0x98>
    5d40:	23 2d       	mov	r18, r3
    5d42:	20 61       	ori	r18, 0x10	; 16
    5d44:	1d c0       	rjmp	.+58     	; 0x5d80 <vfprintf+0xb0>
    5d46:	8d 32       	cpi	r24, 0x2D	; 45
    5d48:	61 f0       	breq	.+24     	; 0x5d62 <vfprintf+0x92>
    5d4a:	80 33       	cpi	r24, 0x30	; 48
    5d4c:	69 f4       	brne	.+26     	; 0x5d68 <vfprintf+0x98>
    5d4e:	23 2d       	mov	r18, r3
    5d50:	21 60       	ori	r18, 0x01	; 1
    5d52:	16 c0       	rjmp	.+44     	; 0x5d80 <vfprintf+0xb0>
    5d54:	83 2d       	mov	r24, r3
    5d56:	82 60       	ori	r24, 0x02	; 2
    5d58:	38 2e       	mov	r3, r24
    5d5a:	e3 2d       	mov	r30, r3
    5d5c:	e4 60       	ori	r30, 0x04	; 4
    5d5e:	3e 2e       	mov	r3, r30
    5d60:	2a c0       	rjmp	.+84     	; 0x5db6 <vfprintf+0xe6>
    5d62:	f3 2d       	mov	r31, r3
    5d64:	f8 60       	ori	r31, 0x08	; 8
    5d66:	1d c0       	rjmp	.+58     	; 0x5da2 <vfprintf+0xd2>
    5d68:	37 fc       	sbrc	r3, 7
    5d6a:	2d c0       	rjmp	.+90     	; 0x5dc6 <vfprintf+0xf6>
    5d6c:	20 ed       	ldi	r18, 0xD0	; 208
    5d6e:	28 0f       	add	r18, r24
    5d70:	2a 30       	cpi	r18, 0x0A	; 10
    5d72:	40 f0       	brcs	.+16     	; 0x5d84 <vfprintf+0xb4>
    5d74:	8e 32       	cpi	r24, 0x2E	; 46
    5d76:	b9 f4       	brne	.+46     	; 0x5da6 <vfprintf+0xd6>
    5d78:	36 fc       	sbrc	r3, 6
    5d7a:	81 c1       	rjmp	.+770    	; 0x607e <vfprintf+0x3ae>
    5d7c:	23 2d       	mov	r18, r3
    5d7e:	20 64       	ori	r18, 0x40	; 64
    5d80:	32 2e       	mov	r3, r18
    5d82:	19 c0       	rjmp	.+50     	; 0x5db6 <vfprintf+0xe6>
    5d84:	36 fe       	sbrs	r3, 6
    5d86:	06 c0       	rjmp	.+12     	; 0x5d94 <vfprintf+0xc4>
    5d88:	8a e0       	ldi	r24, 0x0A	; 10
    5d8a:	98 9e       	mul	r9, r24
    5d8c:	20 0d       	add	r18, r0
    5d8e:	11 24       	eor	r1, r1
    5d90:	92 2e       	mov	r9, r18
    5d92:	11 c0       	rjmp	.+34     	; 0x5db6 <vfprintf+0xe6>
    5d94:	ea e0       	ldi	r30, 0x0A	; 10
    5d96:	2e 9e       	mul	r2, r30
    5d98:	20 0d       	add	r18, r0
    5d9a:	11 24       	eor	r1, r1
    5d9c:	22 2e       	mov	r2, r18
    5d9e:	f3 2d       	mov	r31, r3
    5da0:	f0 62       	ori	r31, 0x20	; 32
    5da2:	3f 2e       	mov	r3, r31
    5da4:	08 c0       	rjmp	.+16     	; 0x5db6 <vfprintf+0xe6>
    5da6:	8c 36       	cpi	r24, 0x6C	; 108
    5da8:	21 f4       	brne	.+8      	; 0x5db2 <vfprintf+0xe2>
    5daa:	83 2d       	mov	r24, r3
    5dac:	80 68       	ori	r24, 0x80	; 128
    5dae:	38 2e       	mov	r3, r24
    5db0:	02 c0       	rjmp	.+4      	; 0x5db6 <vfprintf+0xe6>
    5db2:	88 36       	cpi	r24, 0x68	; 104
    5db4:	41 f4       	brne	.+16     	; 0x5dc6 <vfprintf+0xf6>
    5db6:	f7 01       	movw	r30, r14
    5db8:	93 fd       	sbrc	r25, 3
    5dba:	85 91       	lpm	r24, Z+
    5dbc:	93 ff       	sbrs	r25, 3
    5dbe:	81 91       	ld	r24, Z+
    5dc0:	7f 01       	movw	r14, r30
    5dc2:	81 11       	cpse	r24, r1
    5dc4:	b3 cf       	rjmp	.-154    	; 0x5d2c <vfprintf+0x5c>
    5dc6:	98 2f       	mov	r25, r24
    5dc8:	9f 7d       	andi	r25, 0xDF	; 223
    5dca:	95 54       	subi	r25, 0x45	; 69
    5dcc:	93 30       	cpi	r25, 0x03	; 3
    5dce:	28 f4       	brcc	.+10     	; 0x5dda <vfprintf+0x10a>
    5dd0:	0c 5f       	subi	r16, 0xFC	; 252
    5dd2:	1f 4f       	sbci	r17, 0xFF	; 255
    5dd4:	9f e3       	ldi	r25, 0x3F	; 63
    5dd6:	99 83       	std	Y+1, r25	; 0x01
    5dd8:	0d c0       	rjmp	.+26     	; 0x5df4 <vfprintf+0x124>
    5dda:	83 36       	cpi	r24, 0x63	; 99
    5ddc:	31 f0       	breq	.+12     	; 0x5dea <vfprintf+0x11a>
    5dde:	83 37       	cpi	r24, 0x73	; 115
    5de0:	71 f0       	breq	.+28     	; 0x5dfe <vfprintf+0x12e>
    5de2:	83 35       	cpi	r24, 0x53	; 83
    5de4:	09 f0       	breq	.+2      	; 0x5de8 <vfprintf+0x118>
    5de6:	59 c0       	rjmp	.+178    	; 0x5e9a <vfprintf+0x1ca>
    5de8:	21 c0       	rjmp	.+66     	; 0x5e2c <vfprintf+0x15c>
    5dea:	f8 01       	movw	r30, r16
    5dec:	80 81       	ld	r24, Z
    5dee:	89 83       	std	Y+1, r24	; 0x01
    5df0:	0e 5f       	subi	r16, 0xFE	; 254
    5df2:	1f 4f       	sbci	r17, 0xFF	; 255
    5df4:	88 24       	eor	r8, r8
    5df6:	83 94       	inc	r8
    5df8:	91 2c       	mov	r9, r1
    5dfa:	53 01       	movw	r10, r6
    5dfc:	13 c0       	rjmp	.+38     	; 0x5e24 <vfprintf+0x154>
    5dfe:	28 01       	movw	r4, r16
    5e00:	f2 e0       	ldi	r31, 0x02	; 2
    5e02:	4f 0e       	add	r4, r31
    5e04:	51 1c       	adc	r5, r1
    5e06:	f8 01       	movw	r30, r16
    5e08:	a0 80       	ld	r10, Z
    5e0a:	b1 80       	ldd	r11, Z+1	; 0x01
    5e0c:	36 fe       	sbrs	r3, 6
    5e0e:	03 c0       	rjmp	.+6      	; 0x5e16 <vfprintf+0x146>
    5e10:	69 2d       	mov	r22, r9
    5e12:	70 e0       	ldi	r23, 0x00	; 0
    5e14:	02 c0       	rjmp	.+4      	; 0x5e1a <vfprintf+0x14a>
    5e16:	6f ef       	ldi	r22, 0xFF	; 255
    5e18:	7f ef       	ldi	r23, 0xFF	; 255
    5e1a:	c5 01       	movw	r24, r10
    5e1c:	0e 94 54 30 	call	0x60a8	; 0x60a8 <strnlen>
    5e20:	4c 01       	movw	r8, r24
    5e22:	82 01       	movw	r16, r4
    5e24:	f3 2d       	mov	r31, r3
    5e26:	ff 77       	andi	r31, 0x7F	; 127
    5e28:	3f 2e       	mov	r3, r31
    5e2a:	16 c0       	rjmp	.+44     	; 0x5e58 <vfprintf+0x188>
    5e2c:	28 01       	movw	r4, r16
    5e2e:	22 e0       	ldi	r18, 0x02	; 2
    5e30:	42 0e       	add	r4, r18
    5e32:	51 1c       	adc	r5, r1
    5e34:	f8 01       	movw	r30, r16
    5e36:	a0 80       	ld	r10, Z
    5e38:	b1 80       	ldd	r11, Z+1	; 0x01
    5e3a:	36 fe       	sbrs	r3, 6
    5e3c:	03 c0       	rjmp	.+6      	; 0x5e44 <vfprintf+0x174>
    5e3e:	69 2d       	mov	r22, r9
    5e40:	70 e0       	ldi	r23, 0x00	; 0
    5e42:	02 c0       	rjmp	.+4      	; 0x5e48 <vfprintf+0x178>
    5e44:	6f ef       	ldi	r22, 0xFF	; 255
    5e46:	7f ef       	ldi	r23, 0xFF	; 255
    5e48:	c5 01       	movw	r24, r10
    5e4a:	0e 94 49 30 	call	0x6092	; 0x6092 <strnlen_P>
    5e4e:	4c 01       	movw	r8, r24
    5e50:	f3 2d       	mov	r31, r3
    5e52:	f0 68       	ori	r31, 0x80	; 128
    5e54:	3f 2e       	mov	r3, r31
    5e56:	82 01       	movw	r16, r4
    5e58:	33 fc       	sbrc	r3, 3
    5e5a:	1b c0       	rjmp	.+54     	; 0x5e92 <vfprintf+0x1c2>
    5e5c:	82 2d       	mov	r24, r2
    5e5e:	90 e0       	ldi	r25, 0x00	; 0
    5e60:	88 16       	cp	r8, r24
    5e62:	99 06       	cpc	r9, r25
    5e64:	b0 f4       	brcc	.+44     	; 0x5e92 <vfprintf+0x1c2>
    5e66:	b6 01       	movw	r22, r12
    5e68:	80 e2       	ldi	r24, 0x20	; 32
    5e6a:	90 e0       	ldi	r25, 0x00	; 0
    5e6c:	0e 94 5f 30 	call	0x60be	; 0x60be <fputc>
    5e70:	2a 94       	dec	r2
    5e72:	f4 cf       	rjmp	.-24     	; 0x5e5c <vfprintf+0x18c>
    5e74:	f5 01       	movw	r30, r10
    5e76:	37 fc       	sbrc	r3, 7
    5e78:	85 91       	lpm	r24, Z+
    5e7a:	37 fe       	sbrs	r3, 7
    5e7c:	81 91       	ld	r24, Z+
    5e7e:	5f 01       	movw	r10, r30
    5e80:	b6 01       	movw	r22, r12
    5e82:	90 e0       	ldi	r25, 0x00	; 0
    5e84:	0e 94 5f 30 	call	0x60be	; 0x60be <fputc>
    5e88:	21 10       	cpse	r2, r1
    5e8a:	2a 94       	dec	r2
    5e8c:	21 e0       	ldi	r18, 0x01	; 1
    5e8e:	82 1a       	sub	r8, r18
    5e90:	91 08       	sbc	r9, r1
    5e92:	81 14       	cp	r8, r1
    5e94:	91 04       	cpc	r9, r1
    5e96:	71 f7       	brne	.-36     	; 0x5e74 <vfprintf+0x1a4>
    5e98:	e8 c0       	rjmp	.+464    	; 0x606a <vfprintf+0x39a>
    5e9a:	84 36       	cpi	r24, 0x64	; 100
    5e9c:	11 f0       	breq	.+4      	; 0x5ea2 <vfprintf+0x1d2>
    5e9e:	89 36       	cpi	r24, 0x69	; 105
    5ea0:	41 f5       	brne	.+80     	; 0x5ef2 <vfprintf+0x222>
    5ea2:	f8 01       	movw	r30, r16
    5ea4:	37 fe       	sbrs	r3, 7
    5ea6:	07 c0       	rjmp	.+14     	; 0x5eb6 <vfprintf+0x1e6>
    5ea8:	60 81       	ld	r22, Z
    5eaa:	71 81       	ldd	r23, Z+1	; 0x01
    5eac:	82 81       	ldd	r24, Z+2	; 0x02
    5eae:	93 81       	ldd	r25, Z+3	; 0x03
    5eb0:	0c 5f       	subi	r16, 0xFC	; 252
    5eb2:	1f 4f       	sbci	r17, 0xFF	; 255
    5eb4:	08 c0       	rjmp	.+16     	; 0x5ec6 <vfprintf+0x1f6>
    5eb6:	60 81       	ld	r22, Z
    5eb8:	71 81       	ldd	r23, Z+1	; 0x01
    5eba:	07 2e       	mov	r0, r23
    5ebc:	00 0c       	add	r0, r0
    5ebe:	88 0b       	sbc	r24, r24
    5ec0:	99 0b       	sbc	r25, r25
    5ec2:	0e 5f       	subi	r16, 0xFE	; 254
    5ec4:	1f 4f       	sbci	r17, 0xFF	; 255
    5ec6:	f3 2d       	mov	r31, r3
    5ec8:	ff 76       	andi	r31, 0x6F	; 111
    5eca:	3f 2e       	mov	r3, r31
    5ecc:	97 ff       	sbrs	r25, 7
    5ece:	09 c0       	rjmp	.+18     	; 0x5ee2 <vfprintf+0x212>
    5ed0:	90 95       	com	r25
    5ed2:	80 95       	com	r24
    5ed4:	70 95       	com	r23
    5ed6:	61 95       	neg	r22
    5ed8:	7f 4f       	sbci	r23, 0xFF	; 255
    5eda:	8f 4f       	sbci	r24, 0xFF	; 255
    5edc:	9f 4f       	sbci	r25, 0xFF	; 255
    5ede:	f0 68       	ori	r31, 0x80	; 128
    5ee0:	3f 2e       	mov	r3, r31
    5ee2:	2a e0       	ldi	r18, 0x0A	; 10
    5ee4:	30 e0       	ldi	r19, 0x00	; 0
    5ee6:	a3 01       	movw	r20, r6
    5ee8:	0e 94 9b 30 	call	0x6136	; 0x6136 <__ultoa_invert>
    5eec:	88 2e       	mov	r8, r24
    5eee:	86 18       	sub	r8, r6
    5ef0:	45 c0       	rjmp	.+138    	; 0x5f7c <vfprintf+0x2ac>
    5ef2:	85 37       	cpi	r24, 0x75	; 117
    5ef4:	31 f4       	brne	.+12     	; 0x5f02 <vfprintf+0x232>
    5ef6:	23 2d       	mov	r18, r3
    5ef8:	2f 7e       	andi	r18, 0xEF	; 239
    5efa:	b2 2e       	mov	r11, r18
    5efc:	2a e0       	ldi	r18, 0x0A	; 10
    5efe:	30 e0       	ldi	r19, 0x00	; 0
    5f00:	25 c0       	rjmp	.+74     	; 0x5f4c <vfprintf+0x27c>
    5f02:	93 2d       	mov	r25, r3
    5f04:	99 7f       	andi	r25, 0xF9	; 249
    5f06:	b9 2e       	mov	r11, r25
    5f08:	8f 36       	cpi	r24, 0x6F	; 111
    5f0a:	c1 f0       	breq	.+48     	; 0x5f3c <vfprintf+0x26c>
    5f0c:	18 f4       	brcc	.+6      	; 0x5f14 <vfprintf+0x244>
    5f0e:	88 35       	cpi	r24, 0x58	; 88
    5f10:	79 f0       	breq	.+30     	; 0x5f30 <vfprintf+0x260>
    5f12:	b5 c0       	rjmp	.+362    	; 0x607e <vfprintf+0x3ae>
    5f14:	80 37       	cpi	r24, 0x70	; 112
    5f16:	19 f0       	breq	.+6      	; 0x5f1e <vfprintf+0x24e>
    5f18:	88 37       	cpi	r24, 0x78	; 120
    5f1a:	21 f0       	breq	.+8      	; 0x5f24 <vfprintf+0x254>
    5f1c:	b0 c0       	rjmp	.+352    	; 0x607e <vfprintf+0x3ae>
    5f1e:	e9 2f       	mov	r30, r25
    5f20:	e0 61       	ori	r30, 0x10	; 16
    5f22:	be 2e       	mov	r11, r30
    5f24:	b4 fe       	sbrs	r11, 4
    5f26:	0d c0       	rjmp	.+26     	; 0x5f42 <vfprintf+0x272>
    5f28:	fb 2d       	mov	r31, r11
    5f2a:	f4 60       	ori	r31, 0x04	; 4
    5f2c:	bf 2e       	mov	r11, r31
    5f2e:	09 c0       	rjmp	.+18     	; 0x5f42 <vfprintf+0x272>
    5f30:	34 fe       	sbrs	r3, 4
    5f32:	0a c0       	rjmp	.+20     	; 0x5f48 <vfprintf+0x278>
    5f34:	29 2f       	mov	r18, r25
    5f36:	26 60       	ori	r18, 0x06	; 6
    5f38:	b2 2e       	mov	r11, r18
    5f3a:	06 c0       	rjmp	.+12     	; 0x5f48 <vfprintf+0x278>
    5f3c:	28 e0       	ldi	r18, 0x08	; 8
    5f3e:	30 e0       	ldi	r19, 0x00	; 0
    5f40:	05 c0       	rjmp	.+10     	; 0x5f4c <vfprintf+0x27c>
    5f42:	20 e1       	ldi	r18, 0x10	; 16
    5f44:	30 e0       	ldi	r19, 0x00	; 0
    5f46:	02 c0       	rjmp	.+4      	; 0x5f4c <vfprintf+0x27c>
    5f48:	20 e1       	ldi	r18, 0x10	; 16
    5f4a:	32 e0       	ldi	r19, 0x02	; 2
    5f4c:	f8 01       	movw	r30, r16
    5f4e:	b7 fe       	sbrs	r11, 7
    5f50:	07 c0       	rjmp	.+14     	; 0x5f60 <vfprintf+0x290>
    5f52:	60 81       	ld	r22, Z
    5f54:	71 81       	ldd	r23, Z+1	; 0x01
    5f56:	82 81       	ldd	r24, Z+2	; 0x02
    5f58:	93 81       	ldd	r25, Z+3	; 0x03
    5f5a:	0c 5f       	subi	r16, 0xFC	; 252
    5f5c:	1f 4f       	sbci	r17, 0xFF	; 255
    5f5e:	06 c0       	rjmp	.+12     	; 0x5f6c <vfprintf+0x29c>
    5f60:	60 81       	ld	r22, Z
    5f62:	71 81       	ldd	r23, Z+1	; 0x01
    5f64:	80 e0       	ldi	r24, 0x00	; 0
    5f66:	90 e0       	ldi	r25, 0x00	; 0
    5f68:	0e 5f       	subi	r16, 0xFE	; 254
    5f6a:	1f 4f       	sbci	r17, 0xFF	; 255
    5f6c:	a3 01       	movw	r20, r6
    5f6e:	0e 94 9b 30 	call	0x6136	; 0x6136 <__ultoa_invert>
    5f72:	88 2e       	mov	r8, r24
    5f74:	86 18       	sub	r8, r6
    5f76:	fb 2d       	mov	r31, r11
    5f78:	ff 77       	andi	r31, 0x7F	; 127
    5f7a:	3f 2e       	mov	r3, r31
    5f7c:	36 fe       	sbrs	r3, 6
    5f7e:	0d c0       	rjmp	.+26     	; 0x5f9a <vfprintf+0x2ca>
    5f80:	23 2d       	mov	r18, r3
    5f82:	2e 7f       	andi	r18, 0xFE	; 254
    5f84:	a2 2e       	mov	r10, r18
    5f86:	89 14       	cp	r8, r9
    5f88:	58 f4       	brcc	.+22     	; 0x5fa0 <vfprintf+0x2d0>
    5f8a:	34 fe       	sbrs	r3, 4
    5f8c:	0b c0       	rjmp	.+22     	; 0x5fa4 <vfprintf+0x2d4>
    5f8e:	32 fc       	sbrc	r3, 2
    5f90:	09 c0       	rjmp	.+18     	; 0x5fa4 <vfprintf+0x2d4>
    5f92:	83 2d       	mov	r24, r3
    5f94:	8e 7e       	andi	r24, 0xEE	; 238
    5f96:	a8 2e       	mov	r10, r24
    5f98:	05 c0       	rjmp	.+10     	; 0x5fa4 <vfprintf+0x2d4>
    5f9a:	b8 2c       	mov	r11, r8
    5f9c:	a3 2c       	mov	r10, r3
    5f9e:	03 c0       	rjmp	.+6      	; 0x5fa6 <vfprintf+0x2d6>
    5fa0:	b8 2c       	mov	r11, r8
    5fa2:	01 c0       	rjmp	.+2      	; 0x5fa6 <vfprintf+0x2d6>
    5fa4:	b9 2c       	mov	r11, r9
    5fa6:	a4 fe       	sbrs	r10, 4
    5fa8:	0f c0       	rjmp	.+30     	; 0x5fc8 <vfprintf+0x2f8>
    5faa:	fe 01       	movw	r30, r28
    5fac:	e8 0d       	add	r30, r8
    5fae:	f1 1d       	adc	r31, r1
    5fb0:	80 81       	ld	r24, Z
    5fb2:	80 33       	cpi	r24, 0x30	; 48
    5fb4:	21 f4       	brne	.+8      	; 0x5fbe <vfprintf+0x2ee>
    5fb6:	9a 2d       	mov	r25, r10
    5fb8:	99 7e       	andi	r25, 0xE9	; 233
    5fba:	a9 2e       	mov	r10, r25
    5fbc:	09 c0       	rjmp	.+18     	; 0x5fd0 <vfprintf+0x300>
    5fbe:	a2 fe       	sbrs	r10, 2
    5fc0:	06 c0       	rjmp	.+12     	; 0x5fce <vfprintf+0x2fe>
    5fc2:	b3 94       	inc	r11
    5fc4:	b3 94       	inc	r11
    5fc6:	04 c0       	rjmp	.+8      	; 0x5fd0 <vfprintf+0x300>
    5fc8:	8a 2d       	mov	r24, r10
    5fca:	86 78       	andi	r24, 0x86	; 134
    5fcc:	09 f0       	breq	.+2      	; 0x5fd0 <vfprintf+0x300>
    5fce:	b3 94       	inc	r11
    5fd0:	a3 fc       	sbrc	r10, 3
    5fd2:	11 c0       	rjmp	.+34     	; 0x5ff6 <vfprintf+0x326>
    5fd4:	a0 fe       	sbrs	r10, 0
    5fd6:	06 c0       	rjmp	.+12     	; 0x5fe4 <vfprintf+0x314>
    5fd8:	b2 14       	cp	r11, r2
    5fda:	88 f4       	brcc	.+34     	; 0x5ffe <vfprintf+0x32e>
    5fdc:	28 0c       	add	r2, r8
    5fde:	92 2c       	mov	r9, r2
    5fe0:	9b 18       	sub	r9, r11
    5fe2:	0e c0       	rjmp	.+28     	; 0x6000 <vfprintf+0x330>
    5fe4:	b2 14       	cp	r11, r2
    5fe6:	60 f4       	brcc	.+24     	; 0x6000 <vfprintf+0x330>
    5fe8:	b6 01       	movw	r22, r12
    5fea:	80 e2       	ldi	r24, 0x20	; 32
    5fec:	90 e0       	ldi	r25, 0x00	; 0
    5fee:	0e 94 5f 30 	call	0x60be	; 0x60be <fputc>
    5ff2:	b3 94       	inc	r11
    5ff4:	f7 cf       	rjmp	.-18     	; 0x5fe4 <vfprintf+0x314>
    5ff6:	b2 14       	cp	r11, r2
    5ff8:	18 f4       	brcc	.+6      	; 0x6000 <vfprintf+0x330>
    5ffa:	2b 18       	sub	r2, r11
    5ffc:	02 c0       	rjmp	.+4      	; 0x6002 <vfprintf+0x332>
    5ffe:	98 2c       	mov	r9, r8
    6000:	21 2c       	mov	r2, r1
    6002:	a4 fe       	sbrs	r10, 4
    6004:	10 c0       	rjmp	.+32     	; 0x6026 <vfprintf+0x356>
    6006:	b6 01       	movw	r22, r12
    6008:	80 e3       	ldi	r24, 0x30	; 48
    600a:	90 e0       	ldi	r25, 0x00	; 0
    600c:	0e 94 5f 30 	call	0x60be	; 0x60be <fputc>
    6010:	a2 fe       	sbrs	r10, 2
    6012:	17 c0       	rjmp	.+46     	; 0x6042 <vfprintf+0x372>
    6014:	a1 fc       	sbrc	r10, 1
    6016:	03 c0       	rjmp	.+6      	; 0x601e <vfprintf+0x34e>
    6018:	88 e7       	ldi	r24, 0x78	; 120
    601a:	90 e0       	ldi	r25, 0x00	; 0
    601c:	02 c0       	rjmp	.+4      	; 0x6022 <vfprintf+0x352>
    601e:	88 e5       	ldi	r24, 0x58	; 88
    6020:	90 e0       	ldi	r25, 0x00	; 0
    6022:	b6 01       	movw	r22, r12
    6024:	0c c0       	rjmp	.+24     	; 0x603e <vfprintf+0x36e>
    6026:	8a 2d       	mov	r24, r10
    6028:	86 78       	andi	r24, 0x86	; 134
    602a:	59 f0       	breq	.+22     	; 0x6042 <vfprintf+0x372>
    602c:	a1 fe       	sbrs	r10, 1
    602e:	02 c0       	rjmp	.+4      	; 0x6034 <vfprintf+0x364>
    6030:	8b e2       	ldi	r24, 0x2B	; 43
    6032:	01 c0       	rjmp	.+2      	; 0x6036 <vfprintf+0x366>
    6034:	80 e2       	ldi	r24, 0x20	; 32
    6036:	a7 fc       	sbrc	r10, 7
    6038:	8d e2       	ldi	r24, 0x2D	; 45
    603a:	b6 01       	movw	r22, r12
    603c:	90 e0       	ldi	r25, 0x00	; 0
    603e:	0e 94 5f 30 	call	0x60be	; 0x60be <fputc>
    6042:	89 14       	cp	r8, r9
    6044:	38 f4       	brcc	.+14     	; 0x6054 <vfprintf+0x384>
    6046:	b6 01       	movw	r22, r12
    6048:	80 e3       	ldi	r24, 0x30	; 48
    604a:	90 e0       	ldi	r25, 0x00	; 0
    604c:	0e 94 5f 30 	call	0x60be	; 0x60be <fputc>
    6050:	9a 94       	dec	r9
    6052:	f7 cf       	rjmp	.-18     	; 0x6042 <vfprintf+0x372>
    6054:	8a 94       	dec	r8
    6056:	f3 01       	movw	r30, r6
    6058:	e8 0d       	add	r30, r8
    605a:	f1 1d       	adc	r31, r1
    605c:	80 81       	ld	r24, Z
    605e:	b6 01       	movw	r22, r12
    6060:	90 e0       	ldi	r25, 0x00	; 0
    6062:	0e 94 5f 30 	call	0x60be	; 0x60be <fputc>
    6066:	81 10       	cpse	r8, r1
    6068:	f5 cf       	rjmp	.-22     	; 0x6054 <vfprintf+0x384>
    606a:	22 20       	and	r2, r2
    606c:	09 f4       	brne	.+2      	; 0x6070 <vfprintf+0x3a0>
    606e:	42 ce       	rjmp	.-892    	; 0x5cf4 <vfprintf+0x24>
    6070:	b6 01       	movw	r22, r12
    6072:	80 e2       	ldi	r24, 0x20	; 32
    6074:	90 e0       	ldi	r25, 0x00	; 0
    6076:	0e 94 5f 30 	call	0x60be	; 0x60be <fputc>
    607a:	2a 94       	dec	r2
    607c:	f6 cf       	rjmp	.-20     	; 0x606a <vfprintf+0x39a>
    607e:	f6 01       	movw	r30, r12
    6080:	86 81       	ldd	r24, Z+6	; 0x06
    6082:	97 81       	ldd	r25, Z+7	; 0x07
    6084:	02 c0       	rjmp	.+4      	; 0x608a <vfprintf+0x3ba>
    6086:	8f ef       	ldi	r24, 0xFF	; 255
    6088:	9f ef       	ldi	r25, 0xFF	; 255
    608a:	2b 96       	adiw	r28, 0x0b	; 11
    608c:	e2 e1       	ldi	r30, 0x12	; 18
    608e:	0c 94 5d 31 	jmp	0x62ba	; 0x62ba <__epilogue_restores__>

00006092 <strnlen_P>:
    6092:	fc 01       	movw	r30, r24
    6094:	05 90       	lpm	r0, Z+
    6096:	61 50       	subi	r22, 0x01	; 1
    6098:	70 40       	sbci	r23, 0x00	; 0
    609a:	01 10       	cpse	r0, r1
    609c:	d8 f7       	brcc	.-10     	; 0x6094 <strnlen_P+0x2>
    609e:	80 95       	com	r24
    60a0:	90 95       	com	r25
    60a2:	8e 0f       	add	r24, r30
    60a4:	9f 1f       	adc	r25, r31
    60a6:	08 95       	ret

000060a8 <strnlen>:
    60a8:	fc 01       	movw	r30, r24
    60aa:	61 50       	subi	r22, 0x01	; 1
    60ac:	70 40       	sbci	r23, 0x00	; 0
    60ae:	01 90       	ld	r0, Z+
    60b0:	01 10       	cpse	r0, r1
    60b2:	d8 f7       	brcc	.-10     	; 0x60aa <strnlen+0x2>
    60b4:	80 95       	com	r24
    60b6:	90 95       	com	r25
    60b8:	8e 0f       	add	r24, r30
    60ba:	9f 1f       	adc	r25, r31
    60bc:	08 95       	ret

000060be <fputc>:
    60be:	0f 93       	push	r16
    60c0:	1f 93       	push	r17
    60c2:	cf 93       	push	r28
    60c4:	df 93       	push	r29
    60c6:	fb 01       	movw	r30, r22
    60c8:	23 81       	ldd	r18, Z+3	; 0x03
    60ca:	21 fd       	sbrc	r18, 1
    60cc:	03 c0       	rjmp	.+6      	; 0x60d4 <fputc+0x16>
    60ce:	8f ef       	ldi	r24, 0xFF	; 255
    60d0:	9f ef       	ldi	r25, 0xFF	; 255
    60d2:	2c c0       	rjmp	.+88     	; 0x612c <fputc+0x6e>
    60d4:	22 ff       	sbrs	r18, 2
    60d6:	16 c0       	rjmp	.+44     	; 0x6104 <fputc+0x46>
    60d8:	46 81       	ldd	r20, Z+6	; 0x06
    60da:	57 81       	ldd	r21, Z+7	; 0x07
    60dc:	24 81       	ldd	r18, Z+4	; 0x04
    60de:	35 81       	ldd	r19, Z+5	; 0x05
    60e0:	42 17       	cp	r20, r18
    60e2:	53 07       	cpc	r21, r19
    60e4:	44 f4       	brge	.+16     	; 0x60f6 <fputc+0x38>
    60e6:	a0 81       	ld	r26, Z
    60e8:	b1 81       	ldd	r27, Z+1	; 0x01
    60ea:	9d 01       	movw	r18, r26
    60ec:	2f 5f       	subi	r18, 0xFF	; 255
    60ee:	3f 4f       	sbci	r19, 0xFF	; 255
    60f0:	31 83       	std	Z+1, r19	; 0x01
    60f2:	20 83       	st	Z, r18
    60f4:	8c 93       	st	X, r24
    60f6:	26 81       	ldd	r18, Z+6	; 0x06
    60f8:	37 81       	ldd	r19, Z+7	; 0x07
    60fa:	2f 5f       	subi	r18, 0xFF	; 255
    60fc:	3f 4f       	sbci	r19, 0xFF	; 255
    60fe:	37 83       	std	Z+7, r19	; 0x07
    6100:	26 83       	std	Z+6, r18	; 0x06
    6102:	14 c0       	rjmp	.+40     	; 0x612c <fputc+0x6e>
    6104:	8b 01       	movw	r16, r22
    6106:	ec 01       	movw	r28, r24
    6108:	fb 01       	movw	r30, r22
    610a:	00 84       	ldd	r0, Z+8	; 0x08
    610c:	f1 85       	ldd	r31, Z+9	; 0x09
    610e:	e0 2d       	mov	r30, r0
    6110:	09 95       	icall
    6112:	89 2b       	or	r24, r25
    6114:	e1 f6       	brne	.-72     	; 0x60ce <fputc+0x10>
    6116:	d8 01       	movw	r26, r16
    6118:	16 96       	adiw	r26, 0x06	; 6
    611a:	8d 91       	ld	r24, X+
    611c:	9c 91       	ld	r25, X
    611e:	17 97       	sbiw	r26, 0x07	; 7
    6120:	01 96       	adiw	r24, 0x01	; 1
    6122:	17 96       	adiw	r26, 0x07	; 7
    6124:	9c 93       	st	X, r25
    6126:	8e 93       	st	-X, r24
    6128:	16 97       	sbiw	r26, 0x06	; 6
    612a:	ce 01       	movw	r24, r28
    612c:	df 91       	pop	r29
    612e:	cf 91       	pop	r28
    6130:	1f 91       	pop	r17
    6132:	0f 91       	pop	r16
    6134:	08 95       	ret

00006136 <__ultoa_invert>:
    6136:	fa 01       	movw	r30, r20
    6138:	aa 27       	eor	r26, r26
    613a:	28 30       	cpi	r18, 0x08	; 8
    613c:	51 f1       	breq	.+84     	; 0x6192 <__ultoa_invert+0x5c>
    613e:	20 31       	cpi	r18, 0x10	; 16
    6140:	81 f1       	breq	.+96     	; 0x61a2 <__ultoa_invert+0x6c>
    6142:	e8 94       	clt
    6144:	6f 93       	push	r22
    6146:	6e 7f       	andi	r22, 0xFE	; 254
    6148:	6e 5f       	subi	r22, 0xFE	; 254
    614a:	7f 4f       	sbci	r23, 0xFF	; 255
    614c:	8f 4f       	sbci	r24, 0xFF	; 255
    614e:	9f 4f       	sbci	r25, 0xFF	; 255
    6150:	af 4f       	sbci	r26, 0xFF	; 255
    6152:	b1 e0       	ldi	r27, 0x01	; 1
    6154:	3e d0       	rcall	.+124    	; 0x61d2 <__ultoa_invert+0x9c>
    6156:	b4 e0       	ldi	r27, 0x04	; 4
    6158:	3c d0       	rcall	.+120    	; 0x61d2 <__ultoa_invert+0x9c>
    615a:	67 0f       	add	r22, r23
    615c:	78 1f       	adc	r23, r24
    615e:	89 1f       	adc	r24, r25
    6160:	9a 1f       	adc	r25, r26
    6162:	a1 1d       	adc	r26, r1
    6164:	68 0f       	add	r22, r24
    6166:	79 1f       	adc	r23, r25
    6168:	8a 1f       	adc	r24, r26
    616a:	91 1d       	adc	r25, r1
    616c:	a1 1d       	adc	r26, r1
    616e:	6a 0f       	add	r22, r26
    6170:	71 1d       	adc	r23, r1
    6172:	81 1d       	adc	r24, r1
    6174:	91 1d       	adc	r25, r1
    6176:	a1 1d       	adc	r26, r1
    6178:	20 d0       	rcall	.+64     	; 0x61ba <__ultoa_invert+0x84>
    617a:	09 f4       	brne	.+2      	; 0x617e <__ultoa_invert+0x48>
    617c:	68 94       	set
    617e:	3f 91       	pop	r19
    6180:	2a e0       	ldi	r18, 0x0A	; 10
    6182:	26 9f       	mul	r18, r22
    6184:	11 24       	eor	r1, r1
    6186:	30 19       	sub	r19, r0
    6188:	30 5d       	subi	r19, 0xD0	; 208
    618a:	31 93       	st	Z+, r19
    618c:	de f6       	brtc	.-74     	; 0x6144 <__ultoa_invert+0xe>
    618e:	cf 01       	movw	r24, r30
    6190:	08 95       	ret
    6192:	46 2f       	mov	r20, r22
    6194:	47 70       	andi	r20, 0x07	; 7
    6196:	40 5d       	subi	r20, 0xD0	; 208
    6198:	41 93       	st	Z+, r20
    619a:	b3 e0       	ldi	r27, 0x03	; 3
    619c:	0f d0       	rcall	.+30     	; 0x61bc <__ultoa_invert+0x86>
    619e:	c9 f7       	brne	.-14     	; 0x6192 <__ultoa_invert+0x5c>
    61a0:	f6 cf       	rjmp	.-20     	; 0x618e <__ultoa_invert+0x58>
    61a2:	46 2f       	mov	r20, r22
    61a4:	4f 70       	andi	r20, 0x0F	; 15
    61a6:	40 5d       	subi	r20, 0xD0	; 208
    61a8:	4a 33       	cpi	r20, 0x3A	; 58
    61aa:	18 f0       	brcs	.+6      	; 0x61b2 <__ultoa_invert+0x7c>
    61ac:	49 5d       	subi	r20, 0xD9	; 217
    61ae:	31 fd       	sbrc	r19, 1
    61b0:	40 52       	subi	r20, 0x20	; 32
    61b2:	41 93       	st	Z+, r20
    61b4:	02 d0       	rcall	.+4      	; 0x61ba <__ultoa_invert+0x84>
    61b6:	a9 f7       	brne	.-22     	; 0x61a2 <__ultoa_invert+0x6c>
    61b8:	ea cf       	rjmp	.-44     	; 0x618e <__ultoa_invert+0x58>
    61ba:	b4 e0       	ldi	r27, 0x04	; 4
    61bc:	a6 95       	lsr	r26
    61be:	97 95       	ror	r25
    61c0:	87 95       	ror	r24
    61c2:	77 95       	ror	r23
    61c4:	67 95       	ror	r22
    61c6:	ba 95       	dec	r27
    61c8:	c9 f7       	brne	.-14     	; 0x61bc <__ultoa_invert+0x86>
    61ca:	00 97       	sbiw	r24, 0x00	; 0
    61cc:	61 05       	cpc	r22, r1
    61ce:	71 05       	cpc	r23, r1
    61d0:	08 95       	ret
    61d2:	9b 01       	movw	r18, r22
    61d4:	ac 01       	movw	r20, r24
    61d6:	0a 2e       	mov	r0, r26
    61d8:	06 94       	lsr	r0
    61da:	57 95       	ror	r21
    61dc:	47 95       	ror	r20
    61de:	37 95       	ror	r19
    61e0:	27 95       	ror	r18
    61e2:	ba 95       	dec	r27
    61e4:	c9 f7       	brne	.-14     	; 0x61d8 <__ultoa_invert+0xa2>
    61e6:	62 0f       	add	r22, r18
    61e8:	73 1f       	adc	r23, r19
    61ea:	84 1f       	adc	r24, r20
    61ec:	95 1f       	adc	r25, r21
    61ee:	a0 1d       	adc	r26, r0
    61f0:	08 95       	ret

000061f2 <eeprom_read_byte>:
    61f2:	f9 99       	sbic	0x1f, 1	; 31
    61f4:	fe cf       	rjmp	.-4      	; 0x61f2 <eeprom_read_byte>
    61f6:	92 bd       	out	0x22, r25	; 34
    61f8:	81 bd       	out	0x21, r24	; 33
    61fa:	f8 9a       	sbi	0x1f, 0	; 31
    61fc:	99 27       	eor	r25, r25
    61fe:	80 b5       	in	r24, 0x20	; 32
    6200:	08 95       	ret

00006202 <eeprom_read_dword>:
    6202:	a6 e1       	ldi	r26, 0x16	; 22
    6204:	b0 e0       	ldi	r27, 0x00	; 0
    6206:	44 e0       	ldi	r20, 0x04	; 4
    6208:	50 e0       	ldi	r21, 0x00	; 0
    620a:	0c 94 33 31 	jmp	0x6266	; 0x6266 <eeprom_read_blraw>

0000620e <eeprom_read_word>:
    620e:	a8 e1       	ldi	r26, 0x18	; 24
    6210:	b0 e0       	ldi	r27, 0x00	; 0
    6212:	42 e0       	ldi	r20, 0x02	; 2
    6214:	50 e0       	ldi	r21, 0x00	; 0
    6216:	0c 94 33 31 	jmp	0x6266	; 0x6266 <eeprom_read_blraw>

0000621a <eeprom_update_byte>:
    621a:	26 2f       	mov	r18, r22

0000621c <eeprom_update_r18>:
    621c:	f9 99       	sbic	0x1f, 1	; 31
    621e:	fe cf       	rjmp	.-4      	; 0x621c <eeprom_update_r18>
    6220:	92 bd       	out	0x22, r25	; 34
    6222:	81 bd       	out	0x21, r24	; 33
    6224:	f8 9a       	sbi	0x1f, 0	; 31
    6226:	01 97       	sbiw	r24, 0x01	; 1
    6228:	00 b4       	in	r0, 0x20	; 32
    622a:	02 16       	cp	r0, r18
    622c:	39 f0       	breq	.+14     	; 0x623c <eeprom_update_r18+0x20>
    622e:	1f ba       	out	0x1f, r1	; 31
    6230:	20 bd       	out	0x20, r18	; 32
    6232:	0f b6       	in	r0, 0x3f	; 63
    6234:	f8 94       	cli
    6236:	fa 9a       	sbi	0x1f, 2	; 31
    6238:	f9 9a       	sbi	0x1f, 1	; 31
    623a:	0f be       	out	0x3f, r0	; 63
    623c:	08 95       	ret

0000623e <eeprom_update_dword>:
    623e:	03 96       	adiw	r24, 0x03	; 3
    6240:	27 2f       	mov	r18, r23
    6242:	0e 94 0e 31 	call	0x621c	; 0x621c <eeprom_update_r18>
    6246:	0e 94 0d 31 	call	0x621a	; 0x621a <eeprom_update_byte>
    624a:	25 2f       	mov	r18, r21
    624c:	0e 94 0e 31 	call	0x621c	; 0x621c <eeprom_update_r18>
    6250:	24 2f       	mov	r18, r20
    6252:	0c 94 0e 31 	jmp	0x621c	; 0x621c <eeprom_update_r18>

00006256 <eeprom_update_word>:
    6256:	01 96       	adiw	r24, 0x01	; 1
    6258:	27 2f       	mov	r18, r23
    625a:	0e 94 0e 31 	call	0x621c	; 0x621c <eeprom_update_r18>
    625e:	0c 94 0d 31 	jmp	0x621a	; 0x621a <eeprom_update_byte>

00006262 <eeprom_read_block>:
    6262:	dc 01       	movw	r26, r24
    6264:	cb 01       	movw	r24, r22

00006266 <eeprom_read_blraw>:
    6266:	fc 01       	movw	r30, r24
    6268:	f9 99       	sbic	0x1f, 1	; 31
    626a:	fe cf       	rjmp	.-4      	; 0x6268 <eeprom_read_blraw+0x2>
    626c:	06 c0       	rjmp	.+12     	; 0x627a <eeprom_read_blraw+0x14>
    626e:	f2 bd       	out	0x22, r31	; 34
    6270:	e1 bd       	out	0x21, r30	; 33
    6272:	f8 9a       	sbi	0x1f, 0	; 31
    6274:	31 96       	adiw	r30, 0x01	; 1
    6276:	00 b4       	in	r0, 0x20	; 32
    6278:	0d 92       	st	X+, r0
    627a:	41 50       	subi	r20, 0x01	; 1
    627c:	50 40       	sbci	r21, 0x00	; 0
    627e:	b8 f7       	brcc	.-18     	; 0x626e <eeprom_read_blraw+0x8>
    6280:	08 95       	ret

00006282 <__prologue_saves__>:
    6282:	2f 92       	push	r2
    6284:	3f 92       	push	r3
    6286:	4f 92       	push	r4
    6288:	5f 92       	push	r5
    628a:	6f 92       	push	r6
    628c:	7f 92       	push	r7
    628e:	8f 92       	push	r8
    6290:	9f 92       	push	r9
    6292:	af 92       	push	r10
    6294:	bf 92       	push	r11
    6296:	cf 92       	push	r12
    6298:	df 92       	push	r13
    629a:	ef 92       	push	r14
    629c:	ff 92       	push	r15
    629e:	0f 93       	push	r16
    62a0:	1f 93       	push	r17
    62a2:	cf 93       	push	r28
    62a4:	df 93       	push	r29
    62a6:	cd b7       	in	r28, 0x3d	; 61
    62a8:	de b7       	in	r29, 0x3e	; 62
    62aa:	ca 1b       	sub	r28, r26
    62ac:	db 0b       	sbc	r29, r27
    62ae:	0f b6       	in	r0, 0x3f	; 63
    62b0:	f8 94       	cli
    62b2:	de bf       	out	0x3e, r29	; 62
    62b4:	0f be       	out	0x3f, r0	; 63
    62b6:	cd bf       	out	0x3d, r28	; 61
    62b8:	09 94       	ijmp

000062ba <__epilogue_restores__>:
    62ba:	2a 88       	ldd	r2, Y+18	; 0x12
    62bc:	39 88       	ldd	r3, Y+17	; 0x11
    62be:	48 88       	ldd	r4, Y+16	; 0x10
    62c0:	5f 84       	ldd	r5, Y+15	; 0x0f
    62c2:	6e 84       	ldd	r6, Y+14	; 0x0e
    62c4:	7d 84       	ldd	r7, Y+13	; 0x0d
    62c6:	8c 84       	ldd	r8, Y+12	; 0x0c
    62c8:	9b 84       	ldd	r9, Y+11	; 0x0b
    62ca:	aa 84       	ldd	r10, Y+10	; 0x0a
    62cc:	b9 84       	ldd	r11, Y+9	; 0x09
    62ce:	c8 84       	ldd	r12, Y+8	; 0x08
    62d0:	df 80       	ldd	r13, Y+7	; 0x07
    62d2:	ee 80       	ldd	r14, Y+6	; 0x06
    62d4:	fd 80       	ldd	r15, Y+5	; 0x05
    62d6:	0c 81       	ldd	r16, Y+4	; 0x04
    62d8:	1b 81       	ldd	r17, Y+3	; 0x03
    62da:	aa 81       	ldd	r26, Y+2	; 0x02
    62dc:	b9 81       	ldd	r27, Y+1	; 0x01
    62de:	ce 0f       	add	r28, r30
    62e0:	d1 1d       	adc	r29, r1
    62e2:	0f b6       	in	r0, 0x3f	; 63
    62e4:	f8 94       	cli
    62e6:	de bf       	out	0x3e, r29	; 62
    62e8:	0f be       	out	0x3f, r0	; 63
    62ea:	cd bf       	out	0x3d, r28	; 61
    62ec:	ed 01       	movw	r28, r26
    62ee:	08 95       	ret

000062f0 <__do_global_dtors>:
    62f0:	11 e0       	ldi	r17, 0x01	; 1
    62f2:	c3 e1       	ldi	r28, 0x13	; 19
    62f4:	d1 e0       	ldi	r29, 0x01	; 1
    62f6:	04 c0       	rjmp	.+8      	; 0x6300 <__do_global_dtors+0x10>
    62f8:	fe 01       	movw	r30, r28
    62fa:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <__tablejump2__>
    62fe:	21 96       	adiw	r28, 0x01	; 1
    6300:	c4 31       	cpi	r28, 0x14	; 20
    6302:	d1 07       	cpc	r29, r17
    6304:	c9 f7       	brne	.-14     	; 0x62f8 <__do_global_dtors+0x8>
    6306:	f8 94       	cli

00006308 <__stop_program>:
    6308:	ff cf       	rjmp	.-2      	; 0x6308 <__stop_program>
